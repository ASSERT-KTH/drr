/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 01:29:04 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.text.ParsePosition;
import java.time.Instant;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;


public class TimeSeries_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0, "", "");
      timeSeries0.setDomainDescription("");
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 9223372036854775807L, false);
      timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(273, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.getItems();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      timeSeries0.getTimePeriodClass();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("org.jfree.data.time.TimeQerindValuesCollection", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 9223372036854775807L, false);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 9223372036854775807L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimePeriodValuesCollection", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1323), 2925, 0, 2925, 0, 2925);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      double double0 = timeSeries0.getMaxY();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      double double0 = timeSeries0.getMinY();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) null, false);
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "org.jfree.data.time.TimeQerindValuesCollection");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(683.456706205289, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "SeriesChangeType.ADD", "t");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("t", timeSeries1.getRangeDescription());
      assertEquals("SeriesChangeType.ADD", timeSeries1.getDomainDescription());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(59L);
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Day day0 = new Day(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "");
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      timeSeries0.add((RegularTimePeriod) day0, (Number) integer0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-3137));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3558, (-27), 3510, (-27), 3558, (-2113));
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second((-27), minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "qn4WZcyk", "qn4WZcyk");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (-1.0));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(67L, 1000L);
      Date date0 = Date.from(instant0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "i6n`^dN]Az9n$!\"");
      Week week0 = new Week(date0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(week0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.time.TimeQerindValuesCollection", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Month month0 = new Month();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, "[a4OqHp{Ub=^#Y", "[a4OqHp{Ub=^#Y");
      timeSeries0.getRawDataItem(month0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("[a4OqHp{Ub=^#Y", timeSeries0.getDomainDescription());
      assertEquals("[a4OqHp{Ub=^#Y", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1106, 1288, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Second second0 = new Second(mockDate0, simpleTimeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.getRawDataItem(millisecond0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(392.820023, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) null, true);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(848);
      Date date0 = serialDate0.toDate();
      Day day0 = new Day(date0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "ux)>z8:EO", "");
      Month month0 = new Month();
      timeSeries0.add((RegularTimePeriod) month0, 0.0, true);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(273, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0, "!4/\".pq^W<}DG5K?", "!4/\".pq^W<}DG5K?");
      timeSeries1.add((RegularTimePeriod) week0, 1.5);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("i6n`^dN]Az9n$!\"", "The 'data' array must have length == 2.", "org.jfree.data.xy.IntervalXYDelegate");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("org.jfree.data.time.TimeQerindValuesCollection", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, " BX+1k$$mSf~)lSR", " BX+1k$$mSf~)lSR");
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1106, 1288, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Second second0 = new Second(mockDate0, simpleTimeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      Millisecond millisecond0 = new Millisecond();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) millisecond0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      timeSeries0.add(regularTimePeriod0, (double) 9223372036854775807L);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-1609.496624937), false);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "org.jfree.data.time.TimeQerindValuesCollection");
      Integer integer0 = new Integer(2355);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) integer0, false);
      timeSeries0.add(regularTimePeriod0, (double) integer0);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 9223372036854775807L, false);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1086, 1086, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Second second0 = new Second(mockDate0, simpleTimeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, Double.NaN);
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.update((RegularTimePeriod) millisecond0, (Number) null);
      timeSeries0.delete((RegularTimePeriod) millisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "org.jfree.data.time.TimePeriodValues", "");
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) millisecond0, (Number) 999);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(392.820023, 392.820023);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) null, true);
      Float float0 = new Float(1.0F);
      timeSeries0.update((RegularTimePeriod) day0, (Number) float0);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 1086, 1086, 0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Second second0 = new Second(mockDate0, simpleTimeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) second0, (double) 0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      Millisecond millisecond0 = new Millisecond();
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) 0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      
      timeSeries0.update((RegularTimePeriod) millisecond0, (Number) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(1222);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1222, "");
      Minute minute0 = new Minute(date0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.addOrUpdate((RegularTimePeriod) minute0, 0.0);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("", locale0);
      ParsePosition parsePosition0 = new ParsePosition(1222);
      Date date0 = mockSimpleDateFormat0.parse("", parsePosition0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1222, "");
      Minute minute0 = new Minute(date0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = new TimeSeries(date0, "", "");
      timeSeries1.addOrUpdate((RegularTimePeriod) minute0, 0.0);
      timeSeries0.addAndOrUpdate(timeSeries1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimePeriodValuesCollection", "");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.add((RegularTimePeriod) month0, 0.0, true);
      Millisecond millisecond0 = new Millisecond();
      BigInteger bigInteger0 = BigInteger.ZERO;
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(millisecond0, bigInteger0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Millisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Month.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(392.820023, 392.820023);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) null, true);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) null);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "org.jfree.data.time.TimeQerindValuesCollection");
      Integer integer0 = new Integer(2355);
      timeSeries0.add(regularTimePeriod0, (double) integer0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-689.4996706));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(regularTimePeriod0, 30.449727631737);
      assertEquals((-689.4996706), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(683.456706205289, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "SeriesChangeType.ADD", "t");
      MockDate mockDate0 = new MockDate(335, (-3186), 335, 0, 335);
      Year year0 = new Year(mockDate0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) (-9999));
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(683.456706205289, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "SeriesChangeType.ADD", "t");
      timeSeries0.removeAgedItems((long) (-3186), false);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("t", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("SeriesChangeType.ADD", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(392.820023, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0);
      Day day0 = new Day();
      timeSeries0.add((RegularTimePeriod) day0, (Number) null, true);
      timeSeries0.removeAgedItems((-4198L), true);
      timeSeries0.removeAgedItems((long) 1567, true);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(848);
      Date date0 = serialDate0.toDate();
      Day day0 = new Day(date0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "ux)>z8:EO", "");
      Month month0 = new Month(2, 2);
      timeSeries0.add((RegularTimePeriod) month0, 0.0, true);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.removeAgedItems((long) 6, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SerialDate serialDate0 = SerialDate.createInstance(848);
      Date date0 = serialDate0.toDate();
      Day day0 = new Day(date0);
      TimeSeries timeSeries0 = new TimeSeries(day0, "ux)>z8:EO", "");
      Month month0 = new Month(2, 2);
      timeSeries0.add((RegularTimePeriod) month0, 0.0, true);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.removeAgedItems((long) 6, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimePeriodValuesCollection", "");
      timeSeries0.clear();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("org.jfree.data.time.TimePeriodValuesCollection", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimePeriodValuesCollection", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 9223372036854775807L, false);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(273, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "org.jfree.data.time.TimeQerindValuesCollection");
      Integer integer0 = new Integer(2355);
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) integer0);
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3558, (-27), 3510, (-27), 3558, (-2113));
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second((-27), minute0);
      TimeSeries timeSeries0 = new TimeSeries(second0, "qn4WZcyk", "qn4WZcyk");
      // Undeclared exception!
      try { 
        timeSeries0.delete(517, 391, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(683.456706205289, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "SeriesChangeType.ADD", "SeriesChangeType.ADD");
      MockDate mockDate0 = new MockDate(335, (-3186), 335, 335, 335);
      Year year0 = new Year(mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 335);
      timeSeries0.delete((-3186), Integer.MAX_VALUE, true);
      assertEquals(335.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Month month0 = new Month();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) month0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, "[a4OqHp{Ub=^#Y", "Time");
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.delete(0, 0, false);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-362.3501721978092), 0.5);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence", "org.jfree.data.time.DynamicTimeSeriesCollection$ValueSequence");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(181, (-1279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", "org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset");
      TimeSeries timeSeries1 = timeSeries0.createCopy(1064, 1064);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset", timeSeries1.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "ux)>z8:EO", "d$8]a+9 D((");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      Millisecond millisecond0 = new Millisecond(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      FixedMillisecond fixedMillisecond1 = new FixedMillisecond(1831);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals("org.jfree.data.time.TimeQerindValuesCollection", timeSeries1.getDomainDescription());
      assertEquals("", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.time.TimeQerindValuesCollection", "");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (double) 9223372036854775807L, false);
      timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) fixedMillisecond0);
      assertEquals(9.223372036854776E18, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Month month0 = new Month();
      RegularTimePeriod regularTimePeriod0 = month0.previous();
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem(regularTimePeriod0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0, "[a4OqHp{Ub=^#Y", "[a4OqHp{Ub=^#Y");
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      assertEquals(0.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(683.456706205289, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "SeriesChangeType.ADD", "SeriesChangeType.ADD");
      MockDate mockDate0 = new MockDate(335, (-3186), 335, 335, 335);
      boolean boolean0 = timeSeries0.equals(mockDate0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("SeriesChangeType.ADD", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
      assertEquals("SeriesChangeType.ADD", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      boolean boolean0 = timeSeries0.equals(timeSeries0);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Year year0 = new Year();
      Week week0 = new Week(273, year0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0, "!4/\".pq^W<}DG5K?", "!4/\".pq^W<}DG5K?");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("!4/\".pq^W<}DG5K?", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("!4/\".pq^W<}DG5K?", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      timeSeries1.setRangeDescription("ocl}3nM8Bt");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("ocl}3nM8Bt", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(683.456706205289, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "SeriesChangeType.ADD", "t");
      MockDate mockDate0 = new MockDate(335, (-3186), 335, 0, 335);
      Year year0 = new Year(mockDate0);
      Object object0 = timeSeries0.clone();
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 0);
      boolean boolean0 = timeSeries0.equals(object0);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
      assertFalse(object0.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      timeSeries0.setMaximumItemAge(1);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertFalse(boolean0);
      assertEquals(1L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Date date0 = Date.from(instant0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(date0);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = new TimeSeries(instant0);
      timeSeries0.setMaximumItemCount(381);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(381, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 1, true);
      timeSeries1.addOrUpdate((RegularTimePeriod) week0, (Number) week0.LAST_WEEK_IN_YEAR);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(53.0, timeSeries1.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(683.456706205289, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "SeriesChangeType.ADD", "SeriesChangeType.ADD");
      timeSeries0.hashCode();
      assertEquals("SeriesChangeType.ADD", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("SeriesChangeType.ADD", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(683.456706205289, Double.POSITIVE_INFINITY);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, "SeriesChangeType.ADD", "SeriesChangeType.ADD");
      MockDate mockDate0 = new MockDate(335, (-3186), 335, 335, 335);
      Year year0 = new Year(mockDate0);
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) 335);
      timeSeries0.hashCode();
      assertEquals(335.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.ime.TameQerizValuesCollectio", "org.jfree.data.ime.TameQerizValuesCollectio");
      Integer integer0 = new Integer(2258);
      timeSeries0.add(regularTimePeriod0, (double) integer0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-742.8631555984489));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.hashCode();
      assertEquals((-742.8631555984489), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      RegularTimePeriod regularTimePeriod0 = fixedMillisecond0.previous();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "org.jfree.data.ime.TameQerizValuesCollectio", "org.jfree.data.ime.TameQerizValuesCollectio");
      Integer integer0 = new Integer(2258);
      timeSeries0.add(regularTimePeriod0, (double) integer0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) fixedMillisecond0, (-742.8631555984489));
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1, timeSeries0.getItemCount());
  }
}
