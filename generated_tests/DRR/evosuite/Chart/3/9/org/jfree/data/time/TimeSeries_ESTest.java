/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 00:47:15 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.time.Instant;
import java.time.chrono.ThaiBuddhistEra;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.JLayeredPane;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SimpleTimePeriod;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;


public class TimeSeries_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "Fourth");
      timeSeries0.setDomainDescription("");
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Fourth", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(264, second0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertTrue(boolean0);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNotSame(timeSeries1, timeSeries0);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Second second0 = new Second();
      TimeSeries timeSeries0 = new TimeSeries(second0, "", "");
      timeSeries0.getItems();
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.getTimePeriodClass();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.removeAgedItems((long) 1, true);
      timeSeries0.removeAgedItems(999L, false);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-3328L), 0L);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0, (String) null, (String) null);
      double double0 = timeSeries0.getMaxY();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Week week0 = new Week((-4087), (-4087));
      TimeSeries timeSeries0 = new TimeSeries(week0, "", "L$Bi?<mJjTC");
      double double0 = timeSeries0.getMinY();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("L$Bi?<mJjTC", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "ntDS0k&bjY/-DcriYY1", "ntDS0k&bjY/-DcriYY1");
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
      timeSeries0.setMaximumItemCount(0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "The number of series keys does not match the number of series in the data.", "The number of series keys does not match the number of series in the data.");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0);
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochMilli(0L);
      Date date0 = Date.from(instant0);
      Month month0 = new Month(date0);
      TimeSeries timeSeries0 = new TimeSeries(month0, ", but the TimeSeries is expecting an instance of ", ", but the TimeSeries is expecting an instance of ");
      BigInteger bigInteger0 = BigInteger.ZERO;
      timeSeries0.add((RegularTimePeriod) month0, (Number) bigInteger0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond((-944L));
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "Argument 'd' outside valid range.", "");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-3330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries(", but the TimeSeries is expecting an instance of ");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-359L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      timeSeries0.getDataItem((RegularTimePeriod) month0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "The number of series keys does not match the number of series in the data.", "The number of series keys does not match the number of series in the data.");
      timeSeries0.getRawDataItem(year0);
      assertEquals("The number of series keys does not match the number of series in the data.", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("The number of series keys does not match the number of series in the data.", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "The number of series keys does not match the number of series in the data.", "The number of series keys does not match the number of series in the data.");
      timeSeries0.add((RegularTimePeriod) year0, (Number) 1, true);
      timeSeries0.getRawDataItem(year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-916.02047), (-916.02047));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, ":2GFO g", "?RzM1c9G9E=RVI:");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 0.8);
      timeSeries0.getTimePeriods();
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      timeSeries1.add((RegularTimePeriod) week0, (Number) 53, true);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(53.0, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(2.0, 1217.1, true, true);
      TimeSeries timeSeries0 = new TimeSeries(simpleHistogramBin0);
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.getValue((RegularTimePeriod) week0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3425L));
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hour hour0 = new Hour();
      TimeSeries timeSeries0 = new TimeSeries(hour0, "*K", "*K");
      timeSeries0.add((RegularTimePeriod) hour0, (double) 0);
      Week week0 = new Week(2102, (-2145081540));
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (-1153.03176568437), true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Week, but the TimeSeries is expecting an instance of org.jfree.data.time.Hour.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      timeSeries0.add(timeSeriesDataItem0, true);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Week 7, 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeries0.setMaximumItemCount(1);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(regularTimePeriod0, (Number) 53, true);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0);
      BigInteger bigInteger0 = BigInteger.TEN;
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) month0, (Number) bigInteger0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeriesDataItem0.setValue(1);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(regularTimePeriod0, (Number) 53, true);
      timeSeries0.update(1, (Number) 1);
      assertEquals(1.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeriesDataItem0.setValue(1);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      Year year0 = new Year();
      Week week1 = new Week(53, year0);
      timeSeries0.add((RegularTimePeriod) week1, (double) 9999);
      timeSeries0.update(1, (Number) 1);
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      timeSeries0.add(timeSeriesDataItem0, true);
      TimeSeries timeSeries1 = new TimeSeries(week0);
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "ntDS0k&bjY/-DcriYY1", "ntDS0k&bjY/-DcriYY1");
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) 59);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Day.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-916.02047), (-916.02047));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, ":2GFO g", "?RzM1c9G9E=RVI:");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 0.8);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(0.8, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeriesDataItem0.setValue(1);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(regularTimePeriod0, (Number) 53, true);
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem((-916.02047), (-916.02047));
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, ":2GFO g", "?RzM1c9G9E=RVI:");
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, 0.8);
      assertEquals(0.8, timeSeries0.getMinY(), 0.01);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) null);
      timeSeriesDataItem0.setValue((Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(":2GFO g", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "T-+:G", "T-+:G");
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) integer0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      Week week1 = new Week(53, 53);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.add((RegularTimePeriod) week1, (Number) 53, false);
      timeSeries0.setMaximumItemAge(1);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      Week week1 = new Week(53, 53);
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.setMaximumItemAge(1);
      timeSeries0.addOrUpdate((RegularTimePeriod) week1, (-790.75934345));
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.removeAgedItems((-2615L), false);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "", "Fourth");
      timeSeries0.clear();
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Fourth", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2540, "2MLI2%");
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Day day0 = new Day(mockDate0, simpleTimeZone0);
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, (Number) 53, true);
      timeSeries0.delete((RegularTimePeriod) week0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0L);
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.delete(0, (-1358));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2540, "2MLI2%");
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Locale locale0 = new Locale("Null 'period' argument.");
      Week week0 = new Week(mockDate0, simpleTimeZone0, locale0);
      timeSeries0.add((RegularTimePeriod) week0, (double) 8, false);
      timeSeries0.delete((-1592), Integer.MAX_VALUE, false);
      assertEquals(8.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      TimeSeries timeSeries0 = new TimeSeries(quarter0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-5766), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-15L));
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "java.lang.Class", "5bilsnVa@A^1d%J5");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(59, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 59);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "The number of series keys does not match the number of series in the data.", "The number of series keys does not match the number of series in the data.");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) year0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(45, second0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      Minute minute0 = new Minute();
      RegularTimePeriod regularTimePeriod0 = minute0.next();
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(regularTimePeriod0, (RegularTimePeriod) minute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeries0.add(regularTimePeriod0, (Number) 53, true);
      timeSeries0.createCopy((RegularTimePeriod) week0, (RegularTimePeriod) week0);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      Week week1 = (Week)week0.next();
      timeSeries0.add(timeSeriesDataItem0, true);
      Year year0 = week1.getYear();
      timeSeries0.createCopy((RegularTimePeriod) week1, (RegularTimePeriod) year0);
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "The number of series keys does not match the number of series in the data.", "The number of series keys does not match the number of series in the data.");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.add(timeSeriesDataItem0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.update((RegularTimePeriod) year0, (Number) (-9999));
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Day day0 = new Day();
      TimeSeries timeSeries0 = new TimeSeries(day0, "ntDS0k&bjY/-DcriYY1", "ntDS0k&bjY/-DcriYY1");
      ThaiBuddhistEra thaiBuddhistEra0 = ThaiBuddhistEra.BE;
      boolean boolean0 = timeSeries0.equals(thaiBuddhistEra0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("ntDS0k&bjY/-DcriYY1", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("ntDS0k&bjY/-DcriYY1", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(264, second0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "", "");
      TimeSeries timeSeries1 = new TimeSeries(millisecond0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals("", timeSeries0.getRangeDescription());
      assertEquals("", timeSeries0.getDomainDescription());
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(264, second0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setRangeDescription("Can't evaluate the year.");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals("Can't evaluate the year.", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Second second0 = new Second();
      Millisecond millisecond0 = new Millisecond(264, second0);
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.add((RegularTimePeriod) second0, (Number) 59, false);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.clear();
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(59.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "The number of series keys does not match the number of series in the data.", "The number of series keys does not match the number of series in the data.");
      Week week0 = new Week(9999, year0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) week0);
      timeSeries0.setMaximumItemAge(9999);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(9999L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeSeries timeSeries0 = new TimeSeries(mockDate0);
      timeSeries0.setMaximumItemCount(1069);
      TimeSeries timeSeries1 = new TimeSeries(mockDate0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertEquals(1069, timeSeries0.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(regularTimePeriod0, (Number) 53, true);
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      timeSeries1.delete(regularTimePeriod0);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(53.0, timeSeries0.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SimpleTimePeriod simpleTimePeriod0 = new SimpleTimePeriod((-3328L), 0L);
      TimeSeries timeSeries0 = new TimeSeries(simpleTimePeriod0, (String) null, (String) null);
      timeSeries0.hashCode();
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.hashCode();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.hashCode();
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(regularTimePeriod0, (Number) 53, true);
      timeSeries0.hashCode();
      assertEquals(53.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeries0.add(timeSeriesDataItem0, false);
      timeSeries0.add(regularTimePeriod0, (Number) 53, false);
      Year year0 = new Year();
      Week week1 = new Week(53, year0);
      timeSeries0.add((RegularTimePeriod) week1, (double) 9999);
      timeSeries0.hashCode();
      assertEquals(9999.0, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) week0, (double) 53);
      RegularTimePeriod regularTimePeriod0 = week0.next();
      timeSeriesDataItem0.setValue(1);
      timeSeries0.add(timeSeriesDataItem0, true);
      timeSeries0.add(regularTimePeriod0, (Number) 53, true);
      timeSeries0.delete(regularTimePeriod0);
      assertEquals(1.0, timeSeries0.getMaxY(), 0.01);
  }
}
