/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 01:24:07 GMT 2019
 */

package org.jfree.data.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.junit.runner.RunWith;


public class TimeSeries_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0, "Null 'period' argument.", "Null 'period' argument.");
      assertEquals("Null 'period' argument.", timeSeries0.getDomainDescription());
      
      timeSeries0.setDomainDescription((String) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Null 'period' argument.", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (double) 59);
      timeSeries0.add(timeSeriesDataItem0);
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 20:21:21 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.getItems();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      timeSeries0.getTimePeriodClass();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.getValue((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = new Month();
      TimeSeries timeSeries0 = new TimeSeries(month0, (String) null, (String) null);
      double double0 = timeSeries0.getMaxY();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Year year0 = new Year(0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nPU[(X", "}nPU[(X");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertTrue(boolean0);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("}nPU[(X", timeSeries1.getRangeDescription());
      assertEquals("}nPU[(X", timeSeries1.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "!6R");
      double double0 = timeSeries0.getMinY();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("!6R", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Minute minute0 = new Minute();
      TimeSeries timeSeries0 = new TimeSeries(minute0);
      timeSeries0.add((RegularTimePeriod) minute0, (Number) 0, true);
      timeSeries0.getDataItem((RegularTimePeriod) minute0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XYDataItem xYDataItem0 = new XYDataItem(0.0, 0.0);
      TimeSeries timeSeries0 = new TimeSeries(xYDataItem0, (String) null, "");
      // Undeclared exception!
      try { 
        timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Year year0 = new Year(29);
      TimeSeries timeSeries0 = new TimeSeries(year0);
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemCount((-57));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6237, 0, 6237, 6237, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      assertEquals(1, timeSeries0.getItemCount());
      
      timeSeries0.setMaximumItemCount(0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("+x2?v2oi  yoA]=y]", "H#]jQKHIrBM", "DX}SD<.gRY.VPPwA<DI");
      // Undeclared exception!
      try { 
        timeSeries0.setMaximumItemAge((-82));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6237, 0, 6237, 6237, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("}nP:Uv[(X", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("}nP:Uv[(X", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate(80, 982, 982);
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "GH^Jbx`%'xd7", "GH^Jbx`%'xd7");
      timeSeries0.getRawDataItem(minute0);
      assertEquals("GH^Jbx`%'xd7", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("GH^Jbx`%'xd7", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "The 'row' argument is out of bounds.", "You are trying to add data where the time period class is ");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-2.147483648E9), true);
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getRawDataItem(fixedMillisecond0);
      TimeSeries timeSeries1 = new TimeSeries(timeSeriesDataItem0);
      timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals((-2.147483648E9), timeSeries0.getMaxY(), 0.01);
      assertEquals("The 'row' argument is out of bounds.", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.add((RegularTimePeriod) week0, Double.NaN);
      timeSeries0.getTimePeriods();
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "The 'row' argument is out of bounds.", "You are trying to add data where the time period class is ");
      timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (-2.147483648E9), true);
      timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertEquals((-2.147483648E9), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV");
      // Undeclared exception!
      try { 
        timeSeries0.delete((RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV");
      Quarter quarter0 = new Quarter();
      timeSeries0.getValue((RegularTimePeriod) quarter0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("3DNyt!3?2 8:}uV", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("3DNyt!3?2 8:}uV", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Minute minute0 = new Minute();
      Day day0 = minute0.getDay();
      TimeSeries timeSeries0 = new TimeSeries(day0);
      // Undeclared exception!
      try { 
        timeSeries0.add((TimeSeriesDataItem) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "\"_");
      Millisecond millisecond0 = new Millisecond(mockDate0, simpleTimeZone0);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) millisecond0, (Number) 999);
      TimeSeries timeSeries0 = new TimeSeries(timeSeriesDataItem0);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      Minute minute0 = new Minute();
      // Undeclared exception!
      try { 
        timeSeries0.add((RegularTimePeriod) minute0, (Number) 59, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Millisecond.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Week week0 = new Week();
      TimeSeries timeSeries0 = new TimeSeries(week0);
      timeSeries0.setMaximumItemCount(0);
      timeSeries0.add((RegularTimePeriod) week0, 1.0);
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.delete(0, 0);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1157), false);
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals((-1157.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("!/$\"", "", (String) null);
      Quarter quarter0 = new Quarter();
      // Undeclared exception!
      try { 
        timeSeries0.update((RegularTimePeriod) quarter0, (Number) 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // There is no existing value for the specified 'period'.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Year year0 = new Year(6250);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.update((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      BigInteger bigInteger0 = BigInteger.ONE;
      timeSeries0.update(1, (Number) bigInteger0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      timeSeries1.addAndOrUpdate(timeSeries0);
      assertEquals(1, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate((TimeSeriesDataItem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV");
      MockDate mockDate0 = new MockDate(2937);
      Minute minute0 = new Minute(mockDate0);
      Second second0 = new Second(2937, minute0);
      timeSeries0.add((RegularTimePeriod) second0, (Number) 59, true);
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) minute0, (Number) 0);
      // Undeclared exception!
      try { 
        timeSeries0.addOrUpdate(timeSeriesDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Minute, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Year year0 = new Year(6250);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.update((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      timeSeries0.addAndOrUpdate(timeSeries0);
      assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Year year0 = new Year();
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (Number) (-9999));
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (Number) null);
      timeSeriesDataItem0.setValue((Number) null);
      timeSeries0.addOrUpdate(timeSeriesDataItem0);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("+x2?v2oi  yoA]=y]", "", "DX}SD<.gRY.VPPwA<DI");
      timeSeries0.setMaximumItemCount(0);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(0);
      timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (double) (-1154));
      assertEquals(0, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      timeSeries0.setMaximumItemAge(0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.delete(0, 0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add((RegularTimePeriod) year0, (double) (-1157), false);
      assertEquals((-1157.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.removeAgedItems((-864L), false);
      timeSeries0.removeAgedItems((long) 0, false);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("+x2?v2oi  yoA]=y]", "", "DX}SD<.gRY.VPPwA<DI");
      timeSeries0.removeAgedItems((long) (-2727), true);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("DX}SD<.gRY.VPPwA<DI", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Year year0 = new Year(0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nPU[(X", "}nPU[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.delete(0, 0);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 6250, false);
      timeSeries0.removeAgedItems((long) 6250, true);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockDate mockDate0 = new MockDate(80, 982, 982);
      Minute minute0 = new Minute(mockDate0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "GH^Jbx`%'xd7", "GH^Jbx`%'xd7");
      timeSeries0.clear();
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("GH^Jbx`%'xd7", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("GH^Jbx`%'xd7", timeSeries0.getRangeDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hour hour0 = new Hour();
      Minute minute0 = new Minute(2, hour0);
      TimeSeries timeSeries0 = new TimeSeries(minute0, "~kb~qI", "~kb~qI");
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) hour0, (double) 23);
      timeSeries0.add(timeSeriesDataItem0);
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0, "", "!6R");
      timeSeries0.delete((RegularTimePeriod) fixedMillisecond0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("!6R", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6237, 0, 6237, 6237, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6237, 0, 6237, 6237, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 775);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      // Undeclared exception!
      try { 
        timeSeries0.delete((-1212), (-2099761788), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      timeSeries0.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      timeSeries0.delete((-714), Integer.MAX_VALUE, false);
      assertEquals(0.0, timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((-57), 1269);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1745, 1745, 4, (-1363), 1510);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "E\"+E|0d/X}");
      Week week0 = new Week(mockDate0, simpleTimeZone0);
      TimeSeries timeSeries0 = new TimeSeries(week0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy(92, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

////  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      TimeSeries timeSeries0 = new TimeSeries(fixedMillisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy(0, 0);
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) null, (RegularTimePeriod) millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      // Undeclared exception!
      try { 
        timeSeries0.createCopy((RegularTimePeriod) year0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
         verifyException("org.jfree.data.time.TimeSeries", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 775);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.delete(0, 0);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      timeSeries0.createCopy((RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Year year0 = new Year(0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nPU[(X", "}nPU[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.delete(0, 0);
      timeSeries0.setMaximumItemAge(0);
      timeSeries0.add((RegularTimePeriod) year0, (double) 6250, false);
      Object object0 = timeSeries0.clone();
      timeSeries0.removeAgedItems((long) 0, false);
      boolean boolean0 = object0.equals(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      boolean boolean0 = timeSeries0.equals((Object) null);
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertFalse(boolean0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("+x2?v2oi  yoA]=y]", "", "DX}SD<.gRY.VPPwA<DI");
      TimeSeries timeSeries1 = new TimeSeries("DX}SD<.gRY.VPPwA<DI");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(Double.NaN, timeSeries1.getMaxY(), 0.01);
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries1.getMinY(), 0.01);
      assertEquals("DX}SD<.gRY.VPPwA<DI", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals(Integer.MAX_VALUE, timeSeries1.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      
      timeSeries1.setRangeDescription("K5Cau@2tsh#bYW)px");
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      TimeSeries timeSeries0 = new TimeSeries(millisecond0);
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond0, (RegularTimePeriod) millisecond0);
      timeSeries1.addOrUpdate((RegularTimePeriod) millisecond0, (Number) 0);
      boolean boolean0 = timeSeries1.equals(timeSeries0);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(0.0, timeSeries1.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      timeSeries1.setMaximumItemAge(0L);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV");
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.setMaximumItemCount(4);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(4, timeSeries1.getMaximumItemCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeSeries timeSeries0 = new TimeSeries("3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV", "3DNyt!3?2 8:}uV");
      Quarter quarter0 = new Quarter();
      timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (Number) quarter0.LAST_QUARTER);
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      timeSeries1.addOrUpdate((RegularTimePeriod) quarter0, (Number) 1);
      boolean boolean0 = timeSeries0.equals(timeSeries1);
      assertEquals(1.0, timeSeries1.getMaxY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, (String) null, "}nP:Uv[(X");
      timeSeries0.hashCode();
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals("}nP:Uv[(X", timeSeries0.getRangeDescription());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", (String) null);
      timeSeries0.hashCode();
      assertEquals("}nP:Uv[(X", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01);
      assertEquals(Integer.MAX_VALUE, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      TimeSeries timeSeries0 = new TimeSeries(year0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.hashCode();
      assertEquals((-9999.0), timeSeries0.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockDate mockDate0 = new MockDate(6250, 0, 6250, 6250, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone("}nP:Uv[(X");
      Year year0 = new Year(mockDate0, timeZone0);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      timeSeries0.hashCode();
      assertEquals((-9999.0), timeSeries0.getMinY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Year year0 = new Year(6250);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add((RegularTimePeriod) year0, (double) (-9999));
      timeSeries0.update((RegularTimePeriod) year0, (Number) 9999);
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      timeSeries0.delete((RegularTimePeriod) year0);
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Year year0 = new Year(6250);
      RegularTimePeriod regularTimePeriod0 = year0.previous();
      TimeSeries timeSeries0 = new TimeSeries(regularTimePeriod0, "}nP:Uv[(X", "}nP:Uv[(X");
      timeSeries0.add(regularTimePeriod0, (Number) (-9999));
      timeSeries0.addOrUpdate((RegularTimePeriod) year0, Double.NaN);
      assertEquals(2, timeSeries0.getItemCount());
  }
}
