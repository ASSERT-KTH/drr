/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:29:41 GMT 2019
 */

package org.apache.commons.math.optimization.general;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction;
import org.apache.commons.math.analysis.MultivariateMatrixFunction;
import org.apache.commons.math.optimization.SimpleVectorialValueChecker;
import org.apache.commons.math.optimization.VectorialConvergenceChecker;
import org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;


public class LevenbergMarquardtOptimizer_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 100;
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[1] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[2] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = levenbergMarquardtOptimizer0.objective;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) doubleArray0, (Object) doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.setOrthoTolerance((-1580.0));
      levenbergMarquardtOptimizer0.doOptimize();
      assertEquals(377.9644730092272, levenbergMarquardtOptimizer0.getRMS(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 100;
      doubleArray0[3] = (double) 100;
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[1] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[2] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = levenbergMarquardtOptimizer0.objective;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) doubleArray0, (Object) doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
      doubleArray0[0] = (double) 100;
      levenbergMarquardtOptimizer0.setOrthoTolerance((-1580.0));
      levenbergMarquardtOptimizer0.doOptimize();
      assertEquals(3, levenbergMarquardtOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[7];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[1] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[2] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = levenbergMarquardtOptimizer0.objective;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) doubleArray0, (Object) doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
      SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker();
      levenbergMarquardtOptimizer0.checker = (VectorialConvergenceChecker) simpleVectorialValueChecker0;
      levenbergMarquardtOptimizer0.setOrthoTolerance((-1580.0));
      levenbergMarquardtOptimizer0.doOptimize();
      assertEquals(0.0, levenbergMarquardtOptimizer0.getRMS(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[7];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[1] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[2] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = levenbergMarquardtOptimizer0.objective;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) null).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) null, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
      doubleArray0[5] = (double) 100;
      SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker();
      levenbergMarquardtOptimizer0.checker = (VectorialConvergenceChecker) simpleVectorialValueChecker0;
      levenbergMarquardtOptimizer0.setOrthoTolerance((-1580.0));
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // parameters relative tolerance is too small (0), no further improvement in the approximate solution is possible
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 100;
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[1] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[2] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = levenbergMarquardtOptimizer0.objective;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) doubleArray0, (Object) doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.setOrthoTolerance((-1580.0));
      levenbergMarquardtOptimizer0.setInitialStepBoundFactor((-315.0206498337));
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // orthogonality tolerance is too small (-1,580), solution is orthogonal to the jacobian
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[7];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      doubleArray0[5] = (double) 1;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[1] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[2] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = levenbergMarquardtOptimizer0.objective;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) doubleArray0, (Object) doubleArray0).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
      SimpleVectorialValueChecker simpleVectorialValueChecker0 = new SimpleVectorialValueChecker();
      levenbergMarquardtOptimizer0.checker = (VectorialConvergenceChecker) simpleVectorialValueChecker0;
      doubleArray0[6] = (double) 7;
      levenbergMarquardtOptimizer0.setOrthoTolerance((-1580.0));
      try { 
        levenbergMarquardtOptimizer0.doOptimize();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // cost relative tolerance is too small (0), no further reduction in the sum of squares is possible
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[7];
      levenbergMarquardtOptimizer0.cols = 100;
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[1] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) doubleArray1, (Object) doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn((Object) levenbergMarquardtOptimizer0.objective, (Object) doubleArray0, (Object) null).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
      levenbergMarquardtOptimizer0.cols = 0;
      levenbergMarquardtOptimizer0.setOrthoTolerance((-1580.0));
      levenbergMarquardtOptimizer0.setInitialStepBoundFactor((-313.477907095047));
      assertEquals(0.0, levenbergMarquardtOptimizer0.getRMS(), 0.01);
      
      levenbergMarquardtOptimizer0.doOptimize();
      assertEquals(1000, levenbergMarquardtOptimizer0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LevenbergMarquardtOptimizer levenbergMarquardtOptimizer0 = new LevenbergMarquardtOptimizer();
      double[] doubleArray0 = new double[7];
      levenbergMarquardtOptimizer0.objective = doubleArray0;
      doubleArray0[4] = (double) (-34);
      double[][] doubleArray1 = new double[7][6];
      doubleArray1[0] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[1] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = levenbergMarquardtOptimizer0.objective;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = levenbergMarquardtOptimizer0.objective;
      MultivariateMatrixFunction multivariateMatrixFunction0 = mock(MultivariateMatrixFunction.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray1).when(multivariateMatrixFunction0).value(any(double[].class));
      DifferentiableMultivariateVectorialFunction differentiableMultivariateVectorialFunction0 = mock(DifferentiableMultivariateVectorialFunction.class, new ViolatedAssumptionAnswer());
      doReturn(multivariateMatrixFunction0).when(differentiableMultivariateVectorialFunction0).jacobian();
      doReturn(levenbergMarquardtOptimizer0.objective).when(differentiableMultivariateVectorialFunction0).value(any(double[].class));
      try { 
        levenbergMarquardtOptimizer0.optimize(differentiableMultivariateVectorialFunction0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to perform Q.R decomposition on the 7x7 jacobian matrix
         //
         verifyException("org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer", e);
      }
  }
}
