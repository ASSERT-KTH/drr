/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:28:45 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cbrt;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      regulaFalsiSolver0.solve(1937812081, (UnivariateRealFunction) cbrt0, (-1900.0765061644943), (double) 1937812081, (double) 1937812081);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1.0), 0.25, 808.2330512419);
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(78, (UnivariateRealFunction) sinc0, (-0.04495868307617913), 808.2330512419, 0.024667379469161404, allowedSolution0);
      assertEquals((-0.04495868307617913), pegasusSolver0.getMin(), 0.01);
      assertEquals(807.4863147008837, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.7610131682735368E-30, 2.7610131682735368E-30);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(1.0, 0.9983307164566855, 1.0E-6);
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(2330, (UnivariateRealFunction) harmonicOscillator0, (-2037.126380869219), 1.0E-6, 0.99);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,330) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2353.0, 2353.0);
      Rint rint0 = new Rint();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(746, (UnivariateRealFunction) rint0, (-5249.808), 322.49009759, allowedSolution0);
      assertEquals(322.49009759, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.4728708448492398, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2353.0, 2353.0);
      Rint rint0 = new Rint();
      double double0 = pegasusSolver0.solve(128, (UnivariateRealFunction) rint0, 0.0, (double) 128, 0.0);
      assertEquals(128.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.5);
      Floor floor0 = new Floor();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(4, (UnivariateRealFunction) floor0, (double) 4, 0.5, 1.0, allowedSolution0);
      assertEquals(0.5, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      double double0 = regulaFalsiSolver0.solve(10695989, (UnivariateRealFunction) log0, 0.001669283543322088, 3229.15174874349);
      assertEquals(1614.5767090135166, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000009, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(1006, (UnivariateRealFunction) log0, 0.8232226905029401, (double) 1006, 0.8232226905029401, allowedSolution0);
      assertEquals(0.8232226905029401, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(156725710, (UnivariateRealFunction) log0, 1.1741607856336224E-4, (double) 1006, 1.1741607856336224E-4, allowedSolution0);
      assertEquals(1.1741607856336224E-4, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000009, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(156725710, (UnivariateRealFunction) log0, 1.1741607856336224E-4, (double) 1006, 1.1741607856336224E-4, allowedSolution0);
      assertEquals(1.1741607856336224E-4, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.0000000000000009, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      regulaFalsiSolver0.solve(156725710, (UnivariateRealFunction) log0, 1.1741607856336224E-4, (double) 1006, 1.1741607856336224E-4, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(382, (UnivariateRealFunction) cbrt0, (-1945.179076625711), 0.11501211619375765, 2.850220580101934E-8, allowedSolution0);
      assertEquals(2.850220580101934E-8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-8.208622609144228E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(977, (UnivariateRealFunction) cbrt0, (-1694.8141063), (double) 977, (-2.0), allowedSolution0);
      assertEquals((-2.0), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-4.333099059070325E-8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(389, (UnivariateRealFunction) cbrt0, (-1945.179076625711), 0.11501211619375765, (-2.0626026925694916E-8), allowedSolution0);
      assertEquals((-2.0626026925694916E-8), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(5.423248597847567E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(382, (UnivariateRealFunction) cbrt0, (-1945.179076625711), 0.11501211619375765, 2.850220580101934E-8, allowedSolution0);
      assertEquals(2.850220580101934E-8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(5.423248597847567E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(988, (UnivariateRealFunction) cbrt0, (-1694.8141063), (double) 988, (-2.0), allowedSolution0);
      assertEquals((-1694.8141063), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-1.6919267179343545E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(382, (UnivariateRealFunction) cbrt0, (-1945.179076625711), (double) 10695989, 2.850220580101934E-8, allowedSolution0);
      assertEquals(2.850220580101934E-8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(6.949297686690378E-8, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(382, (UnivariateRealFunction) cbrt0, (-1945.179076625711), 0.12, 2.850220580101934E-8, allowedSolution0);
      assertEquals(2.850220580101934E-8, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-5.000380907127638E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Cbrt cbrt0 = new Cbrt();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(382, (UnivariateRealFunction) cbrt0, (-1945.179076625711), 45.492809551336386, 1.0E-6, allowedSolution0);
      assertEquals(1.0E-6, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1.6683604307798804E-7, double0, 0.01);
  }
}
