/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 21:17:41 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Abs;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Rint;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Rint rint0 = new Rint();
      illinoisSolver0.solve(1625, (UnivariateRealFunction) rint0, (double) 1625, 0.0, 699.2969787789093);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0);
      Abs abs0 = new Abs();
      double double0 = regulaFalsiSolver0.solve(522, (UnivariateRealFunction) abs0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1539.47112079026), (-1539.47112079026));
      Sin sin0 = new Sin();
      double double0 = pegasusSolver0.solve(2434, (UnivariateRealFunction) sin0, (-9.85169647373398E-24), (double) 2434);
      assertEquals(2434.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1539.47112079026));
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((-1539.47112079026), 283, 283);
      double double0 = pegasusSolver0.solve(2434, (UnivariateRealFunction) harmonicOscillator0, (-0.06915025031187035), (double) 2434);
      assertEquals((-0.06915025031187035), pegasusSolver0.getMin(), 0.01);
      assertEquals(1162.3495212788791, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2373.616262505, 0.008336750013465571, 2701.25904264);
      Signum signum0 = new Signum();
      double double0 = regulaFalsiSolver0.solve(1652, (UnivariateRealFunction) signum0, (-1228.935977823), 2373.616262505, (-1446.61766704567));
      assertEquals((-1228.935977823), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(572.340142341, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2457, (UnivariateRealFunction) sin0, (-2586.103192124748), (-0.2666394650864521), allowedSolution0);
      assertEquals((-2586.103192124748), illinoisSolver0.getMin(), 0.01);
      assertEquals((-91.10618695410248), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2441, (UnivariateRealFunction) sin0, (-2586.103192124748), (-0.2666394650864521), allowedSolution0);
      assertEquals((-2586.103192124748), illinoisSolver0.getMin(), 0.01);
      assertEquals((-91.106186954104), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2457, (UnivariateRealFunction) sin0, (-2586.103192124748), (-0.2666394650864521), allowedSolution0);
      assertEquals((-1293.1849157949173), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-91.10618695410248), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2441, (UnivariateRealFunction) sin0, (-0.2666394650864521), 1.0, (-0.3708948793179955), allowedSolution0);
      assertEquals((-0.2666394650864521), illinoisSolver0.getMin(), 0.01);
      assertEquals(3.4767435121369444E-23, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(2432, (UnivariateRealFunction) sin0, (-0.2666394650864521), 1.0, (double) 2432, allowedSolution0);
      assertEquals(2432.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.5684267174599231E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(2457, (UnivariateRealFunction) sin0, (-2586.103192124748), (-0.2666), allowedSolution0);
      assertEquals((-1293.184896062374), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-9.42477796076938), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2457, (UnivariateRealFunction) sin0, (-2586.103192124748), 1316.8371601, allowedSolution0);
      assertEquals((-634.6330160123741), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-480.66367599923836), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2441, (UnivariateRealFunction) sin0, (-1.296279858102782), 1.0, (-2586.103192124748), allowedSolution0);
      assertEquals(2.1506605598785224E-10, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(237, (UnivariateRealFunction) sin0, (-4470.81), (-1.0), allowedSolution0);
      assertEquals((-2235.905), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-4470.4863460582765), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(237, (UnivariateRealFunction) sin0, (-4470.81), (double) 237, allowedSolution0);
      assertEquals((-4470.81), illinoisSolver0.getMin(), 0.01);
      assertEquals((-4407.654492986479), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(2441, (UnivariateRealFunction) sin0, (-2586.103192124748), (-1.296279858102782), allowedSolution0);
      assertEquals((-1293.6997359914255), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-2151.9909677090072), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(2457, (UnivariateRealFunction) sin0, (-2586.0), (-0.2666394650864521), allowedSolution0);
      assertEquals((-1293.1333197325432), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-442.96456415616086), double0, 0.01);
  }
}
