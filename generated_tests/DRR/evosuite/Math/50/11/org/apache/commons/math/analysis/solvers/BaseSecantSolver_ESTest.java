/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:42:50 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Logistic;
import org.apache.commons.math.analysis.function.Minus;
import org.apache.commons.math.analysis.function.Sin;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(4.902394344583081, 4.902394344583081);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(4.902394344583081, (-1934.8057053631), (-1934.8057053631));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      illinoisSolver0.solve(4246, (UnivariateRealFunction) harmonicOscillator0, (-1.0), 4.902394344583081, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(740.32, 740.32, 740.32);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(281, (UnivariateRealFunction) cos0, (-476.112487333), (double) 281, allowedSolution0);
      assertEquals((-97.5562436665), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-110.3019009940972), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Gaussian gaussian0 = new Gaussian(0.0, 24, 24);
      double double0 = pegasusSolver0.solve(24, (UnivariateRealFunction) gaussian0, (-1159.4401788), 1012.379535749705, 0.0);
      assertEquals(1012.379535749705, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1159.4401788), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(910.2740296036569);
      Logistic logistic0 = new Logistic(4.0, 4.0, 970.5504659, 910.2740296036569, 970.5504659, 4.0);
      UnivariateRealFunction univariateRealFunction0 = logistic0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(3174, univariateRealFunction0, 4.0, (double) 3174, allowedSolution0);
      assertEquals(3174.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(3174.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-776.4), (-776.4), (-776.4));
      Minus minus0 = new Minus();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(2868, (UnivariateRealFunction) minus0, (-776.4), (double) 2868, 3209.0, allowedSolution0);
      assertEquals(3209.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(20, (UnivariateRealFunction) cos0, (-1358.92), (double) 20, allowedSolution0);
      assertEquals(20.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-1264.491043069892), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(6.0, (-1929.3209434822038), (-1929.3209434822038));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(4246, (UnivariateRealFunction) harmonicOscillator0, (-1.0), 6.0, allowedSolution0);
      assertEquals(2.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.616128398066684, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(495.84);
      Sin sin0 = new Sin();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(115217, (UnivariateRealFunction) sin0, 495.84, (double) 115217, (-2.775951068996553E-9), allowedSolution0);
      assertEquals((-2.775951068996553E-9), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(45964.36134362533, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(740.32, 740.32, 740.32);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(281, (UnivariateRealFunction) cos0, (-476.112487333), (double) 281, allowedSolution0);
      assertEquals((-97.5562436665), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-476.112487333), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-3181.509));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(64, (UnivariateRealFunction) sinc0, 5.669184079525E-24, 319.586967, (-0.9406831497777437), allowedSolution0);
      assertEquals((-0.9406831497777437), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(317.30085801256917, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(740.32, 740.32, 740.32);
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(693, (UnivariateRealFunction) cos0, (-476.112487333), (double) 693, allowedSolution0);
      assertEquals(108.4437563335, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-45.45916602915179), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-3181.509));
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Sinc sinc0 = new Sinc();
      double double0 = pegasusSolver0.solve(64, (UnivariateRealFunction) sinc0, 5.669184079525E-24, 319.586967, (-0.9406831497777437), allowedSolution0);
      assertEquals((-0.9406831497777437), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(317.30085801256917, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-3181.509));
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(64, (UnivariateRealFunction) sinc0, (double) 64, 319.586967, (-0.9406831497777437), allowedSolution0);
      assertEquals((-0.9406831497777437), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(311.0176727053895, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(910.7801626305876, 910.7801626305876);
      Cos cos0 = new Cos();
      double double0 = illinoisSolver0.solve(2011, (UnivariateRealFunction) cos0, (-1066.17977957), (-1.0), (double) 0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-625.6494418756585), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(6.0, 6.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(6.0, (-1934.8057053631), (-1934.8057053631));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(4246, (UnivariateRealFunction) harmonicOscillator0, (-1.0), 6.0, allowedSolution0);
      assertEquals(2.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(2.548355457984321, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      Sinc sinc0 = new Sinc();
      double double0 = pegasusSolver0.solve(2492, (UnivariateRealFunction) sinc0, (-3181.509), (double) 2492, (double) 2492, allowedSolution0);
      assertEquals(2492.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(2045.1768175040902, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(6.0, 6.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(6.0, (-1934.8057053631), (-1934.8057053631));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(4246, (UnivariateRealFunction) harmonicOscillator0, (-1.0), 6.0, allowedSolution0);
      assertEquals(2.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }
}
