/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:16:56 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Cos;
import org.apache.commons.math.analysis.function.Floor;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.TooManyEvaluationsException;
import org.apache.commons.math.analysis.SinFunction;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-22.957585318941433));
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      regulaFalsiSolver0.solve(101, (UnivariateRealFunction) sinc0, 0.0, 9.561748679514512, allowedSolution0);
      regulaFalsiSolver0.setup(24, sinc0, (-1667.537781206769), 24, 24);
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.doSolve();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (24) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.7249995199969751, (-765.8921), (-765.8921));
      Floor floor0 = new Floor();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(9, (UnivariateRealFunction) floor0, 0.7249995199969751, 0.7249995199969751, allowedSolution0);
      assertEquals(0.7249995199969751, illinoisSolver0.getMax(), 0.01);
      assertEquals(0.7249995199969751, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1080.6684554599), (-1.0));
      Floor floor0 = new Floor();
      double double0 = regulaFalsiSolver0.solve(1154, (UnivariateRealFunction) floor0, (-1.0), 0.0, 1923.067301550443);
      assertEquals(1923.067301550443, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1080.6684554599), (-1.0));
      Floor floor0 = new Floor();
      double double0 = regulaFalsiSolver0.solve(1154, (UnivariateRealFunction) floor0, (-1.0), 3294198.0, 0.5);
      assertEquals(0.5, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cos cos0 = new Cos();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(20, (UnivariateRealFunction) cos0, (-4.664166135058408E-4), 750.92330467, (-1.0), allowedSolution0);
      assertEquals((-1.0), illinoisSolver0.getStartValue(), 0.01);
      assertEquals(655.0220682734715, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2420.9017572870307));
      Cos cos0 = new Cos();
      double double0 = pegasusSolver0.solve(701, (UnivariateRealFunction) cos0, 0.7937005259840998, (double) 701, 0.0);
      assertEquals(0.7937005259840998, pegasusSolver0.getMin(), 0.01);
      assertEquals(202.63272615654165, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-22.957585318941433), (-22.957585318941433), 9.561748679514512);
      regulaFalsiSolver0.setup(24, sinc0, (-1686.234871564013), 24, 24);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-1667.1605792192345), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(101, (UnivariateRealFunction) sinc0, 0.48242737070170993, 9.561748679514512, allowedSolution0);
      assertEquals(0.48242737070170993, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(9.42477796076938, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      regulaFalsiSolver0.solve(136, (UnivariateRealFunction) sinc0, 0.0, 9.561748679514512, allowedSolution0);
      assertEquals(4.780874339757256, regulaFalsiSolver0.getStartValue(), 0.01);
      
      regulaFalsiSolver0.setup(136, sinc0, (-1674.0418407423401), 136, 136);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-1658.7609210954108), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(9.5617486795145, 9.5617486795145, 9.5617486795145);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(101, (UnivariateRealFunction) sinc0, 0.0, 9.5617486795145, allowedSolution0);
      assertEquals(4.78087433975725, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-22.957585318941433));
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      regulaFalsiSolver0.solve(101, (UnivariateRealFunction) sinc0, 0.0, 9.561748679514512, allowedSolution0);
      assertEquals(4.780874339757256, regulaFalsiSolver0.getStartValue(), 0.01);
      
      regulaFalsiSolver0.setup(24, sinc0, (-1667.537781206769), 24, 24);
      double double0 = regulaFalsiSolver0.doSolve();
      assertEquals((-1658.7609210954108), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(9.5617486795145);
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(101, (UnivariateRealFunction) sinc0, (-1.880292135844926), 9.5617486795145, allowedSolution0);
      assertEquals((-1.880292135844926), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(9.248039090063267, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(504.4);
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(101, (UnivariateRealFunction) sinc0, 0.0, 9.561748679514512, allowedSolution0);
      assertEquals(4.780874339757256, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(9.427128238196714, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(504.4);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(101, (UnivariateRealFunction) sinc0, 0.0, 9.561748679514512, allowedSolution0);
      assertEquals(4.780874339757256, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(9.427128238196714, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sinc sinc0 = new Sinc();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(504.4, 9.561748679514512);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(101, (UnivariateRealFunction) sinc0, 0.0, 9.561748679514512, allowedSolution0);
      assertEquals(4.780874339757256, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test
    public void test15() throws Throwable {
        try {
            RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
            SinFunction sinFunction0 = new SinFunction();
            AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
            double double0 = regulaFalsiSolver0.solve(1878, ((UnivariateRealFunction) (sinFunction0)), (-486.3), 1.625, 29.189039182181823, allowedSolution0);
            assertEquals(29.189039182181823, regulaFalsiSolver0.getStartValue(), 0.01);
            assertEquals((-219.91148554688124), double0, 0.01);
            org.junit.Assert.fail("Expecting exception: TooManyEvaluationsException");
        } catch (TooManyEvaluationsException expectedException__TooManyEvaluationsException) {
            org.junit.Assert.assertTrue(true);
        }
    }


}
