/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:33:38 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Atan;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Identity;
import org.apache.commons.math.analysis.function.Inverse;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1919.972663561286), (-1919.972663561286));
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      pegasusSolver0.solve(1023, (UnivariateRealFunction) atan0, 0.0, 0.0, allowedSolution0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(290, (UnivariateRealFunction) atan0, (-1796.22129), (double) 290, (-1693.3992398004602), allowedSolution0);
      assertEquals(290.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      Identity identity0 = new Identity();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = illinoisSolver0.solve(261, (UnivariateRealFunction) identity0, (double) 261, 0.0, allowedSolution0);
      assertEquals(261.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(707, (UnivariateRealFunction) inverse0, (-3026.4075413610367), (double) 707, 34.00328375409009, allowedSolution0);
      assertEquals(34.00328375409009, illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-4.0969874068880397E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.14982303977012634, 0.14982303977012634, 2211.31948243994);
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = 2211.31948243994;
      doubleArray0[3] = 0.14982303977012634;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateRealFunction univariateRealFunction0 = polynomialFunction0.derivative();
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(5, univariateRealFunction0, (-618.2), 2211.31948243994, 0.14982303977012634);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Atan atan0 = new Atan();
      double double0 = pegasusSolver0.solve(357, (UnivariateRealFunction) atan0, (-1065.80878), (double) 290);
      assertEquals(290.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-5.619606587743847E-21), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2795.79756), (-3026.4075413610367), 0.6366197723675814);
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(707, (UnivariateRealFunction) inverse0, (-3026.4075413610367), (double) 707, 0.0, allowedSolution0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(654.5971479411423, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = illinoisSolver0.solve(1112, (UnivariateRealFunction) atan0, (-1929.039705814), (double) 1112, (-1929.039705814), allowedSolution0);
      assertEquals((-1929.039705814), illinoisSolver0.getStartValue(), 0.01);
      assertEquals((-1.3368997672831974E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(290, (UnivariateRealFunction) atan0, (-7.44321345601866E-11), (double) 290, (-1694.674278), allowedSolution0);
      assertEquals((-1694.674278), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(9.629649721936179E-35, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = pegasusSolver0.solve(290, (UnivariateRealFunction) atan0, (-7.44321345601866E-11), (double) 290, (-1694.674278), allowedSolution0);
      assertEquals((-1694.674278), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-6.469677355797749E-19), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(290, (UnivariateRealFunction) atan0, (-7.44321345601866E-11), (double) 290, (-1694.674278), allowedSolution0);
      assertEquals((-1694.674278), pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-6.469677355797749E-19), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(2011, 598.370408017657, 0.0);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = pegasusSolver0.solve(2011, (UnivariateRealFunction) harmonicOscillator0, 0.0, 6.0, allowedSolution0);
      assertEquals(3.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(5.714894248800456, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(707, (UnivariateRealFunction) inverse0, (-3034.9246210346705), (double) 707, 34.00328375409009, allowedSolution0);
      assertEquals(34.00328375409009, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.610842817700606E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(2011, 598.370408017657, 0.0);
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(2011, (UnivariateRealFunction) harmonicOscillator0, 0.0, 6.0, allowedSolution0);
      assertEquals(3.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(5.714894248800455, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.5);
      Log log0 = new Log();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(1655470, (UnivariateRealFunction) log0, 5.714894248819084E-14, (double) 1655470, 0.5, allowedSolution0);
      assertEquals(0.5, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.9964761906968791, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = illinoisSolver0.solve(707, (UnivariateRealFunction) inverse0, (-3026.4075413610367), (double) 707, 34.00328375409009, allowedSolution0);
      assertEquals(34.00328375409009, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(3.7263154087426347E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1003.0, 0.0, 2.7553817452272217E-6);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(3, (UnivariateRealFunction) atan0, (-23.0), 0.030589580535888672, allowedSolution0);
      assertEquals((-11.484705209732056), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-0.42147084932726236), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(8.172164837643127);
      Atan atan0 = new Atan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = pegasusSolver0.solve(290, (UnivariateRealFunction) atan0, (-7.44321345601866E-11), (double) 290, (-1667.0748432934781), allowedSolution0);
      assertEquals((-1667.0748432934781), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.3697501799470047E-8, double0, 0.01);
  }
}
