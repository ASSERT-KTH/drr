/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:49:47 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Expm1;
import org.apache.commons.math.analysis.function.Log1p;
import org.apache.commons.math.analysis.function.Sigmoid;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(1.1100454222215627E12, 0.5);
      Expm1 expm1_0 = new Expm1();
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(254, (UnivariateRealFunction) expm1_0, (-3199.4196271858727), 2057.17987286154);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (254) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      double double0 = regulaFalsiSolver0.solve(663, (UnivariateRealFunction) tan0, (double) 0, (-2749.0751164788));
      assertEquals((-2749.0751164788), regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1583.29939), (-1583.29939), (-829.5));
      Sigmoid sigmoid0 = new Sigmoid(57.2957763671875, 0.0);
      UnivariateRealFunction univariateRealFunction0 = sigmoid0.derivative();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2, univariateRealFunction0, 0.0, (-2627.8360406), allowedSolution0);
      assertEquals((-2627.8360406), regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2627.8360406), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      double double0 = regulaFalsiSolver0.solve(2820, (UnivariateRealFunction) tan0, (-1381.6827432200894), (double) 2820, (-1381.6827432200894));
      assertEquals((-1381.6827432200894), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1286.482191096408), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0);
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = pegasusSolver0.solve(2097, (UnivariateRealFunction) ceil0, (-341.870139), (double) 2097, 934.0, allowedSolution0);
      assertEquals(2097.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-0.7484337502050948), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(514.45773776, 0.0, 0.0);
      Log1p log1p0 = new Log1p();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(906, (UnivariateRealFunction) log1p0, (-1.0), 2558.33231, 2558.33231, allowedSolution0);
      assertEquals(2558.33231, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(808, (UnivariateRealFunction) sinc0, (-2917.73851), (double) 17, 0.0, allowedSolution0);
      assertEquals((-2877.6988706882507), double0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      double double0 = regulaFalsiSolver0.solve(808, (UnivariateRealFunction) sinc0, (-2863.5), (-2117.71852980613));
      assertEquals((-2490.609264903065), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2158.274153016188), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(808, (UnivariateRealFunction) sinc0, (-2917.385946157146), (double) 808, 0.0, allowedSolution0);
      assertEquals((-2186.5484868984963), double0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(808, (UnivariateRealFunction) sinc0, (-2917.73851), (double) 808, 0.0, allowedSolution0);
      assertEquals((-2632.6546437082466), double0, 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(17, (UnivariateRealFunction) sinc0, (-2917.73851), (double) 17, 0.0, allowedSolution0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2877.698870672202), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(22, (UnivariateRealFunction) sinc0, (-1389.4739126466538), (double) 22, allowedSolution0);
      assertEquals((-1389.4739126466538), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals((-414.6902302770781), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(17, (UnivariateRealFunction) sinc0, 1.0E-6, (double) 17, allowedSolution0);
      assertEquals(8.500000499999999, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(15.707963267977735, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(808, (UnivariateRealFunction) sinc0, (-2917.73851), (double) 808, 0.0, allowedSolution0);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-2632.6546437082466), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(808, (UnivariateRealFunction) sinc0, (-2917.73851), (double) 808, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (808) exceeded: evaluations
         //
         verifyException("org.apache.commons.math.analysis.solvers.BaseAbstractUnivariateRealSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2820, (UnivariateRealFunction) tan0, (-1382.0), 1877.28, 1719.95053466401, allowedSolution0);
      assertEquals(1719.95053466401, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(80.11061176183138, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(22, (UnivariateRealFunction) sinc0, (-1408.453), (double) 22, allowedSolution0);
      assertEquals((-693.2265), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-333.00882128052126), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Sinc sinc0 = new Sinc();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(117, (UnivariateRealFunction) sinc0, (-1.0291586946131819), (double) 117, allowedSolution0);
      assertEquals((-1.0291586946131819), regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(116.23892818287659, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(2820, (UnivariateRealFunction) tan0, (-1381.6827432200894), 1877.28, 1719.95053466401, allowedSolution0);
      assertEquals(1719.95053466401, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-1003.7388527337375), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Tan tan0 = new Tan();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(2820, (UnivariateRealFunction) tan0, (-1382.0), (double) 2820, 1719.95053466401, allowedSolution0);
      assertEquals(1719.95053466401, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-607.8981786867811), double0, 0.01);
  }
}
