/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 20:56:49 GMT 2019
 */

package org.apache.commons.math.analysis.solvers;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.Ceil;
import org.apache.commons.math.analysis.function.Gaussian;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Log;
import org.apache.commons.math.analysis.function.Signum;
import org.apache.commons.math.analysis.function.Sqrt;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class BaseSecantSolver_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver(2389.74450018);
      Log log0 = new Log();
      pegasusSolver0.solve(62, (UnivariateRealFunction) log0, (double) 0, (double) 62);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-3473.601090381289), 0.0);
      Sqrt sqrt0 = new Sqrt();
      double double0 = illinoisSolver0.solve(3, (UnivariateRealFunction) sqrt0, (double) 3, 0.0, 1.9699272335463627E-8);
      assertEquals(1.9699272335463627E-8, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-2123.7250780513173), 1909.7, allowedSolution0);
      assertEquals((-107.0125390256585), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(6.324313231163344E-7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(94, (UnivariateRealFunction) gaussian0, 438.5206952176378, 0.0, allowedSolution0);
      assertEquals(438.5206952176378, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(438.5206952176378, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = pegasusSolver0.solve(225, (UnivariateRealFunction) ceil0, (-615.8443155), 2461.37383482, (double) 225, allowedSolution0);
      assertEquals(225.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals((-0.800713794832518), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0, 1.0, 1.0);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-2123.7250780513173), 1.0, allowedSolution0);
      assertEquals(1.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(0.4812682914913776, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1909.7, 1909.7, 1909.7);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-7.781284477923275E258), 1909.7, allowedSolution0);
      assertEquals((-3.8906422389616375E258), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-3.8906422389616375E258), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(5369.75712464, 5369.75712464, 5369.75712464);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-2123.7250780513173), 5369.75712464, allowedSolution0);
      assertEquals(5369.75712464, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-2123.7250780513173), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1909.7, 1909.7, 1909.7);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(641, (UnivariateRealFunction) signum0, (-2123.7250780513173), 1909.7, allowedSolution0);
      assertEquals((-107.0125390256585), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(1909.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1909.7, 1909.7, 1909.7);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(267, (UnivariateRealFunction) signum0, (-1240.47), 1909.7, allowedSolution0);
      assertEquals(1909.7, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-1240.47), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1909.7, 1909.7, 1909.7);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-2123.7250780513173), 1909.7, allowedSolution0);
      assertEquals((-107.0125390256585), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals((-107.01253902565873), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(6.256614393236314E137, 6.256614393236314E137, 6.256614393236314E137);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(641, (UnivariateRealFunction) signum0, (-2123.7250780513173), 6.256614393236314E137, allowedSolution0);
      assertEquals(3.128307196618157E137, regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(3.128307196618157E137, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1909.7, 1909.7, 1909.7);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-2123.7250780513173), 1909.7, allowedSolution0);
      assertEquals(1909.7, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-107.01253902565873), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator(644, 3.141592653589793, (-3185.06609374));
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double0 = illinoisSolver0.solve(644, (UnivariateRealFunction) harmonicOscillator0, (-3185.06609374), 4.0, allowedSolution0);
      assertEquals(4.0, illinoisSolver0.getMax(), 0.01);
      assertEquals((-472.66197421377), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1909.7);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-2123.7250780513173), 1909.7, allowedSolution0);
      assertEquals((-107.0125390256585), regulaFalsiSolver0.getStartValue(), 0.01);
      assertEquals(901.3437304871707, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-2123.7250780513173), 1910.5915368380242, allowedSolution0);
      assertEquals(1910.5915368380242, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals((-5.17908231810298E-7), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1909.7, 1909.7, 1909.7);
      Signum signum0 = new Signum();
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double0 = regulaFalsiSolver0.solve(627, (UnivariateRealFunction) signum0, (-2123.7250780513173), 1909.7, allowedSolution0);
      assertEquals(1909.7, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1909.7, double0, 0.01);
  }
}
