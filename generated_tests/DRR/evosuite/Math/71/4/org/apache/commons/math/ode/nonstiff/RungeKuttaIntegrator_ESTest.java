/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 02:33:31 GMT 2019
 */

package org.apache.commons.math.ode.nonstiff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.ode.FirstOrderConverter;
import org.apache.commons.math.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.nonstiff.GillIntegrator;
import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math.ode.sampling.FixedStepHandler;
import org.apache.commons.math.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class RungeKuttaIntegrator_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-129.21408683638));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate(firstOrderConverter0, (-129.21408683638), doubleArray0, 0.0, doubleArray0);
      assertEquals(8, gillIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-0.25));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      midpointIntegrator0.integrate(firstOrderConverter0, 0, doubleArray0, (-0.25), doubleArray1);
      assertEquals(4, midpointIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1671.69), fixedStepHandler0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      midpointIntegrator0.integrate(firstOrderConverter0, 4286.1439125, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-0.25));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 0, 0, 0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      midpointIntegrator0.integrate(firstOrderConverter0, 820.2624891797727, doubleArray0, (-0.25), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-0.25));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      midpointIntegrator0.integrate(firstOrderConverter0, 820.2624891797727, doubleArray0, (-0.25), doubleArray0);
  }
}
