/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 06:02:44 GMT 2019
 */

package org.apache.commons.math3.optim.nonlinear.scalar.noderiv;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.exception.MathUnsupportedOperationException;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.NelderMeadSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class SimplexOptimizer_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-22.02247453978336), (-22.02247453978336));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[50];
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer((-22.02247453978336), (-22.02247453978336));
      OptimizationData[] optimizationDataArray0 = new OptimizationData[50];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-22.02247453978336);
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0);
      optimizationDataArray0[41] = (OptimizationData) nelderMeadSimplex0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.AbstractSimplex", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(273.5500681918179, 165.7570155);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[8];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 273.5500681918179;
      doubleArray0[1] = 273.5500681918179;
      doubleArray0[2] = 171.05047303;
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(doubleArray0, (-5930.5), 273.5500681918179, (-5930.5), (-2277.31057255917));
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      InitialGuess initialGuess0 = new InitialGuess(doubleArray0);
      optimizationDataArray0[7] = (OptimizationData) initialGuess0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.optim.BaseOptimizer$MaxEvalCallback", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimplePointChecker<PointValuePair> simplePointChecker0 = new SimplePointChecker<PointValuePair>((-1.0), (-1.0));
      SimplexOptimizer simplexOptimizer0 = new SimplexOptimizer(simplePointChecker0);
      OptimizationData[] optimizationDataArray0 = new OptimizationData[4];
      NelderMeadSimplex nelderMeadSimplex0 = new NelderMeadSimplex(12, (-6.032174644509064E-23));
      optimizationDataArray0[0] = (OptimizationData) nelderMeadSimplex0;
      double[] doubleArray0 = new double[9];
      SimpleBounds simpleBounds0 = new SimpleBounds(doubleArray0, doubleArray0);
      optimizationDataArray0[2] = (OptimizationData) simpleBounds0;
      // Undeclared exception!
      try { 
        simplexOptimizer0.optimize(optimizationDataArray0);
        fail("Expecting exception: MathUnsupportedOperationException");
      
      } catch(MathUnsupportedOperationException e) {
         //
         // constraint
         //
         verifyException("org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer", e);
      }
  }
}
