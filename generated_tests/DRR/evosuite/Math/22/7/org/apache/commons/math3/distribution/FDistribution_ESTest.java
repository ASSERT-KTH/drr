/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:39:32 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 4.0);
      // Undeclared exception!
      fDistribution0.sample(705);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(5.91978743, 5.91978743, 5.91978743);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(5.91978743, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.5102317499905855, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(569);
      FDistribution fDistribution0 = new FDistribution(well44497b0, 569, 569, 0.0);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(1.0035273368606703, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(569.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(4.0, 4.0, 4.0);
      fDistribution0.density((-3544.379816525));
      assertEquals(4.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(1.0, (-1174.0663), 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,174.066)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

//  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.4580921530723572, 0.4580921530723572, 0.0);
      assertEquals(0.4580921530723572, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      
      double double0 = fDistribution0.sample();
      assertEquals(1680.1199933602215, double0, 0.01);
      assertEquals(0.4580921530723572, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(569);
      FDistribution fDistribution0 = new FDistribution(well44497b0, 569, 569, 0.0);
      double double0 = fDistribution0.calculateNumericalVariance();
      assertEquals(0.007117148505087927, double0, 0.01);
  }
}
