/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:43:03 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

//  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(748.462209095, 748.462209095);
      double double0 = fDistribution0.sample();
      assertEquals(1.0994861739932726, double0, 0.01);
      assertEquals(1.0026793050949288, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(748.462209095, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.2550633697348567E-8, 1.2550633697348567E-8, 0.0);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(1.2550633697348567E-8, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.2550633697348567E-8, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.9162893295288086, 2758.8);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertFalse(boolean0);
      assertEquals(1.9162893295288086, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(2758.8, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.9162893295288086, 2758.8);
      double double0 = fDistribution0.density(1.0E-9);
      assertEquals(2.2272488790846703, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-91.76731075), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-91.767)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(950.2504479509, 0.0, 517.912);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

//  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.2550633697348567E-8, 1.2550633697348567E-8, 0.0);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(fDistribution0.isSupportConnected());
      
      double double1 = fDistribution0.sample();
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.2550633697348567E-8, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.0694099695408752E16, double1, 0.01);
  }
}
