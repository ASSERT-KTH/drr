/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:37:37 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1834.638045269796, 1834.638045269796);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(1.0624305894034243, double0, 0.01);
      
      double double1 = fDistribution0.getNumericalVariance();
      assertEquals(1.0010913229730019, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0021886086821817337, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.6015626820520968E-9, 2.6015626820520968E-9);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertFalse(boolean0);
      assertEquals(2.6015626820520968E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(2.6015626820520968E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.0, 1.0);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(1.0, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1235.29025947198, 1235.29025947198);
      double double0 = fDistribution0.density(1235.29025947198);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution((-2534.10930137), (-2534.10930137), 738.2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-2,534.109)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(2474.734917975547, 0.0, 881.3424683737642);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(2.6015626820520968E-9, 2.6015626820520968E-9);
      double double0 = fDistribution0.inverseCumulativeProbability(2.6015626820520968E-9);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, fDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(2.6015626820520968E-9, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.6015626820520968E-9, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }
}
