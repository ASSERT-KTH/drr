/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:48:30 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.POSITIVE_INFINITY, 345.69384118);
      // Undeclared exception!
      try { 
        fDistribution0.sample();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 1], values: [-0.903, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BrentSolver", e);
      }
  }

//  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.5220900774002075, 0.5220900774002075, 0.5220900774002075);
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getSupportUpperBound(), 0.01);
      
      double double0 = fDistribution0.sample();
      assertEquals(720.4599578410672, double0, 0.01);
      assertEquals(0.5220900774002075, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(0.5220900774002075, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.5220900774002075, 0.5220900774002075, 0.5220900774002075);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(0.5220900774002075, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.5220900774002075, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(0.5220900774002075, 0.5220900774002075, 0.5220900774002075);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertEquals(0.5220900774002075, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.5220900774002075, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.POSITIVE_INFINITY, 345.69384118);
      fDistribution0.density((-5130.462));
      assertEquals(Double.POSITIVE_INFINITY, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(1.0058191324963328, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(1614.0, (-1099.195888), (-1099.195888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-1,099.196)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

//  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.7670931816101074, 4.0, 1.0);
      double double0 = fDistribution0.sample();
      assertEquals(5.00000000000008, double0, 0.01);
      
      double double1 = fDistribution0.sample();
      assertTrue(fDistribution0.isSupportConnected());
      assertEquals(2.0, fDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double1, 0.01);
  }
}
