/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:42:27 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.FDistribution;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class FDistribution_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3584.879036, 3584.879036, 3584.879036);
      // Undeclared exception!
      fDistribution0.sample(2299);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(0.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (0)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(3584.879036, 3584.879036, 3584.879036);
      boolean boolean0 = fDistribution0.isSupportUpperBoundInclusive();
      assertEquals(3584.879036, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0005582103051498, fDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.4251641388208515E-21, 1.4251641388208515E-21);
      boolean boolean0 = fDistribution0.isSupportLowerBoundInclusive();
      assertFalse(boolean0);
      assertEquals(1.4251641388208515E-21, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.4251641388208515E-21, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN);
      fDistribution0.density(1035.8981450209);
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FDistribution fDistribution0 = null;
      try {
        fDistribution0 = new FDistribution(Double.NaN, (-2985.881435727028), Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom (-2,985.881)
         //
         verifyException("org.apache.commons.math3.distribution.FDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(Double.NaN, Double.NaN);
      double double0 = fDistribution0.getNumericalMean();
      assertEquals(Double.NaN, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FDistribution fDistribution0 = new FDistribution(1.4251641388208515E-21, 1.4251641388208515E-21);
      double double0 = fDistribution0.getNumericalVariance();
      assertEquals(1.4251641388208515E-21, fDistribution0.getDenominatorDegreesOfFreedom(), 0.01);
      assertEquals(1.4251641388208515E-21, fDistribution0.getNumeratorDegreesOfFreedom(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
