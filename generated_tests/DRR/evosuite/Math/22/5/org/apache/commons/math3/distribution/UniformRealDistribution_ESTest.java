/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:38:02 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class UniformRealDistribution_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      boolean boolean0 = uniformRealDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1664525L);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well44497a0, 0.0, 1662.2208, 0.0);
      uniformRealDistribution0.sample(1436);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(831.1104, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1664525L);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well44497a0, 0.0, 1662.2208, 0.0);
      double double0 = uniformRealDistribution0.getNumericalMean();
      assertEquals(831.1104, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, (-1429), (-560), (-6268));
      double double0 = uniformRealDistribution0.getSupportUpperBound();
      assertEquals((-560.0), double0, 0.01);
      assertEquals((-994.5), uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, (-1429), (-560), (-6268));
      double double0 = uniformRealDistribution0.getNumericalVariance();
      assertEquals(62930.083333333336, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, (-1429), (-560), (-6268));
      boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
      assertTrue(boolean0);
      assertEquals(62930.083333333336, uniformRealDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, (-1429), (-560), (-6268));
      double double0 = uniformRealDistribution0.getSolverAbsoluteAccuracy();
      assertEquals((-994.5), uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals((-6268.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, (-1429), (-560), (-6268));
      double double0 = uniformRealDistribution0.getSupportLowerBound();
      assertEquals((-994.5), uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals((-1429.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, (-1429), (-560), (-6268));
      boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
      assertEquals((-994.5), uniformRealDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = null;
      try {
        uniformRealDistribution0 = new UniformRealDistribution(12.0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (12) must be strictly less than upper bound (0)
         //
         verifyException("org.apache.commons.math3.distribution.UniformRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1664525L);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well44497a0, 0.0, 1662.2208, 0.0);
      double double0 = uniformRealDistribution0.density((-1444.87343));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(831.1104, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, (-1429), (-560), (-6268));
      double double0 = uniformRealDistribution0.density(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(62930.083333333336, uniformRealDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-2118L));
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well44497a0, 1.0, 1899.76823581, 1.0E-9);
      double double0 = uniformRealDistribution0.density(950.384117905);
      assertEquals(5.266572197387785E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1664525L);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well44497a0, 0.0, 1662.2208, 0.0);
      double double0 = uniformRealDistribution0.probability(0.0, 1.0);
      assertEquals(6.01604792816935E-4, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.cumulativeProbability(22.2385386);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }
}
