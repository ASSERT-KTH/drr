/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 16:43:25 GMT 2019
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.UniformRealDistribution;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class UniformRealDistribution_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(1.0E-9, 3934.8009607768, 3934.8009607768);
      boolean boolean0 = uniformRealDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1290221.5500768465, uniformRealDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-2.0), 1194.0461457);
      double double0 = uniformRealDistribution0.sample();
      assertEquals(1077.586853511791, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-1540.6), 1.0, (-543.482));
      double double0 = uniformRealDistribution0.getNumericalMean();
      assertEquals((-769.8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.getSupportUpperBound();
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.getNumericalVariance();
      assertEquals(0.08333333333333333, double0, 0.01);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      boolean boolean0 = uniformRealDistribution0.isSupportUpperBoundInclusive();
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, Double.NEGATIVE_INFINITY, 1, 12.0);
      double double0 = uniformRealDistribution0.getSolverAbsoluteAccuracy();
      assertEquals(12.0, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, uniformRealDistribution0.getSupportLowerBound(), 0.01);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, Double.NEGATIVE_INFINITY, 1, 12.0);
      double double0 = uniformRealDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, 0, 4011.47, (-2100.60389));
      boolean boolean0 = uniformRealDistribution0.isSupportLowerBoundInclusive();
      assertEquals(2005.735, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = null;
      try {
        uniformRealDistribution0 = new UniformRealDistribution((-3976.77), (-3976.77), 1549.93253525);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower bound (-3,976.77) must be strictly less than upper bound (-3,976.77)
         //
         verifyException("org.apache.commons.math3.distribution.UniformRealDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(1.0E-9, 3934.8009607768, 3934.8009607768);
      double double0 = uniformRealDistribution0.density(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1967.4004803889, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, Double.NEGATIVE_INFINITY, 1, 12.0);
      double double0 = uniformRealDistribution0.density((-1426.4907998));
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution((-1540.6), 1.0, (-543.482));
      double double0 = uniformRealDistribution0.density(841.67542176276);
      assertEquals(0.0, double0, 0.01);
      assertEquals(198044.2133333333, uniformRealDistribution0.getNumericalVariance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1);
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution(well19937c0, Double.NEGATIVE_INFINITY, 1, 12.0);
      double double0 = uniformRealDistribution0.cumulativeProbability(3457.33018358);
      assertEquals(1.0, uniformRealDistribution0.getSupportUpperBound(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, uniformRealDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      uniformRealDistribution0.probability((double) 0, (double) 0);
      assertEquals(0.5, uniformRealDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UniformRealDistribution uniformRealDistribution0 = new UniformRealDistribution();
      double double0 = uniformRealDistribution0.cumulativeProbability(1.0E-9);
      assertEquals(1.0E-9, double0, 0.01);
      assertEquals(0.0, uniformRealDistribution0.getSupportLowerBound(), 0.01);
  }
}
