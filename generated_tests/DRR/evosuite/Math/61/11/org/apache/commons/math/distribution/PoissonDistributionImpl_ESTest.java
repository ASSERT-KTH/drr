/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:07:32 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 209);
      poissonDistributionImpl0.getDomainLowerBound(1.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(64.64565859654192, 2697.631060342865);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(64.64565859654192, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(57.2957763671875, 22.58497);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(57.2957763671875, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(59, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-1550.4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,550.4 is smaller than, or equal to, the minimum (0): mean (-1,550.4)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 209);
      int int0 = poissonDistributionImpl0.getDomainUpperBound((-1539.99));
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 209);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(209);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(6.283185307179586, 6.283185307179586);
      double double0 = poissonDistributionImpl0.probability((-703));
      assertEquals(6.283185307179586, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(57.2957763671875, 22.58497);
      double double0 = poissonDistributionImpl0.probability(59);
      assertEquals(0.05057906463492984, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 209);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(64.64565859654192, 2697.631060342865);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(8.409054990285717E-29, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 209);
      double double0 = poissonDistributionImpl0.cumulativeProbability(209);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(57.2957763671875, 22.58497);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-1393), 334);
      assertEquals(1.0, double0, 0.01);
      assertEquals(57.2957763671875, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 1.0E-12, 1659);
      double double0 = poissonDistributionImpl0.cumulativeProbability((double) Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
  }
}
