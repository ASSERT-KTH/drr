/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:12:50 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.05);
      poissonDistributionImpl0.getDomainLowerBound(1.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.14285714285714285);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(0.14285714285714285, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.14285714285714285);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(0.14285714285714285, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.220590270857665E-9);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(9.220590270857665E-9);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(9.220590270857665E-9, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(439.213141, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      assertEquals(439.213141, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-4291.951064), (-2672.0199646186));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -4,291.951 is smaller than, or equal to, the minimum (0): mean (-4,291.951)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(463.934, 1.0);
      double double0 = poissonDistributionImpl0.probability((-2257));
      assertEquals(0.0, double0, 0.01);
      assertEquals(463.934, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(439.213141, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(439.213141, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.14285714285714285);
      double double0 = poissonDistributionImpl0.probability(2860);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.14285714285714285, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.6065306597126334, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.14285714285714285);
      double double0 = poissonDistributionImpl0.cumulativeProbability(0.0, 138.5529052738);
      assertEquals(0.14285714285714285, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(439.213141, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.cumulativeProbability(1616.6276395851748, (double) Integer.MAX_VALUE);
      assertEquals(439.213141, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
