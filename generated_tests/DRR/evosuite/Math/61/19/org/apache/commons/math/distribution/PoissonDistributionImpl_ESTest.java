/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:11:05 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(10.0, 0.0, 236);
      poissonDistributionImpl0.getDomainLowerBound(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4747.889);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(4747.889, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4747.889);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(4747.889, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(4761, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.041666666666621166, 0.041666666666621166);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(1113.9);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0.041666666666621166, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(0.0, (-2704));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): mean (0)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4747.889);
      double double0 = poissonDistributionImpl0.normalApproximateProbability((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(4747.889, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(4747.889);
      double double0 = poissonDistributionImpl0.probability((-954));
      assertEquals(0.0, double0, 0.01);
      assertEquals(4747.889, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(90.2443172715285);
      double double0 = poissonDistributionImpl0.probability(0.0);
      assertEquals(6.417871035087794E-40, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1044.0749886866, 1044.0749886866);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(1044.0749886866, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(9.313225746154785E-10, 9.313225746154785E-10, 685);
      double double0 = poissonDistributionImpl0.probability(492);
      assertEquals(0.0, double0, 0.01);
      assertEquals(9.313225746154785E-10, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(90.2443172715285);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-1347));
      assertEquals(0.0, double0, 0.01);
      assertEquals(90.2443172715285, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(10.0, 0.0, 236);
      double double0 = poissonDistributionImpl0.cumulativeProbability(236, Integer.MAX_VALUE);
      assertEquals(10.0, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
