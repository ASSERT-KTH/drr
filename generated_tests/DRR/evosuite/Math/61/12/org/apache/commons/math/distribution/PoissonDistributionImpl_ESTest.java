/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:07:58 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.125, 719.341140416482, 1);
      poissonDistributionImpl0.getDomainLowerBound(0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.125, 719.341140416482, 1);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(0.125, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.5707963267948966, (-1638));
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(0, int0);
      assertEquals(1.5707963267948966, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-67.9132122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -67.913 is smaller than, or equal to, the minimum (0): mean (-67.913)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.125, 719.341140416482, 1);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(4715.0687);
      assertEquals(0.125, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.125, 719.341140416482, 1);
      double double0 = poissonDistributionImpl0.normalApproximateProbability(738);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.125, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1618.007073371, (-2125));
      double double0 = poissonDistributionImpl0.probability((-4252));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1618.007073371, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.125, 719.341140416482, 1);
      double double0 = poissonDistributionImpl0.probability(1);
      assertEquals(0.11031211282307445, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.5);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.5, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(528.69, 528.69);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(2.470872651954538E-230, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.125, 719.341140416482, 1);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-611), Integer.MAX_VALUE);
      assertEquals(0.125, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.125, 719.341140416482, 1);
      double double0 = poissonDistributionImpl0.cumulativeProbability(1576);
      assertEquals(0.125, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }
}
