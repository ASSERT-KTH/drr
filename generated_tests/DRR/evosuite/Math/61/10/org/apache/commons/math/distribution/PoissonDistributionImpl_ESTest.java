/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 09:07:05 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class PoissonDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(844.38171535025, 844.38171535025, 280);
      poissonDistributionImpl0.getDomainLowerBound(280);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.030589580535888672);
      double double0 = poissonDistributionImpl0.getMean();
      assertEquals(0.030589580535888672, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(26.185076692551835);
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(26.185076692551835, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(26.185076692551835);
      int int0 = poissonDistributionImpl0.getDomainUpperBound(451.8807);
      assertEquals(26.185076692551835, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl((-2494.723347), 1284);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,494.723 is smaller than, or equal to, the minimum (0): mean (-2,494.723)
         //
         verifyException("org.apache.commons.math.distribution.PoissonDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(6.283185307179586, 6.283185307179586);
      double double0 = poissonDistributionImpl0.probability(0);
      assertEquals(0.0018674427317079893, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(26.185076692551835);
      double double0 = poissonDistributionImpl0.normalApproximateProbability((-2229));
      assertEquals(26.185076692551835, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(740.8863928);
      double double0 = poissonDistributionImpl0.probability((-1704));
      assertEquals(0.0, double0, 0.01);
      assertEquals(740.8863928, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(26.185076692551835);
      double double0 = poissonDistributionImpl0.probability(Integer.MAX_VALUE);
      assertEquals(26.185076692551835, poissonDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(924.0459898516, 924.0459898516);
      double double0 = poissonDistributionImpl0.probability(2144589021);
      assertEquals(0.0, double0, 0.01);
      assertEquals(924.0459898516, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(924.0459898516, 924.0459898516);
      double double0 = poissonDistributionImpl0.cumulativeProbability(0.3);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(0.030589580535888672);
      double double0 = poissonDistributionImpl0.cumulativeProbability((-1395));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.030589580535888672, poissonDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(1.0E-12, 427.85963, Integer.MAX_VALUE);
      double double0 = poissonDistributionImpl0.cumulativeProbability(Integer.MAX_VALUE);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0E-12, poissonDistributionImpl0.getMean(), 0.01);
  }
}
