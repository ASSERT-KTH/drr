/*
 * This file was automatically generated by EvoSuite
 * Tue Jun 04 11:00:48 GMT 2019
 */

package org.apache.commons.math.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.util.MathUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class MathUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = MathUtils.hash(0.0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int int0 = MathUtils.hash(doubleArray0);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = MathUtils.addAndCheck(354L, (-1L));
      assertEquals(353L, long0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = MathUtils.sinh(1L);
      assertEquals(1.1752011936438014, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = MathUtils.normalizeAngle(1L, (-705891258));
      assertEquals((-7.058912570247782E8), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(99, (-740));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = MathUtils.cosh((-1.0));
      assertEquals(1.5430806348152437, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = MathUtils.log(1427.472992995, 0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck((-621), (-2147483646));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = MathUtils.addAndCheck(0, 1068);
      assertEquals(1068, int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.addAndCheck(2147483509, 2147483509);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      long long0 = MathUtils.subAndCheck(2309L, 0L);
      assertEquals(2309L, long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-9223372036854775808L), (long) 2879);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) (-2147483646), 1L);
      assertEquals((-2147483647L), long0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(5040L, (-9223372036854773772L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(18, 1328);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient((-2234), (-2234));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(1, 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(213, 0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient((short)794, 1);
      assertEquals(794L, long0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = MathUtils.binomialCoefficient(0, (-1));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficient(795, 220);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // result too large to represent in a long integer
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientDouble((-2790), (-1500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= k for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.binomialCoefficientLog((-2950), (-2950));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for binomial coefficient (n,k)
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientDouble(0, 0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(854, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog((short)10, (short)1);
      assertEquals(2.302585092994046, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = MathUtils.binomialCoefficientLog(0, (-1));
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[5] = (double) Float.NaN;
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = MathUtils.equals(Double.NaN, 0.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      boolean boolean0 = MathUtils.equals((double[]) null, (double[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      boolean boolean0 = MathUtils.equals(doubleArray0, (double[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = MathUtils.equals((double[]) null, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[4];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-119);
      double[] doubleArray1 = new double[2];
      boolean boolean0 = MathUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = MathUtils.factorialLog(16);
      assertEquals(30.671860106080672, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial((-1106530432));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorial(1249);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // factorial value is too large to fit in a long
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialDouble((-326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n >= 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = MathUtils.factorialDouble(2060);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.factorialLog((-2455));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must have n > 0 for n!
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.lcm(0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = MathUtils.lcm(2130, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = MathUtils.gcd((-30), (byte)24);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = MathUtils.gcd(16695396, (-4086));
      assertEquals(4086, int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte) (-94));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte byte0 = MathUtils.indicator((byte)52);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = MathUtils.indicator((double) (byte)1);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = MathUtils.indicator((double) Float.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = MathUtils.indicator((-2976.8929434));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.round(Float.NaN, 0, 12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid rounding method.
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = MathUtils.indicator((-1272));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = MathUtils.indicator(15);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = MathUtils.indicator((-1L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = MathUtils.indicator(845L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      short short0 = MathUtils.indicator((short) (-986));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      short short0 = MathUtils.indicator((short)794);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(4132, (-1073741823));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(689, 2146762506);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 1, (long) 20);
      assertEquals(20L, long0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck(2598L, (long) (short) (-1));
      assertEquals((-2598L), long0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) (short) (-1), (long) (short) (-786));
      assertEquals(786L, long0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-9223372036854773772L), (-365L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((-1L), 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck((-11978405242668540L), 9218868437227405312L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = MathUtils.mulAndCheck((long) 0, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.mulAndCheck(9223372036854775807L, 9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: multiply
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 3681);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = MathUtils.round(5406.782F, 811, 2);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = MathUtils.nextAfter(0.0, 0.0);
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = MathUtils.round(0.0F, 3, 3);
      assertEquals((-0.001F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = MathUtils.nextAfter(3958.87, (-4086));
      assertEquals(3958.8699999999994, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-0.9999999999999999), (-611.013939676));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = MathUtils.nextAfter((-1.0), Float.NaN);
      assertEquals((-0.9999999999999999), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = MathUtils.scalb(0.0, 0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.NaN, 0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = MathUtils.scalb(Double.POSITIVE_INFINITY, 0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = MathUtils.scalb(3628800L, 1996);
      assertEquals((-8.057554623519536E-10), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = MathUtils.round(Double.NaN, 2387);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = MathUtils.round(Double.POSITIVE_INFINITY, (-1579), (-1840));
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float float0 = MathUtils.round((-2994.2039F), 1, 0);
      assertEquals((-2994.3F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float float0 = MathUtils.round((float) (byte)1, (-2292), (int) (byte)1);
      assertEquals(Float.NEGATIVE_INFINITY, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float float0 = MathUtils.round((-23.068295F), 3, 3);
      assertEquals((-23.069F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float float0 = MathUtils.round((-3737.6428F), 0);
      assertEquals((-3738.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)5);
      assertEquals((byte)1, byte0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte)0);
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte byte0 = MathUtils.sign((byte) (-3));
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = MathUtils.sign((-1662.73));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = MathUtils.sign(Double.NaN);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = MathUtils.sign(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = MathUtils.sign((double) 16);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = MathUtils.sign((-946.0F));
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = MathUtils.sign(Float.NaN);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = MathUtils.sign(0.0F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = MathUtils.sign(1676.398F);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = MathUtils.sign((-119));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = MathUtils.sign(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = MathUtils.sign(247);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = MathUtils.sign((-1839L));
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = MathUtils.sign(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      long long0 = MathUtils.sign(1L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short short0 = MathUtils.sign((short)980);
      assertEquals((short)1, short0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = MathUtils.sign((short)0);
      assertEquals((short)0, short0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short short0 = MathUtils.sign((short) (-786));
      assertEquals((short) (-1), short0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((-2134701006), 2134701006);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = MathUtils.subAndCheck((-2162), (-437));
      assertEquals((-1725), int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck(2147483642, (-2078));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      long long0 = MathUtils.subAndCheck((long) (byte) (-1), (-9223372036854775743L));
      assertEquals(9223372036854775742L, long0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathUtils.subAndCheck((long) (byte)1, (-9223372036854775743L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: subtract
         //
         verifyException("org.apache.commons.math.util.MathUtils", e);
      }
  }
}
