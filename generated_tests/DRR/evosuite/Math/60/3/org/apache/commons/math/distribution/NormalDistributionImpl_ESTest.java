/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 08:52:46 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class NormalDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-917.92746844796), 0.09090909090909091);
      double double0 = normalDistributionImpl0.density(0.09090909090909091);
      assertEquals(0.09090909090909091, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals((-917.92746844796), normalDistributionImpl0.getMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

//  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.sample();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getStandardDeviation();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getSolverAbsoluteAccuracy();
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0E-9, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = null;
      try {
        normalDistributionImpl0 = new NormalDistributionImpl(1237.0, 0.0, (-1580.616));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0): standard deviation (0)
         //
         verifyException("org.apache.commons.math.distribution.NormalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.cumulativeProbability(1623.7246624111);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.333333333333333, 0.333333333333333);
      double double0 = normalDistributionImpl0.cumulativeProbability((-86.843537), 0.19999999999923582);
      assertEquals(0.34457825838883177, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-917.92746844796), 0.09090909090909091);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals((-917.92746844796), normalDistributionImpl0.getMean(), 0.01);
      assertEquals(0.09090909090909091, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-917.92746844796), 0.09090909090909091);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals((-917.92746844796), normalDistributionImpl0.getMean(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
      assertEquals(0.09090909090909091, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      // Undeclared exception!
      try { 
        normalDistributionImpl0.inverseCumulativeProbability(4379.13624);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,379.136 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.0, 2.0, 1599.668593851479);
      double double0 = normalDistributionImpl0.getDomainLowerBound(2495.8);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.333333333333333, 0.333333333333333);
      double double0 = normalDistributionImpl0.getDomainLowerBound(0.333333333333333);
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals(0.333333333333333, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(0.333333333333333, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(2.85040095144011776E17, 3059.85771254);
      double double0 = normalDistributionImpl0.getDomainUpperBound(3059.85771254);
      assertEquals(1.7976931348623157E308, double0, 0.01);
      assertEquals(2.85040095144011776E17, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(3059.85771254, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.0, 2.0, 1599.668593851479);
      double double0 = normalDistributionImpl0.getDomainUpperBound((-0.5));
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getInitialDomain(0.5);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.0, 2.0, 1599.668593851479);
      double double0 = normalDistributionImpl0.getInitialDomain(0.07692307692307693);
      assertEquals((-2.0), double0, 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(1908.639, 40.0, 505.5223);
      double double0 = normalDistributionImpl0.getInitialDomain(1054.05584451);
      assertEquals(1948.639, double0, 0.01);
  }
}
