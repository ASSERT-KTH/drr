/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 24 08:52:27 GMT 2019
 */

package org.apache.commons.math.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class NormalDistributionImpl_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getMean();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.density(1284.719265);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-495.0), 40.0, 1.0);
      double double0 = normalDistributionImpl0.sample();
      assertEquals((-495.0), double0, 0.01);
      assertEquals(40.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-495.0), 40.0, 1.0);
      double double0 = normalDistributionImpl0.getStandardDeviation();
      assertEquals(40.0, double0, 0.01);
      assertEquals((-495.0), normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(3162.824726788097, 926.09158889, 3162.824726788097);
      double double0 = normalDistributionImpl0.getSolverAbsoluteAccuracy();
      assertEquals(3162.824726788097, double0, 0.01);
      assertEquals(3162.824726788097, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(926.09158889, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = null;
      try {
        normalDistributionImpl0 = new NormalDistributionImpl((-888.95), (-511.11288846454));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -511.113 is smaller than, or equal to, the minimum (0): standard deviation (-511.113)
         //
         verifyException("org.apache.commons.math.distribution.NormalDistributionImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(3162.824726788097, 926.09158889, 3162.824726788097);
      double double0 = normalDistributionImpl0.cumulativeProbability(0.0, 0.0);
      assertEquals(926.09158889, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3162.824726788097, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.cumulativeProbability(1510.0);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.cumulativeProbability((-4269.09974586), (-4269.09974586));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      // Undeclared exception!
      try { 
        normalDistributionImpl0.inverseCumulativeProbability(1510.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,510 out of [0, 1] range
         //
         verifyException("org.apache.commons.math.distribution.AbstractContinuousDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(3162.824726788097, 926.09158889, 3162.824726788097);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(0.0);
      assertEquals(3162.824726788097, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(926.09158889, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl((-495.0), 40.0, 1.0);
      double double0 = normalDistributionImpl0.inverseCumulativeProbability(1.0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(40.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals((-495.0), normalDistributionImpl0.getMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(3162.824726788097, 926.09158889, 3162.824726788097);
      double double0 = normalDistributionImpl0.getDomainLowerBound(1000.0);
      assertEquals(3162.824726788097, double0, 0.01);
      assertEquals(926.09158889, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      double double0 = normalDistributionImpl0.getDomainLowerBound((-2733.5446538));
      assertEquals((-1.7976931348623157E308), double0, 0.01);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(3162.824726788097, 926.09158889, 3162.824726788097);
      double double0 = normalDistributionImpl0.getDomainUpperBound(262.401);
      assertEquals(926.09158889, normalDistributionImpl0.getStandardDeviation(), 0.01);
      assertEquals(3162.824726788097, normalDistributionImpl0.getMean(), 0.01);
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(3162.824726788097, 926.09158889, 3162.824726788097);
      double double0 = normalDistributionImpl0.getDomainUpperBound(0.0);
      assertEquals(3162.824726788097, double0, 0.01);
      assertEquals(926.09158889, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(3162.824726788097, 926.09158889, 3162.824726788097);
      double double0 = normalDistributionImpl0.getInitialDomain(3162.824726788097);
      assertEquals(4088.916315678097, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(3162.824726788097, 926.09158889, 3162.824726788097);
      double double0 = normalDistributionImpl0.getInitialDomain(Double.NEGATIVE_INFINITY);
      assertEquals(2236.733137898097, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl(0.5, 0.5);
      double double0 = normalDistributionImpl0.getInitialDomain(0.5);
      assertEquals(0.5, double0, 0.01);
      assertEquals(0.5, normalDistributionImpl0.getStandardDeviation(), 0.01);
  }
}
