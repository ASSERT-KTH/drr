/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 18:12:20 GMT 2019
 */

package org.apache.commons.math3.optimization.linear;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;


public class SimplexSolver_ESTest {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-1069.747641659), (-17));
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1069.747641659));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-1069.747641659);
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-1069.747641659);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, 56.598);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, (RealVector) null, (RealVector) null).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, (Relationship) null, (Relationship) null).when(linearConstraint0).getRelationship();
      doReturn(0.0, 1.0E-6, 0.0, 0.0, 0.0).when(linearConstraint0).getValue();
      linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[0], 100);
      simplexSolver0.doIteration(simplexTableau0);
      linkedList0.addAll((Collection<? extends LinearConstraint>) linkedList0);
      simplexSolver0.setMaxIterations(11);
      simplexSolver0.incrementIterationsCounter();
      simplexSolver0.incrementIterationsCounter();
      simplexSolver0.incrementIterationsCounter();
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100, (-17));
      try { 
        simplexSolver0.solvePhase1(simplexTableau1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no feasible solution
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-18);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 578.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 100);
      try { 
        simplexSolver0.doIteration(simplexTableau0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unbounded solution
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-1069.747641659), 0);
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 578.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-1069.747641659);
      doubleArray1[1] = (Double) 100.0;
      doubleArray1[2] = (Double) (-1069.747641659);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, 56.598);
      Relationship relationship0 = Relationship.EQ;
      Relationship relationship1 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0, relationship1).when(linearConstraint0).getRelationship();
      doReturn(100.0, 1.0E-6, (-4150.87138), (-1069.747641659), 1.0).when(linearConstraint0).getValue();
      linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), 100);
      linkedList0.addAll((Collection<? extends LinearConstraint>) linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 578.0, 0);
      simplexSolver0.solvePhase1(simplexTableau1);
      assertEquals(1, simplexSolver0.getIterations());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 578.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-1069.747641659);
      doubleArray1[1] = (Double) 100.0;
      doubleArray1[2] = (Double) (-1069.747641659);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, 56.598);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
      doReturn(100.0, 1.0E-6, doubleArray1[2], (-1069.747641659), (-1069.747641659)).when(linearConstraint0).getValue();
      linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 100);
      linkedList0.addAll((Collection<? extends LinearConstraint>) linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 578.0, (-18));
      try { 
        simplexSolver0.solvePhase1(simplexTableau1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // unbounded solution
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-1069.747641659), 0);
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 578.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-1069.747641659);
      doubleArray1[1] = (Double) 100.0;
      doubleArray1[2] = (Double) (-1069.747641659);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, 56.598);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
      doReturn(100.0, 1.0E-6, (-4150.87138), (-1069.747641659), (-6.887556547891059E-9)).when(linearConstraint0).getValue();
      linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, (-1.0), 100);
      List<LinearConstraint> list0 = simplexTableau0.normalizeConstraints(linkedList0);
      linkedList0.addAll((Collection<? extends LinearConstraint>) list0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 578.0, 0);
      try { 
        simplexSolver0.solvePhase1(simplexTableau1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no feasible solution
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-1069.747641659), (-18));
      double[] doubleArray0 = new double[10];
      doubleArray0[2] = (-1069.747641659);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1069.747641659));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-1069.747641659);
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) (-1069.747641659);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[2]);
      Relationship relationship0 = Relationship.EQ;
      Relationship relationship1 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0, (RealVector) null).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0, relationship1).when(linearConstraint0).getRelationship();
      doReturn(0.0, doubleArray1[2], doubleArray1[2], (-1069.747641659), (-1069.747641659)).when(linearConstraint0).getValue();
      linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[0], 100);
      linkedList0.addAll((Collection<? extends LinearConstraint>) linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 100, (-18));
      GoalType goalType1 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.optimization.linear.SimplexTableau", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-1069.747641659), 0);
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, 578.0);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) (-1069.747641659);
      doubleArray1[1] = (Double) 100.0;
      doubleArray1[2] = (Double) (-1069.747641659);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, 56.598);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0, relationship0).when(linearConstraint0).getRelationship();
      doReturn(100.0, 1.0E-6, doubleArray1[2], (-1069.747641659), (-1069.747641659)).when(linearConstraint0).getValue();
      linkedList0.offerLast(linearConstraint0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (-1.0), 100);
      linkedList0.addAll((Collection<? extends LinearConstraint>) linkedList0);
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, true, 578.0, 0);
      simplexSolver0.solvePhase1(simplexTableau1);
      assertEquals(1, simplexSolver0.getIterations());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver((-1684.1136666585), (-18));
      double[] doubleArray0 = new double[5];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, (-1684.1136666585));
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MAXIMIZE;
      Double[] doubleArray1 = new Double[3];
      doubleArray1[0] = (Double) 100.0;
      doubleArray1[1] = (Double) 0.0;
      doubleArray1[2] = (Double) 100.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[2]);
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = mock(LinearConstraint.class, new ViolatedAssumptionAnswer());
      doReturn(openMapRealVector0, openMapRealVector0).when(linearConstraint0).getCoefficients();
      doReturn(relationship0, relationship0).when(linearConstraint0).getRelationship();
      doReturn(0.0, doubleArray1[2], doubleArray1[2], 100.0).when(linearConstraint0).getValue();
      linkedList0.offerLast(linearConstraint0);
      linkedList0.addAll((Collection<? extends LinearConstraint>) linkedList0);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, false, (double) doubleArray1[2]);
      simplexSolver0.solvePhase1(simplexTableau0);
      assertEquals(100, simplexSolver0.getMaxIterations());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      SimplexSolver simplexSolver0 = new SimplexSolver();
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(1656, (-853), 1231.0395354);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(openMapRealVector0, 1656);
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      GoalType goalType0 = GoalType.MINIMIZE;
      // Undeclared exception!
      try { 
        simplexSolver0.optimize(linearObjectiveFunction0, linkedList0, goalType0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.util.OpenIntToDoubleHashMap", e);
      }
  }
}
