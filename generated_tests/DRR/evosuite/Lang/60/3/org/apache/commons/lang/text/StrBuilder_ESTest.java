/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 12:52:41 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.function.Consumer;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class StrBuilder_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      assertEquals(16, strBuilder0.length());
      
      strBuilder0.trim();
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$&h#");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals("$&h#", stringBuffer0.toString());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(247);
      StrMatcher strMatcher0 = StrMatcher.charMatcher('7');
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(247, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$&h#");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, "org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.setNewLineText("");
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      strBuilder0.getNewLineText();
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}Vr^muz6-P:4r");
      String string0 = strBuilder0.substring(0);
      assertEquals(45, strBuilder0.capacity());
      assertEquals("}Vr^muz6-P:4r", string0);
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}Vr^muz6-P:4r");
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals(45, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append('H');
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      strBuilder_StrBuilderTokenizer0.forEachRemaining(consumer0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(1571, 1571, '&');
      char[] charArray0 = new char[1];
      strBuilder0.getChars(charArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2405);
      int int0 = strBuilder0.indexOf("'IA$<?:^Lb0");
      assertEquals(2405, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(0);
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.setLength(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}Vr^muz6-P:4r");
      strBuilder0.asTokenizer();
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("M|JE");
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 1721, '#');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      // Undeclared exception!
      try { 
        strBuilder0.insert(1870, (-858L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1870
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(117, 1427.56171);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 117
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$&h#");
      int int0 = strBuilder0.lastIndexOf("XbA),xjI]G$&h#");
      assertEquals(36, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, (-1), '\\');
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1), 'M');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.home");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}Vr^muz6-P:4r");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}Vr^muz6-P:4r");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark(0);
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$&h#");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(0);
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$&h#");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("$&h#");
      assertEquals(8, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3);
      char[] charArray0 = new char[1];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(1, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(20, strBuilder0.length());
      assertEquals(52, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-1430), (-1430));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1430
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((String) null, 116, 2605);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      Object[] objectArray0 = new Object[7];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-432));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -432
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("Invalid offset: ", 2, 2);
      strBuilder0.setLength(2);
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      strBuilder0.setLength(117);
      strBuilder0.minimizeCapacity();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(0);
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(1, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, 0.0F);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(48, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3);
      // Undeclared exception!
      try { 
        strBuilder0.charAt(3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-2814), '[');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2814
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4785);
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(10, 'y');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 10
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4785);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder_StrBuilderTokenizer0);
      strBuilder1.setCharAt(10, 'y');
      assertEquals(70, strBuilder0.size());
      assertEquals(70, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-48));
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-48));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -48
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      strBuilder0.deleteCharAt(0);
      assertEquals(19, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3);
      StrBuilder strBuilder1 = strBuilder0.append((-3349.81281848));
      char[] charArray0 = strBuilder1.toCharArray();
      assertEquals(14, strBuilder0.size());
      assertEquals(14, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, 1017);
      strBuilder0.toCharArray(0, 2605);
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4785);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder_StrBuilderTokenizer0);
      char[] charArray0 = strBuilder1.toCharArray(9, 9);
      assertEquals(70, strBuilder0.size());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(1740);
      strBuilder0.append(strBuilder1, 102, 31);
      assertEquals(1771, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-95), (-1), charArray0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -95
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, (-2875), (char[]) null, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2875
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(485, 485, charArray0, 485);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 485
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2666);
      Object[] objectArray0 = new Object[7];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "6|sKglS}O4L");
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder1.getChars(974, 44, charArray0, 423);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setNullText("java.vendor.url");
      strBuilder0.append((Object) null);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e+Fc");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("e+Fc", (-21), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer", 2506, (-1178));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("end < start", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("", 0, 1184);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(",;EfB", 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      StringBuffer stringBuffer0 = new StringBuffer("rF^@X]f@d#h|v");
      strBuilder0.append(stringBuffer0);
      assertEquals(14, strBuilder0.size());
      
      strBuilder0.deleteAll("rF^@X]f@d#h|v");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 1, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 0, 0);
      assertEquals(101, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(97);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "StrTokenizer[not tokenized yet]");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-750), (-750));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Windows");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("startIndex must be valid");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 5, (-4490));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(12);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang.text.StrBuilder");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 12, 0);
      assertEquals(0, strBuilder1.size());
      assertEquals(12, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(12);
      StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang.text.StrBuilder");
      strBuilder0.append(stringBuffer0, 0, 12);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      strBuilder0.append(strBuilder0);
      assertEquals(34, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}Vr^muz6-P:4r");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-1), (-2431));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(859);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 508, (-815));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("TW:EDz(D)%2xu<{x");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 2, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(1740);
      strBuilder1.append(strBuilder1, 117, 0);
      assertEquals(1740, strBuilder0.capacity());
      assertEquals(1740, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(".%P3V|p&");
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(40, strBuilder1.capacity());
      assertEquals(8, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-48));
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, 16, 9);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 39, 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 39
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, (-405));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -405
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 4, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r4kn/dYR");
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "H{q[:z");
      assertEquals(35, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(false);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      strBuilder0.append(true);
      boolean boolean0 = strBuilder0.endsWith("{FBP9:M$w@J)68>Q+");
      assertEquals(21, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "jL<)Uh5hj2he;u!T");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "java.vm.info");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.add(strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.add(strBuilder0);
      linkedList0.add(strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "!``[Bej_Y1z*");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "X=@d^;h<HB>zQFO@");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("LINUX");
      char[] charArray0 = new char[3];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, (String) null);
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(37, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1976));
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("ne,t~");
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      assertEquals(113, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(114);
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-1576), '*');
      assertEquals(114, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "w$", 0, ':');
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 108, 'x');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(9);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 9, 'V');
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("}#qU-W4Sg");
      strBuilder0.appendFixedWidthPadRight((-1), 5, '.');
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (Object) strBuilder0);
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      char[] charArray0 = new char[3];
      strBuilder0.insert((int) '\u0000', charArray0);
      strBuilder0.replaceAll("{FBP9:M$w@J)68>Q+", "{FBP9:M$w@J)68>Q+");
      assertEquals(20, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bYlg\"`.i");
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(6, charArray0);
      assertEquals(8, strBuilder1.length());
      assertEquals(40, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4785);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder_StrBuilderTokenizer0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder1.insert(10, charArray0, (-2090), 96);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -2090
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) strBuilder0;
      strBuilder0.appendWithSeparators(objectArray0, "");
      strBuilder0.insert(34, (char[]) null, 34, 114);
      assertEquals(50, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.add(strBuilder0);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "!``[Bej_Y1z*");
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder1.insert(26, charArray0, 26, 26);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 26
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[6];
      strBuilder0.insert(0, charArray0, 0, 4);
      strBuilder0.midString(0, 4);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-216));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -216
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 773);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 773
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.setLength(34);
      strBuilder1.insert(34, true);
      assertEquals(38, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(247);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(247, '7');
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder1.deleteAll('7');
      assertEquals(247, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(247);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(247, '7');
      strBuilder0.append(3995.6683843);
      strBuilder1.deleteAll('7');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(0.0);
      strBuilder0.deleteFirst('0');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(0.0);
      strBuilder0.deleteFirst('?');
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      StrBuilder strBuilder1 = strBuilder0.deleteAll("rF^@X]f@d#h|v");
      assertEquals(108, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("4.1");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      strBuilder0.deleteFirst("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4785);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.append((Object) strBuilder_StrBuilderTokenizer0);
      strBuilder0.replace(10, 10, "Solaris");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      strBuilder0.replaceFirst("{FBP9:M$w@J)68>Q+", (String) null);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replace(0, 117, (String) null);
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2729));
      StrBuilder strBuilder1 = strBuilder0.replaceAll('f', 'f');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('B', 'F');
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('g', 'g');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bYlg\"`.i");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('z', ' ');
      assertEquals(8, strBuilder1.length());
      assertEquals(40, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[6];
      charArray0[2] = 'U';
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 4);
      strBuilder1.replaceFirst('U', ';');
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "");
      assertEquals(108, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      StrBuilder strBuilder1 = strBuilder0.replaceAll("k90T.", (String) null);
      assertEquals(108, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vm.specification.vendor");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("]", "\"Q{M=2-w$");
      assertEquals(28, strBuilder1.size());
      assertEquals(60, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vm.specification.vendor");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("java.vm.specification.vendor", "java.vm.specification.vendor");
      assertEquals(28, strBuilder1.size());
      assertEquals(60, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4785);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.append((Object) strBuilder_StrBuilderTokenizer0);
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      strBuilder0.deleteFirst(strMatcher0);
      assertEquals(70, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.home");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.home");
      strBuilder0.replaceFirst(strMatcher0, "java.home");
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("[UYdd5*JF<0B");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("oS*_o%dd1Gt");
      strBuilder0.deleteAll(strMatcher0);
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append((float) (-1));
      strBuilder0.reverse();
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(114);
      strBuilder0.setLength(117);
      strBuilder0.trim();
      assertEquals(117, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("GMeJ!($NmIY8$/L");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(247);
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(247, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, false);
      StrBuilder strBuilder1 = strBuilder0.append(0.0);
      boolean boolean0 = strBuilder1.startsWith(">q~P3");
      assertEquals(8, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("cV*jVrfPy-V'iK/");
      boolean boolean0 = strBuilder0.startsWith("cV*jVrfPy-V'iK/");
      assertEquals(47, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      boolean boolean0 = strBuilder0.endsWith("{FBP9:M$w@J)68>Q+");
      assertEquals(49, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith(">6-7iSz7");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      String string0 = strBuilder0.leftString(Integer.MAX_VALUE);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.leftString(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 2466, 'v');
      strBuilder1.leftString(97);
      assertEquals(2466, strBuilder0.length());
      assertEquals(2466, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.rightString(2370);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      String string0 = strBuilder0.rightString(0);
      assertEquals("", string0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5);
      Object[] objectArray0 = new Object[5];
      strBuilder0.appendWithSeparators(objectArray0, "`8?");
      strBuilder0.rightString(5);
      assertEquals(12, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      String string0 = strBuilder0.midString(380, 1);
      assertEquals("", string0);
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      strBuilder0.midString((-3097), 108);
      assertEquals(108, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      strBuilder0.midString((-1), (-1));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      StrBuilder strBuilder1 = strBuilder0.setLength(117);
      String string0 = strBuilder1.midString((-3097), 108);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("TW:EDz(D)%2xu<{x");
      boolean boolean0 = strBuilder0.contains('[');
      assertFalse(boolean0);
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[9];
      charArray0[7] = '?';
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      boolean boolean0 = strBuilder1.contains('?');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setLength(88);
      boolean boolean0 = strBuilder0.contains("");
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.contains((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      charArray0[3] = 'Z';
      strBuilder0.append('Z');
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf(']', (-3414));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(722, '2');
      int int0 = strBuilder0.indexOf('2');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf("", (-2466));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.contains((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("Invalid offset: ", 2, 2);
      boolean boolean0 = strBuilder0.contains("XTVhfw");
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      strBuilder0.append(true);
      strBuilder0.replaceAll("{FBP9:M$w@J)68>Q+", "{FBP9:M$w@J)68>Q+");
      assertEquals(21, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(44);
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0, (-174));
      assertEquals((-1), int0);
      assertEquals(44, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf('N', 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(1571, 1571, '&');
      int int0 = strBuilder0.lastIndexOf('-');
      assertEquals(1571, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(247);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(247, '?');
      int int0 = strBuilder1.lastIndexOf('?', 958);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(246, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf("w$", 4659);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(9);
      int int0 = strBuilder0.lastIndexOf((String) null, 9);
      assertEquals(9, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setLength(1843);
      int int0 = strBuilder1.lastIndexOf("", 0);
      assertEquals(1843, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setLength(1740);
      int int0 = strBuilder0.lastIndexOf("StrTokenizer[not tokenized yet]", 1585);
      assertEquals(1740, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(108);
      strBuilder0.setLength(117);
      int int0 = strBuilder0.lastIndexOf("h", 117);
      assertEquals(117, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$&h#");
      strBuilder0.insert(0, "XbA),xjI]G");
      int int0 = strBuilder0.lastIndexOf("XbA),xjI]G$&h#");
      assertEquals(14, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.setLength(1740);
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getIgnoredMatcher();
      int int0 = strBuilder1.lastIndexOf(strMatcher0, 0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, 32);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(247);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(247, '7');
      StrMatcher strMatcher0 = StrMatcher.charMatcher('7');
      int int0 = strBuilder1.lastIndexOf(strMatcher0);
      assertEquals(247, strBuilder0.size());
      assertEquals(246, int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r4kn/dYR");
      StrBuilder strBuilder1 = new StrBuilder();
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(8, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(40, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("TW:EDz(D)%2xu<{x");
      StrBuilder strBuilder1 = new StrBuilder("TW:EDz(D)%2xu<{x");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(18, strBuilder1.length());
      assertTrue(boolean0);
      assertEquals(50, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1483));
      strBuilder0.append(590L);
      StrBuilder strBuilder1 = new StrBuilder("c;T");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(3, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("jL<)Uh5hj2he;u!T");
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "jL<)Uh5hj2he;u!T");
      StrBuilder strBuilder1 = new StrBuilder((-98));
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(27, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4.1");
      StrBuilder strBuilder1 = new StrBuilder("%av");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(boolean0);
      assertEquals(3, strBuilder1.length());
      assertEquals(35, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("K>i%w;{0=TdT\"E");
      StrBuilder strBuilder1 = new StrBuilder("K>i%w;{0=TdT\"E");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(boolean0);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'Q,7}YRdoR");
      boolean boolean0 = strBuilder0.equals((Object) "'Q,7}YRdoR");
      assertEquals(10, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(42, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append('Z');
      strBuilder0.hashCode();
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4785);
      // Undeclared exception!
      try { 
        strBuilder0.replace((-2311), (-2769), "org.apache.commons.lang.text.StrBuilder");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2311
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring(18, (-130));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset("");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "org.apache.commons.lang.SystemUtils");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.reset("");
      strTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(".%P3V|p&");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(40, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals(".%P3V|p&", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1976));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-1976), 99);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[3];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(49, strBuilder0.capacity());
      assertEquals(3, int0);
      assertEquals(17, strBuilder0.size());
      assertArrayEquals(new char[] {'{', 'F', 'B'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.timezone");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 31, (-3336));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 271, 1494);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(654);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 654);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("TW:EDz(D)%2xu<{x");
      char[] charArray0 = new char[3];
      Reader reader0 = strBuilder0.asReader();
      // Undeclared exception!
      try { 
        reader0.read(charArray0, 2, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      strBuilder0.append(0.0);
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{FBP9:M$w@J)68>Q+");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-16L));
      assertEquals(0L, long0);
      assertEquals(17, strBuilder0.size());
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(552L);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
  }
}
