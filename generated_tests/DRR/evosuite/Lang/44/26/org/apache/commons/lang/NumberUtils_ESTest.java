/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 07:49:30 GMT 2019
 */

package org.apache.commons.lang;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class NumberUtils_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = NumberUtils.stringToInt("HR8K5&Is kvwX];S[G");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("5");
      assertNotNull(number0);
      assertEquals(5, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        NumberUtils.createBigInteger("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length BigInteger
         //
         verifyException("java.math.BigInteger", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Number number0 = NumberUtils.createNumber((String) null);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      try { 
        NumberUtils.createNumber("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      try { 
        NumberUtils.createNumber("\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         //  is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("--");
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0xorg.apache.commons.lang.StringUtils");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang.StringUtils\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-0x");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("-.0");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        NumberUtils.createNumber(" is not a valid number.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .e is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0E");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      try { 
        NumberUtils.createNumber("0eg,WN9IFSlB!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0eg,WN9IFSlB! is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("7L");
      assertEquals(7L, number0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      try { 
        NumberUtils.createNumber(".\"t2p@dd");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .\"t2p@dd is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("0f");
      assertEquals((byte)0, number0.byteValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      try { 
        NumberUtils.createNumber("Y.@=\"y~sy)TC$l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Y.@=\"y~sy)TC$l is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      try { 
        NumberUtils.createNumber("5eL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5eL is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      try { 
        NumberUtils.createNumber("-zwc?x?v~l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -zwc?x?v~l is not a valid number.
         //
         verifyException("org.apache.commons.lang.NumberUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("2F");
      assertEquals(2.0F, number0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Number number0 = NumberUtils.createNumber("1D");
      assertEquals(1.0, number0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      try { 
        NumberUtils.createNumber("NxZ  ve1");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.math.BigDecimal", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Number number0 = NumberUtils.createNumber(".8");
      assertEquals(0.8F, number0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = NumberUtils.minimum(0L, (-1L), 0L);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = NumberUtils.minimum((-1L), 0L, (-3100L));
      assertEquals((-3100L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = NumberUtils.minimum(21, 127, 18);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = NumberUtils.minimum((-2737), (-3388), (-1030));
      assertEquals((-3388), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = NumberUtils.maximum(0L, 0L, (long) 2);
      assertEquals(2L, long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = NumberUtils.maximum((-1524L), 0L, 900L);
      assertEquals(900L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = NumberUtils.maximum((-1989L), 1647L, 272L);
      assertEquals(1647L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = NumberUtils.maximum((-733), 2, 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = NumberUtils.maximum(0, 0, 246);
      assertEquals(246, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = NumberUtils.compare((-430.572433), (-430.572433));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = NumberUtils.compare((double) (-2796.21F), (double) 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = NumberUtils.compare((double) 0, (-430.572433));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = NumberUtils.compare((double) 0, -0.0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = NumberUtils.compare(-0.0, (double) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = NumberUtils.compare((float) 0, (float) 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = NumberUtils.compare((-2796.21F), (float) 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = NumberUtils.compare((float) 1, (float) (-1));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = NumberUtils.compare(-0.0F, 0.0F);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = NumberUtils.compare((float) 0, -0.0F);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = NumberUtils.isDigits("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-.0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("D");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0x~0WmG>,h3It");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x1c");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-0x-+cc+OKx?v~i<l");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0xD] to'oK+9uQg]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5eL");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("...");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("7E+j.>?DkG]Z#4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("5eeJ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E/$ lgLT}$UIMpeV$|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--$$7$S>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("--");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber(".e");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("2F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("0l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = NumberUtils.isNumber("l");
      assertFalse(boolean0);
  }
}
