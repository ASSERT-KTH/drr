/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 00:56:28 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

 
public class FastDateFormat_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(", GSZ");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ", GSZ");
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(2, 2, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(", GSZ", locale0);
      mockSimpleDateFormat0.get2DigitYearStart();
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer(", GSZ");
      fastDateFormat2.applyRules(calendar0, stringBuffer0);
      assertEquals(", GSZ2014/02/14 20:21:21", stringBuffer0.toString());
      
      fastDateFormat1.equals((Object) null);
      assertSame(fastDateFormat1, fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getPattern();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0);
      assertEquals(0, FastDateFormat.FULL);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      ParsePosition parsePosition0 = new ParsePosition(399);
      fastDateFormat0.parseObject("Usy  PNW^Kl23b", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7aE=K&<_^S7Dj<Fc$F", 0, 0, (-1), (-1), 0, 0, 3250, 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      fastDateFormat0.getLocale();
      assertEquals(55, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2, 1, 3);
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      assertEquals("1:03:00 AM GMT", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      
      String string0 = fastDateFormat0.toString();
      assertEquals("FastDateFormat[M/d/yy h:mm a]", string0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      int int0 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertNotNull(fastDateFormat0);
      
      TimeZone timeZone0 = fastDateFormat0.getTimeZone();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("OI'", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getTimeInstance(31, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 31
         //
         verifyException("java.text.DateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "fdB0)3_\".G,AuN");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("fdB0)3_\".G,AuN", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      fastDateFormat0.getTimeZoneOverridesCalendar();
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1);
      String string0 = fastDateFormat0.format((long) 1);
      assertEquals("January 1, 1970 12:00:00 AM GMT", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      String string0 = fastDateFormat0.format((-651L));
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("12/31/69 11:59 PM", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "IT@@BL05$?a~>", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateFormat.getTimeInstance(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2, 1, 3);
      mockGregorianCalendar0.setTimeZone(simpleTimeZone0);
      FastDateFormat.getDateInstance(2);
      mockGregorianCalendar0.set(1447, 1, 1);
      assertTrue(mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
      assertNotSame(fastDateFormat1, fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("a2G+^A^tuZ[&~", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("_Bxd:Vj){vvV&|#L/", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "{C#13b*i7^(*%H^^6g7", 0, 0, (-1), (-1), 0, 0, 3250, 0);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("{C#13b*i7^(*%H^^6g7", (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7aE=K&<_^S7Dj<Fc$F", 0, 0, (-1), (-1), 0, 0, 3250, 0);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("7aE=K&<_^S7Dj<Fc$F", (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("8;>-F%?;$qnUV/vW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-30), "org.apache.commons.lang3.time.FastDateFormat$UnpaddedMonthField");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(")F}6:IY/oe!t", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("JT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Ewy^L>J, 99", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(113, ";$G,E&Nn0/:`]8%rC*");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(";$G,E&Nn0/:`]8%rC*", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&Plu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Q/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("RG3zj9rc&LB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "h");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("T-p ", (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ";7iCa('Up a[P41lWhk");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Unknown class: ", (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("0V&BlQol$xpjHc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      FastDateFormat.getInstance("W#,kW'di1MYYuN2eB", timeZone0, locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      StringBuffer stringBuffer0 = new StringBuffer("W#,kW'di1MYYuN2eB");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1172);
      decimalFormat0.format((-407.78899927), stringBuffer0, fieldPosition0);
      Format.Field format_Field1 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition1 = new FieldPosition(format_Field1);
      assertEquals((-1), fieldPosition1.getField());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">$X>DG+Gp:C", timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Yul*i_R;=75VRNJ36", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("b%GtMB_Df7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("cXe", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("e-l8KKhWAkA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("/gHV'`lv;I.#2+1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[i*AETWI7+_n|h'MD", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("J:M3|gom\"ez");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("&HlI", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("<null>", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("org.apache.commons.lang3.time.FastDateFormat$TwoDigitNumberField", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("0kp3}K9D");
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("0kp3}K9D", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("Wr!Cn+_VDQ3!!wH", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("tYTjcB\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.UK;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("h20uYi^", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance("[v~NU,InKe~[", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDateFormat.getInstance(">S07:xl!$]x[9C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(", GSZ");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat.getDateInstance(0, timeZone0, locale0);
      FastDateFormat.getDateInstance(0, timeZone0, locale0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      assertEquals("", stringWriter1.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      MockDate mockDate0 = new MockDate(399, 1, 5, 1545, 399);
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "dd-MMM-yyyy HH:mm:ss z");
      fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("dd-MMM-yyyy HH:mm:ss zMonday, April 10, 2299 3:39:00 PM GMT", stringBuffer0.toString());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);
      StringWriter stringWriter0 = new StringWriter(2);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 2);
      // Undeclared exception!
      try { 
        fastDateFormat0.format((Object) "The validated array index is invalid: %d", stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      StringBuffer stringBuffer0 = new StringBuffer(2912);
      FieldPosition fieldPosition0 = new FieldPosition(2);
      Long long0 = new Long(2);
      fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
      assertEquals("Thursday, January 1, 1970 12:00:00 AM GMT", stringBuffer0.toString());
      assertEquals(41, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("", (Locale) null);
      // Undeclared exception!
      try { 
        fastDateFormat0.formatToCharacterIterator((Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.UK;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(2, 1, locale0);
      assertNotNull(fastDateFormat1);
      
      fastDateFormat1.equals(fastDateFormat0);
      assertEquals(25, fastDateFormat1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(", GSZ");
      Locale locale0 = new Locale(", GSZ");
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, (Locale) null);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ", GSZ");
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(", GSZ", (TimeZone) simpleTimeZone0, locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(", GSZ", locale0);
      mockSimpleDateFormat0.get2DigitYearStart();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1, 0, 1, 3);
      StringBuffer stringBuffer0 = new StringBuffer(", GSZ");
      fastDateFormat2.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(15, stringBuffer0.length());
      
      boolean boolean0 = fastDateFormat0.equals(fastDateFormat1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7aE=K&<_^S7Dj<Fc$F", 0, 0, 158, 158, 0, 0, 3250, 0);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0);
      Locale locale0 = Locale.KOREA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.after(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      locale0.toLanguageTag();
      DecimalFormatSymbols decimalFormatSymbols0 = new DecimalFormatSymbols();
      DecimalFormat decimalFormat0 = new DecimalFormat("7aE=K&<_^S7Dj<Fc$F", decimalFormatSymbols0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "7aE=K&<_^S7Dj<Fc$F");
      mockGregorianCalendar0.set(116, 3, 1);
      FieldPosition fieldPosition0 = new FieldPosition((-2857));
      fastDateFormat0.format((long) (-2857));
      fastDateFormat0.format(date0, stringBuffer0);
      fastDateFormat0.format((long) 0);
      System.setCurrentTimeMillis(3250);
      fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(2314L);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0);
      boolean boolean0 = fastDateFormat0.equals(locale0);
      assertFalse(boolean0);
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ", GSZ");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(", GSZ", (TimeZone) simpleTimeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer(", GSZ");
      fastDateFormat0.applyRules(calendar0, stringBuffer0);
      assertEquals(17, stringBuffer0.length());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1252, "0kp3}K9D");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format(calendar0);
      assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("2/14/14 8:21 PM", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 399, 0, 1, 1, 0);
      StringBuffer stringBuffer0 = new StringBuffer(2912);
      fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("Thursday, March 31, 0035 1:01:00 AM GMT", stringBuffer0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61055161140000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=35,MONTH=2,WEEK_OF_YEAR=14,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=90,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, ", G[k");
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(", G[k", (TimeZone) simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1, 0, 1, 3);
      StringBuffer stringBuffer0 = new StringBuffer(", G[k");
      fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(", G[k, dopo Cristo[1", stringBuffer0.toString());
      assertTrue(fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "7aE=K&<_^S7Dj<Fc$F", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format((long) (-2857));
      assertEquals("December 31, 1969 11:59:57 PM GMT+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "7aE=K&<_^S7Dj<Fc$F", 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0);
      String string0 = fastDateFormat0.format((long) (-2857));
      assertEquals("January 1, 1970 12:59:57 AM GMT+01:00", string0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "IT@@BL05$?a~>", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2, 1, 3);
      mockGregorianCalendar0.setTimeZone(simpleTimeZone0);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62127903420002,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=IT@@BL05$?a~>,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=92,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=3,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1,DST_OFFSET=1]", mockGregorianCalendar0.toString());
      assertEquals("1:03:00 AM GMT+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "IT@@BL05$?a~>", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(1);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 3, 2, 1, 3);
      mockGregorianCalendar0.roll(0, 1883);
      mockGregorianCalendar0.setTimeZone(simpleTimeZone0);
      mockGregorianCalendar0.set(1447, 1, 1);
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-107796956220001,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=IT@@BL05$?a~>,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1447,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=3,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("1:03:00 AM GMT+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown class: ");
      Locale locale0 = Locale.JAPAN;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(0, timeZone0, locale0);
      assertSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
  }
}
