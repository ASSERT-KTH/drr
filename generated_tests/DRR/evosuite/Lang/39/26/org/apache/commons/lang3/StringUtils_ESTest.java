/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 03 04:20:26 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.TreeSet;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class StringUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.abbreviate("POE-y*", 46);
      assertNotNull(string0);
      assertEquals("POE-y*", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "M", 128);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("WRVqq", "p{InCombiningDiacriticalMarks}+");
      assertEquals("WRVqq", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.center("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("The Array must not be null", "The Array must not be null", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.rightPad("InvocationTargetException occurred during 1.6 backcompat code", (-2618));
      assertNotNull(string0);
      assertEquals("InvocationTargetException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.leftPad("#b!", (-605));
      assertEquals("#b!", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Ks[6!Xg*=}'/_'a)Abi", "Ks[6!Xg*=}'/_'a)Abi");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.replace("YEt|E#q7(", "", "YEt|E#q7(");
      assertEquals("YEt|E#q7(", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "Lw(+~U]=g");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, "SecurityException occurred during 1.6 backcompat code", "", (-784));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("normalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("`\r{\"", 'y');
      assertEquals("`\r{\"", string0);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.trimToNull("N=x");
      assertEquals("N=x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Minimum abbreviation width with offset is ,");
      assertEquals("Minimum abbreviation width with offset is ,", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.stripToNull("N=x");
      assertEquals("N=x", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToNull(" ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripStart("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("`\r{\"", "u3x");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Search and Replace array lengths don't match: ");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",oyWTyj o3oUD/x\"Y*s";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ",oyWTyj o3oUD/x\"Y*s");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, " is less than 0: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("TIMETOLIVE OF ");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.stripEnd("gbKvP.,JmsP", "gbKvP.,JmsP");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripAccents("=XFHDw|,K(5");
      assertEquals("=XFHDw|,K(5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = StringUtils.equals(" ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((String) null, "NoSuchMethodException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("N=x", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((String) null, "|?2<5<kct/7bAt ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.indexOf("os.version", '\'');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf("", 'G');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf("java.vendor", 'G', 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, 'O', 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.substringBetween("lW8l$(x=N%}1!3r8|l2", "k+ekEqR");
      int int0 = StringUtils.indexOf(string0, "vo|");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "17]dhs/5xK");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf("U!T+,D#4h,L)lYO^*],", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((String) null, (String) null, 1209);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.chomp("1.4");
      assertEquals("1.4", string0);
      
      int int0 = StringUtils.ordinalIndexOf("java.vm.vendor vs", string0, Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", (String) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("epp2<b60#[MuRA", "q1jl4yf4j;:-p", (-3332));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("*wk_4c}#l 1B*wk_4c}#l 1B*wk_4c}#l 1B*wk*wk_4c}#l 1B*wk_4c}#l 1B*wk_4c}#l 1B*wk_4c}#l 1B*wk", "", 90);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" vs ", " vs ", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf(" Zk", " Zk", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf((String) null, "\"(z", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "Y hE!R", 1974);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOf("", (String) null, (-2124));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOf("E&ca", "", 544);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.indexOf("", "", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("`\r{\"", 'G');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '>');
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf(",oyWTyj o3oUD/x\"Y*s", '[', (-690));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", '\\', 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "Rd|-zrqR2m");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("?}5krprV#_n\"LueU.L", "6cn{WTe\\(,r:]ZK=");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((String) null, "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("T$A{=w", "%&=jx+@ig}.Cn", 5);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf("T$A{=w", (String) null, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("4.0", 'h');
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      boolean boolean0 = StringUtils.contains(":-Ak\"lRt'qc~@'n\"0<", ':');
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("I`H|-*?CbG/", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.contains("p{InCombiningDiacriticalMarks}+", "_  5k%D=;7q/1b-f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((String) null, "HP-UX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("TimeToLive of ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("]I_oy>mB", "f");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAny("", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("6@H2|HPs", "LYnJ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny("Ml8#6WTdNu|2vGZFU", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("N=x", "ayyWy");
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("-z+JcN_wVasp", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((String) null, "+kp $L:  PNj[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("4.9", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny("", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny("E", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("ZUJx6aJ5!`BvdesZ(\"", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("The Character must not be null", "The Character must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny("F.tn", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAnyBut((String) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut("|zV[S8Yugc", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("E07[", "E07[");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "JpZ", "");
      int int0 = StringUtils.indexOfAnyBut(string0, "A");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("Strings must not be null", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut("java.lang.Object@7593f465java.lang.Object@118d677ajava.lang.Object@478015b4java.lang.Object@75ee01fdjava.lang.Object@1fb4e3f9java.lang.Object@6578e1c2java.lang.Object@2292756c", "java.lang.Object@7593f465java.lang.Object@118d677ajava.lang.Object@478015b4java.lang.Object@75ee01fdjava.lang.Object@1fb4e3f9java.lang.Object@6578e1c2java.lang.Object@2292756c");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("POE-y*", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsOnly((String) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("", "0");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly("OS/2", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("VA:GO;k9d", "Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((String) null, "e-x)WkPPyD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly("HP-UX", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone((String) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsNone("(W", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("-&NN+", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("@{owp}3zk?g)Cn?i", "@{owp}3zk?g)Cn?i");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((String) null, "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone("FBZwOG5n", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("{~Rvm8QVj{~Rvm8QVj{~Rvm8QVj", (String) null, 9);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((String) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = StringUtils.indexOfAny("#O$uVpQr:!P':^-4Z", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("{~Rvm8QVj{~Rvm8QVj{~Rvm8QVj", (String) null, 9);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny("[g3K*$C", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = new String[7];
      int int0 = StringUtils.indexOfAny("rC", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[4] = "";
      int int0 = StringUtils.indexOfAny("", stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.lastIndexOfAny((String) null, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("", (String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SecurityException occurred during 1.6 backcompat code";
      int int0 = StringUtils.lastIndexOfAny(" ", stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      int int0 = StringUtils.lastIndexOfAny(" ", stringArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-539));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.substring("TimeToLive of ", (-592));
      assertEquals("TimeToLive of ", string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = StringUtils.substring("", 2226);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.substring("Cannot pad a negative amount: ", (-1), 1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.substring("'JF;#Uxx", 0, Integer.MAX_VALUE);
      assertEquals("'JF;#Uxx", string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.substring("Dl'1u%7d7.&I}it", (-1637), (-1637));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.left("", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.left("`7G<k.9e%|65rR", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.left("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.right("java.vm.version", 1);
      assertEquals("n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.right("", (-1271));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.right("FLOAT", 1551);
      assertNotNull(string0);
      assertEquals("FLOAT", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.mid("Strings must not be null", 8167, 8167);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, 1077, Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.mid("&ssFw\"U\".Mn@>Zp", (-183), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.mid("java.version", (-1), 2368);
      assertEquals("java.version", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.mid("*I4_'#L;C` cmbc", 0, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.substringBefore(". sM", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.substringBefore("|CfLX56", (String) null);
      assertNotNull(string0);
      assertEquals("|CfLX56", string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substringBefore(", Length: ", ", Length: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substringBefore("+kp $L:  PNj[", "Irix");
      assertEquals("+kp $L:  PNj[", string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substringAfter("java.text.Normalizer", "=XFHDw|,K(");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "SJ#6X!Q2J3q(<YX/%e");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substringAfter(",'cb0Vr4}YlEzkmK3v", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substringAfter("@K*F'wz9.@]Y7", "@K*F'wz9.@]Y7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "'JF;#Uxx");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("NoSuchFieldException occurred during 1.6 backcompat code", "[ZCjE");
      assertEquals("NoSuchFieldException occurred during 1.6 backcompat code", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("H:T_{J6g'oN+Ti:h)H", "");
      assertEquals("H:T_{J6g'oN+Ti:h)H", string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("4.0", "4.0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("q>j!ZG", "Z");
      assertEquals("G", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Z", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("4`a81L~%5WLp7k", ",<T,?NfGh");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("(w", "(w");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringBetween("ScDley1L_g]1y\"22i", (String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.leftPad("(wnnot pad a negative amount: ", 1436, ":1]3PtX");
      String string1 = StringUtils.substringBetween(string0, "The character", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Cannot pad a negative amount: ", "Cannot pad a negative amount: ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBetween("=Ip'#J0,RWmW1g", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "1.4");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("1.4", "1.4", ":W");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(":W", "", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "s 7", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "NFD", "NFD");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "1.4", ":W");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.repeat("|", 4330);
      String[] stringArray0 = StringUtils.substringsBetween(string0, "|", "|");
      assertNotNull(stringArray0);
      assertEquals(2165, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "normalize");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("ClassNotFoundException occurred during 1.6 backcompat code", "");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("`\r{\"", "`\r{\"");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("GCfA/1Bq2^", "GCfA/1Bq2^", 1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, 'q');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("1.2", '.');
      assertNotNull(string0);
      assertEquals("2.1", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8192, 'y');
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, 'y');
      assertEquals(8193, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", (String) null, 0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Windows", "f", (-1));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Y", "Y");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Y", "Y");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("5.Tf`r&ZB4l;yi", "java.text.Normalizer");
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("JXK79M}Af", "fA}M97KXJ");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("WRVqq", "WRVqq");
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("s&Ue");
      String[] stringArray1 = StringUtils.splitByWholeSeparator("# hOZU$\"c", "", (-820));
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("sW+K`J8y8/4u/?f9sSS", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(",oyWTyj o3oUD/x\"Y*s");
      assertEquals(15, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '!');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'B', (-1874), (-614));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'a');
      String string0 = StringUtils.join((Object[]) stringArray0, 'a');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.join(objectArray0, 'm');
      assertEquals("mmm", string0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "F", (-481), 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(",bKlWPn56O%xV1k\"a", ")GF;7");
      StringUtils.join((Object[]) stringArray0, "", 757, 0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ". sM";
      String string0 = StringUtils.join((Object[]) stringArray0);
      assertEquals(". sM", string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Iterator<Locale.LanguageRange> iterator0 = arrayList0.iterator();
      String string0 = StringUtils.join(iterator0, '(');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, '+');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0, locale_FilteringMode1);
      String string0 = StringUtils.join((Iterable<?>) enumSet0, '>');
      assertNotNull(string0);
      assertEquals("EXTENDED_FILTERING>IGNORE_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = 796;
      StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 796, '>');
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string0 = StringUtils.join(iterator0, '>');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      TreeSet<String> treeSet0 = new TreeSet<String>(vector0);
      String string0 = StringUtils.join((Iterable<?>) treeSet0, (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, ">(0EKHp$A");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = 127;
      char char0 = '-';
      String string0 = StringUtils.rightPad(" is less than 0: ", 127, '-');
      assertEquals(" is less than 0: --------------------------------------------------------------------------------------------------------------", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Wn", "6.0");
      assertEquals("Wn", string1);
      
      Iterator<Locale> iterator0 = (Iterator<Locale>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string2 = StringUtils.join(iterator0, (String) null);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '0');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "e{NIB)C%:_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("IllegalArgumentException occurred during 1.6 backcompat code");
      assertEquals("IllegalArgumentExceptionoccurredduring1.6backcompatcode", string0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.removeStart("5[mZzrX6)Zcz3G/", "|CfLX56");
      assertEquals("5[mZzrX6)Zcz3G/", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.removeStart("@{owp}3zk?g)Cn?i", "");
      assertEquals("@{owp}3zk?g)Cn?i", string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.removeStart("E", "E");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase((String) null, "&}+rUM%wZ#mNy");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("POE-y*", "V<[m-4w*t8TmxV(<kV");
      assertEquals("POE-y*", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("anE", "");
      assertEquals("anE", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("normalize", "normalize");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "T]w\" Xhq");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.repeat("p{InCombiningDiacriticalMarks}+", "java.vm.vendor vs", (int) '\'');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.removeEnd("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeEnd("8yNwxZ\"", "TimeToLive of ");
      assertEquals("8yNwxZ\"", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.remove("Y", 'q');
      assertEquals("Y", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("G(RSxT#S\"l", "");
      assertEquals("G(RSxT#S\"l", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("E07[", "E07[");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.remove("", "Search and Replace array lengths don't match: ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.remove("normalize", "");
      assertEquals("normalize", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.remove("gbKvP.,JmsP", "java.home");
      assertEquals("gbKvP.,JmsP", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.remove("", '');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.remove(":&WMK#tKuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu", 'u');
      assertEquals(":&WMK#tK", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.replace("Search and Replace array lengths don't match: ", "HP-UX", (String) null, (-1));
      assertEquals("Search and Replace array lengths don't match: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.replace("#PP<L%8ee2XmkHZ", "[D,5WeABf+\"]^/c]u", "F", 0);
      assertEquals("#PP<L%8ee2XmkHZ", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.replace("7$g)=Q", "7$g)=Q", "|TzpmSb%v.%hHt-n2o", 2);
      assertEquals("|TzpmSb%v.%hHt-n2o", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.replace("ro$z+CQN4mH", "ro$z+CQN4mH", "KA?t", (-96));
      assertEquals("KA?t", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.replace("~6f19,NyQ", "~6f19,NyQ", "R@WSTd<6:Z TJx", 256);
      assertEquals("R@WSTd<6:Z TJx", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("|CfLX5", (String[]) null, (String[]) null);
      assertEquals("|CfLX5", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("TIMETOLIVE OF ");
      StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[8];
      String string0 = StringUtils.replaceEachRepeatedly("q`p?zy", stringArray0, stringArray1);
      assertEquals("q`p?zy", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "k";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("k", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: k
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      String string0 = StringUtils.replaceEach("X$.", stringArray0, stringArray0);
      assertEquals("X$.", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G=<=.]tnEt<";
      stringArray0[1] = "G=<=.]tnEt<";
      String string0 = StringUtils.replaceEach("G=<=.]tnEt<", stringArray0, stringArray0);
      assertEquals("G=<=.]tnEt<", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "X$.";
      stringArray0[2] = "G(RSxT#S\"l";
      String string0 = StringUtils.replaceEach("X$.", stringArray0, stringArray0);
      assertEquals("X$.", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "X$.";
      String string0 = StringUtils.replaceEach("X$.", stringArray0, stringArray0);
      assertEquals("X$.", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.replaceChars("os.version", '\'', ';');
      assertEquals("os.version", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'X', 'X');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "", "user.region");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceChars("java.vm.version", "java.vm.version", "4(}f}xY'T>KPuJ");
      assertEquals("4(}(}}Y}}>KPuJ", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.replaceChars("k:", "", "qb4z\"@q");
      assertEquals("k:", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.replaceChars("|c7", "2&6gDdSPAe", (String) null);
      assertEquals("|c7", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.overlay("|CfLX56", (String) null, 64, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "", 1269, (-3824));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.overlay("kOcz+iS4C8", "", (-891), (-891));
      assertEquals("kOcz+iS4C8", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.overlay("Minimum abbreviation width is 4", "", 3040, 3040);
      assertEquals("Minimum abbreviation width is 4", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.chomp("'");
      assertEquals("'", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.chomp("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.chomp(".rj>a{N]=+UB8/(-", "java.specification.version");
      assertEquals(".rj>a{N]=+UB8/(-", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.chomp("org.apache.commons.lang3.StringUtils", (String) null);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.chomp(",bKlWPn56O%xV1k\"a", "");
      assertEquals(",bKlWPn56O%xV1k\"a", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.chop("|CfLX56");
      assertEquals("|CfLX5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "#O$uVpQr:!P':^-4Z", (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.repeat("(W", 1);
      assertEquals("(W", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.repeat("", 3024);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.repeat("ca", 15);
      assertNotNull(string0);
      assertEquals("cacacacacacacacacacacacacacaca", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8194, '@');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 32, "6l`xM");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.rightPad("(9Q", 7, (String) null);
      assertEquals("(9Q    ", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.rightPad("Y hE!R", (-1), "Y hE!R");
      assertEquals("Y hE!R", string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 6, "double");
      assertEquals("double", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0, '4');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8194, 'y');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.leftPad("5[mZzrX6)Zcz3G/", 64, "");
      assertEquals("                                                 5[mZzrX6)Zcz3G/", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.leftPad("Z;VTcvx]/\"<A", 5, "p{incombininupcruizwppw||eehl6+");
      assertEquals("Z;VTcvx]/\"<A", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 4, "N FD");
      assertEquals("N FD", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.center("", 10, "@0/YBu?wt{P+L");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = StringUtils.length("|CfLX56");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      int int0 = StringUtils.length((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, '6');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.center("c4m>QMcw- z'\"@~d", 2466, 'o');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.center("XMGCZhq;&S'<J", 5, 't');
      assertEquals("XMGCZhq;&S'<J", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.center("*I4_'#L;C` cmbc", 0, "");
      assertEquals("*I4_'#L;C` cmbc", string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.center("", 120, "");
      assertEquals("                                                                                                                        ", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.center("@0/YBu?wt{P+L", 10, "@0/YBu?wt{P+L");
      assertEquals("@0/YBu?wt{P+L", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.upperCase("TimeToLive of ");
      assertEquals("TIMETOLIVE OF ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      String string0 = StringUtils.upperCase("float", locale0);
      assertEquals("FLOAT", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Locale locale0 = Locale.US;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      String string0 = StringUtils.lowerCase(", Length: ", locale0);
      assertEquals(", length: ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.capitalize("p{incombupcruizwppw||eehl6rks}+");
      assertEquals("P{incombupcruizwppw||eehl6rks}+", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("AIX");
      assertEquals("aIX", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.swapCase(", Length: ");
      assertEquals(", lENGTH: ", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      int int0 = StringUtils.countMatches((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      int int0 = StringUtils.countMatches("(W", "(W");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      int int0 = StringUtils.countMatches("F", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("IS^r)QDKJ(nyh*X&%5");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("slbbr-Iz8FArRd{j_S=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("NFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("ClassNotFoundException occurred during 1.6 backcompat code");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(":QF6haT");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("7CBuM<RK[o7DGC#*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("4MUL!] gi^s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("1|3@BXK");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" vr ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("i]6s-BxtgZG7Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("normalize");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("G=<=.]tnEt<");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("Z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = StringUtils.defaultString("I`H|-*?CbG/");
      assertEquals("I`H|-*?CbG/", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("[]", "OJA&&(|}p");
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.reverse("JXK79M}Af");
      assertEquals("fA}M97KXJ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '?');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, (-874), (-2365));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("~313q h93", (-2399), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("java.specification.nam", 485, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.abbreviate("NoSuchFieldException occurred during 1.6 backcompat codeNoSuchFieldException occurred during 1.6 backcompat code", 7, 7);
      assertEquals("...i...", string0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.abbreviate("4s<di#:o~~+^k^ vs ", 32, 10);
      assertEquals("...^k^ vs ", string0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.difference("", "G(RSxT#S\"l");
      assertEquals("G(RSxT#S\"l", string0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "gXc{$[D~F:&rjUbFt");
      assertEquals("gXc{$[D~F:&rjUbFt", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.difference("Q", (String) null);
      assertEquals("Q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.difference(",oyWTyj o3oUD/x\"Y*s", ",oyWTyj o3oUD/x\"Y*s");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String) null, "~v&WS66G9:Z4bq6yfp");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("J", (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("GL", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.ArrayUtils");
      assertEquals(25, int0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference("", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((String[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("4MUL!] gi^s");
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("vxt,?=Ioks^dbzcv}", (String) null);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "q?*xD10/vXB>HQ,";
      stringArray0[1] = "q?*xD10/vXB>HQ,";
      stringArray0[2] = "q?*xD10/vXB>HQ,";
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.specification.vendo";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("`\r{\"", "u3x");
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("`\r{\"", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "java.specification.vendo";
      stringArray0[1] = "java.specification.vendor";
      stringArray0[2] = "java.specification.vendor";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("java.specification.vendo", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((String) null, "U9ju~AN/V$)+Mh~,;hO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("G=<=.]tnEt<", "CftV7\"&4FUe");
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance("dNW]T_MQwa", "");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((String) null, "n@V\"e.NU@wzqPt{Wm");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((String) null, (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny((String) null, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.startsWithAny("[VF0BjOx6bZ73g>yqA", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny(" is less than 0:  is less than 0: ", (String[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      boolean boolean0 = StringUtils.startsWithAny("java.vm.specification.name", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((String) null, "OS/2");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase("4kMOrxn", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((String) null, (String) null);
      assertTrue(boolean0);
  }
}
