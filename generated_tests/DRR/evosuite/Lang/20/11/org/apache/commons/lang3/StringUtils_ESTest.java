/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 15:27:35 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class StringUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Y2`~^7@4Z},35S`");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.abbreviate(", Length: ", 256);
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("4CNlJN[g4,F8", "l");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "6~i'*$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("4CNlJN[g4,F8");
      boolean boolean0 = StringUtils.startsWithAny("4CNlJN[g4,F8", stringArray0);
      assertTrue(boolean0);
      assertEquals(10, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 637);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("{_ 0m", "<\"kDb7@Br'k*z", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-299));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "<\"kDb7@Br'k*z", 736);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Arguments cannot both be null", "");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", '\\');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.replace("y&%x+)-wAOw?)lhV]", (String) null, ";Lrj@nd9%E$8 ");
      assertEquals("y&%x+)-wAOw?)lhV]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "VeY:");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("4CNlJN[g4,F8");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ", '", charSequence0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank(";uXCf@|} I9O");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("c0P-JI(&$ANH6NSLP");
      assertEquals("c0P-JI(&$ANH6NSLP", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("}@");
      assertEquals("}@", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToNull("O*1jA=b5sO.");
      assertNotNull(string0);
      assertEquals("O*1jA=b5sO.", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Z(cWIG,Q;#HF<(!X");
      assertEquals("Z(cWIG,Q;#HF<(!X", string0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.strip("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", "|l+Xo0mrj=");
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Arguments cannot both be null");
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertEquals(9, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.strip(".,?myo,3c", "");
      assertEquals(".,?myo,3c", string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.stripStart("e@>9l@Yd+`8g", "e@>9l@Yd+`8g");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.stripEnd(stringArray0[1], "*r9]+`d@");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.strip("The character ");
      assertEquals("The character", string0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripEnd("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.stripAccents("6[Lzs1NdgAh4tqhbk");
      assertEquals("6[Lzs1NdgAh4tqhbk", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) " is not in the range '0' - '9'", (CharSequence) "G!Cl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqf-)l=.Nv'It");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "5", (-1946));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "l", 7, 560);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", 7, 560);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", (CharSequence) "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "8JB@j4W7_3@;.", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss", 24);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, 64);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 3019);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("NljhnG76:9dL!2%7[4I", (CharSequence) null, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("Ra}fTrQJHAa&", "Ra}fTrQJHAa&", 3178);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 4096);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "~MNWH'", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf(", Length: ", ", Length: ", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "]hkgv9", (CharSequence) "]hkgv9", (-250));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "]hkgv9", (CharSequence) "]hkgv9", 48);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ", '", (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "sun.text.Normalizer is not available", (CharSequence) "index: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", Integer.MAX_VALUE);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 312);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "^ExV!feD3i^;GGa,]J", 0, (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-243), (-243));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "|R^zM[-\"h", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "|R^zM[-\"h", (CharSequence) "DISPLAYFORMATDISPLAYFORMATDISPLAYFORMATFORMATDISPLAYDISPLAY");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) ":X8/v/RGa7=kH.", (CharSequence) ":X8/v/RGa7=kH.", 2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "6~i'*$", (CharSequence) null, 1486);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "a", (CharSequence) " o");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ":X8/v/RGa7=kH.", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 822);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "*9}iAZ1Zc}{(O_g'sgVmHYHJ[c", (CharSequence) "..._g'sgVm...", 24);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "DISPLAYFORMATDISPLAYFORMATDISPLAYFORMATFORMATDISPLAYDISPLAY", 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, 822);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "of ", 32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "|R^zM[-\"h", (CharSequence) "|R^zM[-\"h");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "j$wkw{;n0t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("c0P-JI(&$ANH6NSLP", ", '");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("', is neither of type Map.Entry nor an Array");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace(":X8/v/RGa7=kH.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "s", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length:", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Cannot store ", "Cannot store ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      int int0 = StringUtils.indexOfAny((CharSequence) "VH39A-,0sSKN", charArray0);
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[2] = 'd';
      int int0 = StringUtils.indexOfAny((CharSequence) "Threshold must not be negative", charArray0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) null, "^ExV!feD3i^;GGa,]J");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "Arguments cannot both be null", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "java.text.Normalizer$Form", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "decompose", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "2SNj{-RyEF/Q#kvlJ", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "`k", (CharSequence) "`k");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "C<~DE/vD9ulh=", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Arguments cannot both be null", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'q';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Strings must not be null", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.leftPad("', is neither of type Map.Entry nor an Array", 0, (String) null);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) "', is neither of type Map.Entry nor an Array");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "xplX", (CharSequence) "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "3V", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, "NFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "..", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      boolean boolean0 = StringUtils.containsOnly(charSequence0, "NFD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "s", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "TimeToLive ofTimeToLive of", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[1] = 'r';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.containsNone(charSequenceArray0[3], "|cWC]JC&kMj y");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) ", Length:", ", Length: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("#,.A", "Arguments cannot both be null", (-1032));
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "n+4<25[.!uY!W", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.indexOfAny((CharSequence) "2SNj{-RyEF/Q#kvlJ", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("sun.text.Normalizer is not available", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "T?6U0XJ*:R3PX7";
      charSequenceArray0[1] = (CharSequence) "T?6U0XJ*:R3PX7";
      int int0 = StringUtils.lastIndexOfAny("T?6U0XJ*:R3PX7", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.substring(">KWYD", 1505);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 16);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.substring("", (-347));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1439, (-363));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.substring("", (-599), (-846));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substring("am6aW", 0, 1029);
      assertEquals("am6aW", string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.substring("{%:\"%8NiGNlc", (-250), 48);
      assertEquals("{%:\"%8NiGNlc", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1), (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.left("Lvm}Gh9(Vq!B[PE\"=", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 822);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.left("NljhnG76:9dL!2%7[4I", (-1596));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.left("wVt=", 1001);
      assertEquals("wVt=", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.right("ymI", 2);
      assertEquals("mI", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-2475));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.right(" vs ", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.right("('nyT", 15);
      assertNotNull(string0);
      assertEquals("('nyT", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-1219), 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.mid("Strings must not be null", 1, (-562));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.mid("", 1294, 1486);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.mid("", 0, 1575);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.mid("The stripAc", (-5), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringBefore("e@>9l@Yd+`8g", "FKBJ{*j,-4U=Wn)F");
      assertEquals("e@>9l@Yd+`8g", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Ab2", (String) null);
      assertEquals("Ab2", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringBefore(".Z", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringBefore("/UfZSF^Y jD`h", "/UfZSF^Y jD`h");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringAfter(".[G^{m4.iYU>", "a{t|&V0");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "TTTTTTTTTTTT");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringAfter("java.text.Normalizer", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringAfter("-p:B0.g]ag))k-@", "");
      assertEquals("-p:B0.g]ag))k-@", string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("q`/I*_)K[E", (String) null);
      assertNotNull(string0);
      assertEquals("q`/I*_)K[E", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("' ,", "' ,");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("decompose", "JNO:_");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("@JeG9", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.apache.commons.lang3.CharUtils", "org.apache.commons.lang3.CharUtils");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("g^6058GIpaXL>IM", "a");
      assertEquals("XL>IM", string0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.ArrayUtils", (String) null, "', HAS A LENGTH LESS THAN 2");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringBetween("sun.text.Normalizer is not available", "java.text.Normalizer$FormIllegalArgumentException occurredIllegalArgumentException occurred", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.substringBetween("The String must not be empt", "The String must not be empt", "xJB{");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "&/YIHqz@dQwt0O:\"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||Index: ", "&/YIHqz@dQwt0O:\"||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||Index: ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("java.text.Normalizer", "q`/I*_)K[E", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", (String) null, "s");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("a", "a", "N0I J8=vSgGm!");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "org.apache.commons.lang3.ObjectUtils", "org.apache.commons.lang3.ObjectUtils");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "a", "a");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetweenll", ":jVF_27N*gtfcc_Gvb");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("4CNlJN[g4,F8", "", (int) '\\');
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" o", " o");
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("4CNlJN[g4,F8", "l", (int) '%');
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, (-1113));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '$');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", 'p');
      assertNotNull(string0);
      assertEquals("Accents(CharSequence) method requires at least Java 1.6 or a Sun JVMpThe stri", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" in an array of ", (String) null, 0);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The String must not be empt", "", 547);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("7", "7", 312);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.leftPad("u!Uxz@3>M1-R^/8t", 2941, '~');
      String[] stringArray0 = StringUtils.split("sun.text.Normalizer is not available", string0, 64);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Character must not be null", "The Character must not be null");
      assertEquals(31, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 's');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'y', 14, 14);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, 'g', 113, (-1032));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0, 's');
      assertNotNull(string0);
      assertEquals("sssssss", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.join((Locale.Category[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("We", "Threshold must not be negative");
      String string1 = StringUtils.join((Object[]) null, string0, (-1), 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "wVt=", 0, (-846));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      String string0 = StringUtils.join(locale_CategoryArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-291));
      integerArray0[0] = integer0;
      String string0 = StringUtils.join(integerArray0);
      assertEquals("-291", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, '2');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'y');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      enumSet0.add(locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, '2');
      assertEquals("DISPLAY2FORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>(2941, 2941);
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "u!Uxz@3>M1-R^/8t");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.swapCase("[pNOti7NquirGXt");
      String string1 = StringUtils.join((Iterator<?>) null, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      locale_CategoryArray0[2] = locale_Category0;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_Category0;
      locale_CategoryArray0[6] = locale_Category0;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      locale_CategoryArray0[0] = locale_Category0;
      locale_CategoryArray0[1] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category1;
      locale_CategoryArray0[3] = locale_Category0;
      locale_CategoryArray0[4] = locale_Category0;
      locale_CategoryArray0[5] = locale_CategoryArray0[2];
      locale_CategoryArray0[6] = locale_Category0;
      locale_CategoryArray0[7] = locale_Category0;
      locale_CategoryArray0[8] = locale_Category0;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_CategoryArray0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("DISPLAYFORMAT", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("Cloneable type ");
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "-m4v");
      assertFalse(listIterator0.hasNext());
      assertEquals("-m4vCloneable type ", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, 'p');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, 'H');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "?r_s$2X+id");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("xt!dyo!]\r]wma");
      assertEquals("xt!dyo!]]wma", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeStart("V!G' ;-/P#RCc+E#%", "C<~DE/vD9ulh=");
      assertEquals("V!G' ;-/P#RCc+E#%", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeStart(", Length: 0", (String) null);
      assertNotNull(string0);
      assertEquals(", Length: 0", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeStart("dgbKmrw!.=Dx!v)", "dgbKmrw!.=Dx!v)");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "fCbA0^K+$g");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(" is not in the range '0' - '9'", "4CNlJN[g4,F8");
      assertEquals(" is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("java.text.Normalizer$Form", "");
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("<\"kDb7@Br'k*z", "<\"kDb7@Br'k*z");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "Minimum abbreviation width with offset is 7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.removeEnd("<\"kDb7@Br'k*z", (String) null);
      assertNotNull(string0);
      assertEquals("<\"kDb7@Br'k*z", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.repeat("", "\"", 19);
      assertNotNull(string0);
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.removeEnd("dJ&ZHzR-ef}MB@", "> /a6");
      assertEquals("dJ&ZHzR-ef}MB@", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("qOl>]QS?]PGWc_gb=", "");
      assertEquals("qOl>]QS?]PGWc_gb=", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("The stripAc", "The stripAc");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.remove
      assertEqualsstring0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.remove("X[}]`lx[$$UbS", "SHu$dEc");
      assertEquals("X[}]`lx[$$UbS", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.remove("", '*');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.remove("4CNlJN[g4,F8", '\\');
      assertEquals("4CNlJN[g4,F8", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove("x'b ", 'b');
      assertEquals("x' ", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("The Character must not be null", "The Character must not be null", (String) null);
      assertNotNull(string0);
      assertEquals("The Character must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.replace("T|9uZ#", "NFD", "", 0);
      assertEquals("T|9uZ#", string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replace("java.text.Normalizer$Form", "java.text.Normalizer$Form", " ", 305);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.replace("Z07Ml'p`0yC198lHOu", "Z07Ml'p`0yC198lHOu", "Z07Ml'p`0yC198lHOu");
      assertEquals("Z07Ml'p`0yC198lHOu", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("&B)'Q:4=$9S\";qvJOi", "&B)'Q:4=$9S\";qvJOi", ", Length: ");
      assertEquals(", Length: ", string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.replaceEachRepeatedly("Array and element cannot both be null", stringArray0, (String[]) null);
      assertEquals("Array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.replaceEach("", (String[]) null, stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("efZ");
      String string0 = StringUtils.replaceEach("efZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZer 2v\"L;ut /2agefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZef", (String[]) null, stringArray0);
      assertEquals("efZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZer 2v\"L;ut /2agefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZefZef", string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.replaceEach("PF=pPdb?L$9i^", stringArray0, stringArray0);
      assertEquals("PF=pPdb?L$9i^", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String[] stringArray1 = new String[7];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("%FEt5C*z", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".e@I?9iNMpiC]*-,xZ1";
      String string0 = StringUtils.replaceEachRepeatedly("t?e/+;=QIiq!E!5<.", stringArray0, stringArray0);
      assertEquals("t?e/+;=QIiq!E!5<.", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<\"kDb7@Br'k*z";
      stringArray0[1] = "<\"kDb7@Br'k*z";
      String string0 = StringUtils.replaceEach("<\"kDb7@Br'k*z", stringArray0, stringArray0);
      assertEquals("<\"kDb7@Br'k*z", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BXOj|!PKZ\"|)o]0";
      String string0 = "\\u000";
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("BXOj|!PKZ\"|)o]0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: BXOj|!PKZ\"|)o]0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".e@I?9iNMpiC]*-,xZ1";
      stringArray0[1] = "";
      String string0 = StringUtils.replaceEach(".e@I?9iNMpiC]*-,xZ1", stringArray0, stringArray0);
      assertEquals(".e@I?9iNMpiC]*-,xZ1", string0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\" yG,R<C$4LnlF|#%[F", '!', '!');
      assertEquals("\" yG,R<C$4LnlF|#%[F", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, 'n', 'n');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", (String) null, "j$wkw{;n0t");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Jv[}wFWLNA@)d|h\"@/B", "Jv[}wFWLNA@)d|h\"@/B", "Jv[}wFWLNA@)d|h\"@/B");
      assertEquals("Jv[}wFWLNA@)d|h\"@/B", string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The String must not be empty", (String) null, "");
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceChars("sun.text.Normalizer is not available", "{]>p=^I|=X$mA", (String) null);
      assertEquals("sun.text.Noralizer is not available", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.replaceChars("N)", "P#=E", "\"`DHQ:#01");
      assertEquals("N)", string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.overlay("p", "p", (-2205), (-2450));
      assertNotNull(string0);
      assertEquals("pp", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "", 0, 585);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.overlay("c0P-JI(&$ANH6NSLP", (String) null, 0, 32);
      String string1 = StringUtils.chomp(string0, ".e@I?9iNMpiC]*-,xZ1");
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.overlay("`Mv>-!X$7fJQeK\")C`", "", 32, 692);
      assertEquals("`Mv>-!X$7fJQeK\")C`", string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.overlay("HF 5eJ", "", 1931, (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.chomp("\" yG,R<C$4LnlF|#%[F");
      assertEquals("\" yG,R<C$4LnlF|#%[F", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.chomp("a");
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.chomp("efZ", "{}");
      assertEquals("efZ", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.chomp("N-)", (String) null);
      assertEquals("N-)", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.chomp("TimeToLive of ", "TimeToLive of ");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chop("', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2");
      assertEquals("', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.chop("#");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.repeat("java.text.Normalizer$Form", "IllegalArgumentException occurred", 1);
      assertNotNull(string0);
      assertEquals("java.text.Normalizer$Form", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.repeat("", 3411);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.repeat("::", 2416);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "v!GCjRnFsfZ4$", (-636));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, (-458));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 32, '#');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.rightPad(" ", 8206, ']');
      String string1 = StringUtils.rightPad("clone", 27, string0);
      assertEquals("clone ]]]]]]]]]]]]]]]]]]]]]", string1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 1167, "java.text.Normaizer");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.rightPad("u}dU:CU:o)ByBw3g6", (-220), "");
      assertEquals("u}dU:CU:o)ByBw3g6", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 32, "");
      assertEquals("                                ", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.center("{Fjjt\"j9?IO", 32, "{Fjjt\"j9?IO");
      assertEquals("{Fjjt\"j9?I{Fjjt\"j9?IO{Fjjt\"j9?IO", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 38, 'E');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 8208, 'Q');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, (-846), (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.leftPad("t?e/+;=QIiq!E!5<.", 3464, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.center("{Fjjt\"j9?IO", 32, "4C'xZLBbx");
      assertEquals("4C'xZLBbx{Fjjt\"j9?IO4C'xZLBbx4", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 32);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.center("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", 306);
      assertEquals("                                                                                                                  The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM                                                                                                                   ", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.center("@Xb(", 1);
      assertEquals("@Xb(", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, "=tZ58P*i<x4jQ=3sjQ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.center("2?nQ", 0, ":jyS");
      assertEquals("2?nQ", string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.center("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[]^_`abcdefghijklmnopqrstuvwxyz{|}~", (-2041));
      String string1 = StringUtils.center(string0, 4096, (String) null);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.center("z>QV0a2EA+\"_j,?T", 13, "..._g'sgVm...");
      assertEquals("z>QV0a2EA+\"_j,?T", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.upperCase("Z07Ml'p`0yC198lHOu");
      assertNotNull(string0);
      assertEquals("Z07ML'P`0YC198LHOU", string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.upperCase("o", (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null, (Locale) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.lowerCase("Array and element cannot both be null");
      assertEquals("array and element cannot both be null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      String string0 = StringUtils.lowerCase("~F@)Sj{6Lu-r3{", locale0);
      assertEquals("~f@)sj{6lu-r3{", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.capitalize("ob");
      assertEquals("Ob", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("4CNlJN[g4,F8");
      assertEquals("4CNlJN[g4,F8", string0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      int int0 = StringUtils.countMatches("", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      int int0 = StringUtils.countMatches(", Length: 0", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      int int0 = StringUtils.countMatches("DISPLAYFORMATDISPLAYFORMATDISPLAYFORMATFORMATDISPLAYDISPLAY", "DISPLAYFORMATDISPLAYFORMATDISPLAYFORMATFORMATDISPLAYDISPLAY");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("qHX");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("885#>rbhdJ36C/3-(885#>rbhdJ36C/3-(885#>rbhdJ36C/3-(885#>rbhdJ36C/3-(885#>rbhdJ36C/3-(885#>rbhdJ36C/3-(885#>rbhdJ36C/3-(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Array and element cannot both be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Z_&IBQg");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("#M=qs`9I8  DWD");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("id9rm");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("Jv[}wFWLNA@)d|h\"@/B");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.repeat("InvocationTargetException occurred", 122);
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("<\"kDb7@Br'k*z");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("pe7DK}'/ugpe7DK}'/ug");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("<\"kDb7@Br'k*z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("4Q*Kw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespacel");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("Cannot store ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(565);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      boolean boolean0 = StringUtils.isAllLowerCase(stringBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase(">$:\"]r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("NA");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.defaultString("N2\"x}`'Qv(Vx(H");
      assertEquals("N2\"x}`'Qv(Vx(H", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.defaultString("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("V!G' ;-/P#RCc+E#%", "C<~DE/vD9ulh=");
      assertEquals("V!G' ;-/P#RCc+E#%", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) ";;o$", (CharSequence) "#JU@|");
      assertEquals(";;o$", charSequence0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.reverse("6g3wByB)o:UC:Ud}u");
      assertEquals("u}dU:CU:o)ByBw3g6", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '%');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 14, 5);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("2?nQ", 9, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.abbreviate("PnN>U,VT=Gir", 90, 10);
      assertEquals("...,VT=Gir", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.abbreviate("*9}iAZ1Zc}{(O_g'sgVmHYHJ[c", 13, 13);
      assertEquals("..._g'sgVm...", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("|rE8<:RH", 409, 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle((String) null, "6~i'*$", 1486);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("};Y(p", "Z_&IBQg", 3208);
      assertEquals("};Y(p", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("X[}]`lx[$$UbS", "", 0);
      assertEquals("X[}]`lx[$$UbS", string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("The String must not be empty", "', has a length less than 2", (-1));
      assertEquals("The String must not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("*9}Iaz1zC}{(o_G'SGvMhyhj[C", "z>QV0a2EA+\"_j,?T", 24);
      assertEquals("*9}Iz>QV0a2EA+\"_j,?Thj[C", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "a{t|&V0");
      assertNotNull(string0);
      assertEquals("a{t|&V0", string0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.difference("`*%l\"D!H,Q", (String) null);
      assertEquals("`*%l\"D!H,Q", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.difference("", ".,?myo,3c");
      assertEquals(".,?myo,3c", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "', is neither of type Map.Entry nor an Array");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "^a*o(0*D336", (CharSequence) "^a*o(0*D336");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "decompose", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "decompose", (CharSequence) ", Length: ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".e@I?9iNMpiC]*-,xZ1";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "decompose*9}iAZ1Zc}{(O_g'sgVmHYHJ[c";
      charSequenceArray0[1] = (CharSequence) ", '";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Zo<K4F$`!> w5_(fc+2";
      charSequenceArray0[1] = (CharSequence) "Zo<K4F$`!> w5_(fc+2";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TimeToLive of ";
      stringArray0[1] = "TimeToLive of";
      stringArray0[2] = "TimeToLive of ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("TimeToLive of", string0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 0);
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) ".e@I?9iNMpiC]*-,xZ1", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Jv[}wFWLNA@)d|h\"@/B");
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Ra}fTrQJHAa&", (CharSequence) "");
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = "\\u000";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "fklJ2)", (CharSequence) string0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "=tZ58P*i<x4jQ=3sjQ", (CharSequence) "=tZ58P*i<x4jQ=3sjQ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "", (-553));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " vs ", (CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "JNO:_", (CharSequence) null, 111);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "java.text.Normalizer$Form", (CharSequence) "java.text.Normalizer$Form", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Arguments cannot both be null", 2390);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "`Mv>-!X$7fJQeK\")C`", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ";;o$", (CharSequence) "#JU@|", 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "G!Cl", (CharSequence) "", 7);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Arguments cannot both be null", (CharSequence) "#,.A", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "^a*o(0*D336", (CharSequence) "^a*o(0*D336", 9);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "=!{4.@AX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.startsWithAny("c0P-JI(&$ANH6NSLPc0P-JI(&$ANH6NSLP", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithAny("XX9}drlUjV 4:]", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "y2`~^7@4Z},35S`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("QR{nVAX<", "7pAuJ7b@chgv6b{z;k");
      assertEquals("QR{nVAX<", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.normalizeSpace(stringArray0[0]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Ob", "e@>9l@Yd+`8g", (-1));
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.endsWithAny("Zo<K4F$`!> w5_(fc+2", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "D+`8tZNi`zj bM!-7", (-1817));
      boolean boolean0 = StringUtils.endsWithAny("TLG9>D}E4", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Zo<K4F$`!> w5_(fc+2";
      boolean boolean0 = StringUtils.endsWithAny("Zo<K4F$`!> w5_(fc+2", charSequenceArray0);
      assertTrue(boolean0);
  }
}
