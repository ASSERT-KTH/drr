/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 16:25:59 GMT 2019
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayDeque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

 
public class StringUtils_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 6580);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("BlH}Wy!Dh~!ug6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.abbreviate((String) null, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("k+XU", ":5Ehq~#wZ OO0NfQ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("#?|ry\"J{;x", "", 10);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Strings must not be null", "org.apache.commons.lang3.StringUtils");
      assertEquals("Strings must not be null", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf(string0, "1.-KB><rn\"E#", (-882));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "q\"N@at)", (CharSequence) "%B,lhe");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("", "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.rightPad(" vs ", (-260));
      assertNotNull(string0);
      assertEquals(" vs ", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("mP$+[v*n", "r%Tr95exVT6fO<P_ZM", (-1));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "IllegalAccessException occurred");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("P=&=>${<O\"V5i:F;z", "");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny(")c&-.e2Mj8p/<&", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "K-K-");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.replace("q\"N@at)", "", (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("UWS?-A8_h", "UWS?-A8_h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotEmpty("?2lr'o+<A1[I:~+/|I");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("                                                                                                                                                                                                                                                                                                              ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("V, has a length lesCthan 2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("NFD");
      assertEquals("NFD", string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.stripToNull("(Z$]*T%");
      assertNotNull(string0);
      assertEquals("(Z$]*T%", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.stripStart((String) null, "68$_ML");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.stripStart("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.strip("(Z$]*T%", "");
      assertEquals("(Z$]*T%", string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty(" ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "(";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "ZRa$fexK%");
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.stripStart("The Character must not be null", "The Character must not be null");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Array element ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '\"');
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.stripAccents((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "kvy?<", (CharSequence) "z%0#t");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "s+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("=Yb3x5b;\"{db3@BJZLi", "=Yb3x5b;\"{db3@BJZLi");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = StringUtils.equalsIgnoreCase("InvocationTargetException occurred", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "[E7f{|6YM)>", (-240));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 622);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "dMo", (-1), 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", (-1), (-1731));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "**o%");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "rv}W", (CharSequence) "rv");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "1\"Z3{|,Y@ \"lu/3", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "t,fhG|v3o-", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-2534));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "                                                                                                                                                                                                                                                                                                              ", (CharSequence) null, 302);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, "Search and Replace array lengths don't match: ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("K-K-", (CharSequence) null, (-477));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("(", "", 2903);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("-f`_uHg#aRzujs%P", "-f`_uHg#aRzujs%P", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3141);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("-f`_uHg#aRzujs%P", "-f`_uHg#aRzujs%P", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "                                                                                                                                                                                                                                                                                                              ", (CharSequence) "", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "l", (CharSequence) "", 2181);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "sun.text.Normalizer";
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "sun.text.Normalizer", charSequenceArray0[0]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "NFD", 1875);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-3308));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "sun.text.Normalizer is not available", 3692, 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-3992), (-3992));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "{}");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) ")a 9e KWNk4", 2520);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "nBk\"4#0lY6!6}", 256);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = StringUtils.repeat('-', 1895);
      String[] stringArray0 = new String[6];
      stringArray0[1] = string0;
      int int0 = StringUtils.lastIndexOf((CharSequence) stringArray0[1], (CharSequence) stringArray0[0], 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.center("%RvM.b2_ ubK&V@b$E~q>EFo^@8wa", 1136, 'i');
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1133);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "i<$>by7qTm", (CharSequence) "i<$>by7qTm", 2041);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Tt8eA%5TST", (CharSequence) "q33a(l]!*qLBnK");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "V,')#vLltwvFRJ!v", (CharSequence) "hgcdHX80N|", 705);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "UcFD", (-1335));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-2215));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "Array element ", 97);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(3448);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) stringBuffer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "nBk\"4#0lY6!6}", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) ":$,q;x,X.n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("b}$s&", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("Array element", "|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace(")*3N&_V4:.N8M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("gF HZd&");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) " iBs les than 0: ", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "`=*", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "aH/s'n_hl7", "aH/s'n_hl7");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[1] = ';';
      int int0 = StringUtils.indexOfAny((CharSequence) "hw;", charArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      int int0 = StringUtils.indexOfAny((CharSequence) "The Character must not be null", charArray0);
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      int int0 = StringUtils.indexOfAny((CharSequence) charBuffer0, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) ".", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "i<$>by7qTm ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsAny((CharSequence) " iBs les than 0: ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "ZRa$fexK%", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'r';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "sun.text.Normalizer", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.containsAny((CharSequence) stringArray0[1], (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...<<<<<<<<<<<<..", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "&s$}b", "b}$s&");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "g?kouh/pRMMI$");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "|rT", (CharSequence) " iBs les than 0: ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(l\"", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "RAqNS_V", (CharSequence) "RAqNS_V");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "X^AJ", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "*");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "oos/Fv8OWz", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " fo yarra na ni ", charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "(l\"");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " is less than 0: ", (String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "ut?vd", charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "6", (char[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.center("%RvM.b2_ ubK&V@b$E~q>EFo^@8wa", 1136, 'i');
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Z%?g(i05T", string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "ftn`7}5Y._(OUa");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "E~q>EFo^@8wa", stringArray0[0]);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "\\u00";
      int int0 = StringUtils.indexOfAny((CharSequence) string0, (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "sun.text.Normalizer";
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence
      int int0 = StringUtils.indexOfAny((CharSequencecharSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence
      charSequenceArray0[1] = (CharSequence
      int int0 = StringUtils.indexOfAny((CharSequencecharSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType(";prGiV&)~@dD]HA");
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(13, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfAny("Cannot store", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.substring("nBk\"4#0lY6!6}", 256);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, (-1490));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.substring("", (-3308));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 65, 442);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.substring("", 0, 4096);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.substring("<Ej[", (-1), 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.substring("'5L~", (-572), (-572));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.left("", 256);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.left((String) null, (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.left("p{InCombiningDiacriticalMarks}+", (-259));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.left("J2^Qjc>E>oE1n{1dno", 0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.right("|8F3uQ[+a+<", 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-1155));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.right("", (-1803));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.mid(";nwGPOBo[", (-266), (-767));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.mid((String) null, (-428), (-428));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.mid("", 10, Integer.MAX_VALUE);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.mid("/k}w", (-2263), 124);
      assertEquals("/k}w", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.mid("@FsVOPsGtV@d=k8q", 0, 10);
      assertEquals("@FsVOPsGtV", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Arguments cannot both be null", (String) null);
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.substringBefore("q\"N@at)", "q\"N@at)");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.substringBefore("sn<Wp", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.substringBefore("', is neither of type Map.Entry nor an Array", "*,LqNU6PcN_FW/G");
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringAfter("`O<w", "~'H");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.substringAfter("i:Bfn}pASj", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.substringAfter("z@E3VB{ ~", "");
      assertEquals("z@E3VB{ ~", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, ":c]aeT{*36\"hHZ.");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Index: ", "9&h~UV9a");
      assertEquals("Index: ", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("-#", "");
      assertEquals("-#", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("E~q>EFo^@8wa", "E~q>EFo^@8wa");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("aH/s'n_hl7", "aH/s'n_hl7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("fD1|D('%}", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("b}$s&", "/");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Pq", "P");
      assertEquals("q", string0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, ".yE:_iL';%V:=R", "$d,i)E=kqC.-S@v=");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.substringBetween("s+", (String) null, "s+");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.substringBetween("36@X(/", "g`hlE", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.substringBetween("hgcdHX80N|", "hgcdHX80N|", "hgcdHX80N|");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "5;In!<N2wiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("java.text.Normalizer", (String) null, "]NsiqqkV6");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" in an array of ", "]SMSjdiQVs", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("z%0#t", "z%0#t", "z%0#t");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.repeat("FD]G&3IswO", "/KW", 2406);
      String[] stringArray0 = StringUtils.substringsBetween(string0, "/KW", "fRR&l8/P45");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.repeat("FD]G&3IswO", "rv}W", 2367);
      String[] stringArray0 = StringUtils.substringsBetween(string0, "rv}W", "rv}W");
      assertEquals(1183, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Z8g");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("S", (String) null, (-353));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("+! 'hvH2ATp3wE<{QX", "p", 0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" is less than 0: ", " is less than 0: ", (-2559));
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'n');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("JkTLr8:", ':');
      assertNotNull(string0);
      assertEquals("JkTLr8", string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("ip0ng2y/$^.y&b", 'i');
      assertEquals("p0ng2y/$^.y&b", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(" in an array of ");
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" is less than 0: ", (String) null, (-2559));
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("(Z$]*T%", "%");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("RAqNS_Vnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", "RAqNS_Vnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", 256);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("=Yb3x5b;\"{db3@BJZLi");
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, '_');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'J', 3433, 3433);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("heQ21\u0010", 'Q');
      assertEquals("21\u0010Qhe", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      String string0 = StringUtils.join(objectArray0, ' ');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "(=u5", 579, Integer.MAX_VALUE);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("i<$>by7qTm ", " in an array of ");
      StringUtils.join((Object[]) stringArray0, " fo yarra na ni ", 2041, 0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "&I2}]@XHy");
      assertEquals("&I2}]@XHy&I2}]@XHy&I2}]@XHy&I2}]@XHy&I2}]@XHy&I2}]@XHy", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'V');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "Threshold must not be negative");
      linkedList0.add((Object) "Threshold must not be negative");
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, 'u');
      assertEquals("Threshold must not be negativeuThreshold must not be negative", string0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Search and Replace array lengths don't match: ");
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match: ", 798);
      String string1 = StringUtils.trimToNull("Search and Replace array lengths don't match: ");
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = new Integer((-1));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-1));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(798);
      integerArray0[2] = integer2;
      int int1 = 0;
      Integer integer3 = new Integer(0);
      integerArray0[3] = integer3;
      String string2 = StringUtils.join(integerArray0);
      assertEquals("-1-17980", string2);
      
      String string3 = StringUtils.repeat("Search and Replace array lengths don't match:", "Search and Replace array lengths don't match:", int1);
      assertEquals("", string3);
      
      StringUtils.stripToNull("");
      StringUtils.join((Object[]) integerArray0, 'U', 764, 0);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray0[2] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("-1-17980", charSequenceArray0);
      assertTrue(boolean0);
      
      Vector<Integer> vector0 = new Vector<Integer>(1923);
      StringUtils.join((Iterable<?>) vector0, '');
      String string4 = StringUtils.repeat((String) null, (int) integerArray0[0]);
      assertNull(string4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertTrue(int2 == int0);
      
      Iterator<CharBuffer> iterator0 = (Iterator<CharBuffer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string5 = StringUtils.join(iterator0, 'U');
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      ListIterator<Integer> listIterator0 = linkedList0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "InvocationTargetException occurred");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "]o_");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(1);
      arrayDeque0.push("");
      String string0 = StringUtils.join((Iterable<?>) arrayDeque0, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) "Threshold must not be negative");
      linkedList0.add((Object) "Threshold must not be negative");
      Iterator<Object> iterator0 = linkedList0.iterator();
      String string0 = StringUtils.join(iterator0, (String) null);
      assertEquals("Threshold must not be negativeThreshold must not be negative", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Iterator<CharBuffer> iterator0 = (Iterator<CharBuffer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string0 = StringUtils.join(iterator0, "+2H|v2");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, '0');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("(");
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("ru 3`KQAm0=392");
      assertEquals("ru3`KQAm0=392", string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.removeStart("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.removeStart("{}", "IllegalAccessException occurred");
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.removeStart("/", (String) null);
      assertNotNull(string0);
      assertEquals("/", string0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.removeStart("!eb#@G|(v~zx", "!eb#@G|(v~zx");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase(")c&-e2Mj:*8p/<&", (String) null);
      assertNotNull(string0);
      assertEquals(")c&-e2Mj:*8p/<&", string0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("##qQs/I`$-*Z", "##qQs/I`$-*Z");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.removeEnd("`I", "");
      assertEquals("`I", string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeEnd("|", ")*3N&_V4:.N8M");
      assertEquals("|", string0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "8STs3W:-=;v^7!~?_");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("*$3]", "");
      assertEquals("*$3]", string0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("JkTLr8:", "IWA6}SxQ6*=#7}(#^=u");
      assertEquals("JkTLr8:", string0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.remove("g`hlE", "");
      assertEquals("g`hlE", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.remove("InvocationTargetException occurred", "%B,lhe");
      assertEquals("InvocationTargetException occurred", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.remove("", 'G');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.remove("SecurityException occurred", '3');
      assertEquals("SecurityException occurred", string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.remove("]{Re/_'M_![.e*>", '[');
      assertEquals("]{Re/_'M_!.e*>", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.replace("", "decompose", " in an array of ", (-1));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.replace("{4Q:j>P", "rQm2'93[]U8?1{", (String) null, 4674);
      assertNotNull(string0);
      assertEquals("{4Q:j>P", string0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.replace("iVeeOT?aL/nW~*t,", "~\"c);", "~\"c);", 0);
      assertEquals("iVeeOT?aL/nW~*t,", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("?2LR'O+<a1[i:~+/|i", "?2LR'O+<a1[i:~+/|i", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.replace("c<(_w.XO", "c<(_w.XO", "c<(_w.XO");
      assertEquals("c<(_w.XO", string0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replace("3:'@G`wG rV=V1o`|", "3:'@G`wG rV=V1o`|", "3:'@G`wG rV=V1o`|", 256);
      assertEquals("3:'@G`wG rV=V1o`|", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = StringUtils.stripAccents("aH/s'n_hl7");
      String[] stringArray0 = StringUtils.substringsBetween("", "|", string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly("6Q~D=dN&+$+{N.>.GB", stringArray0, stringArray0);
      assertEquals("6Q~D=dN&+$+{N.>.GB", string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("On(CR%MU&=KYUW}<3(", (String[]) null, (String[]) null);
      assertEquals("On(CR%MU&=KYUW}<3(", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("InvocationTargetException occurred", "Array and element cannot both be null", 0);
      StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Search and Replace array lengths don't match: ", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = StringUtils.replaceEachRepeatedly("IllegalArgumentException occurred", stringArray0, stringArray0);
      assertEquals("IllegalArgumentException occurred", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("org.apache.commons.lang3.ObjectUtils$Null");
      StringUtils.replaceEach("P=&=>${<O\"V5i:F;z", stringArray0, stringArray0);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "\\u000";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[2] = string0;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: \\u000
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("P=&=>${<O\"V5i:F;z", "org.apache.commons.lang3.ObjectUtils$Null");
      String string0 = StringUtils.replaceEach("P=&=>${<O\"V5i:F;z", stringArray0, stringArray0);
      assertEquals("P=&=>${<O\"V5i:F;z", string0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", '?', 'I');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, '/', '/');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, "Illegal;ccesExcpt#oQ occuDrZd", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", "j}/n>=FJ_`6?@?dG");
      assertEquals("j}/n>=FJ_`66/?=>}F//?6/n/=}nF/JF/>n=n/>=nnnFnn?n", string0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.replaceChars(" is less than 0: ", "", "");
      assertEquals(" is less than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.replaceChars("9&h~UV9aND.Ms|", "9&h~UV9aND.Ms|", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replaceChars("dMo", ")]4*", "yBssTO");
      assertEquals("dMo", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.overlay("5w4pUXXz;;;{e*M|", "", 63, (-1439));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, "{}", 5, 2);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.overlay("4:4')\u0002", (String) null, 2, 7);
      assertEquals("4:", string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.overlay("", "/gjepP4^C.", (-3872), (-3872));
      assertEquals("/gjepP4^C.", string0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.chomp(" iBs les than 0: ");
      assertEquals(" iBs les than 0: ", string0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.chomp("a");
      assertEquals("a", string0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.chomp("", "aH/s'n_hl7");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.chomp("*EFk$xH1_>2(", " is less than 0: ");
      assertEquals("*EFk$xH1_>2(", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.chomp("Lj;?*$c#%Xz\"Z", (String) null);
      assertEquals("Lj;?*$c#%Xz\"Z", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.center("%RvM.b2_ ubK&V@b$E~q>EFo^@8wa", 1136, 'i');
      String string1 = StringUtils.chomp(string0, string0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.chop(")c&-e2Mj:*8p/<&");
      assertNotNull(string0);
      assertEquals(")c&-e2Mj:*8p/<", string0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.repeat("DECOMPOSE", 1);
      assertNotNull(string0);
      assertEquals("DECOMPOSE", string0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.repeat("", 1592);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.repeat("R", 24);
      assertEquals("RRRRRRRRRRRRRRRRRRRRRRRR", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.repeat("mE", 18);
      assertNotNull(string0);
      assertEquals("mEmEmEmEmEmEmEmEmEmEmEmEmEmEmEmEmEmE", string0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, "CLoF", (-1));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.repeat("", (String) null, 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 48, '~');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 8197, '1');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 3577, "@zq");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.rightPad("I9Ht1gOC>.w\"&1u]t", 1113, (String) null);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.rightPad("Array and element cannot both be null", 1, "Array and element cannot both be null");
      assertEquals("Array and element cannot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = StringUtils.center("cV", 3433, "CLoF");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.rightPad(" in an array of ", 32, " in an array of ");
      assertEquals(" in an array of  in an array of ", string0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.rightPad("CR~0yo", 13, "Cannot store");
      assertEquals("CR~0yoCannot ", string0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 92);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-372), 'b');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.leftPad("mE", 8195, 'a');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 556, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.leftPad(";nwGPOBo[", 556, (String) null);
      assertEqualsnwGPOBo[", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.leftPad("Search and Replace array lengths don't match: ", 4, "Exception cloning Cloneable type ");
      assertEquals("Search and Replace array lengths don't match: ", string0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.leftPad("^_?p+HDNRb,3,\"", 32, "AV$orMZ*U*Jit@,aI0");
      assertEquals("AV$orMZ*U*Jit@,aI0^_?p+HDNRb,3,\"", string0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 16, "[X+1K^X$x;:vM+$1j");
      assertEquals("[X+1K^X$x;:vM+$1", string0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.center((String) null, (-1), 'U');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.center("", (-399));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.center("[0E4jNa", 5, 'a');
      assertEquals("[0E4jNa", string0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.center("", (-2416), "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.center("+(T7|", 3433, "");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.center("+K4lC)d+ii?TwHK", 4, "Search and Replace array lengths don't match: ");
      assertEquals("+K4lC)d+ii?TwHK", string0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.upperCase(",bm5\"!iG^");
      assertEquals(",BM5\"!IG^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      String string0 = StringUtils.upperCase("Zo:w", locale0);
      assertNotNull(string0);
      assertEquals("ZO:W", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.lowerCase("/");
      assertEquals("/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Locale locale0 = Locale.US;
      String string0 = StringUtils.lowerCase("", locale0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag(", Length: ");
      String string0 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.capitalize("[6S}>#1#j&");
      assertEquals("[6S}>#1#j&", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      StringUtils.uncapitalize
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.swapCase((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.swapCase("The Array must not be null");
      assertEquals("tHE aRRAY MUST NOT BE NULL", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      int int0 = StringUtils.countMatches("", "[6S}>#1#j&");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      int int0 = StringUtils.countMatches("j}/n>=FJ_`66/?=>}F//?6/n/=}nF/JF/>n=n/>=nnnFnn?n", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int int0 = StringUtils.countMatches("On(CR%MU&=KYUW}<3(", "On(CR%MU&=KYUW}<3(");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("UcFD");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("Array and element cannot both be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("DX~b&s");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("{}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric("HZrxYw");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumericSpace("IY2The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("The character ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable(" j\b                           ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("|");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("2j#dv9yGq/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      boolean boolean0 = StringUtils.isNumericSpace(stringBuffer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace(" is less than 0: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.repeat('3', 996);
      StringUtils.isWhitespace(string0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace(" j\b                           ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("a");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase(" vs ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("W");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.defaultString("id)~B0a\"RPusc6cKpi", (String) null);
      assertEquals("id)~B0a\"RPusc6cKpi", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("(", "Array element ");
      assertEquals("(", string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank((String) null, "q+pye878K");
      assertEquals("q+pye878K", string0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "i<$>by7qTm", (CharSequence) "i<$>by7qTm");
      assertEquals("i<$>by7qTm", charSequence0);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertEquals("", charSequence0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.reverse("The Array must not be null");
      assertNotNull(string0);
      assertEquals("llun eb ton tsum yarrA ehT", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited((String) null, '&');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.abbreviate("TZ63,1:MH$I", 579, 2739);
      assertEquals("TZ63,1:MH$I", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Arguments cannot both be null", 18, 18);
      assertEquals("...ot both be null", string0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\"`#/+Y-4&%|aJ6j|S", 20, 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.abbreviate(")c&-.e2Mj8p/<&<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<</", 18, 18);
      assertEquals("...<<<<<<<<<<<<...", string0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("The Array must not be null", ">\"", 48);
      assertEquals("The Array must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("R.,*", (String) null, 24);
      assertNotNull(string0);
      assertEquals("R.,*", string0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("yN!@p&r4%2J#`<fouBv/g)2YyN!@p&r4%2J#`<fouBv/g)2YyN!@p&r4%2J#`<fouBv/g)2YyN!@p&r4%2J#`<fouBv/g)2YyN!@p&r4%2J#`<fouBv/g)2YyN!@p&r4%2J#`<fouBv/g)2YyN!@p&r4%2J#`<fouBv/g)2Y<fouBv/g)2Y", " is not in the range '0' - '9'", 79);
      assertEquals("yN!@p&r4%2J#`<fouBv/g)2Yy is not in the range '0' - '9'#`<fouBv/g)2Y<fouBv/g)2Y", string0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("i<$>by7qTm", " in an array of ", 0);
      assertEquals("i<$>by7qTm", string0);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.difference("DRoAJ}u8VVum6H/m5", ":#c?E`{tW){3'/n");
      assertEquals(":#c?E`{tW){3'/n", string0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.difference((String) null, "(Z$]*T%");
      assertEquals("(Z$]*T%", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.difference("", (String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "b}$s&");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "?2LR'O+<a1[i:~+/|i", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.difference("i<$>by7qTm", "i<$>by7qTm ");
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(":#c?E`{tW){3'/n", "DRoAJ}u8VVum6H/m5");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~E";
      stringArray0[1] = "~E";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("~E", string0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " in an array of ";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " in an array of ";
      charSequenceArray0[4] = (CharSequence) " ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = " is lKess than 0: ";
      stringArray0[1] = "                                 ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "1\"Z3{|,Y@ \"lu/3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "i?pJ(pay", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]NsiqqkV6", (CharSequence) "OOOOOOOOOOOOOOOOOOOOOO");
      assertEquals(22, int0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "IllegalAccessException occurrd{}", (CharSequence) "");
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "The Character must not be null";
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "q+pye878K");
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 2306);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null, (int) 'O');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "afDCsNEx.", (CharSequence) "V,')#vLltwvFRJ!v", (-2451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 0);
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) "e", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 703);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "/");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) "", 468);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<y\"> B@:", (CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " in an array of ", (CharSequence) "i<$>by7qTm ", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "<");
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<", (CharSequence) charBuffer0, 468);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "...", (CharSequence) "b}$s&", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.startsWithAny("XkTLr8:", charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", "");
      boolean boolean0 = StringUtils.startsWithAny("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '\"');
      boolean boolean0 = StringUtils.startsWithAny("fT$-j1rtpo*Jg.kF9", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM";
      boolean boolean0 = StringUtils.startsWithAny("The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM", charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithAny("Search and Replace array lengths don't match: ", (CharSequence[]) null);
      assertFalse(boolean0);
  }
}
