/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 11:18:51 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class StrBuilder_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7+[U_kuVQyh*['");
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.deleteFirst("7+[U_kuVQyh*['");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('4');
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharMatcher0, "Y<M<m<lg!8Q");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.awt.printerjob");
      int int0 = strBuilder0.capacity();
      assertEquals(19, strBuilder0.length());
      assertEquals(51, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf('-');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      strBuilder0.asWriter();
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.substring(0);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("o(UePop]]U");
      int int0 = strBuilder0.lastIndexOf('r');
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals("b;^]", string0);
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("-#X{yeQ ");
      strBuilder0.clear();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w<=0CTfv.NcAs=[;");
      int int0 = strBuilder0.indexOf("end < start");
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((int) '4');
      strBuilder1.deleteFirst('C');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(1L);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Reader reader0 = strBuilder0.asReader();
      reader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(reader0.ready());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.awt.graphicsenv");
      assertFalse(strBuilder0.isEmpty());
      
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.awt.graphicsenv");
      strBuilder0.deleteAll(strMatcher0);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.awt.graphicsenv");
      strBuilder0.asTokenizer();
      assertEquals(52, strBuilder0.capacity());
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 111, '-');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1490), 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1490
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, 0);
      int int0 = strBuilder1.lastIndexOf("[");
      assertEquals(1, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.insert(0, 1606.38275413543);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, (-838), 'W');
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.insert(Integer.MAX_VALUE, 's');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2147483647
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(39, strBuilder0.length());
      assertEquals(71, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(":LGa0%pGr-ry\r>RSy");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Reader reader0 = strBuilder0.asReader();
      reader0.mark(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("QweZEEb^4Lnl0-(%");
      assertEquals(16, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("qNM");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 3419, 3419);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 3419
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("1c\")u'h2QEA0", 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-753));
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-753));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -753
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

//  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(103);
      strBuilder1.size = 103;
      StrBuilder strBuilder2 = strBuilder1.insert(103, (Object) strBuilder_StrBuilderTokenizer0);
      strBuilder2.setLength(103);
      assertEquals(173, strBuilder1.capacity());
      assertEquals(103, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder strBuilder1 = strBuilder0.setLength(170);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder1.getChars(170, 9, charArray0, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[0];
      strBuilder0.buffer = charArray0;
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("N1p`>>wN!HD<L-[lwp");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1848));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1848
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(4, strBuilder0.size());
      assertEquals(98, int0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt(653);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 653
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-2514), 'Y');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2514
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, 'W');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

//  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.add(strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      strBuilder0.setCharAt(0, 'W');
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-38));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -38
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("-#X{yeQ ");
      strBuilder0.deleteCharAt(2);
      assertEquals(7, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.append('_');
      strBuilder0.toCharArray();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.toCharArray();
      assertEquals(32, strBuilder0.capacity());
  }

//  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.add(strBuilder0);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      strBuilder1.toCharArray(0, 111);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-1), 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("bo");
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(34, strBuilder0.capacity());
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'b', 'o'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(5, charArray1.length);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("VR_6!*5|=5Zwb");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      char[] charArray0 = new char[5];
      strBuilder0.getChars(charArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(170, 9, charArray0, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 9
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-1), (-1), charArray0, 2047);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(28, (-3483), charArray0, (-3483));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3483
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[8];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(4, int0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(46);
      strBuilder0.setNewLineText("");
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(46, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.trim();
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.setNullText("E}yz}CWC=Mg{YSC]QXI");
      strBuilder1.append((StringBuffer) null);
      assertFalse(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(4, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((String) null, 1, 1);
      assertEquals(1, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3123);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("java.vendor", (-3234), (-3234));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("%n(h]bz", 44, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("6A(9#LP8&NP+:PYy'", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("&&1kXc>+sC@", 0, 102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("1c\")u'h2QEA0", 0, 7);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuffer stringBuffer0 = new StringBuffer(3162);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("Fh7.C P/+]I'TtT");
      strBuilder0.append(stringBuffer0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(967);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 403, 100);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("em9O.=,2}EdyO");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, (-465), (-465));
      assertEquals(13, strBuilder1.length());
      assertEquals(45, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-1095), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.runtime.name");
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("%/UL(P=$F<gca");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "%/UL(P=$F<gca");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 5, (-1310));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("V.]U- 9");
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 4, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2465);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(2465, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 4, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(116);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, 116, 116);
      assertEquals(116, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-263), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      strBuilder1.append(strBuilder0, 4, 4);
      assertEquals(13, strBuilder0.size());
      assertEquals(13, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.awt.graphicsenv");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, (-885));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, (-3134), 1);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 1, (-315));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -315
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

//  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("JP");
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("startIndex must be valid");
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "mh!@,/nJ.E");
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(29, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 2, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[5];
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1634);
      StrBuilder strBuilder1 = strBuilder0.append(false);
      int int0 = strBuilder1.lastIndexOf("V.]U- 9", 1634);
      assertEquals(5, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1643);
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "kh<0bIW_l-jq}%%eN,");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("BC/ySe!Z;:^nE a{BP?");
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(19, strBuilder1.length());
      assertEquals(51, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("BC/ySe!Z;:^nE a{BP?");
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "BC/ySe!Z;:^nE a{BP?");
      assertEquals(19, strBuilder1.length());
      assertEquals(51, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[17];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "{y<7RQXG+qsr");
      strBuilder1.insert(3, (char[]) null, 3, 3027);
      assertEquals(192, strBuilder0.size());
      assertEquals(192, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "ymem+ks");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) list0, "StrTokenizer[not tokenized yet]");
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.add(strBuilder0);
      linkedList0.add(strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "1c\")u'h2QEA0");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "$8N");
      assertEquals(2, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

//  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      char[] charArray0 = new char[8];
      charArray0[6] = ',';
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "end < start");
      assertEquals(89, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.awt.printerjob");
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-903), 't');
      assertEquals(19, strBuilder1.length());
      assertEquals(51, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "1c\")u'h2QEA0", 0, '-');
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(28);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 2, 'g');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.appendFixedWidthPadLeft(117, 608, '_');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("BC/ySe!Z;:^nE a{BP?");
      strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 8, 'j');
      assertEquals(27, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1716);
      strBuilder0.appendFixedWidthPadRight(1716, 1716, '\"');
      char[] charArray0 = new char[0];
      strBuilder0.insert(285, charArray0);
      assertEquals(1716, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2774));
      // Undeclared exception!
      try { 
        strBuilder0.insert(288, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 288
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1716);
      char[] charArray0 = new char[5];
      strBuilder0.appendFixedWidthPadRight(1716, 1716, '\"');
      strBuilder0.insert(1716, charArray0);
      assertEquals(1721, strBuilder0.size());
  }

//  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((Object) "$cUGOc+5");
      strBuilder0.insert(2, (char[]) null);
      assertEquals(27, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder strBuilder1 = strBuilder0.setLength(170);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder1.insert(8, charArray0, 8, 170);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 170
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-356), (-356));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -356
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 114, 1836);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 114
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[8];
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-824));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -824
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

//  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[9];
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) strBuilder0;
      strBuilder0.appendWithSeparators(objectArray0, "");
      strBuilder0.insert(9, charArray0, 0, 9);
      assertEquals(59, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, false);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.size = 1283;
      // Undeclared exception!
      try { 
        strBuilder0.insert(1283, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.delete(0, 116);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      strBuilder0.setLength(170);
      strBuilder0.trim();
      assertEquals(170, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.append('_');
      assertEquals(1, strBuilder0.length());
      
      strBuilder0.deleteAll('_');
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.append('_');
      Object object0 = new Object();
      strBuilder0.appendFixedWidthPadLeft(object0, 2, 'U');
      strBuilder0.deleteAll('_');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[9];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      strBuilder0.append(charArray0);
      strBuilder0.deleteAll('L');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('C');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding(2, ']');
      strBuilder1.deleteFirst(']');
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((int) '4');
      StrBuilder strBuilder2 = strBuilder1.insert(0, (float) 0);
      strBuilder2.deleteAll("0.052");
      assertTrue(strBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("AF=TB");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, "");
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("E}yz}CWC=Mgj{YSC]QX");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('q', 'q');
      assertEquals(19, strBuilder1.length());
      assertEquals(51, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7%h-~qV_}FX(M1Hy@8");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('q', 'j');
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1062));
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('<', '<');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('S', '4');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append("org.apache.commons.lang.text.StrBuilder");
      strBuilder1.replaceFirst('S', '4');
      assertEquals(39, strBuilder0.size());
      assertEquals(39, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("JP");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("startIndex must be valid", ")XAeQh");
      assertEquals(2, strBuilder1.length());
      assertEquals(34, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "G6F7n(-8");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replaceAll("xMR8$;_RxF$Tn,'|W", (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("b;^]", "b;^]");
      assertEquals(4, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      strBuilder0.replaceFirst("b;^]", (String) null);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("org.apache.commons.lang.text.StrBuilder");
      strBuilder0.replaceFirst("org.apache.commons.lang.text.StrBuilder", "org.apache.commons.lang.text.StrBuilder");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      strBuilder0.append((float) 2);
      strBuilder0.reverse();
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(2, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("{y<7RQXG+qsr");
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(23);
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertFalse(boolean0);
      assertEquals(23, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[17];
      strBuilder0.appendWithSeparators(objectArray0, "{y<7RQXG+qsr");
      boolean boolean0 = strBuilder0.startsWith("{y<7RQXG+qsr");
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

//  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[17];
      objectArray0[0] = (Object) " `D,K&_/8";
      strBuilder0.appendWithSeparators(objectArray0, "{y<7RQXG+qsr");
      boolean boolean0 = strBuilder0.startsWith("{y<7RQXG+qsr");
      assertEquals(219, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(967);
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(967, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.endsWith("user.region");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      boolean boolean0 = strBuilder0.endsWith("length must be valid");
      assertTrue(boolean0);
      assertEquals(52, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      strBuilder0.replaceFirst(strMatcher0, "length must be valid");
      boolean boolean0 = strBuilder0.endsWith("length must be valid");
      assertEquals(39, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      String string0 = strBuilder0.leftString(170);
      assertEquals("b;^]", string0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.leftString(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder strBuilder1 = strBuilder0.setLength(170);
      strBuilder1.append(strBuilder0);
      String string0 = strBuilder1.leftString(170);
      assertEquals(340, strBuilder0.size());
      assertEquals("b;^]\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(967);
      String string0 = strBuilder0.rightString(124);
      assertEquals(967, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.awt.printerjob");
      String string0 = strBuilder0.rightString(0);
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(967);
      strBuilder0.setLength(967);
      strBuilder0.rightString(124);
      assertEquals(967, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(116);
      strBuilder0.midString(116, 116);
      assertEquals(116, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      String string0 = strBuilder0.midString((-568), 136);
      assertEquals("length must be valid", string0);
      assertEquals(52, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(1, (-738));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7+[U_kuVQyh*['");
      boolean boolean0 = strBuilder0.contains('p');
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "1okD/", 3352, '%');
      boolean boolean0 = strBuilder1.contains('%');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.contains("end < start");
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.runtime.name");
      boolean boolean0 = strBuilder0.contains("");
      assertTrue(boolean0);
      assertEquals(49, strBuilder0.capacity());
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.contains((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) strBuilder0);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('m');
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharMatcher0);
      assertEquals(50, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7+[U_kuVQyh*['");
      int int0 = strBuilder0.indexOf('p', (-2994));
      assertEquals(14, strBuilder0.length());
      assertEquals((-1), int0);
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(101);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "1okD/", 3352, '%');
      int int0 = strBuilder1.indexOf('%', 101);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(101, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      int int0 = strBuilder0.indexOf("N1p`>>wN!HD<L-[lwp", (-2316));
      assertEquals(2, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      int int0 = strBuilder0.indexOf((String) null, 876);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("BUEO]HZ)~KT|8;S{.");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("$", "BUEO]HZ)~KT|8;S{.");
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-913));
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0, (-913));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

//  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("");
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      int int0 = strBuilder0.lastIndexOf('I', 32);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

//  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.appendFixedWidthPadRight(0, 1249, '5');
      int int0 = strBuilder0.lastIndexOf('2', 116);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(26, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.lastIndexOf(">UmQnN0*C\u0005t3R5?", 1656);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3483));
      int int0 = strBuilder0.lastIndexOf((String) null, 11);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

//  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) strBuilder0;
      strBuilder0.appendWithSeparators(objectArray0, "");
      int int0 = strBuilder0.lastIndexOf(">UmQnN0*C\u0005t3R5?", 1656);
      assertEquals(50, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2627);
      strBuilder0.size = 2627;
      int int0 = strBuilder0.lastIndexOf("");
      assertEquals(2627, strBuilder0.capacity());
      assertEquals(2626, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      int int0 = strBuilder0.lastIndexOf("length must be valid", 136);
      assertEquals(52, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_TrimMatcher0, (-840));
      assertEquals(4, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, 1249, '5');
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      int int0 = strBuilder1.lastIndexOf(strMatcher0, 773);
      assertEquals(1249, strBuilder0.length());
      assertEquals((-1), int0);
  }

//  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("VR_6!*5|=5Zwb");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "R\"xACu3(;c8Od");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("org.apache.commons.lang.text.StrBuilder");
      int int0 = strBuilder0.lastIndexOf(strMatcher0, Integer.MAX_VALUE);
      assertEquals(27, strBuilder0.length());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder strBuilder2 = strBuilder1.insert(0, 0);
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder2);
      assertFalse(strBuilder1.isEmpty());
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      strBuilder1.insert(0, 0);
      StrBuilder strBuilder3 = strBuilder2.appendNewLine();
      StrBuilder strBuilder4 = strBuilder1.append((Object) strBuilder2);
      strBuilder0.append((Object) strBuilder3);
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder4);
      assertEquals(51, strBuilder1.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = new StrBuilder();
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertTrue(boolean0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder strBuilder2 = strBuilder0.minimizeCapacity();
      strBuilder1.insert(0, 0);
      boolean boolean0 = strBuilder2.equals(strBuilder1);
      assertEquals(1, strBuilder1.length());
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder strBuilder2 = strBuilder1.insert(0, 0);
      StrBuilder strBuilder3 = strBuilder0.appendNewLine();
      StrBuilder strBuilder4 = strBuilder1.append((Object) strBuilder0);
      strBuilder0.append((Object) strBuilder2);
      boolean boolean0 = strBuilder3.equals(strBuilder4);
      assertEquals(51, strBuilder3.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("M\"Gr+Lb$yN^ ng");
      StrBuilder strBuilder1 = new StrBuilder("M\"Gr+Lb$yN^ ng");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(15, strBuilder1.length());
      assertTrue(boolean0);
      assertEquals(47, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("VR_6!*5|=5Zwb");
      boolean boolean0 = linkedList0.remove((Object) strBuilder0);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.add(strBuilder0);
      boolean boolean0 = linkedList0.remove((Object) strBuilder0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      strBuilder0.append((-1352.17029549));
      strBuilder0.hashCode();
      assertEquals(14, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      // Undeclared exception!
      try { 
        strBuilder0.substring((-1), 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.delete(0, (-1460));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[9];
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-152));
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[9];
      strBuilder_StrBuilderTokenizer0.reset(charArray0);
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1929));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-1929), (-1929));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 467, 3387);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.runtime.name");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1073));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 4, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Reader reader0 = strBuilder0.asReader();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = reader0.read(charBuffer0);
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("b;^]");
      StrBuilder strBuilder1 = strBuilder0.setLength(170);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      char[] charArray0 = new char[8];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(170, strBuilder0.length());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Reader reader0 = strBuilder0.asReader();
      reader0.skip(0);
      assertEquals(0, strBuilder0.size());
      assertFalse(reader0.ready());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(1729L);
      assertEquals(0L, long0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-3795));
      assertEquals(0, strBuilder0.size());
      assertEquals(2, strBuilder0.capacity());
      assertEquals(0L, long0);
  }
}
