/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 12:22:21 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class StrBuilder_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      
      strBuilder1.trim();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("wNb`e*6j$][m?.9WIe");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(50, strBuilder0.capacity());
      assertEquals("wNb`e*6j$][m?.9WIe", stringBuffer0.toString());
      assertEquals(18, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Rj_o%UV}");
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_StringMatcher0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      int int0 = strBuilder0.capacity();
      assertEquals(52, int0);
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      assertEquals(16, strBuilder0.length());
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      strBuilder0.deleteFirst((StrMatcher) strMatcher_StringMatcher0);
      strBuilder0.trim();
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("wNb`e*6j$][m?.9WIe");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[8];
      strBuilder_StrBuilderReader0.read(charArray0);
      strBuilder_StrBuilderReader0.skip(1L);
      char[] charArray1 = new char[10];
      int int0 = strBuilder_StrBuilderReader0.read(charArray1);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Writer writer0 = strBuilder0.asWriter();
      writer0.write("[89-;?^A3i", 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring(1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.lastIndexOf('p');
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, " #[TR;Vl6Z@kI~$b");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      strBuilder0.asReader();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6:L/<:Ao%]21qll/s");
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_StringMatcher0);
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      strBuilder0.asTokenizer();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2881);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 2881, 'x');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.insert(31, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 31
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      // Undeclared exception!
      try { 
        strBuilder0.insert(123, (-1.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 123
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(0.0F);
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6:L/<:Ao%]21qll/s");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(63, 0, '$');
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("FU9'3z9D");
      // Undeclared exception!
      try { 
        strBuilder0.insert((-450), 'H');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -450
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2643);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(2643, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1917));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("wNb`e*6j$][m?.9WIe");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark((-1));
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(117);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(117, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((-1));
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Us?DSf");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.append((CharSequence) "Us?DSf");
      assertEquals(12, strBuilder0.size());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      char[] charArray0 = strBuilder0.toCharArray();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("end < start", 1478, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("DZw~~QZ'K^[&5_");
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(46, strBuilder1.capacity());
      assertEquals(14, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6:L/<:Ao%]21qll/s");
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-193));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -193
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      strBuilder0.append(1478);
      strBuilder0.setLength(2);
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(577);
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(577, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      strBuilder0.append(1478);
      strBuilder0.minimizeCapacity();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      assertEquals(2, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7k^,tD");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(38, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(6, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-1546));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1546
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("lXJ<MB");
      // Undeclared exception!
      try { 
        strBuilder0.charAt(32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-994), 'j');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -994
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(1478, 'O');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1478
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, 5.288F);
      strBuilder0.setCharAt(0, '7');
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("n_w_A)n");
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-3372));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3372
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3471));
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3471));
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) strMatcher0;
      strBuilder0.appendWithSeparators(objectArray0, "E9h8I");
      strBuilder0.deleteCharAt(5);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(97, 97, 'c');
      char[] charArray0 = strBuilder0.toCharArray(31, 3570);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 150);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[10];
      strBuilder0.appendWithSeparators(objectArray0, "org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.toCharArray(20, 20);
      assertEquals(504, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      char[] charArray0 = new char[3];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(3, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      Object object0 = new Object();
      strBuilder0.append(object0);
      char[] charArray0 = new char[3];
      strBuilder0.getChars(charArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-2634), (-2634), (char[]) null, 391);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2634
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(101, (-2527), charArray0, (-1710));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2527
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2673));
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(0, 113, charArray0, 2833);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 113
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(101, 0, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1376));
      strBuilder0.setNewLineText("org.apache.commons.lang.text.StrMatcher$NoMatcher");
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid length: ");
      strBuilder1.appendNull();
      assertFalse(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^bk'+}7Xbb&IALw");
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null, 4, (-263));
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      // Undeclared exception!
      try { 
        strBuilder0.append("A", (-1), 101);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      // Undeclared exception!
      try { 
        strBuilder0.append("./0Ol", 4, (-1558));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1777));
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("'; the SystemUtils property value will default to null.", 47, 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1676));
      strBuilder0.append("`o_{u'VPp", 0, 5);
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      StringBuffer stringBuffer0 = new StringBuffer("");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2971);
      StringBuffer stringBuffer0 = new StringBuffer("S2v%P*S=?O~Tj&6");
      strBuilder0.append(stringBuffer0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "', is neither of type Map.Entry nor an Array");
      strBuilder0.append(stringBuffer0, 34, 4);
      assertEquals(48, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("lXJ<MB");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 0, 0);
      assertEquals(7, strBuilder1.length());
      assertEquals(39, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-2282), 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 1, (-473));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-1079));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Index: ");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Index: ");
      stringBuffer0.setLength(385);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 385, 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(2, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1192);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(1192, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3471));
      Object[] objectArray0 = new Object[2];
      strBuilder0.appendWithSeparators(objectArray0, "E9h8I");
      strBuilder0.append(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 307, 307);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-1960), (-1960));
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-382), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("'");
      StrBuilder strBuilder1 = strBuilder0.setLength(307);
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 307, 307);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1480));
      strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 102, 'U');
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 4, (-1480));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(97, 97, 'c');
      strBuilder0.append(strBuilder0, 61, 30);
      assertEquals(127, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">d`|%#HH$O5");
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, 1615, 4);
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1192);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-2991), (-996));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -996
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      strBuilder0.append(1478);
      char[] charArray0 = strBuilder0.toCharArray();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(charArray0, 2, 2);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 2, (-750));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -750
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, 68);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 68
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[8];
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(886);
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "java.library.path");
      assertEquals(886, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-3471));
      Object[] objectArray0 = new Object[2];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "Invalid startIndex: ");
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      assertEquals(2, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addLast("");
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(632);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      linkedList0.offer("");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(480);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, (String) null);
      assertEquals(480, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder strBuilder1 = strBuilder0.append("end < start");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "D &/{<'`!/^';");
      assertEquals(3, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(118, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-373), '$');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "[89-;?^A3i", 0, 'T');
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      strBuilder0.appendFixedWidthPadLeft(16, 16, 'i');
      assertEquals(36, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 86, '`');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(886);
      strBuilder0.appendFixedWidthPadRight(0, 9, 'e');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      strBuilder0.insert(0, (Object) strBuilder0);
      assertEquals(66, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^bk'+}7Xbb&IALw");
      StrBuilder strBuilder1 = strBuilder0.insert(11, (char[]) null);
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      char[] charArray0 = new char[9];
      strBuilder0.insert(2, charArray0, 2, 2);
      boolean boolean0 = strBuilder0.startsWith("Mz3`-T$b>hbO^V$");
      assertEquals(17, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null, 376, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-3401), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -3401
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|C@!]v?>-5+F]d");
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.insert(4, charArray0, 97, 97);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 97
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 2, 3591);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 3591
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[7];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.insert(0, false);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3);
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertEquals(3, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 1771, 'u');
      strBuilder0.deleteAll('u');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+RaFTnne5R`L");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('G');
      assertEquals(13, strBuilder1.length());
      assertEquals(45, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.deleteFirst('i');
      assertEquals(55, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      StrBuilder strBuilder1 = strBuilder0.deleteAll("Invalid startIndex: ");
      assertEquals(47, strBuilder1.capacity());
      assertEquals(15, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("<=S9u=b41u'");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(11, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      strBuilder0.deleteAll("Mz3`-T$b>hbO^V$");
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      strBuilder0.deleteFirst("', is neither of type Map.Entry nor an Array");
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      char[] charArray0 = new char[20];
      strBuilder0.insert(34, charArray0);
      strBuilder0.deleteFirst("', is neither of type Map.Entry nor an Array");
      assertEquals(64, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      strBuilder0.replace(0, 34, "java.vendor.url");
      assertEquals(25, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      StrBuilder strBuilder1 = strBuilder0.replaceAll('=', '=');
      assertEquals(44, strBuilder1.length());
      assertEquals(76, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.insert(34, charArray0);
      strBuilder1.replaceAll('\u0000', '=');
      assertEquals(45, strBuilder0.size());
      assertEquals(45, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('g', 'g');
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('g', 'B');
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      char[] charArray0 = new char[9];
      charArray0[2] = 'g';
      strBuilder0.insert(2, charArray0, 2, 2);
      strBuilder0.replaceFirst('g', 'B');
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replaceAll("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("Invalid length: ", "Invalid length: ");
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("c=<d*Kj_;Q~3s", "8u(E:u5");
      assertEquals(16, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F+RaFTnne5R`L");
      strBuilder0.replaceFirst("F+RaFTnne5R`L", (String) null);
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("length must be valid", "length must be valid");
      assertEquals(20, strBuilder1.size());
      assertEquals(52, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(480);
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) null, "java.runtime.version");
      assertEquals(480, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('r');
      strBuilder0.replaceFirst((StrMatcher) strMatcher_CharMatcher0, "");
      assertEquals(43, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      // Undeclared exception!
      try { 
        strBuilder0.replaceAll(strMatcher0, "startIndex must be valid");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(76, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(15, strBuilder1.size());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2332);
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      strBuilder0.setLength(3244);
      StrBuilder strBuilder1 = strBuilder0.insert(2332, charArray0);
      strBuilder1.trim();
      assertEquals(3248, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      boolean boolean0 = strBuilder0.startsWith("Mz3`-T$b>hbO^V$");
      assertEquals(47, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1683));
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2643);
      boolean boolean0 = strBuilder0.startsWith("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      assertFalse(boolean0);
      assertEquals(2643, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith("Invalid startIndex: ");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(531);
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertFalse(boolean0);
      assertEquals(531, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2643);
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(2643, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer");
      boolean boolean0 = strBuilder0.endsWith("StrTokenizer");
      assertEquals(44, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("StrTokenizer");
      strBuilder0.appendFixedWidthPadRight((Object) "StrTokenizer", 4, '!');
      boolean boolean0 = strBuilder0.endsWith("StrTokenizer");
      assertEquals(16, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.leftString(55);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      String string0 = strBuilder0.leftString(0);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A,3{");
      strBuilder0.append((-1557));
      strBuilder0.leftString(5);
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      String string0 = strBuilder0.rightString(32);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.rightString(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      String string0 = strBuilder0.rightString(16);
      assertEquals("lid startIndex: ", string0);
      assertEquals(52, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(376, 101);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      String string0 = strBuilder0.midString((-1), 34);
      assertEquals(76, strBuilder0.capacity());
      assertEquals("', is neither of type Map.Entry no", string0);
      assertEquals(44, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("DZw~~QZ'K^[&5_");
      strBuilder0.midString(2817, (-1457));
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((-1806));
      strBuilder0.midString(0, 1951);
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1676));
      strBuilder0.insert(0, (double) 0);
      strBuilder0.contains('/');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[8];
      charArray0[2] = 'P';
      strBuilder_StrBuilderWriter0.write(charArray0);
      boolean boolean0 = strBuilder0.contains('P');
      assertEquals(28, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      boolean boolean0 = strBuilder0.contains(" )v3){F8:mWCv");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      boolean boolean0 = strBuilder1.contains("");
      assertEquals(50, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('\u0000');
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharMatcher0);
      assertFalse(boolean0);
      assertEquals(76, strBuilder0.capacity());
      assertEquals(44, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      StrBuilder strBuilder1 = strBuilder0.append((Object) strBuilder0);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('l');
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharMatcher0);
      assertEquals(94, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('k', (-3510));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.append('r');
      int int0 = strBuilder0.indexOf('r');
      assertEquals(1, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("lXJ<MB");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("Y", "Y");
      assertEquals(39, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf("", (-5268));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2290);
      int int0 = strBuilder0.indexOf((String) null);
      assertEquals(2290, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0, (-3187));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(97);
      int int0 = strBuilder0.indexOf((StrMatcher) null);
      assertEquals(97, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(40);
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      strBuilder0.append(charArray0);
      int int0 = strBuilder0.lastIndexOf('\"', 40);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf(">(~J=", 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1938);
      int int0 = strBuilder0.lastIndexOf((String) null, 1938);
      assertEquals(1938, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("^bk'+}7Xbb&IALw");
      int int0 = strBuilder0.lastIndexOf("", 108);
      assertEquals(47, strBuilder0.capacity());
      assertEquals(14, int0);
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: ");
      strBuilder0.deleteFirst((StrMatcher) strMatcher_StringMatcher0);
      strBuilder0.insert(0, (-4445.539F));
      int int0 = strBuilder0.lastIndexOf("Invalid length: ");
      assertEquals(9, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("lXJ<MB");
      int int0 = strBuilder0.lastIndexOf("Y", 2862);
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2971);
      strBuilder0.append((Object) "MKf-#2fST^ea");
      int int0 = strBuilder0.lastIndexOf("1.5", 0);
      assertEquals(27, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrBuilder strBuilder1 = strBuilder0.append(false);
      int int0 = strBuilder1.lastIndexOf("Invalid length: ");
      assertEquals(21, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1192);
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("");
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1192, 'd');
      int int0 = strBuilder1.lastIndexOf(strMatcher0, 59);
      assertFalse(strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      StrBuilder strBuilder1 = strBuilder0.append(1.5);
      charArray0[2] = '.';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      int int0 = strBuilder1.lastIndexOf(strMatcher0, 3);
      assertEquals(3, strBuilder0.length());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((-1806));
      StrBuilder strBuilder1 = new StrBuilder();
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(5, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(444L);
      StrBuilder strBuilder1 = new StrBuilder();
      strBuilder1.append(1.5);
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(3, strBuilder1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("(@]g<C");
      StrBuilder strBuilder1 = new StrBuilder("(@]g<C");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertTrue(boolean0);
      assertEquals(6, strBuilder1.length());
      assertEquals(38, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "JUCs9>X");
      StrBuilder strBuilder1 = new StrBuilder(2);
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder strBuilder1 = new StrBuilder('O');
      strBuilder1.append(65);
      StrBuilder strBuilder2 = strBuilder0.setLength(2);
      boolean boolean0 = strBuilder1.equals(strBuilder2);
      assertEquals(2, strBuilder1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1676));
      StrBuilder strBuilder1 = new StrBuilder("");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.1");
      StrBuilder strBuilder1 = new StrBuilder("1.1");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(boolean0);
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Mz3`-T$b>hbO^V$");
      Integer integer0 = new Integer(108);
      boolean boolean0 = strBuilder0.equals((Object) integer0);
      assertFalse(boolean0);
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(40);
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertEquals(40, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, 2434.365F);
      strBuilder0.hashCode();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      // Undeclared exception!
      try { 
        strBuilder0.replace((-935), 34, "java.vendor.url");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -935
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1027);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[9];
      strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 2, (-1));
      assertEquals(1027, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[4];
      strBuilder_StrBuilderTokenizer0.reset(charArray0);
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("wNb`e*D6$][m?.9RWIe");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.size());
      assertEquals(119, int0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read((char[]) null, (-1237), (-1237));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', is neither of type Map.Entry nor an Array");
      char[] charArray0 = new char[1];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 34, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(54);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 54, 74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 3, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("length must be valid");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(2670L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(20L, long0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("wNb`e*D6$][m?.9RWIe");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-1));
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertEquals(51, strBuilder0.capacity());
      assertEquals(0L, long0);
  }
}
