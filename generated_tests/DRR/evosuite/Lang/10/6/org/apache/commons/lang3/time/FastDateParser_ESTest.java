/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 12:45:40 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

 
public class FastDateParser_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7HZ}Hf)YTfBT6XI");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("7HZ}Hf)YTfBT6XI", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("7HZ}Hf)YTfBT6XI", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("ART");
      FastDateParser fastDateParser0 = new FastDateParser("{\"`9kKiNQa*#N", timeZone0, locale0);
      assertEquals("{\"`9kKiNQa*#N", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Sr8aDjkA}s|<}lpVUY", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2c0^e#D$g<]Om55:M6");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser$1", "org.apache.commons.lang3.time.FastDateParser$1", "org.apache.commons.lang3.time.FastDateParser$1");
      FastDateParser fastDateParser0 = new FastDateParser("->NM", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser$1", "org.apache.commons.lang3.time.FastDateParser$1", "org.apache.commons.lang3.time.FastDateParser$1");
      FastDateParser fastDateParser0 = new FastDateParser("->NM", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[->NM,org.apache.commons.lang3.time.fastdateparser$1_ORG.APACHE.COMMONS.LANG3.TIME.FASTDATEPARSER$1_org.apache.commons.lang3.time.FastDateParser$1,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Sr8aDjkA}s|<}lpVUY", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("GMTMIT", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1831, "7");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("DMAj56eV", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("de", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("org.apache.commons.lang3.time.FastDateParser$1", "org.apache.commons.lang3.time.FastDateParser$1", "org.apache.commons.lang3.time.FastDateParser$1");
      FastDateParser fastDateParser0 = new FastDateParser("->NM", timeZone0, locale0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertSame(timeZone1, timeZone0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("%u08Lms144", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("%", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Sr8aDjkA}s|<}lpVUY", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@hKk(s`MV#,|");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("+5d?,=M;w", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("*@hKk(s`MV#,|", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = Locale.CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      fastDateParser0.equals(fastDateParser1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("0d)?lo*(f;^O", timeZone0, locale0);
      try { 
        fastDateParser0.parse("*;wM\"RAI^xD");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"*;wM\"RAI^xD\" does not match 0(\\p{IsNd}++)\\)\\?
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("|s.pef/i+3-@0", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("LZTQYL4Eq");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"LZTQYL4Eq\" does not match \\|(\\p{IsNd}++)\\.
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("2$|hxWtmz5[%CE\"2L{w");
      Locale locale0 = new Locale("2$|hxWtmz5[%CE\"2L{w", "", "");
      FastDateParser fastDateParser0 = new FastDateParser("2$|hxWtmz5[%CE\"2L{w", timeZone0, locale0);
      assertEquals("2$|hxWtmz5[%CE\"2L{w", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("*%9TgvYjM", timeZone0, locale0);
      assertEquals("*%9TgvYjM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis(1423L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1423L);
      long long0 = 686L;
      System.setCurrentTimeMillis(686L);
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      Locale locale1 = Locale.CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      boolean boolean1 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean1);
      
      System.setCurrentTimeMillis(long0);
      boolean boolean2 = fastDateParser1.equals(locale1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@hKk(s`MV#:|");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("E%~<EpWa-^33W)", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(0);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "*@hKk(s`MV#,|");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("+5d?,=M;w", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(91);
      assertEquals(1991, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1160), "7*d,Bx8,79'J~\"o.8");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("7*d,Bx8,79'J~\"o.8", simpleTimeZone0, locale0);
      assertEquals("7*d,Bx8,79'J~\"o.8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "w|lTjci,!39,1<]");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("//", simpleTimeZone0, locale0);
      assertEquals("//", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("@_y1;p%=ygiig5", timeZone0, locale0);
      assertEquals("@_y1;p%=ygiig5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(120, "3CrFx 5O!x98E9");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("3CrFx 5O!x98E9", simpleTimeZone0, locale0);
      assertEquals("3CrFx 5O!x98E9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("472", timeZone0, locale0);
      assertEquals("472", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a5");
      Locale locale0 = new Locale("a5", "a5", "R");
      FastDateParser fastDateParser0 = new FastDateParser("a5", timeZone0, locale0);
      assertEquals("a5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("m6&Vd'rF_Wm#S`B", timeZone0, locale0);
      assertEquals("m6&Vd'rF_Wm#S`B", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(419, "86Co_DxGG+Zr0");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("86Co_DxGG+Zr0", simpleTimeZone0, locale0);
      assertEquals("86Co_DxGG+Zr0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M9;");
      Locale locale0 = new Locale("M9;");
      FastDateParser fastDateParser0 = new FastDateParser("M9;", timeZone0, locale0);
      assertEquals("M9;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(":&m", timeZone0, locale0);
      assertEquals(":&m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("<a<YLmx#", "<a<YLmx#");
      FastDateParser fastDateParser0 = new FastDateParser("<a<YLmx#", timeZone0, locale0);
      assertEquals("<a<YLmx#", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone(">u*z!UF\"AJ)83w");
      FastDateParser fastDateParser0 = new FastDateParser(">u*z!UF\"AJ)83w", timeZone0, locale0);
      assertEquals(">u*z!UF\"AJ)83w", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "=k%)k|", 0, 0, 0, 0, 46, 0, 0, 0);
      Locale locale0 = new Locale("=k%)k|", "org.apache.commons.lang3.time.FastDateParser$2", "");
      FastDateParser fastDateParser0 = new FastDateParser("=k%)k|", simpleTimeZone0, locale0);
      assertEquals("=k%)k|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1756, "^@@$iz]?#Y<DPdh");
      Locale locale0 = new Locale("^@@$iz]?#Y<DPdh", "");
      FastDateParser fastDateParser0 = new FastDateParser("^@@$iz]?#Y<DPdh", simpleTimeZone0, locale0);
      assertEquals("^@@$iz]?#Y<DPdh", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("_y1]p%=ygiig5", "_y1]p%=ygiig5");
      FastDateParser fastDateParser0 = new FastDateParser("_y1]p%=ygiig5", timeZone0, locale0);
      assertEquals("_y1]p%=ygiig5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+G+|H+|K+|M+|S+|+|Z+|a+|d+|h+|k+|m+|s+|w+|y|z+K''|'[^']++(''[^']*)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+G+|H+|K+|M+|S+|+|Z+|a+|d+|h+|k+|m+|s+|w+|y|z+K''|'[^']++(''[^']*)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }
}
