/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 12:41:15 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

 
public class FastDateParser_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("Ne#fUJ$QR)w", "Ne#fUJ$QR)w", "Ne#fUJ$QR)w");
      FastDateParser fastDateParser0 = new FastDateParser("m1mzLHX}L&{VCi8", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1504), "mk.kySeAH{NG\"8B");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("mk.kySeAH{NG\"8B", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", (-1434), 0, (-1434), (-1434), (-1), 0, 926, 0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("Fl+(gKFVdToY", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("0GV,Nby?cg");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", (-1434), 0, (-1434), (-1434), (-1), 0, 926, 0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("Fl+(gKFVdToY", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[Fl+(gKFVdToY,en_US,]", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", (-1434), 0, (-1434), (-1434), (-1), 0, 926, 0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("Fl+(gKFVdToY", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("=^", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("=^", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\"o'_~Lm{Juq+\"!$9");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("\"o'_~Lm{Juq+\"!$9", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("\"o'_~Lm{Juq+\"!$9");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4), "<$g(K1y!Gwa*T]%");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("<$g(K1y!Gwa*T]%", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=<$g(K1y!Gwa*T]%,offset=-4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("++", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\+\\+", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("b}*Q/iQNRj+~R%");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("b}*Q/iQNRj+~R%", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1504), "mk.kySeAH{NG\"8B");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("mk.kySeAH{NG\"8B", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1504), "mk.kySeAH{NG\"8B");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("mk.kySeAH{NG\"8B", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("Zk^( RECf$E", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("D%[NU-4@[y/Bs?&LQ{K", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1504), "mk.kySeAH{NG\"8B");
      SimpleTimeZone simpleTimeZone1 = (SimpleTimeZone)simpleTimeZone0.clone();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("mk.kySeAH{NG\"8B", simpleTimeZone0, locale0);
      simpleTimeZone0.setRawOffset((-4360));
      FastDateParser fastDateParser1 = new FastDateParser("mk.kySeAH{NG\"8B", simpleTimeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1504), "mk.kySeAH{NG\"8B");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("mk.kySeAH{NG\"8B", simpleTimeZone0, locale0);
      Locale locale1 = Locale.GERMANY;
      FastDateParser fastDateParser1 = new FastDateParser("mk.kySeAH{NG\"8B", simpleTimeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", (-1434), 0, (-1434), (-1434), (-1), 0, 926, 0);
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("Fl+(gKFVdToY", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("Q");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Q\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("Hsi+<o[]2'R!>nM", timeZone0, locale0);
      try { 
        fastDateParser0.parse("Hsi+<o[]2'R!>nM");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"Hsi+<o[]2'R!>nM\" does not match (\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1212, "[U8=~Z'");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("Z`Dn-yrSUW-^WxQV|;.", simpleTimeZone0, locale0);
      assertEquals("Z`Dn-yrSUW-^WxQV|;.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$CopyQuotedStrategy");
      FastDateParser fastDateParser0 = new FastDateParser("*]cf83/t=", timeZone0, locale0);
      assertEquals("*]cf83/t=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("<dwy:={UO?A:bc:", timeZone0, locale0);
      assertEquals("<dwy:={UO?A:bc:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "']4&}j$.<e'0RUYJuz9");
      Locale locale0 = new Locale("GMTCST", "", "");
      FastDateParser fastDateParser0 = new FastDateParser("']4&}j$.<e'0RUYJuz9", simpleTimeZone0, locale0);
      assertEquals("']4&}j$.<e'0RUYJuz9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("NcfH.ftZT[t_!'");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("hE(<]!d>:EYB", timeZone0, locale0);
      assertEquals("hE(<]!d>:EYB", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("0MMM#y?H'x=2kWC", timeZone0, locale0);
      assertEquals("0MMM#y?H'x=2kWC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(561);
      assertEquals(2461, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("G?MT", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(0);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")(D$4B");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(")(D$4B", timeZone0, locale0);
      assertEquals(")(D$4B", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("-2J)U]<0nDPX", timeZone0, locale0);
      assertEquals("-2J)U]<0nDPX", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("NcfH.ftZT[t_!'");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("/mG1CJV')=", timeZone0, locale0);
      assertEquals("/mG1CJV')=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("NcfH.ftZT[t_!'");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("22I` luI*>jI", timeZone0, locale0);
      assertEquals("22I` luI*>jI", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3qe2EpE9vjjW)b5J");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("3qe2EpE9vjjW)b5J", timeZone0, locale0);
      assertEquals("3qe2EpE9vjjW)b5J", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<)(D4J$4B");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("<)(D4J$4B", timeZone0, locale0);
      assertEquals("<)(D4J$4B", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3118, "VST");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("5NDvWQO%{ pfffvTE", simpleTimeZone0, locale0);
      assertEquals("5NDvWQO%{ pfffvTE", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("6&f", timeZone0, locale0);
      assertEquals("6&f", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("Ag'b$");
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("y7D8lfaM[U)et7*-=b", timeZone0, locale0);
      assertEquals("y7D8lfaM[U)et7*-=b", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("9pR", timeZone0, locale0);
      assertEquals("9pR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("0MM;#J?H'x=2kWC", timeZone0, locale0);
      assertEquals("0MM;#J?H'x=2kWC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-12), "@JEbyG<#7-Vu");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("@JEbyG<#7-Vu", simpleTimeZone0, locale0);
      assertEquals("@JEbyG<#7-Vu", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("MT", timeZone0, locale0);
      assertEquals("MT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("_i`[Q1d>BgHXT}~", timeZone0, locale0);
      assertEquals("_i`[Q1d>BgHXT}~", fastDateParser0.getPattern());
  }
}
