/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 02 12:52:09 GMT 2019
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

 
public class FastDateParser_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("(Z<", timeZone0, locale0);
      assertEquals("(Z<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(")}hK{&8.dzkD%.xxM", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[)}hK{&8.dzkD%.xxM,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("Sc3XOkf", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("6)*YB5hzIecN;x;", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "w{D+7+r1IM)/4:");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("*)C&Sbz,?}lX:=", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("3\"Z3G ]cJrKLh ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("Invalid pattern");
      FastDateParser fastDateParser0 = new FastDateParser("SJ-cMetL\"XGY:", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("SJ-cMetL\"XGY:", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "rwI],Tm{9");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("7z8x:fB", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("rwI],Tm{9");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"rwI],Tm{9\" does not match 7(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Normalzeit|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistanische Zeit|AFT|AKDT|AKST|Alaska Normalzeit|Alaska Sommerzeit|Alma Ata Zeit|ALMT|Amazonas Normalzeit|Amazonas Sommerzeit|AMST|AMT|Anadyr Zeit|ANAT|Aqtau Zeit|Aqtobe Zeit|AQTT|Arabische Normalzeit|Argentinische Zeit|Armenische Zeit|ART|Aserbaidschanische Zeit|AST|Atlantik Normalzeit|Atlantik Sommerzeit|AWST|Azoren Sommerzeit|Azoren Zeit|AZOST|AZOT|AZT|Bangladesch Zeit|BDT|Bhutanische Zeit|BNT|Bolivianische Zeit|BOT|Bougainville Standard Time|Brasilianische Sommerzeit|Brasilianische Zeit|Britische Sommerzeit|BRST|BRT|Brunei Zeit|BST|BTT|CAT|CCT|CDT|CHADT|Chamorro Normalzeit|CHAST|Chatham Normalzeit|Chatham Sommerzeit|Chilenische Sommerzeit|Chilenische Zeit|Chinesische Normalzeit|Choibalsan Zeit|CHOT|Christmas Island Zeit|ChST|CHUT|Chuuk Zeit|CKT|CLST|CLT|Cocos Islands Zeit|Cook-Inseln Zeit|COT|CST|CVT|CXT|Davis Zeit|DAVT|DDUT|Dumont-d'Urville Zeit|EASST|EAST|EAT|ECT|Ecuadorianische Zeit|EDT|EGST|EGT|EST|Falkland Inseln Zeit|Fernando de Noronha Zeit|Fidschi Sommerzeit|Fidschi Zeit|FJST|FJT|FKT|FNT|Franz\u00F6sisch S\u00FCd- u\\. Antarktische Landzeit|Franz\u00F6sisch-Guiana Zeit|Galapagos Zeit|GALT|Gambier Zeit|GAMT|Georgische Zeit|GET|GFT|Ghanaische Normalzeit|Gilbert-Inseln Zeit|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Golf Normalzeit|Greenwich Zeit|GST|Guyanische Zeit|GYT|Hawaii Normalzeit|Hawaii Sommerzeit|HDT|HKT|Hongkong Zeit|Hovd Zeit|HOVT|HST|ICT|IDT|Indische Normalzeit|Indischer Ozean Territorium Zeit|Indochina Zeit|IOT|Iranische Normalzeit|Iranische Sommerzeit|IRDT|Irische Sommerzeit|IRKT|Irkutsk Zeit|IRST|Israelische Normalzeit|Israelische Sommerzeit|IST|Jakutsk Zeit|Japanische Normalzeit|Jekaterinburger Zeit|JST|Kap Verde Zeit|KGT|Kirgisische Zeit|Kolumbianische Zeit|Koordinierte Universalzeit|Koreanische Normalzeit|Kosrae Zeit|KOST|Krasnojarsker Zeit|KRAT|KST|Kubanische Normalzeit|Kubanische Sommerzeit|LHDT|LHST|Line Inseln Zeit|LINT|Lord Howe Normalzeit|Lord Howe Sommerzeit|Macquarieinsel Zeit|Magadanische Zeit|MAGT|Malaysische Zeit|Maledivische Zeit|Marquesas Zeit|Marshallinseln Zeit|MART|Mauritius Zeit|Mawson Zeit|MAWT|MDT|MEST|MESZ|MET|MEZ|MHT|MIST|Mitteleurop\u00E4ische Sommerzeit|Mitteleurop\u00E4ische Zeit|MMT|Moskauer Normalzeit|MSK|MST|MUT|MVT|Myanmar Zeit|MYT|Nauru Zeit|NCT|NDT|Nepalesische Zeit|Neufundland Normalzeit|Neufundland Sommerzeit|Neukaledonische Zeit|Neuseeland Normalzeit|Neuseeland Sommerzeit|NFT|Niue Zeit|Norfolk Zeit|NOVT|Nowosibirsker Zeit|NPT|NRT|NST|NUT|NZDT|NZST|OESZ|OEZ|Omsk Zeit|OMST|Oral Zeit|ORAT|Ostafrikanische Zeit|Osterinseln Sommerzeit|Osterinseln Zeit|Osteurop\u00E4ische Sommerzeit|Osteurop\u00E4ische Zeit|Ostgr\u00F6nl\u00E4ndische Sommerzeit|Ostgr\u00F6nl\u00E4ndische Zeit|Ostindonesische Zeit|Pakistanische Zeit|Palau Zeit|Papua-Neuguinea Zeit|Paraguay Sommerzeit|Paraguay Zeit|Pazifische Normalzeit|Pazifische Sommerzeit|PDT|Peruanische Zeit|PET|Petropawlowsk-Kamtschatkische Zeit|PETT|PGT|Philippinische Zeit|Phoenix Inseln Zeit|PHOT|PHT|Pierre & Miquelon Normalzeit|Pierre & Miquelon Sommerzeit|Pitcairn Normalzeit|PKT|PMDT|PMST|Pohnpei Zeit|PONT|PST|PWT|PYST|PYT|QYZT|Qyzylorda Zeit|RET|Reunion Zeit|Rocky Mountains Normalzeit|Rocky Mountains Sommerzeit|Rothera Zeit|ROTT|Sakhalin Zeit|SAKT|Salomoninseln Zeit|Samarische Zeit|Samoa Normalzeit|SAMT|SAST|SBT|SCT|Seychellen Zeit|SGT|Singapur Zeit|South Georgia Normalzeit|Srednekolymsk Time|SRET|SRT|SST|Suriname Zeit|SYOT|Syowa Zeit|S\u00FCdafrikanische Normalzeit|Tadschikische Zeit|Tahiti Zeit|TAHT|TFT|Timor-Leste Normalzeit|TJT|TKT|TLT|TMT|Tokelau Zeit|Tonga Sommerzeit|Tonga Zeit|TOST|TOT|Turkmenische Zeit|Tuvalu Zeit|TVT|Ulaanbaatar Zeit|ULAT|Uruguayische Zeit|Usbekistan Zeit|Ust-Nera Zeit|UTC|UYT|UZT|Vanuatu Zeit|Venezuelanische Zeit|VET|VLAT|VOST|Vostok Zeit|VUT|Wake Zeit|WAKT|Wallis u\\. Futuna Zeit|WAST|WAT|West Samoa Sommerzeit|West Samoa Zeit|Westafrikanische Sommerzeit|Westafrikanische Zeit|Westeurop\u00E4ische Sommerzeit|Westeurop\u00E4ische Zeit|Westgr\u00F6nl\u00E4ndische Sommerzeit|Westgr\u00F6nl\u00E4ndische Zeit|Westindonesische Zeit|Westliche Normalzeit \\(Australien\\)|WESZ|WEZ|WFT|WGST|WGT|WIB|WIT|WITA|Wladiwostok Zeit|WSDT|WSST|XJT|YAKT|YEKT|Zentral-Westliche Normalzeit \\(Australien\\)|Zentralafrikanische Zeit|Zentrale Normalzeit|Zentrale Normalzeit \\(Northern Territory\\)|Zentrale Normalzeit \\(S\u00FCdaustralien\\)|Zentrale Normalzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentrale Sommerzeit|Zentrale Sommerzeit \\(S\u00FCdaustralien\\)|Zentrale Sommerzeit \\(S\u00FCdaustralien/New South Wales\\)|Zentraleurop\u00E4ische Sommerzeit|Zentraleurop\u00E4ische Zeit|Zentralindonesische Zeit|\u00D6stliche Normalzeit|\u00D6stliche Normalzeit \\(New South Wales\\)|\u00D6stliche Normalzeit \\(Queensland\\)|\u00D6stliche Normalzeit \\(Tasmanien\\)|\u00D6stliche Normalzeit \\(Victoria\\)|\u00D6stliche Sommerzeit|\u00D6stliche Sommerzeit \\(New South Wales\\)|\u00D6stliche Sommerzeit \\(Tasmanien\\)|\u00D6stliche Sommerzeit \\(Victoria\\))8
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "w{D+7+r1IM)/4:");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("*)C&Sbz,?}lX:=", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("w{D+7+r1IM)/4:", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9dy`g*R+9", 1, 1, 0, 0, (-14), 0, 2213, 0);
      Locale locale0 = new Locale("tf");
      FastDateParser fastDateParser0 = new FastDateParser("+E.M~~I20_sJ;_$%,7s", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\+(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\.(\\p{IsNd}++)~~", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "AST");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("v1]6(>,k<t]?HEgN", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(")}hK{&8.dzkD%.xxM", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("K1Q{83", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("K1Q{83", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Sysf`:&]V3", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("7[RzE:U-KJM:8A", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(39, "7[RzE:U-KJM:8A");
      FastDateParser fastDateParser1 = new FastDateParser("7[RzE:U-KJM:8A", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(")}hK{&8.dzkD%.xxM", timeZone0, locale0);
      Locale locale1 = Locale.CANADA;
      FastDateParser fastDateParser1 = new FastDateParser(")}hK{&8.dzkD%.xxM", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2), "4q'>(Z");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("4q'>(Z", simpleTimeZone0, locale0);
      Date date0 = fastDateParser0.parse("4q'>(Z");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("K1Q{83", timeZone0, locale0);
      try { 
        fastDateParser0.parse("K1Q{83");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"K1Q{83\" does not match (\\p{IsNd}{1}+)1
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.forLanguageTag("GMT");
      FastDateParser fastDateParser0 = new FastDateParser("?wK^$.A", timeZone0, locale0);
      assertEquals("?wK^$.A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("`|4ay,v<#n 'q'RoUWx", timeZone0, locale0);
      assertEquals("`|4ay,v<#n 'q'RoUWx", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1065, "*^t");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("''~]Lj%]BGIL]d&B>'k", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-8));
      assertEquals(1992, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("+_)G)..GHMV_uO9", timeZone0, locale0);
      assertEquals("+_)G)..GHMV_uO9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(116, "''~]j]$GIO]d&B>'");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("''~]j]$GIO]d&B>'", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(116);
      assertEquals(2016, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1701, "-N7ts~Xrx");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("-N7ts~Xrx", simpleTimeZone0, locale0);
      assertEquals("-N7ts~Xrx", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2441), "x;<xRg");
      Locale locale0 = new Locale("x;<xRg");
      FastDateParser fastDateParser0 = new FastDateParser("H/ ?@SBt4D3n", simpleTimeZone0, locale0);
      assertEquals("H/ ?@SBt4D3n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("0~", timeZone0, locale0);
      assertEquals("0~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("m23");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("m23", timeZone0, locale0);
      assertEquals("m23", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1395);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("5$e*D", timeZone0, locale0);
      assertEquals("5$e*D", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("(,W6B!Fq\"Fqx", timeZone0, locale0);
      assertEquals("(,W6B!Fq\"Fqx", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "9dy`g*R+9", 1, 1, 0, 0, (-14), 0, 2213, 0);
      Locale locale0 = new Locale("tf");
      FastDateParser fastDateParser0 = new FastDateParser("9dy`g*R+9", simpleTimeZone0, locale0);
      assertEquals("9dy`g*R+9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(":)}HK{&8.dzkD%.xxM", timeZone0, locale0);
      assertEquals(":)}HK{&8.dzkD%.xxM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("H`=*uw-9\"?!C7jO_");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("z;}5vJf?_Zkdv!lX=GJ", timeZone0, locale0);
      assertEquals("z;}5vJf?_Zkdv!lX=GJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("=4f6f", timeZone0, locale0);
      assertEquals("=4f6f", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getTimeZone("QfC");
      FastDateParser fastDateParser0 = new FastDateParser(">+HWwTT<OS\" ", timeZone0, locale0);
      assertEquals(">+HWwTT<OS\" ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("?w@*.A", timeZone0, locale0);
      assertEquals("?w@*.A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hhUBY;");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("[Hvaxkk<^06XW", timeZone0, locale0);
      assertEquals("[Hvaxkk<^06XW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("]ctkqg4oKz)4 1^T", timeZone0, locale0);
      assertEquals("]ctkqg4oKz)4 1^T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_W>`X$.");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("_W>`X$.", timeZone0, locale0);
      assertEquals("_W>`X$.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1065, "");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("'|'~j%]BGIL]d&[B>'k", simpleTimeZone0, locale0);
      assertEquals("'|'~j%]BGIL]d&[B>'k", fastDateParser0.getPattern());
  }
}
