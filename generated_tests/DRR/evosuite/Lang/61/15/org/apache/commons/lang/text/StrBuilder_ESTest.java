/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 13:26:14 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class StrBuilder_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((-3877L));
      strBuilder0.deleteAll('-');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-327), (-885));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("<Ow|=}Z)\"+V");
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) null, "end < start");
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("o5");
      int int0 = strBuilder0.indexOf('G');
      assertEquals((-1), int0);
      assertEquals(2, strBuilder0.length());
      assertEquals(34, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.3");
      strBuilder0.asWriter();
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      // Undeclared exception!
      try { 
        strBuilder0.substring(4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(870);
      int int0 = strBuilder0.lastIndexOf('[');
      assertEquals(870, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrTokenizer strTokenizer0 = strBuilder0.asTokenizer();
      String string0 = strTokenizer0.getContent();
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4Lh57T7ZiWDf");
      StrMatcher strMatcher0 = StrMatcher.charMatcher('`');
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(44, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(4, 4, 'H');
      String string0 = strBuilder1.midString(0, 4);
      assertEquals(4, strBuilder0.size());
      assertEquals("0002", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) strMatcher_TrimMatcher0, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("l!l[Pvb-e`s");
      int int0 = strBuilder0.indexOf("l!l[Pvb-e`s");
      assertEquals(0, int0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append(0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      strBuilder0.asReader();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=rl|");
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 1003, '<');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.insert(2581, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2581
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(885);
      // Undeclared exception!
      try { 
        strBuilder0.insert(34, 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 34
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1878), (-2094.76190490824));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1878
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.insert((-3314), 'r');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3314
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("X|MT:}YAf");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(9, strBuilder0.length());
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("(zp}9AQ}y>");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("(zp}9AQ}y>");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(43, strBuilder0.capacity());
      assertTrue(boolean0);
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2440);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark(0);
      assertEquals(2440, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(0);
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(870);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("\"+~1.S-HU7l7?<Pbsm:");
      assertEquals(19, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(870);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null);
      assertEquals(870, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(870);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null, (-1), 870);
      assertEquals(870, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(870);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("\"+~1.S-HU7l7?<Pbsm:", 0, 0);
      assertEquals(870, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(0, '/');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-1524));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1524
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      
      strBuilder0.setLength(0);
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      StrBuilder strBuilder1 = strBuilder0.append((Object) "");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "");
      strBuilder2.minimizeCapacity();
      assertEquals(54, strBuilder0.size());
      assertEquals(54, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertTrue(strBuilder0.isEmpty());
      
      strBuilder0.size = (-899);
      boolean boolean0 = strBuilder0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2126));
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(370);
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-2155));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2155
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      // Undeclared exception!
      try { 
        strBuilder0.charAt(1011);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1011
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-550), 'D');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -550
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.insert(0, 0L);
      strBuilder0.setCharAt(0, '/');
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("o5");
      strBuilder0.deleteCharAt(0);
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(1436);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1436
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.insert(0, 0L);
      strBuilder0.toCharArray();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("<Ow|=}Z)\"+V");
      char[] charArray0 = strBuilder0.toCharArray(0, 32);
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = strBuilder0.toCharArray(0, 32);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1615);
      char[] charArray0 = new char[9];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(0, strBuilder0.length());
      assertEquals(1615, strBuilder0.capacity());
      assertEquals(9, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1490, 250, charArray0, 48);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 250
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-45));
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-45), (-45), charArray0, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -45
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1));
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(32, (-331), charArray0, (-331));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -331
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(412.68);
      strBuilder0.append(strBuilder0, 3, 3);
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(76, 0, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.setNewLineText("', has a length less than 2");
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1112);
      strBuilder0.setNullText("F9kHz2#]<%p61<{[Iw");
      strBuilder0.appendNull();
      assertEquals(19, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((String) null, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2437));
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", (-2437), (-2437));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5.1");
      // Undeclared exception!
      try { 
        strBuilder0.append("5.1", 117, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("o5");
      // Undeclared exception!
      try { 
        strBuilder0.append("H~*$2zek.'", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2440);
      // Undeclared exception!
      try { 
        strBuilder0.append("user.name", 0, 2777);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1112);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("aYZzIUSttt.tg?K/v2\"", 9, 9);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1112, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(31);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, (-4419), 3074);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("<Ow|=}Z)\"+V");
      StringBuffer stringBuffer0 = new StringBuffer(32);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 1, 3030);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-1659));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("<Ow|=}Z)\"+V");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      strBuilder0.append(stringBuffer0, 1, 1);
      assertEquals(12, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4731));
      StringBuffer stringBuffer0 = new StringBuffer("");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2232);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(2232, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      StrBuilder strBuilder1 = strBuilder0.append((Object) "");
      strBuilder0.append(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.3");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-1267), (-1267));
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 631, 43);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, (-116));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(0, 1313, ':');
      // Undeclared exception!
      try { 
        strBuilder1.append(strBuilder0, 1313, 1313);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      strBuilder0.append(strBuilder1, 3, 0);
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 101, 638);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 638
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1112);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, (-1050), (-1101));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -1101
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, (-500));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -500
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(":if;XEcOL>");
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 3, 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 3
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      char[] charArray0 = new char[7];
      strBuilder0.append(charArray0, 0, 2);
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(false);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=rl|");
      strBuilder0.append(true);
      assertEquals(8, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1971);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "4>Kc");
      assertEquals(1971, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "Invalid length: ");
      assertEquals(56, strBuilder1.length());
      assertEquals(88, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[4];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("remove() is unsupported");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "remove() is unsupported");
      assertEquals(55, strBuilder1.capacity());
      assertEquals(23, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "4lye/n;Qn{X");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$G*CX");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1487));
      linkedList0.add(integer0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertEquals(33, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.offerLast((String) null);
      linkedList0.add("");
      strBuilder0.appendWithSeparators((Collection) linkedList0, "zs-42HNs");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1897);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
      assertEquals(0, strBuilder1.size());
      assertEquals(1897, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "Invalid length: ");
      assertEquals(1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(86, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(578);
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-614), 'n');
      assertEquals(578, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) 'R', 0, '?');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("J/EX<<%+b[ bsN");
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 9, 'c');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(Integer.MAX_VALUE, 0, 't');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight(2, 2, 'A');
      assertEquals(2, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, (Object) "org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[4];
      strBuilder0.insert(0, charArray0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("Invalid offset: ");
      strBuilder0.insert(5, (char[]) null);
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append(1557.392F);
      char[] charArray0 = new char[0];
      strBuilder1.insert(2, charArray0);
      assertEquals(8, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[7];
      strBuilder0.appendFixedWidthPadLeft(4, 4, 'H');
      strBuilder0.insert(4, charArray0, 4, 0);
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("l:1blJG1#xwY_");
      StrBuilder strBuilder1 = strBuilder0.insert(9, (char[]) null, 46, 9);
      assertEquals(45, strBuilder1.capacity());
      assertEquals(13, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-1044), (-1044));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1044
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ptPr$}#@Is\"");
      strBuilder0.appendFixedWidthPadRight((Object) "ptPr$}#@Is\"", 3641, '~');
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.insert(900, charArray0, 3641, 900);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 3641
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      char[] charArray0 = strBuilder0.toCharArray();
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-559));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -559
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      char[] charArray0 = strBuilder0.toCharArray();
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 34);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 34
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=rl|");
      char[] charArray0 = new char[7];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 1003, ']');
      char[] charArray1 = strBuilder0.getChars(charArray0);
      strBuilder0.insert(1003, charArray1, 6, 98);
      assertEquals(1105, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.insert(0, true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.delete(0, 't');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding(1827, '<');
      assertEquals(1827, strBuilder0.size());
      
      strBuilder1.deleteAll('<');
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      strBuilder0.append(charArray0);
      strBuilder0.deleteFirst('&');
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[4];
      strBuilder0.appendWithSeparators(objectArray0, "org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.deleteFirst('d');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      StrBuilder strBuilder1 = strBuilder0.append((Object) "");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "");
      strBuilder2.deleteAll("java.lang.String@0000000002java.lang.String@0000000005");
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.3");
      strBuilder0.deleteFirst("1.3");
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("Invalid length: ");
      assertEquals(56, strBuilder1.length());
      assertEquals(88, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      strBuilder0.append((Object) "");
      strBuilder0.replace(27, 27, (String) null);
      assertEquals(27, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3586);
      StrBuilder strBuilder1 = strBuilder0.replaceAll('y', 'y');
      assertEquals(3586, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1226);
      char[] charArray0 = new char[5];
      charArray0[4] = 'R';
      strBuilder0.append(charArray0);
      strBuilder0.replaceAll('R', '4');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(117);
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('+', '+');
      assertEquals(117, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrMatcher strMatcher0 = StrMatcher.commaMatcher();
      StrBuilder strBuilder1 = strBuilder0.append((Object) strMatcher0);
      strBuilder1.replaceFirst('A', 'g');
      assertEquals(62, strBuilder0.capacity());
      assertEquals(62, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append('2');
      strBuilder0.replaceFirst('2', '}');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replaceAll("_.4R'$C^", (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, "~c%&x5)`e->");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$4Nk^#7n<K'^M_HgPi");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("{w~!DhP_wn^=FX[s", "");
      assertEquals(18, strBuilder1.length());
      assertEquals(50, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("kI");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("kI", "kI");
      assertEquals(34, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "org.apache.commons.lang.text.StrBuilder");
      assertEquals(88, strBuilder1.capacity());
      assertEquals(56, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(1827, '<');
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      strBuilder0.replaceFirst(string0, string0);
      assertEquals(1827, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder0.replaceFirst("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", (String) null);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=rl|");
      char[] charArray0 = new char[7];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) strMatcher_CharSetMatcher0, "=rl|");
      assertEquals(4, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadRight(43, 43, 'A');
      StrMatcher strMatcher0 = StrMatcher.noneMatcher();
      strBuilder0.replace(strMatcher0, "org.apache.commons.lang.text.StrBuilder$StrBuilderReader", 0, 43, 0);
      assertEquals(43, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      strBuilder0.deleteFirst((StrMatcher) strMatcher_TrimMatcher0);
      assertEquals(23, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("A#bvH43t*F'|7\"");
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      strBuilder0.deleteAll(strMatcher0);
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((-3877L));
      strBuilder0.reverse();
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1168);
      strBuilder0.appendNewLine();
      assertEquals(1, strBuilder0.size());
      
      strBuilder0.trim();
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid length: ");
      assertEquals(16, strBuilder0.size());
      
      strBuilder0.trim();
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=rl|");
      boolean boolean0 = strBuilder0.startsWith("YV3*>xE${pcT");
      assertEquals(36, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("X|MT:}YAf");
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=rl|");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 1003, ']');
      boolean boolean0 = strBuilder0.startsWith("YV3*>xE${pcT");
      assertEquals(1007, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, "pq6qqHF.%w6}9");
      boolean boolean0 = strBuilder1.startsWith("pq6qqHF.%w6}9");
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith("E$o0{gUnYuCjbF>G6>Q");
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]~D");
      boolean boolean0 = strBuilder0.endsWith(" '");
      assertEquals(3, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(35, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      boolean boolean0 = strBuilder0.endsWith("startIndex must be valid");
      assertTrue(boolean0);
      assertEquals(56, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=rl|");
      String string0 = strBuilder0.leftString(1003);
      assertEquals("=rl|", string0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.leftString(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("4Lh57T7ZiWDf");
      String string0 = strBuilder0.leftString(9);
      assertEquals("4Lh57T7Zi", string0);
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.rightString(Integer.MAX_VALUE);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.rightString((-3616));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3978);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(3978, 3978, 'w');
      String string0 = strBuilder1.rightString(5);
      assertFalse(strBuilder0.isEmpty());
      assertEquals("wwwww", string0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4731));
      strBuilder0.midString((-1), 186);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(2526, 0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) strBuilder0;
      strBuilder0.appendWithSeparators(objectArray0, "");
      strBuilder0.midString(0, 4);
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.contains('L');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(117);
      strBuilder0.append('G');
      boolean boolean0 = strBuilder0.contains('G');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(117);
      boolean boolean0 = strBuilder0.contains("org.apache.commons.lang.text.StrMatcher");
      assertEquals(117, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append("xuwx3G~LgqB{Cbm");
      boolean boolean0 = strBuilder0.contains("xuwx3G~LgqB{Cbm");
      assertEquals(16, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      boolean boolean0 = strBuilder0.contains((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("V,&B:B D");
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertTrue(boolean0);
      assertEquals(40, strBuilder0.capacity());
      assertEquals(8, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('a', (-2232));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("<Ow|=}Z)\"+V");
      strBuilder0.deleteAll("Z");
      assertEquals(10, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-61));
      int int0 = strBuilder0.indexOf("PE'vgc8g8ml+fn", (-61));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf((String) null, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.setLength(2780);
      int int0 = strBuilder0.indexOf("", 0);
      assertEquals(2780, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.insert(0, 0L);
      strBuilder0.replaceFirst("1.3", "e+@9h;b}z");
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4731));
      int int0 = strBuilder0.indexOf((StrMatcher) null, (-1538));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      int int0 = strBuilder0.indexOf(strMatcher0, 771);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf('5', 4);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[2];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "");
      int int0 = strBuilder1.lastIndexOf('i', 445);
      assertEquals(27, strBuilder0.length());
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", 257);
      assertEquals(0, int0);
      assertEquals(88, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]~D");
      int int0 = strBuilder0.lastIndexOf("]~D", (-754));
      assertEquals((-1), int0);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(412.68);
      int int0 = strBuilder0.lastIndexOf("", 3);
      assertEquals(6, strBuilder0.size());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.appendNewLine();
      int int0 = strBuilder0.lastIndexOf("?:kTL>[w-s+3Qy1x", 5);
      assertEquals(1, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append(1557.392F);
      int int0 = strBuilder0.lastIndexOf("'", 1);
      assertEquals(8, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("]~D");
      int int0 = strBuilder0.lastIndexOf(" '", 1);
      assertEquals(3, strBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(35, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrMatcher strMatcher0 = StrMatcher.stringMatcher("");
      int int0 = strBuilder0.lastIndexOf(strMatcher0, (-893));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("user.home");
      strBuilder0.append(stringBuffer0);
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("user.home");
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_StringMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1971);
      strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, 57, '4');
      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();
      strBuilder0.lastIndexOf(strMatcher0);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("-");
      StrBuilder strBuilder1 = new StrBuilder("o");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(33, strBuilder1.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("!U*``rX {");
      StrBuilder strBuilder1 = new StrBuilder((String) null);
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(boolean0);
      assertEquals(41, strBuilder0.capacity());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("zyAH  a-h(3!O/q;1");
      StrBuilder strBuilder1 = new StrBuilder("zyAH  a-h(3!O/q;1");
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder0);
      assertEquals(17, strBuilder1.length());
      assertTrue(boolean0);
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("-");
      StrBuilder strBuilder1 = new StrBuilder("o");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertFalse(boolean0);
      assertEquals(33, strBuilder1.capacity());
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(1, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2066));
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-4687));
      StrBuilder strBuilder1 = new StrBuilder("#}rS%0R");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(7, strBuilder1.length());
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(39, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("zyAH  a-h(3!O/q;1");
      StrBuilder strBuilder1 = new StrBuilder("zyAH  a-h(3!O/q;1");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(49, strBuilder1.capacity());
      assertTrue(boolean0);
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      Integer integer0 = new Integer(1742);
      boolean boolean0 = strBuilder0.equals((Object) integer0);
      assertEquals(88, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(56, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("5.1");
      strBuilder0.hashCode();
      assertEquals(3, strBuilder0.length());
      assertEquals(35, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(870);
      // Undeclared exception!
      try { 
        strBuilder0.substring((-3139));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3139
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[0];
      strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 1319, 427);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.reset(charArray0);
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("\u0000", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("$4Nk^#7n<K'^M_HgPi");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(18, strBuilder0.size());
      assertEquals(36, int0);
      assertEquals(50, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("user.language");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-4901), (-4901));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(117);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 4, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2145);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 2145, (-604));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 2125, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1, 383);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2126));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder0.insert(0, 0L);
      char[] charArray0 = new char[7];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      strBuilder0.append(charArray0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.skip(0L);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(strBuilder_StrBuilderReader0.ready());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip('/');
      assertEquals(0, strBuilder0.size());
      assertEquals(0L, long0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2440);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-2379L));
      assertEquals(2440, strBuilder0.capacity());
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
  }
}
