/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 13:23:17 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class StrBuilder_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=Rb) i\"B1Eg`eH$ :(O");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("s9B yW_ p8?QZT3ZgA");
      int int0 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals(51, strBuilder0.capacity());
      assertEquals(19, strBuilder0.length());
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrMatcher$NoMatcher");
      int int0 = strBuilder0.indexOf('9');
      assertEquals((-1), int0);
      assertEquals(49, strBuilder0.length());
      assertEquals(81, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9M1>,\"k");
      strBuilder0.asWriter();
      assertEquals(7, strBuilder0.length());
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.substring(102);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w)K");
      int int0 = strBuilder0.lastIndexOf(' ');
      assertEquals(35, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('K');
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharMatcher0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

//  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=Rb) i\"B1Eg`eH$ :(O");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "The Array must not be null");
      assertEquals(3, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(152, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("CXNXeNb[$e-V");
      strBuilder0.appendFixedWidthPadLeft((-2022), 3, 'l');
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3937);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "L25Z[&^3qyU9?");
      assertEquals(3937, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("B");
      int int0 = strBuilder0.indexOf("uYlj}TCS9");
      assertEquals(33, strBuilder0.capacity());
      assertEquals((-1), int0);
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9M1>,\"k");
      Reader reader0 = strBuilder0.asReader();
      reader0.close();
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9M1>,\"k");
      strBuilder0.asTokenizer();
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("=5Rk(");
      // Undeclared exception!
      try { 
        strBuilder0.insert(1899, (-2233L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1899
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      // Undeclared exception!
      try { 
        strBuilder0.insert(1573, (float) 1573);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1573
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, (-2379.39559));
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      int int0 = strBuilder0.lastIndexOf("");
      assertEquals(56, strBuilder0.length());
      assertEquals(88, strBuilder0.capacity());
      assertEquals(55, int0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(482.0F);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(32);
      // Undeclared exception!
      try { 
        strBuilder0.insert(32, 'V');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("G.HS&Dxd*G`)");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("CXNXeNb[$e-V");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark((-2312));
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(50);
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1601);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[8];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1601, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.toCharArray();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", 1, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-166));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -166
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, true);
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.setLength(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L<4_ggayo1%<b");
      strBuilder0.setLength(749);
      strBuilder0.insert(749, (char[]) null);
      assertEquals(749, strBuilder0.capacity());
  }

//  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("u5#an<=Z");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ")tU~\"a#3n|}4H!^=");
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      strBuilder1.minimizeCapacity();
      assertEquals(51, strBuilder0.length());
      assertEquals(51, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F;*Y+/vTK5@I!::JyZA");
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(51, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(19, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-352));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -352
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L<4_ggayo1%<b");
      // Undeclared exception!
      try { 
        strBuilder0.charAt(4700);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 4700
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((-4390.587748994));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(15, strBuilder0.size());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2321));
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-2321), 'y');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2321
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w)K");
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(5, ' ');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-967));
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-967));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -967
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("9M1>,\"k");
      strBuilder0.deleteCharAt(0);
      assertEquals(6, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      char[] charArray0 = strBuilder0.toCharArray();
      assertEquals(56, strBuilder0.length());
      assertEquals(56, charArray0.length);
      assertEquals(88, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2459);
      StrBuilder strBuilder1 = strBuilder0.append((Object) "', has a length less than 2");
      strBuilder1.toCharArray(5, 833);
      assertEquals(27, strBuilder0.length());
      assertEquals(27, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("YpZy$`");
      char[] charArray0 = strBuilder0.toCharArray(5, 5);
      StrBuilder strBuilder1 = strBuilder0.replace(5, 21, "eLRp2za)&:6=");
      strBuilder0.append("eLRp2za)&:6=");
      strBuilder1.insert(21, charArray0);
      assertEquals(31, strBuilder0.size());
      assertEquals(38, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(39);
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(0, charArray0.length);
      assertEquals(39, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(1, charArray1.length);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("BH%Bri&|8R");
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      char[] charArray0 = new char[0];
      strBuilder1.buffer = charArray0;
      // Undeclared exception!
      try { 
        strBuilder0.getChars(strBuilder1.buffer);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("CXNXeNb[$e-V");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[3];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(44, strBuilder0.capacity());
      assertEquals(3, int0);
      assertEquals(12, strBuilder0.length());
      assertArrayEquals(new char[] {'C', 'X', 'N'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2218);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-3252), (-3252), charArray0, 2218);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3252
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1717);
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1717, (-2253), charArray0, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2253
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(103);
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(57, 57, charArray0, 103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 57
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(187, 0, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setNewLineText("00K");
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setNullText("java.vm.info");
      strBuilder0.appendNull();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("L<4_ggayo1%<b");
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(14, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("BH%Bri&|8R");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((String) null);
      assertEquals(10, strBuilder0.length());
      assertEquals(42, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.append((String) null, 39, 3021);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("", (-1), (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|3oC#'4$X");
      // Undeclared exception!
      try { 
        strBuilder0.append("|3oC#'4$X", 5, 5);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.append("k", 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|3oC#'4$X");
      strBuilder0.append("|3oC#'4$X", 5, 5);
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append("", 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("z|.AcS^EWt@3v</.");
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(16, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("CXNXeNb[$e-V");
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 862, 862);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null, 0, (-3379));
      assertEquals(1, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-2800), (-2800));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-5));
      CharBuffer charBuffer0 = CharBuffer.allocate(2969);
      StringBuffer stringBuffer0 = new StringBuffer(charBuffer0);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 32, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-440));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "end < start");
      strBuilder0.append(stringBuffer0, 2, 2);
      assertEquals(13, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 13, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4382);
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, (-1), 53);
      assertEquals(4382, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("_PQLT+j#<{zg~F(E");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-387), 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "", 1376, 'T');
      strBuilder1.append(strBuilder0, 13, 1);
      assertEquals(1377, strBuilder0.length());
      assertEquals(1377, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(5);
      StrBuilder strBuilder1 = new StrBuilder("user.dir");
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder1, 5, (-2290));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 2470);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 0, 0);
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null, Integer.MAX_VALUE, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[20];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-15), 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 32
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pnsgNIvMA}6>^\"7");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 1557, 1557);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 1557
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, (-310));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -310
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1601);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 115
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      char[] charArray0 = new char[5];
      strBuilder0.append(charArray0, 2, 2);
      assertEquals(22, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("/Nm5[%3Ps*E");
      strBuilder0.append(false);
      assertEquals(16, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      Object[] objectArray0 = new Object[3];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("u5#an<=Z");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      assertEquals(8, strBuilder1.length());
      assertEquals(40, strBuilder1.capacity());
  }

//  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3937);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.addFirst(strBuilder0);
      linkedList0.add((Object) strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2459);
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "java.specification.vendor");
      assertEquals(2459, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, (String) null);
      assertEquals(0, strTokenizer0.previousIndex());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-2229), 'D');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "", 0, 'E');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2397);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 2, '');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(Integer.MAX_VALUE, 0, 'E');
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 897, 'e');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(689);
      strBuilder0.appendFixedWidthPadRight(1, 5, '2');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3937);
      // Undeclared exception!
      try { 
        strBuilder0.insert(3937, (Object) strBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 3937
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3314);
      // Undeclared exception!
      try { 
        strBuilder0.insert(2, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[9];
      strBuilder0.insert(0, charArray0);
      assertEquals(9, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      Integer integer0 = new Integer(0);
      strBuilder0.appendFixedWidthPadRight((Object) integer0, 2471, '.');
      char[] charArray0 = new char[3];
      strBuilder0.insert(2471, charArray0, 0, 0);
      assertEquals(2471, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      StrBuilder strBuilder1 = strBuilder0.insert(2, (char[]) null, 339, 4619);
      assertEquals(88, strBuilder1.capacity());
      assertEquals(56, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.toCharArray();
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-771), (-771));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -771
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 3, (-733));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 3
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder");
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder0.insert(1, charArray0, 1, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 1877);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 1877
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[7];
      strBuilder0.insert(0, charArray0, 0, 1);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("O;'oERG26F\"IB]wM}");
      strBuilder0.insert(0, false);
      assertEquals(22, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(210);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 210, ',');
      strBuilder0.delete(210, 210);
      assertEquals(210, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.size = 7;
      strBuilder0.trim();
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      Integer integer0 = new Integer(0);
      strBuilder0.appendFixedWidthPadRight((Object) integer0, 2471, '.');
      strBuilder0.deleteAll('.');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2397);
      StrBuilder strBuilder1 = strBuilder0.deleteFirst('9');
      assertEquals(2397, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("pnsgNIvMA}6>^\"7");
      strBuilder0.deleteFirst('>');
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("YpZy$`");
      StrBuilder strBuilder1 = strBuilder0.deleteAll("org.apache.commons.lang.SystemUtils");
      assertEquals(38, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("7");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(1, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3937);
      strBuilder0.appendPadding(3937, 'K');
      String string0 = strBuilder0.toString();
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.deleteAll(string0);
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst("J");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("B");
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.deleteFirst("B");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, "");
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.specification.vendor");
      strBuilder0.replace(5, 32, (String) null);
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll('l', 'l');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2397);
      Integer integer0 = new Integer(245);
      strBuilder0.appendFixedWidthPadRight((Object) integer0, 2397, 'q');
      strBuilder0.replaceAll('I', 'M');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('H', 'H');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      strBuilder0.append(1);
      strBuilder0.replaceFirst('T', 'N');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      strBuilder0.appendFixedWidthPadLeft((Object) "", 1376, 'T');
      strBuilder0.replaceFirst('T', 'N');
      assertEquals(1376, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("org.apache.commons.lang.text.StrBuilder", (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(">Sz3KO#c}W</H[tcL;");
      strBuilder0.append(stringBuffer0);
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.replaceAll(">Sz3KO#c}W</H[tcL;", "");
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-733));
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("e", "e");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("!v&oZY,i`d1XK0+]Y");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, "");
      assertEquals(49, strBuilder1.capacity());
      assertEquals(17, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      strBuilder0.replaceFirst("startIndex must be valid", "");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("c95$IE");
      strBuilder0.replaceFirst("c95$IE", (String) null);
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) null, "Invalid startIndex: ");
      assertEquals(20, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      Integer integer0 = new Integer(0);
      strBuilder0.appendFixedWidthPadRight((Object) integer0, 2471, '.');
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();
      strBuilder0.replaceAll(strMatcher0, "");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("YpZy$`");
      strBuilder0.replace(5, 21, "eLRp2za)&:6=");
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher("awt.toolkit");
      strBuilder0.deleteFirst(strMatcher0);
      assertEquals(17, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("BH%Bri&|8R");
      StrMatcher strMatcher0 = StrMatcher.charMatcher('r');
      strBuilder0.deleteAll(strMatcher0);
      assertEquals(9, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(">Sz3KO#c}W</H[tcL;");
      strBuilder0.append(stringBuffer0);
      strBuilder0.reverse();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrBuilder strBuilder1 = strBuilder0.append(1);
      strBuilder1.trim();
      assertEquals(1, strBuilder0.length());
      assertFalse(strBuilder0.isEmpty());
  }

//  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((Object) strBuilder0);
      strBuilder0.appendNewLine();
      strBuilder0.trim();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.startsWith("$ehzVk~]KRo");
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(657);
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertFalse(boolean0);
      assertEquals(657, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ")tU~\"a#3n|}4H!^=");
      strBuilder0.append(stringBuffer0);
      boolean boolean0 = strBuilder0.startsWith(">13<CX{{rjT<[)X[");
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

//  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<StrBuilder> linkedList0 = new LinkedList<StrBuilder>();
      linkedList0.offerFirst(strBuilder0);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "");
      boolean boolean0 = strBuilder0.startsWith("org.apache.commons.lang.text.StrBuilder");
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(">Sz3KO#c}W</H[tcL;");
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid startIndex: ");
      boolean boolean0 = strBuilder0.endsWith("end < start");
      assertEquals(52, strBuilder0.capacity());
      assertFalse(boolean0);
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.endsWith("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|3oC#'4$X");
      boolean boolean0 = strBuilder0.endsWith("|3oC#'4$X");
      assertEquals(41, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("CXNXeNb[$e-V");
      String string0 = strBuilder0.leftString(2783);
      assertEquals("CXNXeNb[$e-V", string0);
      assertEquals(44, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.leftString(0);
      assertEquals(32, strBuilder0.capacity());
  }

//  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2459);
      StrBuilder strBuilder1 = strBuilder0.append((Object) "', has a length less than 2");
      String string0 = strBuilder1.leftString(5);
      assertEquals(27, strBuilder0.length());
      assertEquals("java.", string0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(657);
      String string0 = strBuilder0.rightString(657);
      assertEquals("", string0);
      assertEquals(657, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      String string0 = strBuilder0.rightString(0);
      assertEquals("", string0);
      assertEquals(56, strBuilder0.capacity());
      assertEquals(24, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e6of");
      String string0 = strBuilder0.rightString(1);
      assertEquals("f", string0);
      assertEquals(36, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("|3oC#'4$X");
      String string0 = strBuilder0.midString(5, 32);
      assertEquals("'4$X", string0);
      assertEquals(41, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("u5#an<=Z");
      strBuilder0.midString((-2792), (-2792));
      assertEquals(8, strBuilder0.length());
      assertEquals(40, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.midString(115, 2672);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      String string0 = strBuilder0.midString(2, 2);
      assertEquals(88, strBuilder0.capacity());
      assertEquals("g.", string0);
      assertEquals(56, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("z|.AcS^EWt@3v</.");
      boolean boolean0 = strBuilder0.contains('P');
      assertEquals(16, strBuilder0.length());
      assertFalse(boolean0);
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(939, 939, '[');
      boolean boolean0 = strBuilder0.contains('[');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w)K");
      boolean boolean0 = strBuilder0.contains("w)K");
      assertTrue(boolean0);
      assertEquals(35, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("rtR3R]}qzrp)O\"Gm");
      char[] charArray0 = new char[5];
      charArray0[4] = ')';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertTrue(boolean0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('*', (-1));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf("*GZOK0p9qe", (-938));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.contains((String) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.append((-4390.587748994));
      boolean boolean0 = strBuilder0.contains("");
      assertEquals(15, strBuilder0.length());
      assertTrue(boolean0);
  }

//  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("YpZy$`");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) strMatcher0;
      strBuilder0.appendWithSeparators(objectArray0, "");
      strBuilder0.deleteAll("org.apache.commons.lang.SystemUtils");
      assertEquals(66, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0, (-2243));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      boolean boolean0 = strBuilder0.contains((StrMatcher) null);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("YpZy$`");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertFalse(boolean0);
      assertEquals(6, strBuilder0.size());
      assertEquals(38, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf('U', 1713);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w)K");
      StrBuilder strBuilder1 = strBuilder0.append(1697L);
      strBuilder1.setCharAt(5, ' ');
      int int0 = strBuilder0.lastIndexOf(' ');
      assertEquals(7, strBuilder0.length());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      int int0 = strBuilder0.lastIndexOf("$6ETc`qL", 3182);
      assertEquals(1, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("6Qv6-ZTK8zBNK");
      int int0 = strBuilder0.lastIndexOf((String) null, (-1));
      assertEquals(13, strBuilder0.length());
      assertEquals((-1), int0);
      assertEquals(45, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      strBuilder0.append(1);
      int int0 = strBuilder0.lastIndexOf("$6ETc`qL", 3182);
      assertEquals(1, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "", 1376, 'T');
      int int0 = strBuilder1.lastIndexOf("$6ETc`qL", 3182);
      assertEquals(1376, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("r");
      int int0 = strBuilder0.lastIndexOf("r", 0);
      assertEquals(0, int0);
      assertEquals(33, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("WjG5!>tF7<SH(o");
      int int0 = strBuilder0.lastIndexOf("WjG5!>tF7<SH(o");
      assertEquals(0, int0);
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(119);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('t');
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, (-1178));
      assertEquals(119, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("YpZy$`");
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null, 5);
      assertEquals(6, strBuilder0.length());
      assertEquals(38, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4382);
      StrBuilder strBuilder1 = strBuilder0.append("YFtig7O`Rs|6j.=W");
      StrMatcher strMatcher0 = StrMatcher.splitMatcher();
      int int0 = strBuilder1.lastIndexOf(strMatcher0);
      assertEquals(16, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(119);
      strBuilder0.appendFixedWidthPadRight((-1178), 119, 't');
      StrBuilder strBuilder1 = new StrBuilder(119);
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder("H");
      strBuilder0.append('g');
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(1, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("\"d&WBSXn!x)zq");
      StrBuilder strBuilder1 = new StrBuilder("\"d&WBSXn!x)zq");
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(45, strBuilder1.capacity());
      assertTrue(boolean0);
      assertEquals(13, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder("H");
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      strBuilder2.append('h');
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder("H");
      boolean boolean0 = strBuilder1.equals(strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertEquals(32, strBuilder0.capacity());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder("H");
      StrBuilder strBuilder2 = strBuilder0.appendNull();
      StrBuilder strBuilder3 = strBuilder2.append('g');
      boolean boolean0 = strBuilder1.equals(strBuilder3);
      assertEquals(1, strBuilder2.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', has a length less than 2");
      StrBuilder strBuilder1 = new StrBuilder("', has a length less than 2");
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(59, strBuilder1.capacity());
      assertTrue(boolean0);
      assertEquals(27, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      Object object0 = new Object();
      boolean boolean0 = strBuilder0.equals(object0);
      assertFalse(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("z|.AcS^EWt@3v</.");
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertTrue(boolean0);
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("!v&oZY,i`d1XK0+]Y");
      strBuilder0.hashCode();
      assertEquals(17, strBuilder0.length());
      assertEquals(49, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1650));
      // Undeclared exception!
      try { 
        strBuilder0.replace((-1650), (-1145), "length must be valid");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1650
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("startIndex must be valid");
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1), (-10));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1714));
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[6];
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(657);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[3];
      strBuilder_StrBuilderTokenizer0.reset(charArray0);
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(657, strBuilder0.capacity());
      assertEquals("\u0000\u0000\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(238);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("", string0);
      assertEquals(238, strBuilder0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2321));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      char[] charArray0 = new char[6];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-314), (-129));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1377, (-31));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3937);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 3937, 120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1361);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 1361);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("w)K");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 5, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[1];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder0.insert(0, 4);
      char[] charArray0 = new char[6];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("CXNXeNb[$e-V");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(0L);
      assertEquals(44, strBuilder0.capacity());
      assertEquals(12, strBuilder0.length());
      assertEquals(0L, long0);
      assertEquals(12, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(9L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0, strBuilder0.size());
      assertEquals(0L, long0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-2198L));
      assertEquals(0L, long0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }
}
