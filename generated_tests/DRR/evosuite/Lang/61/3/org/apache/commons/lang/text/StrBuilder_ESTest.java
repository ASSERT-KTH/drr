/*
 * This file was automatically generated by EvoSuite
 * Sun Jun 23 12:50:51 GMT 2019
 */

package org.apache.commons.lang.text;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;


public class StrBuilder_ESTest {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e74w4");
      strBuilder0.deleteCharAt(0);
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-722));
      int int0 = strBuilder0.capacity();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      strBuilder0.getNewLineText();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip(2755L);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('m');
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.asWriter();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      String string0 = strBuilder0.substring(0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.lastIndexOf('~');
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-16));
      StrMatcher strMatcher0 = StrMatcher.trimMatcher();
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.appendFixedWidthPadLeft(600, 48, '');
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('');
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharMatcher0);
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      int int0 = strBuilder0.indexOf("");
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append((-2348));
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append((long) 0);
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder0.setLength(0);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-16));
      strBuilder0.asReader();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("euj}/[>[tt^");
      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();
      StrBuilder strBuilder1 = strBuilder0.deleteAll(strMatcher0);
      assertEquals(44, strBuilder1.capacity());
      assertEquals(12, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.asTokenizer();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.insert(5, 0L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 5
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.insert((-1708), 1406.6F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1708
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', has a length less than 2");
      // Undeclared exception!
      try { 
        strBuilder0.insert(108, (double) 39);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 108
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      int int0 = strBuilder0.lastIndexOf("?^k");
      assertEquals((-1), int0);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append((float) (-366));
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.insert(0, 'T');
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.reset();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(380);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(380, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder_StrBuilderReader0.mark(44);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.close();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e74w4");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((-1));
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e74w4");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[16];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertEquals(21, strBuilder0.size());
      assertEquals(37, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.toCharArray(0, 0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 0, 3387);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 3387
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2252));
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer", 9, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.setNullText((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      StrBuilder strBuilder1 = strBuilder0.setNullText("");
      assertEquals(4, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setLength(116);
      strBuilder1.setCharAt(44, 'L');
      assertEquals(116, strBuilder0.capacity());
      assertEquals(116, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      // Undeclared exception!
      try { 
        strBuilder0.setLength((-931));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -931
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(670);
      StrBuilder strBuilder1 = strBuilder0.setLength(0);
      assertEquals(0, strBuilder1.size());
      assertEquals(670, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2434);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(2434, 2434, ';');
      strBuilder1.minimizeCapacity();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(2434, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder0.minimizeCapacity();
      assertEquals(0, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.setNullText("length must be valid");
      assertTrue(strBuilder1.isEmpty());
      
      strBuilder1.size = 632;
      boolean boolean0 = strBuilder1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.charAt((-266));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -266
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("', has a length less than 2");
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(27, strBuilder0.size());
      assertEquals(39, int0);
      assertEquals(59, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.charAt(0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt((-6336), 'H');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -6336
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.setCharAt(44, 'L');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 44
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(670);
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt((-214));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -214
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.deleteCharAt(816);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 816
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      char[] charArray0 = strBuilder1.toCharArray();
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      strBuilder0.toCharArray();
      assertEquals(2, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append(false);
      char[] charArray0 = strBuilder1.toCharArray(0, 1167);
      assertEquals(5, strBuilder0.length());
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = strBuilder0.getChars((char[]) null);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("S");
      char[] charArray0 = new char[9];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertEquals(9, charArray1.length);
      assertArrayEquals(new char[] {'S', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("S");
      char[] charArray0 = new char[9];
      strBuilder0.setLength(1720);
      strBuilder0.getChars(charArray0);
      assertEquals(1720, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1464);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[4];
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderReader0, 3941, 'U');
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-1575));
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try { 
        strBuilder0.getChars((-1575), (-1575), charArray0, 960);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1575
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[2];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(4, (-655), charArray0, 3485);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -655
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(32, 1354, charArray0, 44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1354
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("add() is unsupported");
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder0.getChars(1215, 0, charArray0, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.setNewLineText("end < start");
      strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-5257));
      strBuilder0.setNullText("StrTokenizer");
      strBuilder0.append((StringBuffer) null, 1230, 1);
      assertEquals(12, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((String) null);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(4);
      StrBuilder strBuilder1 = strBuilder0.append((String) null, 4, 0);
      assertEquals(4, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1464);
      // Undeclared exception!
      try { 
        strBuilder0.append("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer", (-757), (-757));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write("", 114, 114);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-5607));
      // Undeclared exception!
      try { 
        strBuilder0.append("java.vendor", 5, (-5607));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append("AIX", 2, 32);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      strBuilder0.append("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter", 2, 1);
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append((StringBuffer) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("`v>.mBe'qg");
      strBuilder0.append(stringBuffer0);
      assertEquals(10, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("F^7$\">w");
      StringBuffer stringBuffer0 = new StringBuffer("Z&");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 1, 2987);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "1.6");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, (-2758), (-4425));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-931));
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 4, (-1232));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer("kgn}.h");
      // Undeclared exception!
      try { 
        strBuilder0.append(stringBuffer0, 0, (-366));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.append("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer");
      strBuilder0.append(stringBuffer0, 2, 2);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StringBuffer stringBuffer0 = new StringBuffer(0);
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderWriter");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null);
      assertEquals(88, strBuilder1.capacity());
      assertEquals(56, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("ig`Tx~qV'tGE`VvZ");
      strBuilder0.append(strBuilder0);
      assertEquals(32, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("add() is unsupported");
      strBuilder0.append(strBuilder0, 7, 10);
      assertEquals(30, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      StrBuilder strBuilder1 = strBuilder0.append((StrBuilder) null, 44, (-784));
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, (-2625), (-1320));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 108, 108);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.append(strBuilder0, 0, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("add() is unsupported");
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, 7, 0);
      assertEquals(52, strBuilder1.capacity());
      assertEquals(20, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-2313));
      StrBuilder strBuilder1 = strBuilder0.append((char[]) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write((char[]) null, 0, (-5429));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, (-1), (-2714));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -2714
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderWriter0.write(charArray0, 115, (-123));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -123
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder0.append(charArray0, 0, (-1188));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1188
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[11];
      charArray0[0] = 'G';
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "4Q=vS3$=2=&i:4");
      assertEquals(1, strTokenizer0.nextIndex());
      assertEquals(27, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[5];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertTrue(strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.append(true);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "}2/~]0");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Object[] objectArray0 = new Object[0];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, "*");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Object[] objectArray0 = new Object[1];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      Object[] objectArray0 = new Object[7];
      strBuilder0.appendWithSeparators(objectArray0, "Jd,\"d1C");
      assertEquals(42, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "AIX");
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      strBuilder0.appendWithSeparators((Collection) linkedList0, (String) null);
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(114);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) strBuilder0);
      linkedList0.add((Object) null);
      strBuilder0.appendWithSeparators((Collection) linkedList0, "pHjEYA=-Z1rv=p");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vm.specification.vendor");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) null, "java.vm.specification.vendor");
      assertEquals(28, strBuilder1.length());
      assertEquals(60, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, (String) null);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("AIX");
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder1.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, "AIX");
      assertEquals(64, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendPadding((-3722), 'n');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(116, 'l');
      boolean boolean0 = strBuilder0.endsWith("ll");
      assertEquals(116, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "y<smf^q", 0, 'n');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadLeft((Object) null, 2175, ' ');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(4, 4, 'w');
      strBuilder1.insert(4, true);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-5257));
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((-5257), (-1), 'H');
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1187);
      // Undeclared exception!
      try { 
        strBuilder0.appendFixedWidthPadRight((Object) null, 39, 'K');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      Integer integer0 = new Integer(9);
      strBuilder0.appendFixedWidthPadRight((Object) integer0, 6, '%');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, (Object) strBuilder0);
      strBuilder0.replaceFirst('S', 'K');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2434);
      strBuilder0.appendFixedWidthPadRight(2434, 2434, ';');
      char[] charArray0 = new char[5];
      strBuilder0.insert(3, charArray0);
      assertEquals(2439, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      strBuilder0.append((Object) strMatcher0);
      strBuilder0.insert(19, (char[]) null);
      assertEquals(62, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[0];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      StrBuilder strBuilder1 = strBuilder0.insert(0, charArray0, 0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.insert(0, (char[]) null, 0, 143);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("add() is unsupported");
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, (-938), 452);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -938
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 5, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 5
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, (-446));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -446
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("1.E:^^gK|9[T(6zF");
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder0.insert(0, charArray0, 0, 115);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 115
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[3];
      strBuilder0.insert(0, charArray0, 0, 3);
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.delete(0, 0);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertFalse(strBuilder0.isEmpty());
      
      strBuilder1.trim();
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.appendFixedWidthPadLeft(3633, 312, ',');
      strBuilder0.deleteAll(',');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("fkn<Hm2zcKVn4Z7-");
      assertEquals(16, strBuilder0.length());
      
      strBuilder0.deleteAll('-');
      assertEquals(15, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(4, 4, 'w');
      strBuilder0.deleteFirst('I');
      assertEquals(4, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      char[] charArray0 = new char[1];
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0);
      strBuilder0.appendWithSeparators((Iterator) strTokenizer0, "java.version");
      strBuilder0.deleteFirst('0');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("GR2GcJu &VF'qFIlN");
      StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null);
      assertEquals(17, strBuilder1.length());
      assertEquals(49, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("gw]`T]P7iwDP<y4$");
      strBuilder0.deleteAll("gw]`T]P7iwDP<y4$");
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("java.vm.specification.vendor");
      strBuilder0.deleteFirst("java.vm.specification.vendor");
      assertTrue(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("add() is unsupported");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("add() is unsupported", "add() is unsupported");
      assertEquals(20, strBuilder1.length());
      assertEquals(52, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      char[] charArray0 = new char[3];
      charArray0[0] = 'o';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer0, 953, 'o');
      strBuilder1.replaceFirst(strMatcher0, "");
      assertFalse(strBuilder0.isEmpty());
      assertEquals(952, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(13);
      strBuilder0.replace(0, 0, "javvendor");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      StrBuilder strBuilder1 = strBuilder0.replace(0, 0, (String) null);
      assertTrue(strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll('#', '#');
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add(")&LV");
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, "<5D1fb>Imh5y");
      strBuilder1.replaceAll('^', '\\');
      assertEquals(27, strBuilder0.size());
      assertEquals(27, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1);
      char[] charArray0 = new char[6];
      charArray0[0] = '^';
      strBuilder0.append(charArray0);
      strBuilder0.replaceAll('^', '\\');
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1723);
      StrBuilder strBuilder1 = strBuilder0.replaceFirst('s', 's');
      assertEquals(1723, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append(false);
      strBuilder0.replaceFirst('S', 'K');
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceAll("org.apache.commons.lang.text.StrBuilder$StrBuilderTokenizer", (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.replaceFirst("`8Z ImGFgy@wuvyt", "$##>*V,UetQM9o");
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((String) null, (String) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("Invalid offset: ");
      strBuilder0.replaceFirst("Invalid offset: ", "1.5");
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("``.@XJc99T:");
      strBuilder0.replaceFirst("``.@XJc99T:", (String) null);
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) null);
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang.text.StrBuilder$StrBuilderReader");
      char[] charArray0 = new char[3];
      charArray0[1] = 'c';
      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);
      strBuilder0.replaceAll(strMatcher0, "`U5Bx.a$D0Z,c_");
      assertEquals(82, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(3, strBuilder1.length());
      assertEquals(35, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(27);
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertEquals(27, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(4, 4, 'w');
      strBuilder1.trim();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, 1289.506796552);
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      strBuilder1.trim();
      assertFalse(strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      boolean boolean0 = strBuilder0.startsWith("0002");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.startsWith((String) null);
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("IYUK{hx1Lz");
      boolean boolean0 = strBuilder0.startsWith("");
      assertTrue(boolean0);
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(4, 4, 'w');
      boolean boolean0 = strBuilder0.startsWith("0002");
      assertEquals(4, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, 2);
      boolean boolean0 = strBuilder0.startsWith("Q");
      assertFalse(strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.endsWith("end < start");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?('s82||5^q5");
      boolean boolean0 = strBuilder0.endsWith((String) null);
      assertFalse(boolean0);
      assertEquals(12, strBuilder0.length());
      assertEquals(44, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.endsWith("");
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      strBuilder0.insert(0, charArray0);
      boolean boolean0 = strBuilder0.endsWith("7?)`");
      assertEquals(5, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      String string0 = strBuilder0.leftString(2594);
      assertEquals(32, strBuilder0.capacity());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("IYUK{hx1Lz");
      strBuilder0.leftString((-811));
      assertEquals(42, strBuilder0.capacity());
      assertEquals(10, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((String) null);
      strBuilder0.size = 46;
      String string0 = strBuilder0.leftString(1);
      assertEquals("\u0000", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      String string0 = strBuilder0.rightString(4);
      assertEquals("", string0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.rightString(0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append(false);
      strBuilder0.rightString(4);
      assertEquals(5, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1464);
      strBuilder0.midString(115, 4421);
      assertEquals(1464, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-16));
      strBuilder0.midString((-16), (-16));
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1464);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderReader0, 3941, 'U');
      strBuilder0.midString(115, 4421);
      assertEquals(3941, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendPadding(116, 'l');
      strBuilder0.midString(6, 2);
      assertEquals(116, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.contains('n');
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.append('n');
      boolean boolean0 = strBuilder1.contains('n');
      assertFalse(strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.contains("Nn");
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = strBuilder0.insert(0, false);
      boolean boolean0 = strBuilder1.contains("");
      assertEquals(5, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      StrMatcher strMatcher0 = StrMatcher.charMatcher('d');
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertFalse(boolean0);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.indexOf('l', (-2));
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("add() is unsupported");
      StrBuilder strBuilder1 = strBuilder0.replaceAll("N", "add() is unsupported");
      assertEquals(52, strBuilder1.capacity());
      assertEquals(20, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(4964, 4964, 'q');
      int int0 = strBuilder0.indexOf('q', (-847));
      assertEquals(4964, strBuilder0.capacity());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("{\"AU9^bn1j-)zm");
      int int0 = strBuilder0.indexOf("", (-848));
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf((String) null, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.insert(0, 2);
      strBuilder0.deleteFirst("java.vm.vendor");
      assertFalse(strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append(false);
      boolean boolean0 = strBuilder0.contains("Nn");
      assertEquals(5, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_TrimMatcher0, (-609));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      int int0 = strBuilder0.indexOf((StrMatcher) null, 0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("e74w4");
      strBuilder0.insert(0, 2479.747F);
      int int0 = strBuilder0.lastIndexOf('2', 32);
      assertEquals(13, strBuilder0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf("0002", 1464);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      int int0 = strBuilder0.lastIndexOf((String) null, 2630);
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?('s82||5^q5");
      int int0 = strBuilder0.lastIndexOf("", 0);
      assertEquals(44, strBuilder0.capacity());
      assertEquals(0, int0);
      assertEquals(12, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.append((double) 0);
      int int0 = strBuilder0.lastIndexOf("kg[TrJTqF");
      assertEquals(3, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      strBuilder0.setLength(97);
      int int0 = strBuilder0.lastIndexOf("7", 2327);
      assertEquals(97, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      strBuilder0.appendFixedWidthPadLeft(4, 4, 'w');
      int int0 = strBuilder0.lastIndexOf("0002", 1464);
      assertFalse(strBuilder0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('p');
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, (-1));
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("end < start");
      int int0 = strBuilder0.lastIndexOf((StrMatcher) null);
      assertEquals((-1), int0);
      assertEquals(11, strBuilder0.length());
      assertEquals(43, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("");
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(238, 3, 'Q');
      StrMatcher strMatcher0 = StrMatcher.tabMatcher();
      int int0 = strBuilder1.lastIndexOf(strMatcher0, 2170);
      assertEquals(3, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("2k!.I\"!");
      char[] charArray0 = new char[9];
      charArray0[5] = 'k';
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharSetMatcher0, 114);
      assertEquals(39, strBuilder0.capacity());
      assertEquals(1, int0);
      assertEquals(7, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = new StrBuilder(1);
      strBuilder1.setLength(1);
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(1, strBuilder1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(4, 4, 'n');
      StrBuilder strBuilder2 = new StrBuilder("0002");
      boolean boolean0 = strBuilder1.equalsIgnoreCase(strBuilder2);
      assertEquals(4, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("&");
      StrBuilder strBuilder1 = new StrBuilder("&");
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      strBuilder_StrBuilderWriter0.write("&");
      strBuilder1.append('H');
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertEquals(2, strBuilder1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder strBuilder1 = new StrBuilder();
      strBuilder0.append(false);
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertEquals(5, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(4, 4, 'n');
      StrBuilder strBuilder2 = new StrBuilder("0002");
      boolean boolean0 = strBuilder2.equals(strBuilder1);
      assertEquals(4, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(114);
      StrBuilder strBuilder1 = new StrBuilder();
      StrBuilder strBuilder2 = strBuilder1.setLength(32);
      StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1);
      strBuilder3.size = 32;
      boolean boolean0 = strBuilder2.equals(strBuilder3);
      assertEquals(32, strBuilder1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(824);
      Integer integer0 = new Integer(824);
      boolean boolean0 = strBuilder0.equals((Object) integer0);
      assertEquals(824, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("``.@XJc99T:");
      strBuilder0.hashCode();
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-5257));
      // Undeclared exception!
      try { 
        strBuilder0.validateRange((-5257), 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -5257
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("?('s82||5^q5");
      // Undeclared exception!
      try { 
        strBuilder0.delete(2162, (-116));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
         verifyException("org.apache.commons.lang.text.StrBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[9];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-4188), 0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(2);
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      strBuilder_StrBuilderTokenizer0.reset("aw%|V%Ml+");
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertEquals(2, strBuilder0.capacity());
      assertEquals("aw%|V%Ml+", string0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1723);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertFalse(strBuilder_StrBuilderReader0.ready());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertEquals(1723, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[6];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, (-332), 2554);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read((char[]) null, 0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(3091);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[4];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 2686, 2686);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 0, 4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      char[] charArray0 = new char[5];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      // Undeclared exception!
      try { 
        strBuilder_StrBuilderReader0.read(charArray0, 1, Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang.text.StrBuilder$StrBuilderReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder((-5257));
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[1];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0);
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(1464);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      int int0 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(1464, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder("AIX");
      char[] charArray0 = new char[9];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertFalse(strBuilder_StrBuilderReader0.ready());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder(0);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      long long0 = strBuilder_StrBuilderReader0.skip((-1));
      assertEquals(0L, long0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }
}
