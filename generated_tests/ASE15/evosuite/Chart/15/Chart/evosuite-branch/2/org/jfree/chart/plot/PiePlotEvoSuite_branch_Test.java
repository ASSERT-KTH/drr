/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:00:13 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.WindowEvent;
import java.awt.geom.Arc2D;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Locale;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JList;
import javax.swing.JSeparator;
import javax.swing.ListModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.PieToolTipGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.needle.WindNeedle;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MeterPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.xy.DeviationRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBubbleRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.urls.CustomPieURLGenerator;
import org.jfree.chart.urls.PieURLGenerator;
import org.jfree.chart.urls.StandardPieURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.time.FixedMillisecond;
import org.junit.runner.RunWith;
import sun.swing.PrintColorUIResource;

 
public class PiePlotEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(true, ringPlot1.getLabelLinksVisible());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot1.isSubplot());
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot1.isOutlineVisible());
      assertEquals(true, ringPlot1.getSeparatorsVisible());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(true, ringPlot1.isCircular());
      assertEquals(false, ringPlot1.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot1.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(false, ringPlot1.getSimpleLabels());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot1.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotSame(ringPlot1, ringPlot0);
      assertNotSame(ringPlot0, ringPlot1);
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertNotNull(ringPlot1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertNotNull(piePlot3D0);
      
      PiePlot3D piePlot3D1 = (PiePlot3D)piePlot3D0.clone();
      assertEquals(true, piePlot3D1.getLabelLinksVisible());
      assertEquals(false, piePlot3D1.isCircular());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(false, piePlot3D1.getDarkerSides());
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D1.getSimpleLabels());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D1.getIgnoreZeroValues());
      assertEquals(false, piePlot3D1.isSubplot());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D1.isOutlineVisible());
      assertEquals(false, piePlot3D1.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D1.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertNotSame(piePlot3D1, piePlot3D0);
      assertNotSame(piePlot3D0, piePlot3D1);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertNotNull(piePlot3D1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNotNull(piePlot0);
      
      boolean boolean0 = piePlot0.equals((Object) piePlot0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(piePlot0);
      
      CustomPieURLGenerator customPieURLGenerator0 = new CustomPieURLGenerator();
      assertEquals(0, customPieURLGenerator0.getListCount());
      assertNotNull(customPieURLGenerator0);
      
      boolean boolean0 = piePlot0.equals((Object) customPieURLGenerator0);
      assertEquals(0, customPieURLGenerator0.getListCount());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = 3055.831F;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      int int0 = 5462;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, (float) int0, (float) int0, (float) int0);
      assertEquals(3055.8310546875, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(5786.8310546875, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(8193.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(10924.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(5462.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(8517.8310546875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(5462.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(5462.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(5462.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(3055.831F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)ringPlot0.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, rectangle2D_Double0.width, rectangle2D_Float0.height, rectangle2D_Double0.x);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3055.8310546875, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(5786.8310546875, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(8193.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(10924.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(5462.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(8517.8310546875, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertSame(rectangle2D_Double1, rectangle2D_Double0);
      assertSame(rectangle2D_Double0, rectangle2D_Double1);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01D);
      assertEquals(5462.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(5462.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(5462.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(3055.831F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle2D_Double1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float float0 = 3056.965F;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNotNull(ringPlot0);
      
      int int0 = 5462;
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, (float) int0, (float) int0);
      assertEquals(5787.965087890625, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(8518.965087890625, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(3056.965087890625, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(3056.965087890625, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(8518.965087890625, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(5787.965087890625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(3056.965F, rectangle2D_Float0.x, 0.01F);
      assertEquals(3056.965F, rectangle2D_Float0.y, 0.01F);
      assertEquals(5462.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(5462.0F, rectangle2D_Float0.width, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      Rectangle2D.Double rectangle2D_Double1 = (Rectangle2D.Double)ringPlot0.getArcBounds(rectangle2D_Double0, rectangle2D_Double0, float0, rectangle2D_Float0.height, rectangle2D_Float0.height);
      assertEquals(5787.965087890625, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(8518.965087890625, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(3056.965087890625, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(3056.965087890625, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(8518.965087890625, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(5787.965087890625, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.0, rectangle2D_Double1.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double1.getMinY(), 0.01D);
      assertNotSame(rectangle2D_Double0, rectangle2D_Double1);
      assertNotSame(rectangle2D_Double1, rectangle2D_Double0);
      assertEquals(3056.965F, rectangle2D_Float0.x, 0.01F);
      assertEquals(3056.965F, rectangle2D_Float0.y, 0.01F);
      assertEquals(5462.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(5462.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double1.width, 0.01D);
      assertTrue(rectangle2D_Double0.equals((Object)rectangle2D_Double1));
      assertTrue(rectangle2D_Double1.equals((Object)rectangle2D_Double0));
      assertNotNull(rectangle2D_Double1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(piePlot0);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-413.2728356404);
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNotNull(jFreeChart0);
      
      int int0 = 531;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, double0, (double) int0, chartRenderingInfo0);
      assertEquals(531, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(531, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(531, bufferedImage0.getTileWidth());
      assertEquals(531, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNotNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(jFreeChart0);
      
      int int0 = 128;
      ChartRenderingInfo chartRenderingInfo0 = null;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) line2D_Float0.x2, (double) line2D_Float0.y2, chartRenderingInfo0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(128, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(128, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(128, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(128, bufferedImage0.getTileHeight());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNotNull(ringPlot0);
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = ringPlot0.getLegendLabelToolTipGenerator();
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(pieSectionLabelGenerator0);
      
      // Undeclared exception!
      try {
        ringPlot0.setLegendLabelGenerator(pieSectionLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNotNull(piePlot3D0);
      
      String string0 = "Zn(lxM\\Af}paXadD";
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(string0);
      assertEquals("Zn(lxM\\Af}paXadD", standardPieSectionLabelGenerator0.getLabelFormat());
      assertNotNull(standardPieSectionLabelGenerator0);
      
      piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("Zn(lxM\\Af}paXadD", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertNotNull(piePlot3D0);
      
      JList<CustomPieURLGenerator> jList0 = new JList<CustomPieURLGenerator>();
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isLightweight());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isShowing());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertNotNull(jList0);
      
      int int0 = 2038;
      Rectangle rectangle0 = jList0.getCellBounds(int0, int0);
      assertEquals(false, jList0.isPreferredSizeSet());
      assertEquals(true, jList0.isBackgroundSet());
      assertEquals(false, jList0.isLightweight());
      assertEquals(1, jList0.countComponents());
      assertEquals(false, jList0.isDisplayable());
      assertEquals(false, jList0.isShowing());
      assertEquals(true, jList0.isEnabled());
      assertEquals(true, jList0.isForegroundSet());
      assertEquals(false, jList0.isFocusTraversalPolicySet());
      assertEquals(false, jList0.isCursorSet());
      assertEquals(false, jList0.isFocusTraversalPolicyProvider());
      assertEquals(false, jList0.isValid());
      assertEquals(false, jList0.isFocusCycleRoot());
      assertEquals(true, jList0.isFontSet());
      assertEquals(false, jList0.getIgnoreRepaint());
      assertEquals(1, jList0.getComponentCount());
      assertEquals(false, jList0.isMinimumSizeSet());
      assertEquals(true, jList0.isVisible());
      assertEquals(true, jList0.getFocusTraversalKeysEnabled());
      assertEquals(false, jList0.isMaximumSizeSet());
      assertNull(rectangle0);
      
      // Undeclared exception!
      try {
        piePlot3D0.setLegendItemShape((Shape) rectangle0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'shape' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertNotNull(arc2D_Double0);
      
      piePlot3D0.setLegendItemShape((Shape) arc2D_Double0);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNotNull(ringPlot0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(piePlot3D0);
      
      PieLabelDistributor pieLabelDistributor0 = (PieLabelDistributor)piePlot3D0.getLabelDistributor();
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertNotNull(pieLabelDistributor0);
      
      ringPlot0.setLabelDistributor((AbstractPieLabelDistributor) pieLabelDistributor0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, pieLabelDistributor0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(pieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNotNull(ringPlot0);
      
      double double0 = 0.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertNotNull(cyclicNumberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) cyclicNumberAxis0);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      RectangleInsets rectangleInsets0 = combinedRangeXYPlot0.getAxisOffset();
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      ringPlot0.setSimpleLabelOffset(rectangleInsets0);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      RectangleInsets rectangleInsets0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setLabelPadding(rectangleInsets0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'padding' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNotNull(piePlot3D0);
      
      MeterPlot meterPlot0 = new MeterPlot();
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertNotNull(meterPlot0);
      
      RectangleInsets rectangleInsets0 = meterPlot0.getInsets();
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertNotNull(rectangleInsets0);
      
      piePlot3D0.setLabelPadding(rectangleInsets0);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(false, meterPlot0.getDrawBorder());
      assertEquals(true, meterPlot0.isOutlineVisible());
      assertNull(meterPlot0.getNoDataMessage());
      assertEquals(0.5F, meterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, meterPlot0.getBackgroundImageAlignment());
      assertEquals(10.0, meterPlot0.getTickSize(), 0.01D);
      assertEquals(1.0F, meterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(270, meterPlot0.getMeterAngle());
      assertEquals(false, meterPlot0.isSubplot());
      assertEquals(1.0F, meterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Units", meterPlot0.getUnits());
      assertEquals(true, meterPlot0.getTickLabelsVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertNotNull(piePlot3D0);
      
      WindNeedle windNeedle0 = new WindNeedle();
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01D);
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01D);
      assertNotNull(windNeedle0);
      
      Paint paint0 = windNeedle0.getOutlinePaint();
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01D);
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01D);
      assertNull(paint0);
      
      // Undeclared exception!
      try {
        piePlot3D0.setLabelPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertNotNull(piePlot0);
      
      Color color0 = Color.WHITE;
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      piePlot0.setLabelPaint((Paint) color0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(-1, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      Font font0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setLabelFont(font0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'font' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNotNull(piePlot3D0);
      
      Font font0 = piePlot3D0.getLabelFont();
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isItalic());
      assertNotNull(font0);
      
      piePlot3D0.setLabelFont(font0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals("SansSerif", font0.getName());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isTransformed());
      assertEquals(true, font0.isPlain());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.isItalic());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNotNull(piePlot3D0);
      
      Stroke stroke0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.setLabelLinkStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      ringPlot0.setLabelLinkStroke((Stroke) basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setLabelLinkPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getLabelOutlinePaint();
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(color0);
      
      ringPlot0.setLabelLinkPaint((Paint) color0);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = false;
      double double0 = 1630.278;
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      defaultCategoryDataset0.setValue(double0, (Comparable) double0, (Comparable) boolean0);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = 1873;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1873, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(categoryToPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) categoryToPieDataset0);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1873, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(ringPlot0);
      
      double double1 = ringPlot0.getMaximumExplodePercent();
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1873, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNotNull(piePlot0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      piePlot0.setExplodePercent((Comparable) line2D_Float0.y2, (double) line2D_Float0.x2);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = 3055.831F;
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(4583.74658203125, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(3055.8310546875, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(3055.8310546875, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(6111.662109375, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4583.74658203125, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(6111.662109375, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(3055.831F, rectangle2D_Float0.height, 0.01F);
      assertEquals(3055.831F, rectangle2D_Float0.width, 0.01F);
      assertEquals(3055.831F, rectangle2D_Float0.y, 0.01F);
      assertEquals(3055.831F, rectangle2D_Float0.x, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      double double0 = ringPlot0.getExplodePercent((Comparable) rectangle2D_Float0.height);
      assertEquals(4583.74658203125, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(3055.8310546875, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(3055.8310546875, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(6111.662109375, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(4583.74658203125, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(6111.662109375, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(3055.831F, rectangle2D_Float0.height, 0.01F);
      assertEquals(3055.831F, rectangle2D_Float0.width, 0.01F);
      assertEquals(3055.831F, rectangle2D_Float0.y, 0.01F);
      assertEquals(3055.831F, rectangle2D_Float0.x, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      int int0 = 0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(int0);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(false, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertNotNull(stackedXYAreaRenderer0);
      
      Stroke stroke0 = stackedXYAreaRenderer0.getSeriesOutlineStroke(int0);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(false, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertNull(stroke0);
      
      // Undeclared exception!
      try {
        ringPlot0.setBaseSectionOutlineStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(pieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      int int0 = piePlot0.getPieIndex();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, int0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      ringPlot0.setBaseSectionOutlineStroke(cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = true;
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(rectangle2D_Double0.x, boolean0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertNotNull(ringPlot0);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertNotNull(xYErrorRenderer0);
      
      XYToolTipGenerator xYToolTipGenerator0 = xYErrorRenderer0.getBaseToolTipGenerator();
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertNull(xYToolTipGenerator0);
      
      XYBubbleRenderer xYBubbleRenderer0 = new XYBubbleRenderer();
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYBubbleRenderer0);
      
      int int0 = 0;
      XYURLGenerator xYURLGenerator0 = xYBubbleRenderer0.getURLGenerator(int0, int0);
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(xYURLGenerator0);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYStepRenderer0);
      
      Paint paint0 = xYStepRenderer0.getSeriesItemLabelPaint(int0);
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisible());
      assertEquals(3, xYBubbleRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, xYBubbleRenderer0.getScaleType());
      assertEquals(true, xYBubbleRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, xYBubbleRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBubbleRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYBubbleRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBubbleRenderer0.getPassCount());
      assertEquals(true, xYBubbleRenderer0.getBaseCreateEntities());
      assertEquals(false, xYBubbleRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(paint0);
      
      // Undeclared exception!
      try {
        ringPlot0.setBaseSectionOutlinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  //@Test(timeout = 4000)
//   public void test032()  throws Throwable  {
//       RingPlot ringPlot0 = new RingPlot();
//       assertNull(ringPlot0.getNoDataMessage());
//       assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
//       assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
//       assertEquals(false, ringPlot0.getIgnoreZeroValues());
//       assertEquals(false, ringPlot0.getSimpleLabels());
//       assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
//       assertEquals(true, ringPlot0.getLabelLinksVisible());
//       assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
//       assertEquals(false, ringPlot0.isSubplot());
//       assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
//       assertEquals(true, ringPlot0.isOutlineVisible());
//       assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, ringPlot0.getSectionOutlinesVisible());
//       assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
//       assertEquals(true, ringPlot0.isCircular());
//       assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
//       assertEquals(15, ringPlot0.getBackgroundImageAlignment());
//       assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
//       assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
//       assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
//       assertEquals(0, ringPlot0.getPieIndex());
//       assertEquals(false, ringPlot0.getIgnoreNullValues());
//       assertEquals(true, ringPlot0.getSeparatorsVisible());
//       assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
//       assertNotNull(ringPlot0);
      
//       DefaultComboBoxModel<String> defaultComboBoxModel0 = new DefaultComboBoxModel<String>();
//       assertNotNull(defaultComboBoxModel0);
      
//       JList<String> jList0 = new JList<String>((ListModel<String>) defaultComboBoxModel0);
//       assertEquals(false, jList0.isDisplayable());
//       assertEquals(true, jList0.isForegroundSet());
//       assertEquals(false, jList0.isMaximumSizeSet());
//       assertEquals(true, jList0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jList0.isFocusTraversalPolicyProvider());
//       assertEquals(true, jList0.isEnabled());
//       assertEquals(1, jList0.getComponentCount());
//       assertEquals(false, jList0.isCursorSet());
//       assertEquals(false, jList0.isFocusTraversalPolicySet());
//       assertEquals(false, jList0.isShowing());
//       assertEquals(false, jList0.isFocusCycleRoot());
//       assertEquals(false, jList0.getIgnoreRepaint());
//       assertEquals(true, jList0.isBackgroundSet());
//       assertEquals(false, jList0.isPreferredSizeSet());
//       assertEquals(false, jList0.isLightweight());
//       assertEquals(1, jList0.countComponents());
//       assertEquals(true, jList0.isVisible());
//       assertEquals(true, jList0.isFontSet());
//       assertEquals(false, jList0.isValid());
//       assertEquals(false, jList0.isMinimumSizeSet());
//       assertNotNull(jList0);
      
//       PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jList0.getSelectionForeground();
//       assertEquals(-13421773, printColorUIResource0.getRGB());
//       assertEquals(51, printColorUIResource0.getBlue());
//       assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
//       assertEquals(51, printColorUIResource0.getRed());
//       assertEquals(255, printColorUIResource0.getAlpha());
//       assertEquals(1, printColorUIResource0.getTransparency());
//       assertEquals(51, printColorUIResource0.getGreen());
//       assertEquals(false, jList0.isDisplayable());
//       assertEquals(true, jList0.isForegroundSet());
//       assertEquals(false, jList0.isMaximumSizeSet());
//       assertEquals(true, jList0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jList0.isFocusTraversalPolicyProvider());
//       assertEquals(true, jList0.isEnabled());
//       assertEquals(1, jList0.getComponentCount());
//       assertEquals(false, jList0.isCursorSet());
//       assertEquals(false, jList0.isFocusTraversalPolicySet());
//       assertEquals(false, jList0.isShowing());
//       assertEquals(false, jList0.isFocusCycleRoot());
//       assertEquals(false, jList0.getIgnoreRepaint());
//       assertEquals(true, jList0.isBackgroundSet());
//       assertEquals(false, jList0.isPreferredSizeSet());
//       assertEquals(false, jList0.isLightweight());
//       assertEquals(1, jList0.countComponents());
//       assertEquals(true, jList0.isVisible());
//       assertEquals(true, jList0.isFontSet());
//       assertEquals(false, jList0.isValid());
//       assertEquals(false, jList0.isMinimumSizeSet());
//       assertNotNull(printColorUIResource0);
      
//       ringPlot0.setBaseSectionOutlinePaint((Paint) printColorUIResource0);
//       assertNull(ringPlot0.getNoDataMessage());
//       assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
//       assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
//       assertEquals(false, ringPlot0.getIgnoreZeroValues());
//       assertEquals(false, ringPlot0.getSimpleLabels());
//       assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
//       assertEquals(true, ringPlot0.getLabelLinksVisible());
//       assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
//       assertEquals(false, ringPlot0.isSubplot());
//       assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
//       assertEquals(true, ringPlot0.isOutlineVisible());
//       assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, ringPlot0.getSectionOutlinesVisible());
//       assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
//       assertEquals(true, ringPlot0.isCircular());
//       assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
//       assertEquals(15, ringPlot0.getBackgroundImageAlignment());
//       assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
//       assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
//       assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
//       assertEquals(0, ringPlot0.getPieIndex());
//       assertEquals(false, ringPlot0.getIgnoreNullValues());
//       assertEquals(true, ringPlot0.getSeparatorsVisible());
//       assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
//       assertEquals(-13421773, printColorUIResource0.getRGB());
//       assertEquals(51, printColorUIResource0.getBlue());
//       assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
//       assertEquals(51, printColorUIResource0.getRed());
//       assertEquals(255, printColorUIResource0.getAlpha());
//       assertEquals(1, printColorUIResource0.getTransparency());
//       assertEquals(51, printColorUIResource0.getGreen());
//       assertEquals(false, jList0.isDisplayable());
//       assertEquals(true, jList0.isForegroundSet());
//       assertEquals(false, jList0.isMaximumSizeSet());
//       assertEquals(true, jList0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jList0.isFocusTraversalPolicyProvider());
//       assertEquals(true, jList0.isEnabled());
//       assertEquals(1, jList0.getComponentCount());
//       assertEquals(false, jList0.isCursorSet());
//       assertEquals(false, jList0.isFocusTraversalPolicySet());
//       assertEquals(false, jList0.isShowing());
//       assertEquals(false, jList0.isFocusCycleRoot());
//       assertEquals(false, jList0.getIgnoreRepaint());
//       assertEquals(true, jList0.isBackgroundSet());
//       assertEquals(false, jList0.isPreferredSizeSet());
//       assertEquals(false, jList0.isLightweight());
//       assertEquals(1, jList0.countComponents());
//       assertEquals(true, jList0.isVisible());
//       assertEquals(true, jList0.isFontSet());
//       assertEquals(false, jList0.isValid());
//       assertEquals(false, jList0.isMinimumSizeSet());
//   }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNotNull(piePlot0);
      
      double double0 = 0.0;
      boolean boolean0 = true;
      Color color0 = (Color)piePlot0.lookupSectionOutlinePaint(double0, boolean0);
      assertEquals(192, color0.getGreen());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNotNull(ringPlot0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setBaseSectionPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      boolean boolean0 = false;
      DeviationRenderer deviationRenderer0 = new DeviationRenderer(boolean0, boolean0);
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(deviationRenderer0);
      
      int int0 = 0;
      Color color0 = (Color)deviationRenderer0.getItemLabelPaint(int0, int0);
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      ringPlot0.setBaseSectionPaint((Paint) color0);
      assertEquals(false, deviationRenderer0.getUseFillPaint());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, deviationRenderer0.getDrawOutlines());
      assertEquals(3, deviationRenderer0.getDefaultEntityRadius());
      assertEquals(true, deviationRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisible());
      assertEquals(true, deviationRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, deviationRenderer0.getBaseLinesVisible());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, deviationRenderer0.getBaseShapesFilled());
      assertEquals(true, deviationRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, deviationRenderer0.getBaseShapesVisible());
      assertEquals(3, deviationRenderer0.getPassCount());
      assertEquals(2.0, deviationRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, deviationRenderer0.getUseOutlinePaint());
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, deviationRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, deviationRenderer0.getBaseCreateEntities());
      assertEquals(0.5F, deviationRenderer0.getAlpha(), 0.01F);
      assertEquals(false, deviationRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      int int0 = 5462;
      Comparable comparable0 = ringPlot0.getSectionKey(int0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(5462, comparable0);
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      int int0 = 5462;
      Comparable comparable0 = ringPlot0.getSectionKey(int0);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(5462, comparable0);
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      boolean boolean0 = line2D_Double0.intersectsLine(line2D_Double0.y2, line2D_Double0.y2, line2D_Double0.y2, line2D_Double0.y2);
      assertTrue(boolean0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(line2D_Double0.y2, boolean0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(-43691, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=255,g=85,b=85]", color0.toString());
      assertEquals(85, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals(85, color0.getBlue());
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = 218.822638251811;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNotNull(piePlot3D0);
      
      // Undeclared exception!
      try {
        piePlot3D0.setInteriorGap(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (218.822638251811) argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNotNull(piePlot3D0);
      
      piePlot3D0.setInteriorGap(line2D_Double0.x1);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.0, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(ringPlot0);
      
      double double0 = (-587.870626942);
      // Undeclared exception!
      try {
        ringPlot0.setInteriorGap(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-587.870626942) argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertNotNull(piePlot3D0);
      
      Rotation rotation0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.setDirection(rotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      Rotation rotation0 = Rotation.CLOCKWISE;
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertNotNull(rotation0);
      
      ringPlot0.setDirection(rotation0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNotNull(ringPlot0);
      
      PieDataset pieDataset0 = null;
      ringPlot0.setDataset(pieDataset0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(ringPlot0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      ringPlot0.setDataset((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNotNull(ringPlot0);
      
      double double0 = (-3130.7168912);
      ringPlot0.setMaximumLabelWidth(double0);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-3130.7168912), ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNotNull(piePlot3D0);
      
      double double0 = piePlot3D0.getMaximumLabelWidth();
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNotNull(ringPlot0);
      
      double double0 = 1630.278;
      ringPlot0.setShadowYOffset(double0);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1630.278, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(color0);
      
      ringPlot0.setLabelOutlinePaint((Paint) color0);
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertNotNull(arc2D_Double0);
      
      piePlot3D0.setLabelLinkMargin(arc2D_Double0.y);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelOutlineStroke();
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNotNull(ringPlot0);
      
      boolean boolean0 = true;
      ringPlot0.setSimpleLabels(boolean0);
      assertEquals(true, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertNotNull(line2D_Double0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNotNull(piePlot3D0);
      
      WindNeedle windNeedle0 = new WindNeedle();
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01D);
      assertNotNull(windNeedle0);
      
      Paint paint0 = windNeedle0.getOutlinePaint();
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01D);
      assertNull(paint0);
      
      piePlot3D0.setSectionOutlinePaint((Comparable) line2D_Double0.y1, paint0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(5, windNeedle0.getSize());
      assertEquals(0.5, windNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, windNeedle0.getRotateY(), 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      double double0 = ringPlot0.getLabelLinkMargin();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.025, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = false;
      ringPlot0.setLabelLinksVisible(boolean0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getLabelLinksVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNotNull(ringPlot0);
      
      String string0 = rectangle2D_Double0.toString();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals("java.awt.geom.Rectangle2D$Double[x=0.0,y=0.0,w=0.0,h=0.0]", string0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(string0);
      
      StandardPieURLGenerator standardPieURLGenerator0 = new StandardPieURLGenerator(string0, string0, string0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(standardPieURLGenerator0);
      
      ringPlot0.setLegendLabelURLGenerator((PieURLGenerator) standardPieURLGenerator0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Rotation rotation0 = piePlot3D0.getDirection();
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNotNull(rotation0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.getIgnoreZeroValues();
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(ringPlot0);
      
      RectangleInsets rectangleInsets0 = ringPlot0.getSimpleLabelOffset();
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getTop(), 0.01D);
      assertNotNull(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Color color0 = (Color)piePlot3D0.getBaseSectionOutlinePaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(color0);
      
      int int0 = WindowEvent.WINDOW_DEICONIFIED;
      assertEquals(204, int0);
      
      piePlot3D0.setSectionPaint((Comparable) int0, (Paint) color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      boolean boolean0 = rectangle2D_Double0.contains(rectangle2D_Double0.width, rectangle2D_Double0.height);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNotNull(ringPlot0);
      
      ringPlot0.setSectionOutlinesVisible(boolean0);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertNotNull(arc2D_Double0);
      
      PiePlot piePlot0 = new PiePlot();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNotNull(piePlot0);
      
      piePlot0.setShadowXOffset(arc2D_Double0.y);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNotNull(piePlot3D0);
      
      Color color0 = (Color)piePlot3D0.getLabelShadowPaint();
      assertEquals(151, color0.getBlue());
      assertEquals("java.awt.Color[r=151,g=151,b=151]", color0.toString());
      assertEquals(151, color0.getGreen());
      assertEquals(151, color0.getRed());
      assertEquals(128, color0.getAlpha());
      assertEquals(-2137548905, color0.getRGB());
      assertEquals(3, color0.getTransparency());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(pieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNotNull(ringPlot0);
      
      PieToolTipGenerator pieToolTipGenerator0 = ringPlot0.getToolTipGenerator();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(pieToolTipGenerator0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 802.0655;
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      ringPlot0.setLabelGap(double0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(802.0655, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNotNull(piePlot3D0);
      
      double double0 = piePlot3D0.getShadowXOffset();
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNotNull(piePlot3D0);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLegendLabelGenerator();
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNotNull(standardPieSectionLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.getSectionOutlinesVisible();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getLabelBackgroundPaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=192]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-64, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getShadowPaint();
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      Stroke stroke0 = null;
      ringPlot0.setLabelOutlineStroke(stroke0);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNotNull(piePlot0);
      
      double double0 = piePlot0.getShadowYOffset();
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getLegendLabelURLGenerator();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(pieURLGenerator0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 0.0;
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.lookupSectionOutlinePaint(double0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNotNull(ringPlot0);
      
      double double0 = ringPlot0.getInteriorGap();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(pieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNotNull(ringPlot0);
      
      int int0 = piePlot0.getPieIndex();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0, int0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertNotNull(ganttRenderer0);
      
      Color color0 = (Color)ganttRenderer0.getItemPaint(int0, int0);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNotNull(color0);
      
      ringPlot0.setShadowPaint((Paint) color0);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNotNull(piePlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      Graphics2D graphics2D0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      // Undeclared exception!
      try {
        piePlot0.drawPie(graphics2D0, rectangle2D_Double0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      boolean boolean0 = true;
      ringPlot0.setIgnoreZeroValues(boolean0);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getLabelLinkPaint();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertNotNull(ringPlot0);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertNotNull(rectangle2D_Float0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(layeredBarRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)layeredBarRenderer0.getBaseStroke();
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      piePlot3D0.setSectionOutlineStroke((Comparable) rectangle2D_Float0.y, (Stroke) basicStroke0);
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 3;
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNotNull(ringPlot0);
      
      ringPlot0.setPieIndex(int0);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(3, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertNotNull(piePlot0);
      
      Paint paint0 = null;
      piePlot0.setLabelBackgroundPaint(paint0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = null;
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNotNull(piePlot3D0);
      
      PieURLGenerator pieURLGenerator0 = piePlot3D0.getURLGenerator();
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(pieURLGenerator0);
      
      piePlot0.setURLGenerator(pieURLGenerator0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      PieToolTipGenerator pieToolTipGenerator0 = null;
      ringPlot0.setToolTipGenerator(pieToolTipGenerator0);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNotNull(basicStroke0);
  }

  //@Test(timeout = 4000)
//   public void test087()  throws Throwable  {
//       JSeparator jSeparator0 = new JSeparator();
//       assertEquals(false, jSeparator0.isValid());
//       assertEquals(false, jSeparator0.isFontSet());
//       assertEquals(true, jSeparator0.isForegroundSet());
//       assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
//       assertEquals(false, jSeparator0.isCursorSet());
//       assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
//       assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jSeparator0.isDisplayable());
//       assertEquals(true, jSeparator0.isBackgroundSet());
//       assertEquals(false, jSeparator0.isMinimumSizeSet());
//       assertEquals(true, jSeparator0.isEnabled());
//       assertEquals(false, jSeparator0.isFocusCycleRoot());
//       assertEquals(false, jSeparator0.isShowing());
//       assertEquals(0, jSeparator0.getComponentCount());
//       assertEquals(true, jSeparator0.isVisible());
//       assertEquals(false, jSeparator0.isMaximumSizeSet());
//       assertEquals(false, jSeparator0.isLightweight());
//       assertEquals(false, jSeparator0.getIgnoreRepaint());
//       assertEquals(0, jSeparator0.countComponents());
//       assertEquals(false, jSeparator0.isPreferredSizeSet());
//       assertNotNull(jSeparator0);
      
//       RingPlot ringPlot0 = new RingPlot();
//       assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
//       assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
//       assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
//       assertEquals(false, ringPlot0.getIgnoreNullValues());
//       assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
//       assertEquals(0, ringPlot0.getPieIndex());
//       assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
//       assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
//       assertEquals(15, ringPlot0.getBackgroundImageAlignment());
//       assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
//       assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
//       assertEquals(false, ringPlot0.getSimpleLabels());
//       assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
//       assertEquals(true, ringPlot0.getSectionOutlinesVisible());
//       assertEquals(true, ringPlot0.getSeparatorsVisible());
//       assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
//       assertEquals(false, ringPlot0.getIgnoreZeroValues());
//       assertEquals(true, ringPlot0.isOutlineVisible());
//       assertEquals(true, ringPlot0.isCircular());
//       assertEquals(true, ringPlot0.getLabelLinksVisible());
//       assertEquals(false, ringPlot0.isSubplot());
//       assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
//       assertNull(ringPlot0.getNoDataMessage());
//       assertNotNull(ringPlot0);
      
//       Point point0 = jSeparator0.location();
//       assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
//       assertEquals(0.0, point0.getY(), 0.01D);
//       assertEquals(0.0, point0.getX(), 0.01D);
//       assertEquals(false, jSeparator0.isValid());
//       assertEquals(false, jSeparator0.isFontSet());
//       assertEquals(true, jSeparator0.isForegroundSet());
//       assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
//       assertEquals(false, jSeparator0.isCursorSet());
//       assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
//       assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jSeparator0.isDisplayable());
//       assertEquals(true, jSeparator0.isBackgroundSet());
//       assertEquals(false, jSeparator0.isMinimumSizeSet());
//       assertEquals(true, jSeparator0.isEnabled());
//       assertEquals(false, jSeparator0.isFocusCycleRoot());
//       assertEquals(false, jSeparator0.isShowing());
//       assertEquals(0, jSeparator0.getComponentCount());
//       assertEquals(true, jSeparator0.isVisible());
//       assertEquals(false, jSeparator0.isMaximumSizeSet());
//       assertEquals(false, jSeparator0.isLightweight());
//       assertEquals(false, jSeparator0.getIgnoreRepaint());
//       assertEquals(0, jSeparator0.countComponents());
//       assertEquals(false, jSeparator0.isPreferredSizeSet());
//       assertEquals(0, point0.x);
//       assertEquals(0, point0.y);
//       assertNotNull(point0);
      
//       Line2D.Double line2D_Double0 = new Line2D.Double((Point2D) point0, (Point2D) point0);
//       assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
//       assertEquals(0.0, point0.getY(), 0.01D);
//       assertEquals(0.0, point0.getX(), 0.01D);
//       assertEquals(false, jSeparator0.isValid());
//       assertEquals(false, jSeparator0.isFontSet());
//       assertEquals(true, jSeparator0.isForegroundSet());
//       assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
//       assertEquals(false, jSeparator0.isCursorSet());
//       assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
//       assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jSeparator0.isDisplayable());
//       assertEquals(true, jSeparator0.isBackgroundSet());
//       assertEquals(false, jSeparator0.isMinimumSizeSet());
//       assertEquals(true, jSeparator0.isEnabled());
//       assertEquals(false, jSeparator0.isFocusCycleRoot());
//       assertEquals(false, jSeparator0.isShowing());
//       assertEquals(0, jSeparator0.getComponentCount());
//       assertEquals(true, jSeparator0.isVisible());
//       assertEquals(false, jSeparator0.isMaximumSizeSet());
//       assertEquals(false, jSeparator0.isLightweight());
//       assertEquals(false, jSeparator0.getIgnoreRepaint());
//       assertEquals(0, jSeparator0.countComponents());
//       assertEquals(false, jSeparator0.isPreferredSizeSet());
//       assertEquals(0, point0.x);
//       assertEquals(0, point0.y);
//       assertEquals(0.0, line2D_Double0.y2, 0.01D);
//       assertEquals(0.0, line2D_Double0.y1, 0.01D);
//       assertEquals(0.0, line2D_Double0.x1, 0.01D);
//       assertEquals(0.0, line2D_Double0.x2, 0.01D);
//       assertNotNull(line2D_Double0);
      
//       Color color0 = (Color)ringPlot0.lookupSectionPaint(line2D_Double0.x1);
//       assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
//       assertEquals(0.0, point0.getY(), 0.01D);
//       assertEquals(0.0, point0.getX(), 0.01D);
//       assertEquals(128, color0.getBlue());
//       assertEquals(1, color0.getTransparency());
//       assertEquals(-8355712, color0.getRGB());
//       assertEquals(128, color0.getGreen());
//       assertEquals(128, color0.getRed());
//       assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
//       assertEquals(255, color0.getAlpha());
//       assertEquals(false, jSeparator0.isValid());
//       assertEquals(false, jSeparator0.isFontSet());
//       assertEquals(true, jSeparator0.isForegroundSet());
//       assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
//       assertEquals(false, jSeparator0.isCursorSet());
//       assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
//       assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jSeparator0.isDisplayable());
//       assertEquals(true, jSeparator0.isBackgroundSet());
//       assertEquals(false, jSeparator0.isMinimumSizeSet());
//       assertEquals(true, jSeparator0.isEnabled());
//       assertEquals(false, jSeparator0.isFocusCycleRoot());
//       assertEquals(false, jSeparator0.isShowing());
//       assertEquals(0, jSeparator0.getComponentCount());
//       assertEquals(true, jSeparator0.isVisible());
//       assertEquals(false, jSeparator0.isMaximumSizeSet());
//       assertEquals(false, jSeparator0.isLightweight());
//       assertEquals(false, jSeparator0.getIgnoreRepaint());
//       assertEquals(0, jSeparator0.countComponents());
//       assertEquals(false, jSeparator0.isPreferredSizeSet());
//       assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
//       assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
//       assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
//       assertEquals(false, ringPlot0.getIgnoreNullValues());
//       assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
//       assertEquals(0, ringPlot0.getPieIndex());
//       assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
//       assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
//       assertEquals(15, ringPlot0.getBackgroundImageAlignment());
//       assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
//       assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
//       assertEquals(false, ringPlot0.getSimpleLabels());
//       assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
//       assertEquals(true, ringPlot0.getSectionOutlinesVisible());
//       assertEquals(true, ringPlot0.getSeparatorsVisible());
//       assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
//       assertEquals(false, ringPlot0.getIgnoreZeroValues());
//       assertEquals(true, ringPlot0.isOutlineVisible());
//       assertEquals(true, ringPlot0.isCircular());
//       assertEquals(true, ringPlot0.getLabelLinksVisible());
//       assertEquals(false, ringPlot0.isSubplot());
//       assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
//       assertNull(ringPlot0.getNoDataMessage());
//       assertEquals(0, point0.x);
//       assertEquals(0, point0.y);
//       assertEquals(0.0, line2D_Double0.y2, 0.01D);
//       assertEquals(0.0, line2D_Double0.y1, 0.01D);
//       assertEquals(0.0, line2D_Double0.x1, 0.01D);
//       assertEquals(0.0, line2D_Double0.x2, 0.01D);
//       assertNotNull(color0);
//   }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      ringPlot0.setMinimumArcAngleToDraw((double) line2D_Float0.x1);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.0, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNotNull(piePlot0);
      
      int int0 = 57;
      Paint paint0 = piePlot0.getSectionPaint((Comparable) int0);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getBaseSectionPaint();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(ringPlot0);
      
      boolean boolean0 = false;
      Stroke stroke0 = ringPlot0.getSectionOutlineStroke((Comparable) boolean0);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(stroke0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNotNull(piePlot3D0);
      
      Paint paint0 = null;
      piePlot3D0.setLabelShadowPaint(paint0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.getSimpleLabels();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(piePlot3D0);
      
      String string0 = "";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = new StandardPieSectionLabelGenerator(string0, locale0);
      assertEquals("", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(standardPieSectionLabelGenerator0);
      
      piePlot3D0.setLegendLabelToolTipGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNotNull(ringPlot0);
      
      Ellipse2D.Double ellipse2D_Double0 = (Ellipse2D.Double)ringPlot0.getLegendItemShape();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.0, ellipse2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, ellipse2D_Double0.getCenterY(), 0.01D);
      assertEquals(4.0, ellipse2D_Double0.getMaxY(), 0.01D);
      assertEquals(4.0, ellipse2D_Double0.getMaxX(), 0.01D);
      assertEquals((-4.0), ellipse2D_Double0.getMinX(), 0.01D);
      assertEquals((-4.0), ellipse2D_Double0.getMinY(), 0.01D);
      assertEquals(8.0, ellipse2D_Double0.height, 0.01D);
      assertEquals((-4.0), ellipse2D_Double0.y, 0.01D);
      assertEquals((-4.0), ellipse2D_Double0.x, 0.01D);
      assertEquals(8.0, ellipse2D_Double0.width, 0.01D);
      assertNotNull(ellipse2D_Double0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.getLabelLinksVisible();
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      RectangleInsets rectangleInsets0 = ringPlot0.getLabelPadding();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertNotNull(rectangleInsets0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNotNull(piePlot3D0);
      
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot3D0.lookupSectionOutlineStroke(fixedMillisecond0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(piePlot0);
      
      double double0 = piePlot0.getMinimumArcAngleToDraw();
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = false;
      piePlot3D0.setIgnoreNullValues(boolean0);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNotNull(piePlot3D0);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNotNull(ringPlot0);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)ringPlot0.getLabelGenerator();
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNotNull(standardPieSectionLabelGenerator0);
      
      piePlot3D0.setLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.getIgnoreNullValues();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getBaseSectionOutlineStroke();
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(basicStroke0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertNotNull(arc2D_Double0);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNotNull(ringPlot0);
      
      ringPlot0.setStartAngle(arc2D_Double0.y);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNotNull(piePlot0);
      
      Color color0 = (Color)piePlot0.getLabelPaint();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertNull(pieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertNotNull(ringPlot0);
      
      boolean boolean0 = true;
      ringPlot0.setCircular(boolean0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 5.0E11;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNotNull(piePlot3D0);
      
      Paint paint0 = piePlot3D0.getSectionOutlinePaint((Comparable) double0);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertNull(paint0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = piePlot3D0.isCircular();
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNotNull(ringPlot0);
      
      String string0 = ringPlot0.getPlotType();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals("Pie Plot", string0);
      assertNotNull(string0);
  }
}
