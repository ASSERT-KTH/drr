/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:24:23 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.SystemColor;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.ValueMarker;
import org.junit.runner.RunWith;

 
public class ValueMarkerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 0.5785580736971422;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.5785580736971422, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      double double1 = (-1096.1231672643503);
      ValueMarker valueMarker1 = new ValueMarker(double1);
      assertNotSame(valueMarker1, valueMarker0);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals((-1096.1231672643503), valueMarker1.getValue(), 0.01D);
      assertNull(valueMarker1.getLabel());
      assertNotNull(valueMarker1);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(double1 == double0);
      
      boolean boolean0 = valueMarker0.equals((Object) valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotSame(valueMarker0, valueMarker1);
      assertFalse(boolean0);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals((-1096.1231672643503), valueMarker1.getValue(), 0.01D);
      assertNull(valueMarker1.getLabel());
      assertNull(valueMarker0.getLabel());
      assertEquals(0.5785580736971422, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(double1 == double0);
      assertFalse(valueMarker0.equals((Object)valueMarker1));
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = (-1284.1364080151634);
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertEquals((-1284.1364080151634), valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNotNull(valueMarker0);
      
      ValueMarker valueMarker1 = new ValueMarker(double0);
      assertNotSame(valueMarker1, valueMarker0);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals((-1284.1364080151634), valueMarker1.getValue(), 0.01D);
      assertNull(valueMarker1.getLabel());
      assertNotNull(valueMarker1);
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      
      boolean boolean0 = valueMarker0.equals((Object) valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotSame(valueMarker0, valueMarker1);
      assertTrue(boolean0);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertEquals((-1284.1364080151634), valueMarker1.getValue(), 0.01D);
      assertNull(valueMarker1.getLabel());
      assertEquals((-1284.1364080151634), valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      assertTrue(valueMarker0.equals((Object)valueMarker1));
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = (-8.663885976676138);
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals((-8.663885976676138), valueMarker0.getValue(), 0.01D);
      assertNotNull(valueMarker0);
      
      int int0 = (-24);
      Integer integer0 = new Integer(int0);
      assertEquals((-24), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = valueMarker0.equals((Object) integer0);
      assertFalse(boolean0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals((-8.663885976676138), valueMarker0.getValue(), 0.01D);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = (-8.663885976676138);
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertEquals((-8.663885976676138), valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      double double1 = valueMarker0.getValue();
      assertEquals((-8.663885976676138), double1, 0.01D);
      assertEquals((-8.663885976676138), valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = 3488.197;
      SystemColor systemColor0 = SystemColor.text;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(-4144960, systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals("java.awt.SystemColor[i=12]", systemColor0.toString());
      assertNotNull(systemColor0);
      
      BasicStroke basicStroke0 = (BasicStroke)CategoryPlot.DEFAULT_CROSSHAIR_STROKE;
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) systemColor0, (Stroke) basicStroke0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(192, systemColor0.getGreen());
      assertEquals(-4144960, systemColor0.getRGB());
      assertEquals(192, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(192, systemColor0.getBlue());
      assertEquals("java.awt.SystemColor[i=12]", systemColor0.toString());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(3488.197, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = (-8.663885976676138);
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-8.663885976676138), valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertNotNull(valueMarker0);
      
      valueMarker0.setValue(double0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-8.663885976676138), valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
  }
}
