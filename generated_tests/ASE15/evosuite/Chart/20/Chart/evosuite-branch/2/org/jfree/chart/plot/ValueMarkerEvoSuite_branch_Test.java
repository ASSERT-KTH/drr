/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:01:28 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.xy.VectorRenderer;
import org.junit.runner.RunWith;

 
public class ValueMarkerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 5022.7286690721;
      double double1 = 3593.4815813;
      ValueMarker valueMarker0 = new ValueMarker(double1);
      assertNotNull(valueMarker0);
      assertFalse(double1 == double0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(3593.4815813, valueMarker0.getValue(), 0.01D);
      
      ValueMarker valueMarker1 = new ValueMarker(double0);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotNull(valueMarker1);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(double0 == double1);
      assertNull(valueMarker1.getLabel());
      assertEquals(5022.7286690721, valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      
      boolean boolean0 = valueMarker0.equals((Object) valueMarker1);
      assertFalse(boolean0);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotSame(valueMarker0, valueMarker1);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      assertFalse(double0 == double1);
      assertFalse(valueMarker0.equals((Object)valueMarker1));
      assertFalse(double1 == double0);
      assertNull(valueMarker1.getLabel());
      assertEquals(5022.7286690721, valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(3593.4815813, valueMarker0.getValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 5022.7286690721;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(5022.7286690721, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      
      ValueMarker valueMarker1 = new ValueMarker(double0);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotNull(valueMarker1);
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      assertEquals(5022.7286690721, valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertNull(valueMarker1.getLabel());
      
      boolean boolean0 = valueMarker0.equals((Object) valueMarker1);
      assertTrue(boolean0);
      assertNotSame(valueMarker0, valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertTrue(valueMarker0.equals((Object)valueMarker1));
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(5022.7286690721, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(5022.7286690721, valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertNull(valueMarker1.getLabel());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = (-381.955132253627);
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertNull(valueMarker0.getLabel());
      assertEquals((-381.955132253627), valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      
      VectorRenderer vectorRenderer0 = new VectorRenderer();
      assertNotNull(vectorRenderer0);
      assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(true, vectorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      boolean boolean0 = valueMarker0.equals((Object) vectorRenderer0);
      assertFalse(boolean0);
      assertNull(valueMarker0.getLabel());
      assertEquals((-381.955132253627), valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(true, vectorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, vectorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, vectorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, vectorRenderer0.getBaseSeriesVisible());
      assertEquals(true, vectorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, vectorRenderer0.getPassCount());
      assertEquals(3, vectorRenderer0.getDefaultEntityRadius());
      assertEquals(true, vectorRenderer0.getBaseCreateEntities());
      assertEquals(2.0, vectorRenderer0.getItemLabelAnchorOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 53.02714017118131;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(53.02714017118131, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      double double1 = valueMarker0.getValue();
      assertEquals(53.02714017118131, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(53.02714017118131, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = (-604.0);
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      
      BasicStroke basicStroke0 = (BasicStroke)minMaxCategoryRenderer0.getBaseOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals((-604.0), valueMarker0.getValue(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = (-381.955132253627);
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals((-381.955132253627), valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      valueMarker0.setValue(double0);
      assertEquals((-381.955132253627), valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
  }
}
