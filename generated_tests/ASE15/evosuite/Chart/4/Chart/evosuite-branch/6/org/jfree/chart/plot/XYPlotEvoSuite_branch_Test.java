/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:42:05 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.SystemColor;
import java.awt.geom.GeneralPath;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.util.Collection;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JToggleButton;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.RenderingSource;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.annotations.XYTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.needle.ArrowNeedle;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PolarPlot;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.StandardXYItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYLine3DRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;

 
public class XYPlotEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      
      boolean boolean0 = true;
      boolean boolean1 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = 0;
      GeneralPath generalPath0 = new GeneralPath(int0, int0);
      assertNotNull(generalPath0);
      assertEquals(0, generalPath0.getWindingRule());
      
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      assertNotNull(defaultTableCellRenderer_UIResource0);
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      
      Icon icon0 = defaultTableCellRenderer_UIResource0.getDisabledIcon();
      assertNull(icon0);
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      
      JToggleButton jToggleButton0 = new JToggleButton(icon0);
      assertNotNull(jToggleButton0);
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      
      Rectangle rectangle0 = jToggleButton0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) combinedRangeXYPlot0, boolean0);
      assertNotNull(rendererChangeEvent0);
      assertEquals(true, rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(boolean0 == boolean1);
      
      JFreeChart jFreeChart0 = rendererChangeEvent0.getChart();
      assertNull(jFreeChart0);
      assertEquals(true, rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(boolean0 == boolean1);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean0, boolean0, boolean1, boolean0, boolean1);
      assertNotNull(chartPanel0);
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.getUseBuffer());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      combinedRangeXYPlot0.select(generalPath0, (Rectangle2D) rectangle0, (RenderingSource) chartPanel0);
      assertEquals(false, jToggleButton0.isPreferredSizeSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jToggleButton0.getFocusTraversalKeysEnabled());
      assertEquals(0, jToggleButton0.getComponentCount());
      assertEquals(false, jToggleButton0.isShowing());
      assertEquals(0, jToggleButton0.countComponents());
      assertEquals(true, jToggleButton0.isVisible());
      assertEquals(false, jToggleButton0.getIgnoreRepaint());
      assertEquals(false, jToggleButton0.isFocusCycleRoot());
      assertEquals(true, jToggleButton0.isEnabled());
      assertEquals(true, jToggleButton0.isForegroundSet());
      assertEquals(false, jToggleButton0.isCursorSet());
      assertEquals(false, jToggleButton0.isMinimumSizeSet());
      assertEquals(true, jToggleButton0.isBackgroundSet());
      assertEquals(true, jToggleButton0.isFontSet());
      assertEquals(false, jToggleButton0.isFocusTraversalPolicySet());
      assertEquals(false, jToggleButton0.isDisplayable());
      assertEquals(false, jToggleButton0.isLightweight());
      assertEquals(false, jToggleButton0.isMaximumSizeSet());
      assertEquals(false, jToggleButton0.isValid());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(true, chartPanel0.getUseBuffer());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(true, rendererChangeEvent0.getSeriesVisibilityChanged());
      assertEquals(0, generalPath0.getWindingRule());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, defaultTableCellRenderer_UIResource0.getComponentCount());
      assertEquals(true, defaultTableCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isDisplayable());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(0, defaultTableCellRenderer_UIResource0.countComponents());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertNotNull(xYLine3DRenderer0);
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      
      LegendItemCollection legendItemCollection0 = xYLine3DRenderer0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertNotNull(combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot1.isRangePannable());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(true, combinedDomainXYPlot1.isNotify());
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      
      int int0 = 4;
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0);
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      
      combinedDomainXYPlot0.setRenderer(int0, (XYItemRenderer) cyclicXYItemRenderer0);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertNotNull(combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot1.isNotify());
      assertEquals(false, combinedDomainXYPlot1.isRangePannable());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertNotNull(combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot1.isRangePannable());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot1.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot1.isNotify());
      assertEquals(false, combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.isOutlineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot1.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot1.canSelectByPoint());
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      
      int int0 = combinedRangeXYPlot0.getSeriesCount();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      AxisSpace axisSpace0 = null;
      boolean boolean0 = true;
      combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, boolean0);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      
      Color color0 = (Color)BarRenderer3D.DEFAULT_WALL_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=221,g=221,b=221]", color0.toString());
      assertEquals(221, color0.getBlue());
      assertEquals(221, color0.getGreen());
      assertEquals(221, color0.getRed());
      assertEquals(-2236963, color0.getRGB());
      
      combinedDomainXYPlot0.setRangeCrosshairPaint((Paint) color0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=221,g=221,b=221]", color0.toString());
      assertEquals(221, color0.getBlue());
      assertEquals(221, color0.getGreen());
      assertEquals(221, color0.getRed());
      assertEquals(-2236963, color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      
      boolean boolean0 = false;
      int int0 = 7;
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertNotNull(minMaxCategoryRenderer0);
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      
      BasicStroke basicStroke0 = (BasicStroke)minMaxCategoryRenderer0.getItemStroke(int0, int0, boolean0);
      assertNotNull(basicStroke0);
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      
      combinedDomainXYPlot0.setRangeCrosshairStroke((Stroke) basicStroke0);
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      int int0 = 4;
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0);
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      boolean boolean0 = cyclicXYItemRenderer0.getPlotDiscontinuous();
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      
      combinedRangeXYPlot0.setDomainCrosshairStroke((Stroke) basicStroke0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      
      int int0 = 4;
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0);
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      boolean boolean0 = cyclicXYItemRenderer0.getPlotDiscontinuous();
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainCrosshairLockedOnData(boolean0);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      int int0 = 232;
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(int0, layer0);
      assertNull(collection0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      
      boolean boolean0 = layer0.equals((Object) collection0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertFalse(boolean0);
      
      combinedDomainXYPlot0.setDomainCrosshairVisible(boolean0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) combinedDomainXYPlot0);
      assertNotNull(rendererChangeEvent0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, rendererChangeEvent0.getSeriesVisibilityChanged());
      
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, rendererChangeEvent0.getSeriesVisibilityChanged());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 4;
      PolarPlot polarPlot0 = new PolarPlot();
      assertNotNull(polarPlot0);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isNotify());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isOutlineVisible());
      
      XYDataset xYDataset0 = polarPlot0.getDataset();
      assertNull(xYDataset0);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isNotify());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isOutlineVisible());
      
      XYLine3DRenderer xYLine3DRenderer0 = new XYLine3DRenderer();
      assertNotNull(xYLine3DRenderer0);
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      
      XYPlot xYPlot0 = new XYPlot(xYDataset0, (ValueAxis) cyclicNumberAxis0, (ValueAxis) cyclicNumberAxis0, (XYItemRenderer) xYLine3DRenderer0);
      assertNotNull(xYPlot0);
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseCreateEntities());
      assertEquals(3, xYLine3DRenderer0.getPassCount());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesVisible());
      assertEquals(true, xYLine3DRenderer0.getBaseShapesFilled());
      assertEquals(false, xYLine3DRenderer0.getBaseItemLabelsVisible());
      assertEquals(12.0, xYLine3DRenderer0.getXOffset(), 0.01D);
      assertEquals(false, xYLine3DRenderer0.getUseOutlinePaint());
      assertEquals(8.0, xYLine3DRenderer0.getYOffset(), 0.01D);
      assertEquals(true, xYLine3DRenderer0.getBaseLinesVisible());
      assertEquals(true, xYLine3DRenderer0.getDrawOutlines());
      assertEquals(true, xYLine3DRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYLine3DRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYLine3DRenderer0.getUseFillPaint());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYLine3DRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYLine3DRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYLine3DRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYLine3DRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYLine3DRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(true, polarPlot0.isNotify());
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals((-3.0), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(4.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(4.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      //  // Unstable assertion: assertNotNull(histogramDataset0);
      //  // Unstable assertion: assertEquals(0, histogramDataset0.getSeriesCount());
      
      double double0 = 2182.670146512617;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      //  // Unstable assertion: assertNotNull(cyclicNumberAxis0);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      
      boolean boolean0 = rectangle2D_Double0.equals((Object) cyclicNumberAxis0);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      
      int int0 = 1;
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      //  // Unstable assertion: assertNotNull(xYBlockRenderer0);
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      XYToolTipGenerator xYToolTipGenerator0 = xYBlockRenderer0.getToolTipGenerator(int0, int0, boolean0);
      //  // Unstable assertion: assertNull(xYToolTipGenerator0);
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0, xYToolTipGenerator0);
      //  // Unstable assertion: assertNotNull(cyclicXYItemRenderer0);
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      //  // Unstable assertion: assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      //  // Unstable assertion: assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis1 = new CyclicNumberAxis((double) int0, string0);
      //  // Unstable assertion: assertNotNull(cyclicNumberAxis1);
      //  // Unstable assertion: assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isMinorTickMarksVisible());
      //  // Unstable assertion: assertNull(cyclicNumberAxis1.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isAutoRange());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNull(cyclicNumberAxis1.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isInverted());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis1.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals("", cyclicNumberAxis1.getLabel());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis1.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getPeriod(), 0.01D);
      //  // Unstable assertion: assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) histogramDataset0, (ValueAxis) cyclicNumberAxis1, (ValueAxis) cyclicNumberAxis0, (XYItemRenderer) cyclicXYItemRenderer0);
      //  // Unstable assertion: assertNotNull(xYPlot0);
      //  // Unstable assertion: assertNotSame(cyclicNumberAxis0, cyclicNumberAxis1);
      //  // Unstable assertion: assertNotSame(cyclicNumberAxis1, cyclicNumberAxis0);
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      //  // Unstable assertion: assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      //  // Unstable assertion: assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0, histogramDataset0.getSeriesCount());
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.canSelectByPoint());
      //  // Unstable assertion: assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainPannable());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isNotify());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangePannable());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(1, xYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      //  // Unstable assertion: assertNull(xYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, xYPlot0.canSelectByRegion());
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isMinorTickMarksVisible());
      //  // Unstable assertion: assertNull(cyclicNumberAxis1.getLabelURL());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertEquals(1.05, cyclicNumberAxis1.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis1.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis1.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis1.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isAutoRange());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertNull(cyclicNumberAxis1.getLabelToolTip());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis1.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isInverted());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis1.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis1.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals("", cyclicNumberAxis1.getLabel());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.05, cyclicNumberAxis1.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis1.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis1.getMinorTickCount());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis1.isVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis1.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertFalse(cyclicNumberAxis0.equals((Object)cyclicNumberAxis1));
      //  // Unstable assertion: assertFalse(cyclicNumberAxis1.equals((Object)cyclicNumberAxis0));
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNotNull(xYPlot0);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      
      Graphics2D graphics2D0 = null;
      JComboBox<XYStepRenderer> jComboBox0 = new JComboBox<XYStepRenderer>();
      assertNotNull(jComboBox0);
      assertEquals(true, jComboBox0.isEnabled());
      assertEquals(false, jComboBox0.isDisplayable());
      assertEquals(true, jComboBox0.isFontSet());
      assertEquals(true, jComboBox0.isVisible());
      assertEquals(false, jComboBox0.isPreferredSizeSet());
      assertEquals(false, jComboBox0.isValid());
      assertEquals(false, jComboBox0.getIgnoreRepaint());
      assertEquals(true, jComboBox0.isForegroundSet());
      assertEquals(false, jComboBox0.isFocusTraversalPolicySet());
      assertEquals(true, jComboBox0.isBackgroundSet());
      assertEquals(false, jComboBox0.isFocusCycleRoot());
      assertEquals(2, jComboBox0.getComponentCount());
      assertEquals(false, jComboBox0.isShowing());
      assertEquals(false, jComboBox0.isCursorSet());
      assertEquals(true, jComboBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jComboBox0.isMinimumSizeSet());
      assertEquals(false, jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(2, jComboBox0.countComponents());
      assertEquals(false, jComboBox0.isMaximumSizeSet());
      assertEquals(false, jComboBox0.isLightweight());
      
      Rectangle rectangle0 = jComboBox0.getBounds();
      assertNotNull(rectangle0);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jComboBox0.isEnabled());
      assertEquals(false, jComboBox0.isDisplayable());
      assertEquals(true, jComboBox0.isFontSet());
      assertEquals(true, jComboBox0.isVisible());
      assertEquals(false, jComboBox0.isPreferredSizeSet());
      assertEquals(false, jComboBox0.isValid());
      assertEquals(false, jComboBox0.getIgnoreRepaint());
      assertEquals(true, jComboBox0.isForegroundSet());
      assertEquals(false, jComboBox0.isFocusTraversalPolicySet());
      assertEquals(true, jComboBox0.isBackgroundSet());
      assertEquals(false, jComboBox0.isFocusCycleRoot());
      assertEquals(2, jComboBox0.getComponentCount());
      assertEquals(false, jComboBox0.isShowing());
      assertEquals(false, jComboBox0.isCursorSet());
      assertEquals(true, jComboBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jComboBox0.isMinimumSizeSet());
      assertEquals(false, jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(2, jComboBox0.countComponents());
      assertEquals(false, jComboBox0.isMaximumSizeSet());
      assertEquals(false, jComboBox0.isLightweight());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      
      xYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jComboBox0.isEnabled());
      assertEquals(false, jComboBox0.isDisplayable());
      assertEquals(true, jComboBox0.isFontSet());
      assertEquals(true, jComboBox0.isVisible());
      assertEquals(false, jComboBox0.isPreferredSizeSet());
      assertEquals(false, jComboBox0.isValid());
      assertEquals(false, jComboBox0.getIgnoreRepaint());
      assertEquals(true, jComboBox0.isForegroundSet());
      assertEquals(false, jComboBox0.isFocusTraversalPolicySet());
      assertEquals(true, jComboBox0.isBackgroundSet());
      assertEquals(false, jComboBox0.isFocusCycleRoot());
      assertEquals(2, jComboBox0.getComponentCount());
      assertEquals(false, jComboBox0.isShowing());
      assertEquals(false, jComboBox0.isCursorSet());
      assertEquals(true, jComboBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jComboBox0.isMinimumSizeSet());
      assertEquals(false, jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(2, jComboBox0.countComponents());
      assertEquals(false, jComboBox0.isMaximumSizeSet());
      assertEquals(false, jComboBox0.isLightweight());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      String string0 = "om5G$jg62nH_Wn,fqu";
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation(string0, point2D_Double0.y, point2D_Double0.x);
      assertNotNull(xYTextAnnotation0);
      assertEquals("om5G$jg62nH_Wn,fqu", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(false, xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01D);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYTextAnnotation0);
      assertEquals("om5G$jg62nH_Wn,fqu", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(false, xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01D);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYTextAnnotation0);
      assertEquals("om5G$jg62nH_Wn,fqu", xYTextAnnotation0.getText());
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(false, xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01D);
      assertNull(xYTextAnnotation0.getToolTipText());
      assertNull(xYTextAnnotation0.getURL());
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertTrue(boolean0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      
      double[] doubleArray0 = new double[4];
      boolean boolean0 = dateAxis0.isVerticalTickLabels();
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertFalse(boolean0);
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      Color color0 = (Color)Axis.DEFAULT_TICK_MARK_PAINT;
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0, (Stroke) basicStroke0, (Paint) color0, (Paint) color0);
      assertNotNull(xYPolygonAnnotation0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertNull(xYPolygonAnnotation0.getURL());
      
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYPolygonAnnotation0, boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertNull(xYPolygonAnnotation0.getURL());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      int int0 = 0;
      Line2D.Double line2D_Double0 = new Line2D.Double((double) int0, rectangle2D_Double0.y, rectangle2D_Double0.y, (double) int0);
      assertNotNull(line2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      IntervalMarker intervalMarker0 = new IntervalMarker(line2D_Double0.x2, rectangle2D_Double0.width);
      assertNotNull(intervalMarker0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      boolean boolean0 = false;
      boolean boolean1 = combinedRangeXYPlot0.removeRangeMarker(int0, (Marker) intervalMarker0, layer0, boolean0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      
      int int0 = 0;
      combinedRangeXYPlot0.clearRangeMarkers(int0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      combinedDomainXYPlot0.clearRangeMarkers();
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      
      String string0 = "]\\x\\xeSc_*<a@}t";
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) string0);
      assertNotNull(categoryMarker0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      
      Layer layer0 = null;
      // Undeclared exception!
      try {
        combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'layer' not permitted.
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Marker marker0 = null;
      // Undeclared exception!
      try {
        combinedRangeXYPlot0.addDomainMarker(marker0, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'marker' not permitted.
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      
      int int0 = 1;
      combinedRangeXYPlot0.clearDomainMarkers(int0);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      
      combinedRangeXYPlot0.setRangeZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      
      int int0 = combinedDomainXYPlot0.indexOf((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals((-1), int0);
      
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      assertNotNull(xYStepAreaRenderer0);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(true, xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      
      boolean boolean0 = true;
      Color color0 = (Color)xYStepAreaRenderer0.getItemFillPaint(int0, int0, boolean0);
      assertNotNull(color0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(true, xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      
      combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) color0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(true, xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertNotNull(xYErrorRenderer0);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      
      int int0 = 0;
      Color color0 = (Color)xYErrorRenderer0.lookupSeriesFillPaint(int0);
      assertNotNull(color0);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
      
      combinedDomainXYPlot0.setRangeMinorGridlinePaint((Paint) color0);
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(-1, color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-4628.343310935479);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.width, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.height, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.y, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.x, 0.01D);
      
      boolean boolean0 = rectangle2D_Double0.contains(double0, double0, rectangle2D_Double0.y, double0);
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterX(), 0.01D);
      assertFalse(boolean0);
      assertEquals((-4628.343310935479), rectangle2D_Double0.width, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.height, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.y, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.x, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      ArrowNeedle arrowNeedle0 = new ArrowNeedle(boolean0);
      assertNotNull(arrowNeedle0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01D);
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.width, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.height, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.y, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.x, 0.01D);
      
      BasicStroke basicStroke0 = (BasicStroke)arrowNeedle0.getOutlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01D);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.width, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.height, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.y, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.x, 0.01D);
      
      combinedRangeXYPlot0.setRangeMinorGridlineStroke((Stroke) basicStroke0);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(5, arrowNeedle0.getSize());
      assertEquals(0.5, arrowNeedle0.getRotateX(), 0.01D);
      assertEquals(0.5, arrowNeedle0.getRotateY(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-9256.686621870958), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-6942.514966403219), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.width, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.height, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.y, 0.01D);
      assertEquals((-4628.343310935479), rectangle2D_Double0.x, 0.01D);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeMinorGridlinesVisible(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 2182.670146512617;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      
      String string0 = "";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertNotNull(categoryAxis3D0);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(categoryAxis3D0.getLabelToolTip());
      
      Color color0 = (Color)categoryAxis3D0.getTickLabelPaint((Comparable) string0);
      assertNotNull(color0);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      
      combinedDomainXYPlot0.setRangeGridlinePaint((Paint) color0);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      boolean boolean0 = point2D_Double0.equals((Object) point2D_Double0);
      assertTrue(boolean0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      combinedDomainXYPlot0.setRangeGridlinesVisible(boolean0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      
      Color color0 = (Color)Axis.DEFAULT_TICK_MARK_PAINT;
      assertNotNull(color0);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) color0);
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        combinedDomainXYPlot0.setDomainGridlinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.REVERSE;
      assertNotNull(seriesRenderingOrder0);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      
      combinedRangeXYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      
      DatasetRenderingOrder datasetRenderingOrder0 = null;
      // Undeclared exception!
      try {
        combinedRangeXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      DatasetRenderingOrder datasetRenderingOrder0 = combinedDomainXYPlot0.getDatasetRenderingOrder();
      assertNotNull(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      combinedDomainXYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      int int0 = 4;
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0);
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      
      combinedDomainXYPlot0.setRenderer(int0, (XYItemRenderer) cyclicXYItemRenderer0);
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[6];
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      //  // Unstable assertion: assertNotNull(histogramDataset0);
      //  // Unstable assertion: assertEquals(0, histogramDataset0.getSeriesCount());
      
      double double0 = 2182.670146512617;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      //  // Unstable assertion: assertNotNull(cyclicNumberAxis0);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      
      boolean boolean0 = rectangle2D_Double0.equals((Object) rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      
      int int0 = 1;
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      //  // Unstable assertion: assertNotNull(xYBlockRenderer0);
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      
      XYToolTipGenerator xYToolTipGenerator0 = xYBlockRenderer0.getToolTipGenerator(int0, int0, boolean0);
      //  // Unstable assertion: assertNull(xYToolTipGenerator0);
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0, xYToolTipGenerator0);
      //  // Unstable assertion: assertNotNull(cyclicXYItemRenderer0);
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      //  // Unstable assertion: assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      //  // Unstable assertion: assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      //  // Unstable assertion: assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) histogramDataset0, (ValueAxis) cyclicNumberAxis0, (ValueAxis) cyclicNumberAxis0, (XYItemRenderer) cyclicXYItemRenderer0);
      //  // Unstable assertion: assertNotNull(xYPlot0);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, xYPlot0.canSelectByPoint());
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1, xYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertNull(xYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, xYPlot0.canSelectByRegion());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangePannable());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isNotify());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainPannable());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      //  // Unstable assertion: assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      //  // Unstable assertion: assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      //  // Unstable assertion: assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(0, histogramDataset0.getSeriesCount());
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
      
      xYPlot0.setDataset((XYDataset) histogramDataset0);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelURL());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabel());
      //  // Unstable assertion: assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      //  // Unstable assertion: assertNull(cyclicNumberAxis0.getLabelToolTip());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isInverted());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isVisible());
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      //  // Unstable assertion: assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      //  // Unstable assertion: assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      //  // Unstable assertion: assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      //  // Unstable assertion: assertEquals(true, cyclicNumberAxis0.isAutoRange());
      //  // Unstable assertion: assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      //  // Unstable assertion: assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      //  // Unstable assertion: assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, xYPlot0.canSelectByPoint());
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1, xYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertNull(xYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, xYPlot0.canSelectByRegion());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangePannable());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isNotify());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainPannable());
      //  // Unstable assertion: assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      //  // Unstable assertion: assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      //  // Unstable assertion: assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      //  // Unstable assertion: assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      //  // Unstable assertion: assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      //  // Unstable assertion: assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(0, histogramDataset0.getSeriesCount());
      //  // Unstable assertion: assertEquals(1, xYBlockRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2091.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(7.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(1109.151, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals((-1095.151), rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(4168.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertEquals((-2077.0), rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(2204.302, rectangle2D_Double0.height, 0.01D);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      
      int int0 = 7;
      combinedDomainXYPlot0.mapDatasetToRangeAxis(int0, int0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      
      int int0 = 0;
      RectangleEdge rectangleEdge0 = combinedRangeXYPlot0.getRangeAxisEdge(int0);
      assertNotNull(rectangleEdge0);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      combinedRangeXYPlot0.clearRangeAxes();
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      
      int int0 = 232;
      LogAxis logAxis0 = new LogAxis();
      assertNotNull(logAxis0);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setRangeAxis(int0, (ValueAxis) logAxis0, boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0, logAxis0.getMinorTickCount());
      assertNull(logAxis0.getLabelURL());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(logAxis0.getLabel());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertNotNull(numberAxis3D0);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) numberAxis3D0);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      combinedDomainXYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      
      int int0 = 232;
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(int0, layer0);
      assertNull(collection0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      
      boolean boolean0 = layer0.equals((Object) collection0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertFalse(boolean0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      
      combinedDomainXYPlot0.setDomainAxisLocation(int0, axisLocation0, boolean0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(int0);
      assertNotNull(rectangleEdge0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      int int0 = 232;
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(int0);
      assertNotNull(rectangleEdge0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = 2182.670146512617;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      
      combinedRangeXYPlot0.setDomainAxis((ValueAxis) dateAxis0);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      int int0 = 232;
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(int0);
      assertNull(valueAxis0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      assertNotNull(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      
      combinedDomainXYPlot0.setAxisOffset(rectangleInsets0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double double0 = 2182.670146512617;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      
      PlotOrientation plotOrientation0 = PlotOrientation.HORIZONTAL;
      assertNotNull(plotOrientation0);
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals("PlotOrientation.HORIZONTAL", plotOrientation0.toString());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = 2182.670146512617;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      
      PlotOrientation plotOrientation0 = combinedDomainXYPlot0.getOrientation();
      assertNotNull(plotOrientation0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      
      combinedDomainXYPlot0.setOrientation(plotOrientation0);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      
      boolean boolean0 = combinedDomainXYPlot0.canSelectByPoint();
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainGridlinePaint();
      assertNotNull(color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      
      double double0 = combinedDomainXYPlot0.getRangeCrosshairValue();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      
      boolean boolean0 = combinedRangeXYPlot0.canSelectByRegion();
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      
      String string0 = null;
      boolean boolean0 = false;
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0, boolean0, boolean0, boolean0, boolean0);
      assertNotNull(jInternalFrame0);
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isVisible());
      
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      assertNotNull(jInternalFrame_JDesktopIcon0);
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      
      ColorUIResource colorUIResource0 = (ColorUIResource)jInternalFrame_JDesktopIcon0.getBackground();
      assertNotNull(colorUIResource0);
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) point2D_Double0.x, (Paint) colorUIResource0, (Stroke) basicStroke0);
      assertNotNull(categoryMarker0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      boolean boolean1 = combinedDomainXYPlot0.removeDomainMarker((Marker) categoryMarker0);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      
      int int0 = 442;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      
      combinedDomainXYPlot0.setRangeAxisLocation(axisLocation0, boolean1);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isFontSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isMaximumSizeSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isForegroundSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicyProvider());
      assertEquals(2, jInternalFrame_JDesktopIcon0.countComponents());
      assertEquals(2, jInternalFrame_JDesktopIcon0.getComponentCount());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isBackgroundSet());
      assertEquals(true, jInternalFrame_JDesktopIcon0.isEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusCycleRoot());
      assertEquals(true, jInternalFrame_JDesktopIcon0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isLightweight());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isCursorSet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isValid());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isVisible());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isShowing());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame_JDesktopIcon0.isDisplayable());
      assertEquals(255, colorUIResource0.getAlpha());
      assertEquals(238, colorUIResource0.getRed());
      assertEquals(-1118482, colorUIResource0.getRGB());
      assertEquals("javax.swing.plaf.ColorUIResource[r=238,g=238,b=238]", colorUIResource0.toString());
      assertEquals(238, colorUIResource0.getBlue());
      assertEquals(238, colorUIResource0.getGreen());
      assertEquals(1, colorUIResource0.getTransparency());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      List<XYAreaRenderer2> list0 = null;
      combinedRangeXYPlot0.drawDomainTickBands(graphics2D0, rectangle2D0, list0);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals("", dateAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      AxisSpace axisSpace0 = combinedDomainXYPlot0.getFixedDomainAxisSpace();
      assertNull(axisSpace0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = (-4650.688953695023);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-6976.033430542535), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-6976.033430542535), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-9301.377907390046), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-9301.377907390046), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.width, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.x, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.height, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.y, 0.01D);
      
      boolean boolean0 = rectangle2D_Double0.contains(double0, double0, rectangle2D_Double0.y, double0);
      assertEquals((-6976.033430542535), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-6976.033430542535), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-9301.377907390046), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-9301.377907390046), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.getMinY(), 0.01D);
      assertFalse(boolean0);
      assertEquals((-4650.688953695023), rectangle2D_Double0.width, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.x, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.height, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.y, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      
      int int0 = 0;
      NumberAxis numberAxis0 = (NumberAxis)combinedDomainXYPlot0.getDomainAxisForDataset(int0);
      assertNotNull(numberAxis0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) combinedRangeXYPlot0);
      assertNotNull(jFreeChart0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0, boolean0, boolean0, boolean0, boolean0, boolean0);
      assertNotNull(chartPanel0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isAutoRange());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertNull(numberAxis0.getLabel());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals((-6976.033430542535), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-6976.033430542535), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-9301.377907390046), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-9301.377907390046), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.getUseBuffer());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(true, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals((-4650.688953695023), rectangle2D_Double0.width, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.x, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.height, 0.01D);
      assertEquals((-4650.688953695023), rectangle2D_Double0.y, 0.01D);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      
      LegendItemCollection legendItemCollection0 = combinedRangeXYPlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      
      int int0 = 4;
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertNotNull(intervalMarker0);
      assertEquals(4.0, intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(4.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      
      boolean boolean0 = combinedDomainXYPlot0.removeRangeMarker((Marker) intervalMarker0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(4.0, intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(4.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeGridlinePaint();
      assertNotNull(color0);
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNotNull(dateAxis0);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      
      Graphics2D graphics2D0 = null;
      Rectangle2D rectangle2D0 = null;
      combinedRangeXYPlot0.drawZeroRangeBaseline(graphics2D0, rectangle2D0);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(dateAxis0.getLabelURL());
      assertEquals("", dateAxis0.getLabel());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      
      Point2D.Double point2D_Double0 = (Point2D.Double)combinedRangeXYPlot0.getQuadrantOrigin();
      assertNotNull(point2D_Double0);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      
      Paint paint0 = combinedDomainXYPlot0.getRangeTickBandPaint();
      assertNull(paint0);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setRangePannable(boolean0);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      
      boolean boolean0 = combinedDomainXYPlot0.isDomainCrosshairLockedOnData();
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      
      String string0 = "om5G$jg62nH_Wn,fqu";
      XYTextAnnotation xYTextAnnotation0 = new XYTextAnnotation(string0, point2D_Double0.y, point2D_Double0.x);
      assertNotNull(xYTextAnnotation0);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01D);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01D);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("om5G$jg62nH_Wn,fqu", xYTextAnnotation0.getText());
      assertEquals(false, xYTextAnnotation0.isOutlineVisible());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset((XYDataset) defaultTableXYDataset0, point2D_Double0.x);
      assertNotNull(xYBarDataset0);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      int int0 = combinedDomainXYPlot0.indexOf((XYDataset) xYBarDataset0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals((-1), int0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      boolean boolean0 = combinedDomainXYPlot0.removeAnnotation((XYAnnotation) xYTextAnnotation0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01D);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01D);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("om5G$jg62nH_Wn,fqu", xYTextAnnotation0.getText());
      assertEquals(false, xYTextAnnotation0.isOutlineVisible());
      assertFalse(boolean0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation(int0);
      assertNotNull(axisLocation0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, boolean0);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(0.0, xYTextAnnotation0.getX(), 0.01D);
      assertEquals(0.0, xYTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(0.0, xYTextAnnotation0.getY(), 0.01D);
      assertNull(xYTextAnnotation0.getURL());
      assertNull(xYTextAnnotation0.getToolTipText());
      assertEquals("om5G$jg62nH_Wn,fqu", xYTextAnnotation0.getText());
      assertEquals(false, xYTextAnnotation0.isOutlineVisible());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      int int0 = 0;
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getRangeAxisLocation();
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      
      combinedRangeXYPlot0.setRangeAxisLocation(int0, axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      
      AxisLocation axisLocation0 = AxisLocation.BOTTOM_OR_LEFT;
      assertNotNull(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      
      combinedRangeXYPlot0.setDomainAxisLocation(axisLocation0);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge();
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      double double0 = 2182.670146512617;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) cyclicNumberAxis0);
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      combinedDomainXYPlot0.clearAnnotations();
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainMinorGridlinePaint();
      assertNotNull(color0);
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertNotNull(histogramDataset0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      
      double double0 = 2182.670146512617;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0);
      assertNotNull(cyclicNumberAxis0);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRendererForDataset((XYDataset) histogramDataset0);
      assertNull(xYItemRenderer0);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) histogramDataset0, (ValueAxis) cyclicNumberAxis0, (ValueAxis) cyclicNumberAxis0, xYItemRenderer0);
      assertNotNull(xYPlot0);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2182.670146512617, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals((-2181.670146512617), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      assertNotNull(color0);
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getRed());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      Collection collection0 = combinedDomainXYPlot0.getRangeMarkers(layer0);
      assertNull(collection0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeMinorGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertNotNull(point2D_Double0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      
      XYBarDataset xYBarDataset0 = new XYBarDataset((XYDataset) defaultTableXYDataset0, point2D_Double0.x);
      assertNotNull(xYBarDataset0);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      int int0 = combinedDomainXYPlot0.indexOf((XYDataset) xYBarDataset0);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals((-1), int0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      ValueAxis valueAxis0 = combinedDomainXYPlot0.getDomainAxis(int0);
      assertNull(valueAxis0);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      
      combinedDomainXYPlot0.setDomainAxis(valueAxis0);
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      
      boolean boolean0 = combinedRangeXYPlot0.isDomainZeroBaselineVisible();
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertFalse(boolean0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) boolean0);
      assertNotNull(categoryMarker0);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      
      Layer layer0 = null;
      boolean boolean1 = combinedRangeXYPlot0.removeDomainMarker((Marker) categoryMarker0, layer0);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) line2D_Double0.y1);
      assertNotNull(categoryMarker0);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      
      combinedDomainXYPlot0.addRangeMarker((Marker) categoryMarker0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      
      int int0 = 0;
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      assertNotNull(systemColor0);
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals("java.awt.SystemColor[i=2]", systemColor0.toString());
      assertEquals(-1, systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(255, systemColor0.getRed());
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      
      ValueMarker valueMarker0 = new ValueMarker((double) int0, (Paint) systemColor0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals("java.awt.SystemColor[i=2]", systemColor0.toString());
      assertEquals(-1, systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(255, systemColor0.getRed());
      
      Layer layer0 = Layer.BACKGROUND;
      assertNotNull(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      combinedRangeXYPlot0.addRangeMarker(int0, (Marker) valueMarker0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals("java.awt.SystemColor[i=2]", systemColor0.toString());
      assertEquals(-1, systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(255, systemColor0.getRed());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      
      combinedDomainXYPlot0.setRangeCrosshairValue(line2D_Double0.y2);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      
      int int0 = 0;
      boolean boolean0 = true;
      combinedRangeXYPlot0.setDomainCrosshairValue((double) int0, boolean0);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      
      int int0 = 7;
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertNotNull(intervalMarker0);
      assertEquals(7.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(7.0, intervalMarker0.getEndValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      
      combinedDomainXYPlot0.addDomainMarker((Marker) intervalMarker0);
      assertEquals(7.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(7.0, intervalMarker0.getEndValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainMinorGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      
      PolarPlot polarPlot0 = new PolarPlot();
      assertNotNull(polarPlot0);
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isRangeZoomable());
      
      XYDataset xYDataset0 = polarPlot0.getDataset();
      assertNull(xYDataset0);
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isRangeZoomable());
      
      combinedDomainXYPlot0.setDataset(xYDataset0);
      assertEquals(false, polarPlot0.isDomainZoomable());
      assertEquals(true, polarPlot0.isRadiusGridlinesVisible());
      assertEquals(false, polarPlot0.isSubplot());
      assertEquals(true, polarPlot0.isOutlineVisible());
      assertEquals(true, polarPlot0.isAngleGridlinesVisible());
      assertEquals(15, polarPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, polarPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isAngleLabelsVisible());
      assertNull(polarPlot0.getNoDataMessage());
      assertEquals(1.0F, polarPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isNotify());
      assertEquals(1.0F, polarPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, polarPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      
      int int0 = (-728);
      XYToolTipGenerator xYToolTipGenerator0 = null;
      StandardXYItemRenderer standardXYItemRenderer0 = new StandardXYItemRenderer(int0, xYToolTipGenerator0);
      assertNotNull(standardXYItemRenderer0);
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, standardXYItemRenderer0.getPlotImages());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
      
      combinedRangeXYPlot0.setRenderer((XYItemRenderer) standardXYItemRenderer0);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, standardXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, standardXYItemRenderer0.getBaseCreateEntities());
      assertEquals(false, standardXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, standardXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, standardXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(false, standardXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(1.0, standardXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(2.0, standardXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, standardXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, standardXYItemRenderer0.getPlotImages());
      assertEquals(false, standardXYItemRenderer0.getPlotLines());
      assertEquals(true, standardXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, standardXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, standardXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, standardXYItemRenderer0.getPassCount());
      assertEquals(false, standardXYItemRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNotNull(combinedDomainXYPlot0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertNotNull(basicStroke0);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
  }
}
