/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:14:31 GMT 2014
 */

package org.jfree.chart.renderer.category;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.geom.RoundRectangle2D;
import javax.swing.JComponent;
import javax.swing.JSeparator;
import javax.swing.JSpinner;
import javax.swing.JTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.AreaRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.IntervalBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.CustomCategoryURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.junit.runner.RunWith;

 
public class AbstractCategoryItemRendererEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(stackedBarRenderer0);
      
      EntityCollection entityCollection0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      assertEquals(-1, categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(categoryStepRenderer_State0);
      
      EntityCollection entityCollection1 = categoryStepRenderer_State0.getEntityCollection();
      assertEquals(-1, categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNull(entityCollection1);
      
      Number[][] numberArray0 = new Number[4][2];
      int int0 = KeyEvent.VK_INVERTED_EXCLAMATION_MARK;
      assertEquals(518, int0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try {
        stackedBarRenderer0.addEntity(entityCollection1, categoryStepRenderer_State0.line, defaultIntervalCategoryDataset0, int0, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertNotNull(scatterRenderer0);
      
      LegendItemCollection legendItemCollection0 = scatterRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertNotNull(lineRenderer3D0);
      
      int int0 = 0;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      ValueAxis valueAxis0 = lineRenderer3D0.getRangeAxis(combinedDomainCategoryPlot0, int0);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertNotNull(stackedBarRenderer0);
      
      StackedBarRenderer stackedBarRenderer1 = (StackedBarRenderer)stackedBarRenderer0.clone();
      assertTrue(stackedBarRenderer0.equals((Object)stackedBarRenderer1));
      assertTrue(stackedBarRenderer1.equals((Object)stackedBarRenderer0));
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer1.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer1.getColumnCount());
      assertEquals(true, stackedBarRenderer1.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer1.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer1.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer1.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer1.getDefaultShadowsVisible());
      assertEquals(3, stackedBarRenderer1.getDefaultEntityRadius());
      assertEquals(2.0, stackedBarRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer1.getRowCount());
      assertEquals(true, stackedBarRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer1.getShadowsVisible());
      assertEquals(false, stackedBarRenderer1.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer1.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer1.getBase(), 0.01D);
      assertEquals(3, stackedBarRenderer1.getPassCount());
      assertEquals(0.2, stackedBarRenderer1.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer1.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer1.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer1.getAutoPopulateSeriesPaint());
      assertNotSame(stackedBarRenderer0, stackedBarRenderer1);
      assertNotSame(stackedBarRenderer1, stackedBarRenderer0);
      assertNotNull(stackedBarRenderer1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(stackedAreaRenderer0);
      
      boolean boolean0 = stackedAreaRenderer0.getBaseSeriesVisible();
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertTrue(boolean0);
      
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(categoryStepRenderer0);
      
      int int0 = 0;
      Graphics2D graphics2D0 = null;
      JTable jTable0 = new JTable(int0, int0);
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertNotNull(jTable0);
      
      Rectangle rectangle0 = jTable0.getVisibleRect();
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertNotNull(categoryAxis0);
      
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, string0);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(cyclicNumberAxis0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      categoryStepRenderer0.drawAnnotations(graphics2D0, (Rectangle2D) rectangle0, categoryAxis0, (ValueAxis) cyclicNumberAxis0, layer0, plotRenderingInfo0);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(true, jTable0.isVisible());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertEquals(false, categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isVisible());
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(true, categoryAxis0.isTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      double double0 = (-106.96);
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01D);
      assertNotNull(categoryCrosshairState0);
      
      int int0 = 53;
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset(double0);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertNotNull(thermometerPlot0);
      
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(5, thermometerPlot0.getGap());
      assertNotNull(plotOrientation0);
      
      // Undeclared exception!
      try {
        statisticalLineAndShapeRenderer0.updateCrosshairValues(categoryCrosshairState0, boolean0, boolean0, double0, int0, int0, double0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(groupedStackedBarRenderer0);
      
      int int0 = 0;
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01D);
      assertNotNull(categoryCrosshairState0);
      
      PlotOrientation plotOrientation0 = null;
      // Undeclared exception!
      try {
        groupedStackedBarRenderer0.updateCrosshairValues(categoryCrosshairState0, int0, int0, int0, int0, int0, int0, plotOrientation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'orientation' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      EntityCollection entityCollection0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryStepRenderer.State categoryStepRenderer_State0 = new CategoryStepRenderer.State(plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(-1, categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01D);
      assertNotNull(categoryStepRenderer_State0);
      
      int int0 = KeyEvent.VK_INVERTED_EXCLAMATION_MARK;
      assertEquals(518, int0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(boxAndWhiskerRenderer0);
      
      CategoryCrosshairState categoryCrosshairState0 = categoryStepRenderer_State0.getCrosshairState();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(-1, categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01D);
      assertNull(categoryCrosshairState0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(plotOrientation0);
      
      boxAndWhiskerRenderer0.updateCrosshairValues(categoryCrosshairState0, int0, boolean0, int0, int0, int0, int0, plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(-1, categoryStepRenderer_State0.getVisibleSeriesCount());
      assertEquals(0.0, categoryStepRenderer_State0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0.0, categoryStepRenderer_State0.getBarWidth(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = (-1308);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(layeredBarRenderer0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      layeredBarRenderer0.setPlot((CategoryPlot) combinedDomainCategoryPlot0);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      
      // Undeclared exception!
      try {
        Paint paint0 = layeredBarRenderer0.getItemPaint(int0, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(intervalBarRenderer0);
      
      DrawingSupplier drawingSupplier0 = intervalBarRenderer0.getDrawingSupplier();
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNull(drawingSupplier0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(defaultCategoryItemRenderer0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer1 = new DefaultCategoryItemRenderer();
      assertTrue(defaultCategoryItemRenderer1.equals((Object)defaultCategoryItemRenderer0));
      assertEquals(false, defaultCategoryItemRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0, defaultCategoryItemRenderer1.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer1.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer1.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer1.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer1.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer1.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseSeriesVisible());
      assertEquals(0, defaultCategoryItemRenderer1.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseCreateEntities());
      assertEquals(3, defaultCategoryItemRenderer1.getDefaultEntityRadius());
      assertEquals(2, defaultCategoryItemRenderer1.getPassCount());
      assertNotSame(defaultCategoryItemRenderer1, defaultCategoryItemRenderer0);
      assertNotNull(defaultCategoryItemRenderer1);
      
      boolean boolean0 = defaultCategoryItemRenderer0.equals((Object) defaultCategoryItemRenderer1);
      assertTrue(defaultCategoryItemRenderer1.equals((Object)defaultCategoryItemRenderer0));
      assertTrue(defaultCategoryItemRenderer0.equals((Object)defaultCategoryItemRenderer1));
      assertEquals(false, defaultCategoryItemRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer1.getAutoPopulateSeriesShape());
      assertEquals(0, defaultCategoryItemRenderer1.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer1.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer1.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer1.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer1.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer1.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseSeriesVisible());
      assertEquals(0, defaultCategoryItemRenderer1.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer1.getBaseCreateEntities());
      assertEquals(3, defaultCategoryItemRenderer1.getDefaultEntityRadius());
      assertEquals(2, defaultCategoryItemRenderer1.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boolean0);
      assertNotSame(defaultCategoryItemRenderer1, defaultCategoryItemRenderer0);
      assertNotSame(defaultCategoryItemRenderer0, defaultCategoryItemRenderer1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(groupedStackedBarRenderer0);
      
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(layeredBarRenderer0);
      
      boolean boolean0 = layeredBarRenderer0.equals((Object) groupedStackedBarRenderer0);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertNotNull(statisticalBarRenderer0);
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = null;
      RoundRectangle2D.Double roundRectangle2D_Double0 = new RoundRectangle2D.Double();
      assertEquals(0.0, roundRectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.arcwidth, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.archeight, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.height, 0.01D);
      assertNotNull(roundRectangle2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)roundRectangle2D_Double0.getFrame();
      assertEquals(0.0, roundRectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.arcwidth, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.archeight, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, roundRectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      RectangleInsets rectangleInsets0 = Plot.DEFAULT_INSETS;
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(8.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      LengthAdjustmentType lengthAdjustmentType0 = null;
      RectangleAnchor rectangleAnchor0 = RectangleAnchor.TOP_RIGHT;
      assertEquals("RectangleAnchor.TOP_RIGHT", rectangleAnchor0.toString());
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Point2D point2D0 = statisticalBarRenderer0.calculateRangeMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D_Double0, rectangle2D_Double0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = null;
      int int0 = 0;
      Rectangle2D rectangle2D0 = null;
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      LengthAdjustmentType lengthAdjustmentType0 = LengthAdjustmentType.CONTRACT;
      assertEquals("CONTRACT", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertNotNull(intervalMarker0);
      
      RectangleAnchor rectangleAnchor0 = intervalMarker0.getLabelAnchor();
      assertEquals("RectangleAnchor.TOP_LEFT", rectangleAnchor0.toString());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertNotNull(rectangleAnchor0);
      
      // Undeclared exception!
      try {
        Point2D point2D0 = statisticalLineAndShapeRenderer0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle2D0, rectangle2D0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      GradientPaint gradientPaint0 = (GradientPaint)waterfallBarRenderer0.getFirstBarPaint();
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, gradientPaint0.isCyclic());
      assertEquals(1, gradientPaint0.getTransparency());
      assertNotNull(gradientPaint0);
      
      int int0 = (-1140);
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(ganttRenderer0);
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = ganttRenderer0.getPlot();
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertNull(categoryPlot0);
      
      String string0 = "z/EE?dL+%Xg9bV";
      NumberAxis numberAxis0 = new NumberAxis(string0);
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals("z/EE?dL+%Xg9bV", numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(numberAxis0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1140.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals((-1140.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals((-1140.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertNotNull(cyclicNumberAxis0);
      
      JSeparator jSeparator0 = new JSeparator();
      assertEquals(true, jSeparator0.isVisible());
      assertEquals(false, jSeparator0.isShowing());
      assertEquals(true, jSeparator0.isBackgroundSet());
      assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
      assertEquals(0, jSeparator0.getComponentCount());
      assertEquals(false, jSeparator0.isMaximumSizeSet());
      assertEquals(false, jSeparator0.isMinimumSizeSet());
      assertEquals(false, jSeparator0.getIgnoreRepaint());
      assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
      assertEquals(0, jSeparator0.countComponents());
      assertEquals(false, jSeparator0.isValid());
      assertEquals(false, jSeparator0.isPreferredSizeSet());
      assertEquals(false, jSeparator0.isFontSet());
      assertEquals(false, jSeparator0.isFocusCycleRoot());
      assertEquals(false, jSeparator0.isCursorSet());
      assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSeparator0.isForegroundSet());
      assertEquals(true, jSeparator0.isEnabled());
      assertEquals(false, jSeparator0.isLightweight());
      assertEquals(false, jSeparator0.isDisplayable());
      assertNotNull(jSeparator0);
      
      Rectangle rectangle0 = jSeparator0.getVisibleRect();
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, jSeparator0.isVisible());
      assertEquals(false, jSeparator0.isShowing());
      assertEquals(true, jSeparator0.isBackgroundSet());
      assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
      assertEquals(0, jSeparator0.getComponentCount());
      assertEquals(false, jSeparator0.isMaximumSizeSet());
      assertEquals(false, jSeparator0.isMinimumSizeSet());
      assertEquals(false, jSeparator0.getIgnoreRepaint());
      assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
      assertEquals(0, jSeparator0.countComponents());
      assertEquals(false, jSeparator0.isValid());
      assertEquals(false, jSeparator0.isPreferredSizeSet());
      assertEquals(false, jSeparator0.isFontSet());
      assertEquals(false, jSeparator0.isFocusCycleRoot());
      assertEquals(false, jSeparator0.isCursorSet());
      assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSeparator0.isForegroundSet());
      assertEquals(true, jSeparator0.isEnabled());
      assertEquals(false, jSeparator0.isLightweight());
      assertEquals(false, jSeparator0.isDisplayable());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      ganttRenderer0.drawRangeLine(graphics2D0, categoryPlot0, (ValueAxis) numberAxis0, (Rectangle2D) rectangle0, (double) int0, (Paint) gradientPaint0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, jSeparator0.isVisible());
      assertEquals(false, jSeparator0.isShowing());
      assertEquals(true, jSeparator0.isBackgroundSet());
      assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
      assertEquals(0, jSeparator0.getComponentCount());
      assertEquals(false, jSeparator0.isMaximumSizeSet());
      assertEquals(false, jSeparator0.isMinimumSizeSet());
      assertEquals(false, jSeparator0.getIgnoreRepaint());
      assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
      assertEquals(0, jSeparator0.countComponents());
      assertEquals(false, jSeparator0.isValid());
      assertEquals(false, jSeparator0.isPreferredSizeSet());
      assertEquals(false, jSeparator0.isFontSet());
      assertEquals(false, jSeparator0.isFocusCycleRoot());
      assertEquals(false, jSeparator0.isCursorSet());
      assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSeparator0.isForegroundSet());
      assertEquals(true, jSeparator0.isEnabled());
      assertEquals(false, jSeparator0.isLightweight());
      assertEquals(false, jSeparator0.isDisplayable());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals((-1140.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals((-1140.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals((-1140.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals("z/EE?dL+%Xg9bV", numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, gradientPaint0.isCyclic());
      assertEquals(1, gradientPaint0.getTransparency());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  //@Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      GradientPaint gradientPaint0 = (GradientPaint)waterfallBarRenderer0.getFirstBarPaint();
      assertEquals(false, gradientPaint0.isCyclic());
      assertEquals(1, gradientPaint0.getTransparency());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertNotNull(gradientPaint0);
      
      int int0 = 0;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertNotNull(ganttRenderer0);
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = ganttRenderer0.getPlot();
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertNull(categoryPlot0);
      
      String string0 = "z/EE?dL+%Xg9bV";
      NumberAxis numberAxis0 = new NumberAxis(string0);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(1.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals("z/EE?dL+%Xg9bV", numberAxis0.getLabel());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertNotNull(numberAxis0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      JSeparator jSeparator0 = new JSeparator();
      assertEquals(false, jSeparator0.getIgnoreRepaint());
      assertEquals(true, jSeparator0.isBackgroundSet());
      assertEquals(false, jSeparator0.isValid());
      assertEquals(true, jSeparator0.isVisible());
      assertEquals(true, jSeparator0.isEnabled());
      assertEquals(false, jSeparator0.isFontSet());
      assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSeparator0.isMinimumSizeSet());
      assertEquals(true, jSeparator0.isForegroundSet());
      assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
      assertEquals(false, jSeparator0.isMaximumSizeSet());
      assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSeparator0.isDisplayable());
      assertEquals(false, jSeparator0.isLightweight());
      assertEquals(0, jSeparator0.countComponents());
      assertEquals(false, jSeparator0.isFocusCycleRoot());
      assertEquals(false, jSeparator0.isShowing());
      assertEquals(false, jSeparator0.isPreferredSizeSet());
      assertEquals(0, jSeparator0.getComponentCount());
      assertEquals(false, jSeparator0.isCursorSet());
      assertNotNull(jSeparator0);
      
      Rectangle rectangle0 = jSeparator0.getVisibleRect();
      assertEquals(false, jSeparator0.getIgnoreRepaint());
      assertEquals(true, jSeparator0.isBackgroundSet());
      assertEquals(false, jSeparator0.isValid());
      assertEquals(true, jSeparator0.isVisible());
      assertEquals(true, jSeparator0.isEnabled());
      assertEquals(false, jSeparator0.isFontSet());
      assertEquals(false, jSeparator0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSeparator0.isMinimumSizeSet());
      assertEquals(true, jSeparator0.isForegroundSet());
      assertEquals(false, jSeparator0.isFocusTraversalPolicySet());
      assertEquals(false, jSeparator0.isMaximumSizeSet());
      assertEquals(true, jSeparator0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSeparator0.isDisplayable());
      assertEquals(false, jSeparator0.isLightweight());
      assertEquals(0, jSeparator0.countComponents());
      assertEquals(false, jSeparator0.isFocusCycleRoot());
      assertEquals(false, jSeparator0.isShowing());
      assertEquals(false, jSeparator0.isPreferredSizeSet());
      assertEquals(0, jSeparator0.getComponentCount());
      assertEquals(false, jSeparator0.isCursorSet());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try {
        ganttRenderer0.drawRangeLine(graphics2D0, categoryPlot0, (ValueAxis) numberAxis0, (Rectangle2D) rectangle0, (double) int0, (Paint) gradientPaint0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertNotNull(ganttRenderer0);
      
      Graphics2D graphics2D0 = null;
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertNotNull(layeredBarRenderer0);
      
      CategoryPlot categoryPlot0 = layeredBarRenderer0.getPlot();
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertNull(categoryPlot0);
      
      Rectangle2D rectangle2D0 = null;
      double double0 = 1367.238912;
      Color color0 = (Color)AbstractRenderer.DEFAULT_PAINT;
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(-16776961, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertNotNull(color0);
      
      int int0 = 0;
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer(int0);
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(stackedXYAreaRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)stackedXYAreaRenderer0.getBaseStroke();
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getUseFillPaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(basicStroke0);
      
      // Undeclared exception!
      try {
        ganttRenderer0.drawDomainLine(graphics2D0, categoryPlot0, rectangle2D0, double0, (Paint) color0, (Stroke) basicStroke0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertNotNull(intervalBarRenderer0);
      
      EntityCollection entityCollection0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = chartRenderingInfo0.getPlotInfo();
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = intervalBarRenderer0.createState(plotRenderingInfo0);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(categoryItemRendererState0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(groupedStackedBarRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = groupedStackedBarRenderer0.getLegendItemURLGenerator();
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertNull(categorySeriesLabelGenerator0);
      
      // Undeclared exception!
      try {
        groupedStackedBarRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertNotNull(groupedStackedBarRenderer0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertNotNull(ganttRenderer0);
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)groupedStackedBarRenderer0.getLegendItemLabelGenerator();
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertNotNull(standardCategorySeriesLabelGenerator0);
      
      ganttRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator0);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
  }

  //@Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertNotNull(defaultCategoryItemRenderer0);
      
      int int0 = defaultCategoryItemRenderer0.hashCode();
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(1387400799, int0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertNotNull(waterfallBarRenderer0);
      
      String string0 = "";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) int0, (double) int0);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(1.387400799E9, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals("", categoryTextAnnotation0.getText());
      assertEquals(true, categoryTextAnnotation0.getNotify());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertNotNull(categoryTextAnnotation0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryTextAnnotation0, layer0);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(1.387400799E9, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals("", categoryTextAnnotation0.getText());
      assertEquals(true, categoryTextAnnotation0.getNotify());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals("Layer.BACKGROUND", layer0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertNotNull(ganttRenderer0);
      
      CategoryAnnotation categoryAnnotation0 = null;
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      // Undeclared exception!
      try {
        ganttRenderer0.addAnnotation(categoryAnnotation0, layer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(categoryStepRenderer0);
      
      int int0 = 0;
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertNotNull(ganttRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = ganttRenderer0.getURLGenerator(int0, int0, boolean0);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertNull(categoryURLGenerator0);
      
      categoryStepRenderer0.setBaseURLGenerator(categoryURLGenerator0, boolean0);
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertNotNull(layeredBarRenderer0);
      
      int int0 = 0;
      CustomCategoryURLGenerator customCategoryURLGenerator0 = new CustomCategoryURLGenerator();
      assertEquals(0, customCategoryURLGenerator0.getListCount());
      assertNotNull(customCategoryURLGenerator0);
      
      boolean boolean0 = false;
      layeredBarRenderer0.setSeriesURLGenerator(int0, (CategoryURLGenerator) customCategoryURLGenerator0, boolean0);
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, customCategoryURLGenerator0.getListCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertNotNull(stackedBarRenderer0);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertNotNull(scatterRenderer0);
      
      int int0 = (-2515);
      boolean boolean0 = false;
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertNull(categoryToolTipGenerator0);
      
      scatterRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0, boolean0);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = false;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertNotNull(categoryStepRenderer0);
      
      int int0 = 0;
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertNotNull(levelRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = levelRenderer0.getBaseToolTipGenerator();
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertNull(categoryToolTipGenerator0);
      
      categoryStepRenderer0.setSeriesToolTipGenerator(int0, categoryToolTipGenerator0, boolean0);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertNotNull(boxAndWhiskerRenderer0);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = statisticalLineAndShapeRenderer0.getBaseItemLabelGenerator();
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertNull(categoryItemLabelGenerator0);
      
      boxAndWhiskerRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = false;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertNotNull(categoryStepRenderer0);
      
      int int0 = 0;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertNotNull(scatterRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getBaseItemLabelGenerator();
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertNull(categoryItemLabelGenerator0);
      
      categoryStepRenderer0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0, boolean0);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      Graphics2D graphics2D0 = null;
      PlotOrientation plotOrientation0 = null;
      double double0 = (-1714.6);
      int int0 = 2;
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(true, multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotNull(multiplePiePlot0);
      
      CategoryDataset categoryDataset0 = multiplePiePlot0.getDataset();
      assertEquals(true, multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(categoryDataset0);
      
      boolean boolean0 = true;
      statisticalLineAndShapeRenderer0.drawItemLabel(graphics2D0, plotOrientation0, categoryDataset0, int0, int0, boolean0, int0, double0, boolean0);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, multiplePiePlot0.isNotify());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(ganttRenderer0);
      
      CategoryPlot categoryPlot0 = ganttRenderer0.getPlot();
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertNull(categoryPlot0);
      
      // Undeclared exception!
      try {
        ganttRenderer0.setPlot(categoryPlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = false;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertNotNull(categoryStepRenderer0);
      
      Number[][] numberArray0 = new Number[1][2];
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis(int0);
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertNull(categoryAxis0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals((-1.0), cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals((-1.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals((-1.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNotNull(cyclicNumberAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) defaultIntervalCategoryDataset0, categoryAxis0, (ValueAxis) cyclicNumberAxis0, (CategoryItemRenderer) categoryStepRenderer0);
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals((-1.0), cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals((-1.0), cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.05, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(1.05, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertNotNull(categoryPlot0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(levelRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = null;
      levelRenderer0.setLegendItemURLGenerator(categorySeriesLabelGenerator0);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      boolean boolean0 = false;
      Number[][] numberArray0 = new Number[1][2];
      int int0 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(1, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryAxis categoryAxis0 = combinedRangeCategoryPlot0.getDomainAxis(int0);
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertNull(categoryAxis0);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(stackedBarRenderer0);
      
      Rectangle2D rectangle2D0 = null;
      RectangleEdge rectangleEdge0 = Title.DEFAULT_POSITION;
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      // Undeclared exception!
      try {
        double double0 = stackedBarRenderer0.getItemMiddle((Comparable) int0, (Comparable) int0, (CategoryDataset) defaultIntervalCategoryDataset0, categoryAxis0, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertNotNull(levelRenderer0);
      
      String string0 = "Can't evaluate the week.";
      double double0 = (-3466.5423);
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) string0, double0, double0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals("Can't evaluate the week.", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals((-3466.5423), categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals((-3466.5423), categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertNotNull(categoryPointerAnnotation0);
      
      levelRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals("Can't evaluate the week.", categoryPointerAnnotation0.getText());
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals((-3466.5423), categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals((-3466.5423), categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertNotNull(defaultCategoryItemRenderer0);
      
      defaultCategoryItemRenderer0.removeAnnotations();
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertNotNull(groupedStackedBarRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = null;
      groupedStackedBarRenderer0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(minMaxCategoryRenderer0);
      
      AreaRenderer areaRenderer0 = new AreaRenderer();
      assertEquals(true, areaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, areaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, areaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, areaRenderer0.getRowCount());
      assertEquals(true, areaRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, areaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, areaRenderer0.getPassCount());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, areaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, areaRenderer0.getDefaultEntityRadius());
      assertEquals(0, areaRenderer0.getColumnCount());
      assertEquals(true, areaRenderer0.getBaseCreateEntities());
      assertEquals(true, areaRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(areaRenderer0);
      
      CategoryPlot categoryPlot0 = minMaxCategoryRenderer0.getPlot();
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(categoryPlot0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      // Undeclared exception!
      try {
        CategoryAxis categoryAxis0 = areaRenderer0.getDomainAxis(categoryPlot0, defaultBoxAndWhiskerCategoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(minMaxCategoryRenderer0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot();
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeCategoryPlot0);
      
      CategoryDataset categoryDataset0 = combinedRangeCategoryPlot0.getDataset();
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(categoryDataset0);
      
      Range range0 = minMaxCategoryRenderer0.findRangeBounds(categoryDataset0);
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertNotNull(defaultCategoryItemRenderer0);
      
      int int0 = 2908;
      int int1 = statisticalLineAndShapeRenderer0.getColumnCount();
      assertFalse(int1 == int0);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, int1);
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = statisticalLineAndShapeRenderer0.getPlot();
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertNull(categoryPlot0);
      
      JTable jTable0 = new JTable(int1, int1);
      assertFalse(int1 == int0);
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertNotNull(jTable0);
      
      Rectangle rectangle0 = jTable0.getCellRect(int0, int1, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, jTable0.isBackgroundSet());
      assertEquals(true, jTable0.isFontSet());
      assertEquals(1, jTable0.countComponents());
      assertEquals(true, jTable0.isVisible());
      assertEquals(false, jTable0.isValid());
      assertEquals(false, jTable0.isFocusTraversalPolicySet());
      assertEquals(true, jTable0.isEnabled());
      assertEquals(false, jTable0.isCursorSet());
      assertEquals(false, jTable0.isMaximumSizeSet());
      assertEquals(false, jTable0.isDisplayable());
      assertEquals(false, jTable0.isPreferredSizeSet());
      assertEquals(false, jTable0.isFocusCycleRoot());
      assertEquals(true, jTable0.isForegroundSet());
      assertEquals(false, jTable0.isShowing());
      assertEquals(false, jTable0.getIgnoreRepaint());
      assertEquals(false, jTable0.isLightweight());
      assertEquals(1, jTable0.getComponentCount());
      assertEquals(false, jTable0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTable0.isMinimumSizeSet());
      assertEquals(true, jTable0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try {
        defaultCategoryItemRenderer0.drawBackground(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertNotNull(stackedBarRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedBarRenderer0.getLegendItemToolTipGenerator();
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertNull(categorySeriesLabelGenerator0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertNotNull(stackedAreaRenderer0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryURLGenerator categoryURLGenerator0 = stackedBarRenderer3D0.getBaseURLGenerator();
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertNull(categoryURLGenerator0);
      
      stackedAreaRenderer0.setBaseURLGenerator(categoryURLGenerator0);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
  }

  //@Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertNotNull(stackedBarRenderer0);
      
      Graphics2D graphics2D0 = null;
      IntervalBarRenderer intervalBarRenderer0 = new IntervalBarRenderer();
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(intervalBarRenderer0);
      
      CategoryPlot categoryPlot0 = intervalBarRenderer0.getPlot();
      assertEquals(4.0, intervalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, intervalBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, intervalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(4.0, intervalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getBase(), 0.01D);
      assertEquals(0, intervalBarRenderer0.getColumnCount());
      assertEquals(0.2, intervalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, intervalBarRenderer0.getRowCount());
      assertEquals(1.0, intervalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, intervalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, intervalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getShadowsVisible());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, intervalBarRenderer0.getPassCount());
      assertEquals(false, intervalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, intervalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, intervalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, intervalBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, intervalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, intervalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, intervalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNull(categoryPlot0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertNotNull(jSpinner0);
      
      Rectangle rectangle0 = jSpinner0.bounds();
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try {
        stackedBarRenderer0.drawOutline(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(barRenderer3D0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(stackedAreaRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getSeriesToolTipGenerator(int0);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(categoryToolTipGenerator0);
      
      barRenderer3D0.setSeriesToolTipGenerator(int0, categoryToolTipGenerator0);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNotNull(stackedAreaRenderer0);
      
      int int0 = stackedAreaRenderer0.getRowCount();
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertNotNull(waterfallBarRenderer0);
      
      int int0 = waterfallBarRenderer0.getPassCount();
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(waterfallBarRenderer0);
      
      double double0 = (-1892.7240631979619);
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(double0, double0);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals((-1892.7240631979619), barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals((-1892.7240631979619), barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(barRenderer3D0);
      
      double double1 = barRenderer3D0.getBase();
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals((-1892.7240631979619), barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals((-1892.7240631979619), barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      
      String string0 = "";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) string0, double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals("", categoryTextAnnotation0.getText());
      assertEquals(true, categoryTextAnnotation0.getNotify());
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(0.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals((-1892.7240631979619), barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals((-1892.7240631979619), barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(categoryTextAnnotation0);
      
      boolean boolean0 = waterfallBarRenderer0.removeAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals("", categoryTextAnnotation0.getText());
      assertEquals(true, categoryTextAnnotation0.getNotify());
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(0.0, categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals((-1892.7240631979619), barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals((-1892.7240631979619), barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      int int0 = 0;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(scatterRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = scatterRenderer0.getSeriesURLGenerator(int0);
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertNull(categoryURLGenerator0);
      
      stackedAreaRenderer0.setSeriesURLGenerator(int0, categoryURLGenerator0);
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(barRenderer3D0);
      
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNotNull(stackedAreaRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getSeriesToolTipGenerator(int0);
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNull(categoryToolTipGenerator0);
      
      barRenderer3D0.setBaseToolTipGenerator(categoryToolTipGenerator0);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-1865);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertNotNull(minMaxCategoryRenderer0);
      
      LegendItem legendItem0 = minMaxCategoryRenderer0.getLegendItem(int0, int0);
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertNotNull(lineRenderer3D0);
      
      int int0 = 0;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertNotNull(boxAndWhiskerRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = boxAndWhiskerRenderer0.getSeriesItemLabelGenerator(int0);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertNull(categoryItemLabelGenerator0);
      
      lineRenderer3D0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertNotNull(scatterRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = scatterRenderer0.getBaseItemLabelGenerator();
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertNull(categoryItemLabelGenerator0);
      
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertNotNull(barRenderer3D0);
      
      barRenderer3D0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
  }
}
