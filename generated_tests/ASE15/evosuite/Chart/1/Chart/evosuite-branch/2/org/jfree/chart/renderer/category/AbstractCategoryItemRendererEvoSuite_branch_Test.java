/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:03:06 GMT 2014
 */

package org.jfree.chart.renderer.category;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.net.URI;
import java.net.URL;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItem;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.CategoryAnnotation;
import org.jfree.chart.annotations.CategoryPointerAnnotation;
import org.jfree.chart.annotations.CategoryTextAnnotation;
import org.jfree.chart.annotations.XYTitleAnnotation;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.labels.CategoryItemLabelGenerator;
import org.jfree.chart.labels.CategorySeriesLabelGenerator;
import org.jfree.chart.labels.CategoryToolTipGenerator;
import org.jfree.chart.labels.HighLowItemLabelGenerator;
import org.jfree.chart.labels.StandardCategorySeriesLabelGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryCrosshairState;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeCategoryPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.CategoryItemRenderer;
import org.jfree.chart.renderer.category.CategoryItemRendererState;
import org.jfree.chart.renderer.category.CategoryStepRenderer;
import org.jfree.chart.renderer.category.DefaultCategoryItemRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.GroupedStackedBarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.chart.renderer.category.LevelRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;
import org.jfree.chart.renderer.category.MinMaxCategoryRenderer;
import org.jfree.chart.renderer.category.ScatterRenderer;
import org.jfree.chart.renderer.category.StackedAreaRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.category.StatisticalBarRenderer;
import org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.HighLowRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.XYDifferenceRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.title.Title;
import org.jfree.chart.urls.CategoryURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.LengthAdjustmentType;
import org.jfree.chart.util.RectangleAnchor;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

 
public class AbstractCategoryItemRendererEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertNotNull(stackedBarRenderer3D0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      StandardEntityCollection standardEntityCollection0 = (StandardEntityCollection)chartRenderingInfo0.getEntityCollection();
      assertEquals(0, standardEntityCollection0.getEntityCount());
      assertNotNull(standardEntityCollection0);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(scatterRenderer0);
      
      int int0 = (-1018);
      Shape shape0 = scatterRenderer0.getSeriesShape(int0);
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNull(shape0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      // Undeclared exception!
      try {
        stackedBarRenderer3D0.addEntity(standardEntityCollection0, shape0, defaultStatisticalCategoryDataset0, int0, int0, boolean0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertNotNull(levelRenderer0);
      
      LegendItemCollection legendItemCollection0 = levelRenderer0.getLegendItems();
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-2756);
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D();
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertNotNull(stackedBarRenderer3D0);
      
      ValueAxis valueAxis0 = stackedBarRenderer3D0.getRangeAxis(combinedDomainCategoryPlot0, int0);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertNull(valueAxis0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-2217);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) int0, (double) int0);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals((-2217.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals((-2217.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxis();
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNotNull(combinedRangeCategoryPlot0);
      
      int int1 = 0;
      NumberAxis numberAxis1 = (NumberAxis)stackedBarRenderer3D0.getRangeAxis(combinedRangeCategoryPlot0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals((-2217.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals((-2217.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, numberAxis1.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis1.getFixedDimension(), 0.01D);
      assertNull(numberAxis1.getLabel());
      assertEquals(0.0, numberAxis1.getLabelAngle(), 0.01D);
      assertEquals(true, numberAxis1.isAxisLineVisible());
      assertEquals(2.0F, numberAxis1.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis1.getFixedAutoRange(), 0.01D);
      assertEquals(1.05, numberAxis1.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis1.isVerticalTickLabels());
      assertEquals(1.0E-8, numberAxis1.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis1.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis1.getUpperMargin(), 0.01D);
      assertEquals(false, numberAxis1.isInverted());
      assertNull(numberAxis1.getLabelToolTip());
      assertEquals(0.0F, numberAxis1.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis1.isMinorTickMarksVisible());
      assertNull(numberAxis1.getLabelURL());
      assertEquals(true, numberAxis1.isVisible());
      assertEquals(false, numberAxis1.isPositiveArrowVisible());
      assertEquals(0, numberAxis1.getMinorTickCount());
      assertEquals(true, numberAxis1.isAutoRange());
      assertEquals(true, numberAxis1.getAutoRangeStickyZero());
      assertEquals(0.05, numberAxis1.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis1.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis1.isTickLabelsVisible());
      assertEquals(false, numberAxis1.isNegativeArrowVisible());
      assertEquals(true, numberAxis1.isTickMarksVisible());
      assertEquals(2.0F, numberAxis1.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, numberAxis1.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis0.getLabel());
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertSame(numberAxis1, numberAxis0);
      assertSame(numberAxis0, numberAxis1);
      assertNotNull(numberAxis1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(boxAndWhiskerRenderer0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer1 = (BoxAndWhiskerRenderer)boxAndWhiskerRenderer0.clone();
      assertTrue(boxAndWhiskerRenderer1.equals((Object)boxAndWhiskerRenderer0));
      assertTrue(boxAndWhiskerRenderer0.equals((Object)boxAndWhiskerRenderer1));
      assertEquals(true, boxAndWhiskerRenderer1.getBaseSeriesVisible());
      assertEquals(false, boxAndWhiskerRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer1.getBaseCreateEntities());
      assertEquals(0, boxAndWhiskerRenderer1.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer1.getBaseItemLabelsVisible());
      assertEquals(false, boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer1.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer1.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, boxAndWhiskerRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer1.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer1.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(1.0, boxAndWhiskerRenderer1.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer1.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer1.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer1.isMedianVisible());
      assertEquals(1, boxAndWhiskerRenderer1.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(boxAndWhiskerRenderer1, boxAndWhiskerRenderer0);
      assertNotSame(boxAndWhiskerRenderer0, boxAndWhiskerRenderer1);
      assertNotNull(boxAndWhiskerRenderer1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      int int0 = KeyEvent.VK_Y;
      assertEquals(89, int0);
      
      Color color0 = (Color)AbstractRenderer.DEFAULT_VALUE_LABEL_PAINT;
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertNotNull(color0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer((Paint) color0, (Paint) color0, (Paint) color0, (Paint) color0);
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(waterfallBarRenderer0);
      
      Graphics2D graphics2D0 = null;
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      PlotOrientation plotOrientation0 = combinedDomainCategoryPlot0.getOrientation();
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNotNull(plotOrientation0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean0 = false;
      waterfallBarRenderer0.drawItemLabel(graphics2D0, plotOrientation0, taskSeriesCollection0, int0, int0, boolean0, int0, double0, boolean0);
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 26;
      boolean boolean0 = true;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertNotNull(waterfallBarRenderer0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      CategoryCrosshairState categoryCrosshairState0 = null;
      waterfallBarRenderer0.updateCrosshairValues(categoryCrosshairState0, boolean0, int0, int0, int0, int0, int0, plotOrientation0);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2215;
      boolean boolean0 = true;
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertNotNull(waterfallBarRenderer0);
      
      CategoryCrosshairState categoryCrosshairState0 = new CategoryCrosshairState();
      assertEquals(0, categoryCrosshairState0.getRangeAxisIndex());
      assertEquals(0, categoryCrosshairState0.getDomainAxisIndex());
      assertEquals(0.0, categoryCrosshairState0.getAnchorY(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairX(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairY(), 0.01D);
      assertEquals(0, categoryCrosshairState0.getDatasetIndex());
      assertEquals(0.0, categoryCrosshairState0.getAnchorX(), 0.01D);
      assertEquals(0.0, categoryCrosshairState0.getCrosshairDistance(), 0.01D);
      assertNotNull(categoryCrosshairState0);
      
      PlotOrientation plotOrientation0 = PlotOrientation.VERTICAL;
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      // Undeclared exception!
      try {
        waterfallBarRenderer0.updateCrosshairValues(categoryCrosshairState0, boolean0, int0, int0, int0, int0, int0, plotOrientation0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNotNull(combinedDomainCategoryPlot0);
      
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset();
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(categoryDataset0);
      
      int int0 = (-4955);
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset(categoryDataset0, int0, int0);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(-4955, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-4955, slidingCategoryDataset0.getMaximumCategoryCount());
      assertNotNull(slidingCategoryDataset0);
      
      CategoryAxis categoryAxis0 = new CategoryAxis();
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(false, categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(categoryAxis0);
      
      int int1 = 0;
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int1);
      assertFalse(int1 == int0);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertNull(valueAxis0);
      
      CategoryPlot categoryPlot0 = new CategoryPlot((CategoryDataset) slidingCategoryDataset0, categoryAxis0, valueAxis0, (CategoryItemRenderer) waterfallBarRenderer0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(false, categoryPlot0.isSubplot());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(-4955, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-4955, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, categoryAxis0.isAxisLineVisible());
      assertEquals(0.0F, categoryAxis0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.0, categoryAxis0.getFixedDimension(), 0.01D);
      assertNull(categoryAxis0.getLabelURL());
      assertEquals(2.0F, categoryAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis0.isTickLabelsVisible());
      assertEquals(1, categoryAxis0.getMaximumCategoryLabelLines());
      assertEquals(4, categoryAxis0.getCategoryLabelPositionOffset());
      assertNull(categoryAxis0.getLabelToolTip());
      assertEquals(false, categoryAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, categoryAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, categoryAxis0.getUpperMargin(), 0.01D);
      assertNull(categoryAxis0.getLabel());
      assertEquals(0.0, categoryAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, categoryAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isTickMarksVisible());
      assertEquals(0.2, categoryAxis0.getCategoryMargin(), 0.01D);
      assertEquals(true, categoryAxis0.isVisible());
      assertEquals(0.0F, categoryAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNotNull(categoryPlot0);
      
      Color color0 = (Color)waterfallBarRenderer0.lookupSeriesPaint(int1);
      assertFalse(int1 == int0);
      assertEquals(85, color0.getBlue());
      assertEquals(85, color0.getGreen());
      assertEquals(-43691, color0.getRGB());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=85,b=85]", color0.toString());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertNotNull(stackedBarRenderer3D0);
      
      int int0 = 0;
      boolean boolean0 = false;
      Color color0 = (Color)stackedBarRenderer3D0.getItemPaint(int0, int0, boolean0);
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNotNull(stackedAreaRenderer0);
      
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer();
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer1.getRowCount());
      assertEquals(true, stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer1.getBaseCreateEntities());
      assertEquals(3, stackedAreaRenderer1.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer1.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer1.getColumnCount());
      assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer1.getPassCount());
      assertEquals(false, stackedAreaRenderer1.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertNotSame(stackedAreaRenderer1, stackedAreaRenderer0);
      assertNotNull(stackedAreaRenderer1);
      
      boolean boolean0 = stackedAreaRenderer0.equals((Object) stackedAreaRenderer1);
      assertTrue(stackedAreaRenderer0.equals((Object)stackedAreaRenderer1));
      assertTrue(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedAreaRenderer1.getRowCount());
      assertEquals(true, stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer1.getBaseCreateEntities());
      assertEquals(3, stackedAreaRenderer1.getDefaultEntityRadius());
      assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer1.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer1.getColumnCount());
      assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer1.getPassCount());
      assertEquals(false, stackedAreaRenderer1.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      assertTrue(boolean0);
      assertNotSame(stackedAreaRenderer0, stackedAreaRenderer1);
      assertNotSame(stackedAreaRenderer1, stackedAreaRenderer0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(2, stackedAreaRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertNotNull(stackedAreaRenderer0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)AbstractRenderer.DEFAULT_SHAPE;
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      
      stackedAreaRenderer0.setBaseLegendShape((Shape) rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(2, stackedAreaRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      StackedAreaRenderer stackedAreaRenderer1 = new StackedAreaRenderer();
      //  // Unstable assertion: assertFalse(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getRenderAsPercentages());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer1.getRowCount());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(3, stackedAreaRenderer1.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer1.getColumnCount());
      //  // Unstable assertion: assertEquals(2, stackedAreaRenderer1.getPassCount());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertNotSame(stackedAreaRenderer1, stackedAreaRenderer0);
      //  // Unstable assertion: assertNotNull(stackedAreaRenderer1);
      
      boolean boolean0 = stackedAreaRenderer0.equals((Object) stackedAreaRenderer1);
      //  // Unstable assertion: assertFalse(stackedAreaRenderer0.equals((Object)stackedAreaRenderer1));
      //  // Unstable assertion: assertFalse(stackedAreaRenderer1.equals((Object)stackedAreaRenderer0));
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer0.getColumnCount());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer0.getRowCount());
      //  // Unstable assertion: assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(2, stackedAreaRenderer0.getPassCount());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getRenderAsPercentages());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getBaseItemLabelsVisible());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesFillPaint());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getDataBoundsIncludesVisibleSeriesOnly());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesStroke());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesPaint());
      //  // Unstable assertion: assertEquals(2.0, stackedAreaRenderer1.getItemLabelAnchorOffset(), 0.01D);
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getAutoPopulateSeriesShape());
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer1.getRowCount());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisibleInLegend());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getBaseSeriesVisible());
      //  // Unstable assertion: assertEquals(3, stackedAreaRenderer1.getDefaultEntityRadius());
      //  // Unstable assertion: assertEquals(true, stackedAreaRenderer1.getBaseCreateEntities());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlinePaint());
      //  // Unstable assertion: assertEquals(0, stackedAreaRenderer1.getColumnCount());
      //  // Unstable assertion: assertEquals(2, stackedAreaRenderer1.getPassCount());
      //  // Unstable assertion: assertEquals(false, stackedAreaRenderer1.getAutoPopulateSeriesOutlineStroke());
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(stackedAreaRenderer0, stackedAreaRenderer1);
      //  // Unstable assertion: assertNotSame(stackedAreaRenderer1, stackedAreaRenderer0);
  }

  //@Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-2217);
      boolean boolean0 = false;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) int0, (double) int0);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals((-2217.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals((-2217.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      Graphics2D graphics2D0 = null;
      JSpinner jSpinner0 = new JSpinner();
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertNotNull(jSpinner0);
      
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertNotNull(jSpinner_NumberEditor0);
      
      Rectangle rectangle0 = jSpinner_NumberEditor0.getBounds();
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNotNull(rectangle0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(thermometerPlot0);
      
      PlotOrientation plotOrientation0 = thermometerPlot0.getOrientation();
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertNotNull(plotOrientation0);
      
      CompositeTitle compositeTitle0 = new CompositeTitle();
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertTrue(compositeTitle0.visible);
      assertNotNull(compositeTitle0);
      
      RectangleInsets rectangleInsets0 = compositeTitle0.getMargin();
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01D);
      assertTrue(compositeTitle0.visible);
      assertNotNull(rectangleInsets0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) boolean0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      LengthAdjustmentType lengthAdjustmentType0 = categoryMarker0.getLabelOffsetType();
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertNotNull(lengthAdjustmentType0);
      
      XYTitleAnnotation xYTitleAnnotation0 = new XYTitleAnnotation((double) int0, (double) int0, (Title) compositeTitle0);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01D);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01D);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(true, xYTitleAnnotation0.getNotify());
      assertEquals((-2217.0), xYTitleAnnotation0.getX(), 0.01D);
      assertEquals((-2217.0), xYTitleAnnotation0.getY(), 0.01D);
      assertNull(xYTitleAnnotation0.getURL());
      assertTrue(compositeTitle0.visible);
      assertNotNull(xYTitleAnnotation0);
      
      RectangleAnchor rectangleAnchor0 = xYTitleAnnotation0.getTitleAnchor();
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01D);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01D);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(true, xYTitleAnnotation0.getNotify());
      assertEquals((-2217.0), xYTitleAnnotation0.getX(), 0.01D);
      assertEquals((-2217.0), xYTitleAnnotation0.getY(), 0.01D);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertTrue(compositeTitle0.visible);
      assertNotNull(rectangleAnchor0);
      
      Point2D.Double point2D_Double0 = (Point2D.Double)stackedBarRenderer3D0.calculateDomainMarkerTextAnchorPoint(graphics2D0, plotOrientation0, rectangle0, rectangle0, rectangleInsets0, lengthAdjustmentType0, rectangleAnchor0);
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals("PlotOrientation.VERTICAL", plotOrientation0.toString());
      assertEquals(0.0, xYTitleAnnotation0.getMaxHeight(), 0.01D);
      assertEquals(0.0, xYTitleAnnotation0.getMaxWidth(), 0.01D);
      assertNull(xYTitleAnnotation0.getToolTipText());
      assertEquals(true, xYTitleAnnotation0.getNotify());
      assertEquals((-2217.0), xYTitleAnnotation0.getX(), 0.01D);
      assertEquals((-2217.0), xYTitleAnnotation0.getY(), 0.01D);
      assertNull(xYTitleAnnotation0.getURL());
      assertEquals("RectangleAnchor.CENTER", rectangleAnchor0.toString());
      assertEquals(0.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals((-2217.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals((-2217.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals("EXPAND", lengthAdjustmentType0.toString());
      assertTrue(compositeTitle0.visible);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(stackedAreaRenderer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = 27;
      CategoryPlot categoryPlot0 = null;
      String string0 = "";
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0, string0);
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(27.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(27.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(27.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertNotNull(cyclicNumberAxis0);
      
      Rectangle2D rectangle2D0 = null;
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertNotNull(color0);
      
      stackedAreaRenderer0.drawRangeLine(graphics2D0, categoryPlot0, (ValueAxis) cyclicNumberAxis0, rectangle2D0, (double) int0, (Paint) color0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals("", cyclicNumberAxis0.getLabel());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(27.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(27.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(27.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelURL());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertNotNull(stackedAreaRenderer0);
      
      String string0 = "DrNBf(vX%fB>@Q?0";
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = null;
      double double0 = 0.0;
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis(double0, double0, string0);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(0.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("DrNBf(vX%fB>@Q?0", cyclicNumberAxis0.getLabel());
      assertEquals(0.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      Rectangle2D rectangle2D0 = null;
      Color color0 = (Color)Axis.DEFAULT_AXIS_LABEL_PAINT;
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      // Undeclared exception!
      try {
        stackedAreaRenderer0.drawRangeLine(graphics2D0, categoryPlot0, (ValueAxis) cyclicNumberAxis0, rectangle2D0, double0, (Paint) color0, cyclicNumberAxis0.DEFAULT_ADVANCE_LINE_STROKE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = (-2033);
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertNotNull(minMaxCategoryRenderer0);
      
      Graphics2D graphics2D0 = null;
      CategoryPlot categoryPlot0 = new CategoryPlot();
      assertEquals(1.0F, categoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, categoryPlot0.isOutlineVisible());
      assertEquals(false, categoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, categoryPlot0.isRangePannable());
      assertNull(categoryPlot0.getNoDataMessage());
      assertEquals(true, categoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, categoryPlot0.isDomainZoomable());
      assertEquals(true, categoryPlot0.isNotify());
      assertEquals(0, categoryPlot0.getWeight());
      assertEquals(0.0, categoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, categoryPlot0.isRangeZoomable());
      assertEquals(true, categoryPlot0.canSelectByRegion());
      assertEquals(false, categoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, categoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, categoryPlot0.canSelectByPoint());
      assertEquals(false, categoryPlot0.isDomainPannable());
      assertEquals(true, categoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, categoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, categoryPlot0.isSubplot());
      assertEquals(1.0F, categoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, categoryPlot0.isDomainGridlinesVisible());
      assertEquals(15, categoryPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, categoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, categoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, categoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(categoryPlot0);
      
      JTextArea jTextArea0 = new JTextArea();
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(false, jTextArea0.isLightweight());
      assertNotNull(jTextArea0);
      
      Rectangle rectangle0 = jTextArea0.bounds();
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      HighLowItemLabelGenerator highLowItemLabelGenerator0 = new HighLowItemLabelGenerator();
      assertNotNull(highLowItemLabelGenerator0);
      
      HighLowRenderer highLowRenderer0 = new HighLowRenderer();
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01D);
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertNotNull(highLowRenderer0);
      
      XYURLGenerator xYURLGenerator0 = highLowRenderer0.getBaseURLGenerator();
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01D);
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertNull(xYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2((XYToolTipGenerator) highLowItemLabelGenerator0, xYURLGenerator0);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01D);
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      boolean boolean0 = false;
      Color color0 = (Color)stackedXYAreaRenderer2_0.getItemOutlinePaint(int0, rectangle0.x, boolean0);
      assertEquals(true, highLowRenderer0.getBaseSeriesVisible());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, highLowRenderer0.getDrawCloseTicks());
      assertEquals(3, highLowRenderer0.getDefaultEntityRadius());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, highLowRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, highLowRenderer0.getTickLength(), 0.01D);
      assertEquals(1, highLowRenderer0.getPassCount());
      assertEquals(false, highLowRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, highLowRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, highLowRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, highLowRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, highLowRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, highLowRenderer0.getBaseCreateEntities());
      assertEquals(true, highLowRenderer0.getDrawOpenTicks());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(true, stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(color0);
      
      XYDifferenceRenderer xYDifferenceRenderer0 = new XYDifferenceRenderer();
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDifferenceRenderer0.getShapesVisible());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertNotNull(xYDifferenceRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYDifferenceRenderer0.getItemOutlineStroke(rectangle0.x, rectangle0.y, boolean0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDifferenceRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDifferenceRenderer0.getShapesVisible());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYDifferenceRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYDifferenceRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, xYDifferenceRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDifferenceRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, xYDifferenceRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDifferenceRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDifferenceRenderer0.getRoundXCoordinates());
      assertEquals(false, xYDifferenceRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, xYDifferenceRenderer0.getPassCount());
      assertEquals(true, jTextArea0.isFontSet());
      assertEquals(false, jTextArea0.isFocusCycleRoot());
      assertEquals(true, jTextArea0.getFocusTraversalKeysEnabled());
      assertEquals(false, jTextArea0.isDisplayable());
      assertEquals(0, jTextArea0.getComponentCount());
      assertEquals(true, jTextArea0.isForegroundSet());
      assertEquals(0, jTextArea0.countComponents());
      assertEquals(true, jTextArea0.isBackgroundSet());
      assertEquals(true, jTextArea0.isCursorSet());
      assertEquals(false, jTextArea0.isValid());
      assertEquals(false, jTextArea0.isPreferredSizeSet());
      assertEquals(false, jTextArea0.isMinimumSizeSet());
      assertEquals(true, jTextArea0.isEnabled());
      assertEquals(false, jTextArea0.getIgnoreRepaint());
      assertEquals(false, jTextArea0.isFocusTraversalPolicyProvider());
      assertEquals(false, jTextArea0.isShowing());
      assertEquals(true, jTextArea0.isVisible());
      assertEquals(false, jTextArea0.isMaximumSizeSet());
      assertEquals(false, jTextArea0.isFocusTraversalPolicySet());
      assertEquals(false, jTextArea0.isLightweight());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertNotNull(basicStroke0);
      
      // Undeclared exception!
      try {
        minMaxCategoryRenderer0.drawDomainLine(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0, (double) int0, (Paint) color0, (Stroke) basicStroke0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNotNull(stackedAreaRenderer0);
      
      Number[][] numberArray0 = new Number[5][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = stackedAreaRenderer0.findRangeBounds(defaultIntervalCategoryDataset0, boolean0);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNotNull(stackedAreaRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = stackedAreaRenderer0.getLegendItemURLGenerator();
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNull(categorySeriesLabelGenerator0);
      
      // Undeclared exception!
      try {
        stackedAreaRenderer0.setLegendItemLabelGenerator(categorySeriesLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertNotNull(boxAndWhiskerRenderer0);
      
      int int0 = (-2217);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) int0, (double) int0);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals((-2217.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals((-2217.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)stackedBarRenderer3D0.getLegendItemLabelGenerator();
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals((-2217.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals((-2217.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertNotNull(standardCategorySeriesLabelGenerator0);
      
      boxAndWhiskerRenderer0.setLegendItemLabelGenerator((CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator0);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals((-2217.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals((-2217.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      String string0 = "";
      double double0 = 1034.7;
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) string0, double0, double0);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(1034.7, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(1034.7, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertNotNull(categoryPointerAnnotation0);
      
      waterfallBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0);
      assertEquals(true, waterfallBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, waterfallBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, waterfallBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(true, waterfallBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(true, waterfallBarRenderer0.getShadowsVisible());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, waterfallBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals("", categoryPointerAnnotation0.getText());
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(1034.7, categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(1034.7, categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-2217);
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertNotNull(layeredBarRenderer0);
      
      String string0 = "org.jfree.chart.renderer.category.AbstractCategoryItemRenderer";
      CategoryPointerAnnotation categoryPointerAnnotation0 = new CategoryPointerAnnotation(string0, (Comparable) int0, (double) int0, (double) int0);
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals((-2217.0), categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals((-2217.0), categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", categoryPointerAnnotation0.getText());
      assertNotNull(categoryPointerAnnotation0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      layeredBarRenderer0.addAnnotation((CategoryAnnotation) categoryPointerAnnotation0, layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(5.0, categoryPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(true, categoryPointerAnnotation0.getNotify());
      assertEquals((-2217.0), categoryPointerAnnotation0.getValue(), 0.01D);
      assertEquals((-2217.0), categoryPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getLabelOffset(), 0.01D);
      assertEquals(30.0, categoryPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals(3.0, categoryPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(0.0, categoryPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(10.0, categoryPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals("org.jfree.chart.renderer.category.AbstractCategoryItemRenderer", categoryPointerAnnotation0.getText());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = 1265;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D((double) int0, (double) int0);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(1265.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1265.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertNotNull(scatterRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = scatterRenderer0.getSeriesURLGenerator(int0);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertNull(categoryURLGenerator0);
      
      stackedBarRenderer3D0.setBaseURLGenerator(categoryURLGenerator0, boolean0);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(1265.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1265.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(levelRenderer0);
      
      boolean boolean0 = false;
      int int0 = 3;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNotNull(stackedAreaRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = stackedAreaRenderer0.getSeriesURLGenerator(int0);
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNull(categoryURLGenerator0);
      
      levelRenderer0.setSeriesURLGenerator(int0, categoryURLGenerator0, boolean0);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertNotNull(ganttRenderer0);
      
      EntityCollection entityCollection0 = null;
      NumberAxis3D numberAxis3D0 = new NumberAxis3D();
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertNotNull(numberAxis3D0);
      
      Polygon polygon0 = (Polygon)numberAxis3D0.getUpArrow();
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabel());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(3, polygon0.npoints);
      assertNotNull(polygon0);
      
      Number[][] numberArray0 = new Number[4][5];
      int int0 = JRootPane.QUESTION_DIALOG;
      assertEquals(7, int0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        ganttRenderer0.addEntity(entityCollection0, polygon0, defaultIntervalCategoryDataset0, int0, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'row' argument is out of bounds.
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertNotNull(defaultCategoryItemRenderer0);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(scatterRenderer0);
      
      boolean boolean0 = scatterRenderer0.getAutoPopulateSeriesPaint();
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertTrue(boolean0);
      
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer3D0.getBaseToolTipGenerator();
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertNull(categoryToolTipGenerator0);
      
      boolean boolean1 = false;
      assertFalse(boolean1 == boolean0);
      
      defaultCategoryItemRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 459;
      boolean boolean0 = false;
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertNotNull(boxAndWhiskerRenderer0);
      
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer();
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(stackedBarRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedBarRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertNull(categoryToolTipGenerator0);
      
      boxAndWhiskerRenderer0.setSeriesToolTipGenerator(int0, categoryToolTipGenerator0, boolean0);
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertNotNull(statisticalBarRenderer0);
      
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertNotNull(lineRenderer3D0);
      
      int int0 = 0;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = lineRenderer3D0.getSeriesItemLabelGenerator(int0);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertNull(categoryItemLabelGenerator0);
      
      statisticalBarRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0, boolean0);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(boxAndWhiskerRenderer0);
      
      boolean boolean0 = false;
      int int0 = 3301;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer();
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(categoryStepRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = categoryStepRenderer0.getSeriesItemLabelGenerator(int0);
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNull(categoryItemLabelGenerator0);
      
      boxAndWhiskerRenderer0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0, boolean0);
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, categoryStepRenderer0.getStagger());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertNotNull(levelRenderer0);
      
      CategoryPlot categoryPlot0 = levelRenderer0.getPlot();
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertNull(categoryPlot0);
      
      // Undeclared exception!
      try {
        levelRenderer0.setPlot(categoryPlot0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'plot' argument.
         //
      }
  }

  //@Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertNotNull(minMaxCategoryRenderer0);
      
      Graphics2D graphics2D0 = null;
      JSpinner jSpinner0 = new JSpinner();
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertNotNull(jSpinner0);
      
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertNotNull(jSpinner_NumberEditor0);
      
      Rectangle rectangle0 = jSpinner_NumberEditor0.getBounds();
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(rectangle0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)combinedRangeXYPlot0.getRangeAxis();
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(numberAxis0);
      
      CombinedRangeCategoryPlot combinedRangeCategoryPlot0 = new CombinedRangeCategoryPlot((ValueAxis) numberAxis0);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedRangeCategoryPlot0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      JFreeChart jFreeChart0 = null;
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.getUseBuffer());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertNotNull(chartPanel0);
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.getUseBuffer());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.getUseBuffer());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      CategoryItemRendererState categoryItemRendererState0 = minMaxCategoryRenderer0.initialise(graphics2D0, (Rectangle2D) rectangle0, (CategoryPlot) combinedRangeCategoryPlot0, (CategoryDataset) taskSeriesCollection0, plotRenderingInfo0);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertNull(numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, combinedRangeCategoryPlot0.getWeight());
      assertEquals(true, combinedRangeCategoryPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isSubplot());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangePannable());
      assertEquals(true, combinedRangeCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeCategoryPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeCategoryPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0, combinedRangeCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedRangeCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeCategoryPlot0.isNotify());
      assertEquals(false, combinedRangeCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(true, chartPanel0.getUseBuffer());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, categoryItemRendererState0.getBarWidth(), 0.01D);
      assertEquals(0.0, categoryItemRendererState0.getSeriesRunningTotal(), 0.01D);
      assertEquals(0, categoryItemRendererState0.getVisibleSeriesCount());
      assertEquals(false, jSpinner_NumberEditor0.isShowing());
      assertEquals(true, jSpinner_NumberEditor0.isVisible());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner_NumberEditor0.isFocusTraversalPolicyProvider());
      assertEquals(true, jSpinner_NumberEditor0.isBackgroundSet());
      assertEquals(false, jSpinner_NumberEditor0.isMinimumSizeSet());
      assertEquals(true, jSpinner_NumberEditor0.isEnabled());
      assertEquals(1, jSpinner_NumberEditor0.getComponentCount());
      assertEquals(1, jSpinner_NumberEditor0.countComponents());
      assertEquals(true, jSpinner_NumberEditor0.isForegroundSet());
      assertEquals(true, jSpinner_NumberEditor0.isFontSet());
      assertEquals(false, jSpinner_NumberEditor0.isDisplayable());
      assertEquals(false, jSpinner_NumberEditor0.isFocusCycleRoot());
      assertEquals(false, jSpinner_NumberEditor0.isLightweight());
      assertEquals(false, jSpinner_NumberEditor0.isPreferredSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.getIgnoreRepaint());
      assertEquals(false, jSpinner_NumberEditor0.isMaximumSizeSet());
      assertEquals(false, jSpinner_NumberEditor0.isCursorSet());
      assertEquals(true, jSpinner_NumberEditor0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner_NumberEditor0.isValid());
      assertEquals(false, jSpinner0.isPreferredSizeSet());
      assertEquals(true, jSpinner0.isFontSet());
      assertEquals(false, jSpinner0.isFocusCycleRoot());
      assertEquals(true, jSpinner0.isVisible());
      assertEquals(false, jSpinner0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSpinner0.isMaximumSizeSet());
      assertEquals(3, jSpinner0.getComponentCount());
      assertEquals(false, jSpinner0.isShowing());
      assertEquals(3, jSpinner0.countComponents());
      assertEquals(true, jSpinner0.isForegroundSet());
      assertEquals(false, jSpinner0.getIgnoreRepaint());
      assertEquals(true, jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSpinner0.isValid());
      assertEquals(false, jSpinner0.isDisplayable());
      assertEquals(false, jSpinner0.isLightweight());
      assertEquals(false, jSpinner0.isFocusTraversalPolicySet());
      assertEquals(false, jSpinner0.isMinimumSizeSet());
      assertEquals(true, jSpinner0.isEnabled());
      assertEquals(true, jSpinner0.isBackgroundSet());
      assertEquals(false, jSpinner0.isCursorSet());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertNotNull(categoryItemRendererState0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(scatterRenderer0);
      
      StandardCategorySeriesLabelGenerator standardCategorySeriesLabelGenerator0 = (StandardCategorySeriesLabelGenerator)scatterRenderer0.getLegendItemLabelGenerator();
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertNotNull(standardCategorySeriesLabelGenerator0);
      
      stackedBarRenderer3D0.setLegendItemURLGenerator((CategorySeriesLabelGenerator) standardCategorySeriesLabelGenerator0);
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 0.0;
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(double0, double0);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertNotNull(barRenderer3D0);
      
      Number[][] numberArray0 = new Number[2][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D();
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertNull(categoryAxis3D0.getLabel());
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(categoryAxis3D0);
      
      Rectangle2D rectangle2D0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getRangeAxisEdge();
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      // Undeclared exception!
      try {
        double double1 = barRenderer3D0.getItemMiddle((Comparable) double0, (Comparable) double0, (CategoryDataset) defaultIntervalCategoryDataset0, (CategoryAxis) categoryAxis3D0, rectangle2D0, rectangleEdge0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid category index: -1
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-1.0);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals((-1.0), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals((-1.0), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryAnnotation categoryAnnotation0 = null;
      // Undeclared exception!
      try {
        stackedBarRenderer3D0.addAnnotation(categoryAnnotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'annotation' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GroupedStackedBarRenderer groupedStackedBarRenderer0 = new GroupedStackedBarRenderer();
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertNotNull(groupedStackedBarRenderer0);
      
      groupedStackedBarRenderer0.removeAnnotations();
      assertEquals(false, groupedStackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, groupedStackedBarRenderer0.getRenderAsPercentages());
      assertEquals(0.0, groupedStackedBarRenderer0.getBase(), 0.01D);
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, groupedStackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, groupedStackedBarRenderer0.getRowCount());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, groupedStackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(true, groupedStackedBarRenderer0.getBaseCreateEntities());
      assertEquals(3, groupedStackedBarRenderer0.getPassCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, groupedStackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(false, groupedStackedBarRenderer0.isDrawBarOutline());
      assertEquals(3, groupedStackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, groupedStackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, groupedStackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, groupedStackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.2, groupedStackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, groupedStackedBarRenderer0.getColumnCount());
      assertEquals(false, groupedStackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, groupedStackedBarRenderer0.getShadowsVisible());
      assertEquals(2.0, groupedStackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(4.0, groupedStackedBarRenderer0.getShadowYOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertNotNull(lineRenderer3D0);
      
      MinMaxCategoryRenderer minMaxCategoryRenderer0 = new MinMaxCategoryRenderer();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(minMaxCategoryRenderer0);
      
      CategorySeriesLabelGenerator categorySeriesLabelGenerator0 = minMaxCategoryRenderer0.getLegendItemToolTipGenerator();
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNull(categorySeriesLabelGenerator0);
      
      lineRenderer3D0.setLegendItemToolTipGenerator(categorySeriesLabelGenerator0);
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, minMaxCategoryRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, minMaxCategoryRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, minMaxCategoryRenderer0.getRowCount());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, minMaxCategoryRenderer0.getPassCount());
      assertEquals(0, minMaxCategoryRenderer0.getColumnCount());
      assertEquals(false, minMaxCategoryRenderer0.isDrawLines());
      assertEquals(3, minMaxCategoryRenderer0.getDefaultEntityRadius());
      assertEquals(false, minMaxCategoryRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, minMaxCategoryRenderer0.getBaseSeriesVisible());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, minMaxCategoryRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, minMaxCategoryRenderer0.getBaseCreateEntities());
      assertEquals(2.0, minMaxCategoryRenderer0.getItemLabelAnchorOffset(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isNotify());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertNotNull(spiderWebPlot0);
      
      CategoryDataset categoryDataset0 = spiderWebPlot0.getDataset();
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isNotify());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertNull(categoryDataset0);
      
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      boolean boolean0 = false;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNotNull(stackedAreaRenderer0);
      
      CategoryPlot categoryPlot0 = stackedAreaRenderer0.getPlot();
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertNull(categoryPlot0);
      
      // Undeclared exception!
      try {
        CategoryAxis categoryAxis0 = statisticalLineAndShapeRenderer0.getDomainAxis(categoryPlot0, categoryDataset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = false;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      int int0 = statisticalLineAndShapeRenderer0.getColumnCount();
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNotNull(levelRenderer0);
      
      CategoryDataset categoryDataset0 = null;
      Range range0 = levelRenderer0.findRangeBounds(categoryDataset0);
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertNull(range0);
  }

  //@Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = true;
      StackedBarRenderer stackedBarRenderer0 = new StackedBarRenderer(boolean0);
      assertEquals(0.2, stackedBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, stackedBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, stackedBarRenderer0.getRowCount());
      assertEquals(false, stackedBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedBarRenderer0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, stackedBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedBarRenderer0.getPassCount());
      assertEquals(4.0, stackedBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedBarRenderer0.getShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getBaseSeriesVisible());
      assertEquals(3, stackedBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, stackedBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, stackedBarRenderer0.getColumnCount());
      assertEquals(4.0, stackedBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedBarRenderer0.getBaseCreateEntities());
      assertNotNull(stackedBarRenderer0);
      
      Graphics2D graphics2D0 = null;
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(boolean0);
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(stackedBarRenderer3D0);
      
      CategoryPlot categoryPlot0 = stackedBarRenderer3D0.getPlot();
      assertEquals(true, stackedBarRenderer3D0.getDefaultShadowsVisible());
      assertEquals(12.0, stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(3, stackedBarRenderer3D0.getDefaultEntityRadius());
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedBarRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(4.0, stackedBarRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, stackedBarRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(8.0, stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getShadowsVisible());
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertNull(categoryPlot0);
      
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      URI uRI0 = mockFile0.toURI();
      assertNull(uRI0.getRawAuthority());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("/", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals(true, uRI0.isAbsolute());
      assertEquals(-1, uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file:/", uRI0.toString());
      assertNotNull(uRI0);
      
      URL uRL0 = uRI0.toURL();
      assertNull(uRI0.getRawAuthority());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("/", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals(true, uRI0.isAbsolute());
      assertEquals(-1, uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file:/", uRI0.toString());
      assertEquals(-1, uRL0.getPort());
      assertEquals(-1, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/", uRL0.getPath());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file:/", uRL0.toExternalForm());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("/", uRL0.getFile());
      assertEquals("file:/", uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNotNull(uRL0);
      
      ImageIcon imageIcon0 = new ImageIcon(uRL0, string0);
      assertNull(uRI0.getRawAuthority());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("/", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals(true, uRI0.isAbsolute());
      assertEquals(-1, uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file:/", uRI0.toString());
      assertEquals(-1, uRL0.getPort());
      assertEquals(-1, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/", uRL0.getPath());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file:/", uRL0.toExternalForm());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("/", uRL0.getFile());
      assertEquals("file:/", uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNotNull(imageIcon0);
      
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem(string0, (Icon) imageIcon0);
      assertNull(uRI0.getRawAuthority());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("/", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals(true, uRI0.isAbsolute());
      assertEquals(-1, uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file:/", uRI0.toString());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(-1, uRL0.getPort());
      assertEquals(-1, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/", uRL0.getPath());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file:/", uRL0.toExternalForm());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("/", uRL0.getFile());
      assertEquals("file:/", uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNotNull(jRadioButtonMenuItem0);
      
      Rectangle rectangle0 = jRadioButtonMenuItem0.getVisibleRect();
      assertNull(uRI0.getRawAuthority());
      assertEquals(false, uRI0.isOpaque());
      assertEquals("/", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertEquals(true, uRI0.isAbsolute());
      assertEquals(-1, uRI0.getPort());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getHost());
      assertEquals("file:/", uRI0.toString());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jRadioButtonMenuItem0.getIgnoreRepaint());
      assertEquals(true, jRadioButtonMenuItem0.isVisible());
      assertEquals(true, jRadioButtonMenuItem0.isForegroundSet());
      assertEquals(false, jRadioButtonMenuItem0.isDisplayable());
      assertEquals(false, jRadioButtonMenuItem0.isMaximumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusCycleRoot());
      assertEquals(false, jRadioButtonMenuItem0.isLightweight());
      assertEquals(false, jRadioButtonMenuItem0.isCursorSet());
      assertEquals(0, jRadioButtonMenuItem0.countComponents());
      assertEquals(0, jRadioButtonMenuItem0.getComponentCount());
      assertEquals(false, jRadioButtonMenuItem0.isShowing());
      assertEquals(true, jRadioButtonMenuItem0.isFontSet());
      assertEquals(false, jRadioButtonMenuItem0.isMinimumSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jRadioButtonMenuItem0.isBackgroundSet());
      assertEquals(true, jRadioButtonMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButtonMenuItem0.isValid());
      assertEquals(false, jRadioButtonMenuItem0.isPreferredSizeSet());
      assertEquals(false, jRadioButtonMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButtonMenuItem0.isEnabled());
      assertEquals(-1, uRL0.getPort());
      assertEquals(-1, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("/", uRL0.getPath());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("file:/", uRL0.toExternalForm());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("/", uRL0.getFile());
      assertEquals("file:/", uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertNotNull(rectangle0);
      
      // Undeclared exception!
      try {
        stackedBarRenderer0.drawBackground(graphics2D0, categoryPlot0, (Rectangle2D) rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultCategoryItemRenderer defaultCategoryItemRenderer0 = new DefaultCategoryItemRenderer();
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
      assertNotNull(defaultCategoryItemRenderer0);
      
      boolean boolean0 = true;
      CategoryStepRenderer categoryStepRenderer0 = new CategoryStepRenderer(boolean0);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertNotNull(categoryStepRenderer0);
      
      CategoryURLGenerator categoryURLGenerator0 = categoryStepRenderer0.getBaseURLGenerator();
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertNull(categoryURLGenerator0);
      
      defaultCategoryItemRenderer0.setBaseURLGenerator(categoryURLGenerator0);
      assertEquals(true, categoryStepRenderer0.getBaseCreateEntities());
      assertEquals(3, categoryStepRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, categoryStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, categoryStepRenderer0.getStagger());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisible());
      assertEquals(true, categoryStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, categoryStepRenderer0.getPassCount());
      assertEquals(0, categoryStepRenderer0.getColumnCount());
      assertEquals(true, categoryStepRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, categoryStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, categoryStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, categoryStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0, categoryStepRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultCategoryItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, defaultCategoryItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, defaultCategoryItemRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, defaultCategoryItemRenderer0.getUseSeriesOffset());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, defaultCategoryItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseCreateEntities());
      assertEquals(2, defaultCategoryItemRenderer0.getPassCount());
      assertEquals(false, defaultCategoryItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, defaultCategoryItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, defaultCategoryItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesFilled());
      assertEquals(0, defaultCategoryItemRenderer0.getColumnCount());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultCategoryItemRenderer0.getDrawOutlines());
      assertEquals(false, defaultCategoryItemRenderer0.getUseOutlinePaint());
      assertEquals(true, defaultCategoryItemRenderer0.getBaseShapesVisible());
      assertEquals(0, defaultCategoryItemRenderer0.getRowCount());
      assertEquals(false, defaultCategoryItemRenderer0.getUseFillPaint());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer();
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      int int0 = 0;
      ScatterRenderer scatterRenderer0 = new ScatterRenderer();
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertNotNull(scatterRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = scatterRenderer0.getSeriesToolTipGenerator(int0);
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
      assertNull(categoryToolTipGenerator0);
      
      statisticalLineAndShapeRenderer0.setSeriesToolTipGenerator(int0, categoryToolTipGenerator0);
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, scatterRenderer0.getUseFillPaint());
      assertEquals(false, scatterRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, scatterRenderer0.getBaseShapesFilled());
      assertEquals(0.2, scatterRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, scatterRenderer0.getBaseCreateEntities());
      assertEquals(true, scatterRenderer0.getUseSeriesOffset());
      assertEquals(1, scatterRenderer0.getPassCount());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, scatterRenderer0.getRowCount());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisible());
      assertEquals(false, scatterRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, scatterRenderer0.getDrawOutlines());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, scatterRenderer0.getUseOutlinePaint());
      assertEquals(true, scatterRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, scatterRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, scatterRenderer0.getColumnCount());
      assertEquals(true, scatterRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, scatterRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, scatterRenderer0.getDefaultEntityRadius());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = true;
      StatisticalLineAndShapeRenderer statisticalLineAndShapeRenderer0 = new StatisticalLineAndShapeRenderer(boolean0, boolean0);
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertNotNull(statisticalLineAndShapeRenderer0);
      
      int int0 = statisticalLineAndShapeRenderer0.getRowCount();
      assertEquals(3, statisticalLineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDrawOutlines());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, statisticalLineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, statisticalLineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseSeriesOffset());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(0, statisticalLineAndShapeRenderer0.getRowCount());
      assertEquals(2, statisticalLineAndShapeRenderer0.getPassCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, statisticalLineAndShapeRenderer0.getColumnCount());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(true, statisticalLineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(true, statisticalLineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, statisticalLineAndShapeRenderer0.getUseFillPaint());
      assertEquals(0.0, statisticalLineAndShapeRenderer0.getItemMargin(), 0.01D);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LayeredBarRenderer layeredBarRenderer0 = new LayeredBarRenderer();
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertNotNull(layeredBarRenderer0);
      
      int int0 = layeredBarRenderer0.getPassCount();
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(4.0, layeredBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, layeredBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, layeredBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, layeredBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, layeredBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, layeredBarRenderer0.getBaseCreateEntities());
      assertEquals(3, layeredBarRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, layeredBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, layeredBarRenderer0.isDrawBarOutline());
      assertEquals(2.0, layeredBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1.0, layeredBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, layeredBarRenderer0.getRowCount());
      assertEquals(1, layeredBarRenderer0.getPassCount());
      assertEquals(0.0, layeredBarRenderer0.getBase(), 0.01D);
      assertEquals(true, layeredBarRenderer0.getShadowsVisible());
      assertEquals(true, layeredBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, layeredBarRenderer0.getColumnCount());
      assertEquals(false, layeredBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-2440);
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(lineRenderer3D0);
      
      String string0 = "`K";
      CategoryTextAnnotation categoryTextAnnotation0 = new CategoryTextAnnotation(string0, (Comparable) string0, (double) int0);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals((-2440.0), categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals("`K", categoryTextAnnotation0.getText());
      assertEquals(true, categoryTextAnnotation0.getNotify());
      assertNotNull(categoryTextAnnotation0);
      
      boolean boolean0 = lineRenderer3D0.removeAnnotation((CategoryAnnotation) categoryTextAnnotation0);
      assertEquals(0.0, categoryTextAnnotation0.getRotationAngle(), 0.01D);
      assertEquals((-2440.0), categoryTextAnnotation0.getValue(), 0.01D);
      assertEquals("`K", categoryTextAnnotation0.getText());
      assertEquals(true, categoryTextAnnotation0.getNotify());
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LineRenderer3D lineRenderer3D0 = new LineRenderer3D();
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
      assertNotNull(lineRenderer3D0);
      
      int int0 = 43;
      CategoryURLGenerator categoryURLGenerator0 = null;
      lineRenderer3D0.setSeriesURLGenerator(int0, categoryURLGenerator0);
      assertEquals(true, lineRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, lineRenderer3D0.getUseFillPaint());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(8.0, lineRenderer3D0.getYOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(12.0, lineRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(true, lineRenderer3D0.getBaseCreateEntities());
      assertEquals(true, lineRenderer3D0.getBaseLinesVisible());
      assertEquals(2.0, lineRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, lineRenderer3D0.getUseSeriesOffset());
      assertEquals(0, lineRenderer3D0.getRowCount());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, lineRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, lineRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(3, lineRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, lineRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, lineRenderer3D0.getBaseShapesFilled());
      assertEquals(false, lineRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, lineRenderer3D0.getUseOutlinePaint());
      assertEquals(true, lineRenderer3D0.getDrawOutlines());
      assertEquals(2, lineRenderer3D0.getPassCount());
      assertEquals(0, lineRenderer3D0.getColumnCount());
      assertEquals(true, lineRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, lineRenderer3D0.getBaseShapesVisible());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertNotNull(levelRenderer0);
      
      boolean boolean0 = false;
      int int0 = 1265;
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer(boolean0);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNotNull(stackedAreaRenderer0);
      
      CategoryToolTipGenerator categoryToolTipGenerator0 = stackedAreaRenderer0.getToolTipGenerator(int0, int0, boolean0);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertNull(categoryToolTipGenerator0);
      
      levelRenderer0.setBaseToolTipGenerator(categoryToolTipGenerator0);
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
  }

  //@Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StatisticalBarRenderer statisticalBarRenderer0 = new StatisticalBarRenderer();
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertNotNull(statisticalBarRenderer0);
      
      int int0 = statisticalBarRenderer0.hashCode();
      assertEquals(0, statisticalBarRenderer0.getColumnCount());
      assertEquals(0.0, statisticalBarRenderer0.getBase(), 0.01D);
      assertEquals(0.0, statisticalBarRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, statisticalBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, statisticalBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseCreateEntities());
      assertEquals(false, statisticalBarRenderer0.isDrawBarOutline());
      assertEquals(3, statisticalBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, statisticalBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, statisticalBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(4.0, statisticalBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(1.0, statisticalBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.2, statisticalBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, statisticalBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, statisticalBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, statisticalBarRenderer0.getPassCount());
      assertEquals(true, statisticalBarRenderer0.getShadowsVisible());
      assertEquals(true, statisticalBarRenderer0.getIncludeBaseInRange());
      assertEquals(0, statisticalBarRenderer0.getRowCount());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, statisticalBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(4.0, statisticalBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(506234674, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LevelRenderer levelRenderer0 = new LevelRenderer();
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(levelRenderer0);
      
      int int0 = 3;
      LegendItem legendItem0 = levelRenderer0.getLegendItem(int0, int0);
      assertEquals(0, levelRenderer0.getRowCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, levelRenderer0.getDefaultEntityRadius());
      assertEquals(0.2, levelRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseCreateEntities());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, levelRenderer0.getPassCount());
      assertEquals(1.0, levelRenderer0.getMaximumItemWidth(), 0.01D);
      assertEquals(0, levelRenderer0.getColumnCount());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, levelRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, levelRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, levelRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, levelRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, levelRenderer0.getBaseSeriesVisible());
      assertEquals(true, levelRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, levelRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(legendItem0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StackedAreaRenderer stackedAreaRenderer0 = new StackedAreaRenderer();
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNotNull(stackedAreaRenderer0);
      
      int int0 = 2966;
      boolean boolean0 = true;
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = stackedAreaRenderer0.getItemLabelGenerator(int0, int0, boolean0);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
      assertNull(categoryItemLabelGenerator0);
      
      stackedAreaRenderer0.setSeriesItemLabelGenerator(int0, categoryItemLabelGenerator0);
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, stackedAreaRenderer0.getRowCount());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedAreaRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, stackedAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedAreaRenderer0.getPassCount());
      assertEquals(false, stackedAreaRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, stackedAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedAreaRenderer0.getBaseCreateEntities());
      assertEquals(0, stackedAreaRenderer0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(ganttRenderer0);
      
      CategoryItemLabelGenerator categoryItemLabelGenerator0 = ganttRenderer0.getBaseItemLabelGenerator();
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertNull(categoryItemLabelGenerator0);
      
      ganttRenderer0.setBaseItemLabelGenerator(categoryItemLabelGenerator0);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
  }
}
