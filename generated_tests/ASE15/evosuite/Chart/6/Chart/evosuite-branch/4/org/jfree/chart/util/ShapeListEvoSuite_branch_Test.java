/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:18:47 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.chart.util.ShapeList;
import org.junit.runner.RunWith;

 
public class ShapeListEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      int int0 = 43;
      int int1 = shapeList0.hashCode();
      assertFalse(int1 == int0);
      assertEquals(4699, int1);
      assertEquals(0, shapeList0.size());
      
      ShapeList shapeList1 = new ShapeList();
      assertNotNull(shapeList1);
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertNotSame(shapeList1, shapeList0);
      assertEquals(0, shapeList1.size());
      
      Rectangle rectangle0 = new Rectangle(int1, int1, int1, int1);
      assertNotNull(rectangle0);
      assertEquals(4699, rectangle0.width);
      assertEquals(4699, rectangle0.y);
      assertEquals(4699, rectangle0.x);
      assertEquals(4699, rectangle0.height);
      assertFalse(int1 == int0);
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertNotSame(shapeList0, shapeList1);
      assertEquals(4699.0, rectangle0.getMinY(), 0.01D);
      assertEquals(7048.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(4699.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=4699,y=4699,width=4699,height=4699]", rectangle0.toString());
      assertEquals(7048.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(4699.0, rectangle0.getY(), 0.01D);
      assertEquals(9398.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(4699.0, rectangle0.getX(), 0.01D);
      assertEquals(4699.0, rectangle0.getHeight(), 0.01D);
      assertEquals(9398.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(4699.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0, shapeList0.size());
      
      shapeList1.setShape(int0, (Shape) rectangle0);
      assertEquals(4699, rectangle0.width);
      assertEquals(4699, rectangle0.y);
      assertEquals(4699, rectangle0.x);
      assertEquals(4699, rectangle0.height);
      assertFalse(int0 == int1);
      assertFalse(shapeList1.equals((Object)shapeList0));
      assertFalse(int1 == int0);
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertNotSame(shapeList1, shapeList0);
      assertNotSame(shapeList0, shapeList1);
      assertEquals(4699.0, rectangle0.getMinY(), 0.01D);
      assertEquals(7048.5, rectangle0.getCenterX(), 0.01D);
      assertEquals(4699.0, rectangle0.getWidth(), 0.01D);
      assertEquals("java.awt.Rectangle[x=4699,y=4699,width=4699,height=4699]", rectangle0.toString());
      assertEquals(7048.5, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, rectangle0.isEmpty());
      assertEquals(4699.0, rectangle0.getY(), 0.01D);
      assertEquals(9398.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(4699.0, rectangle0.getX(), 0.01D);
      assertEquals(4699.0, rectangle0.getHeight(), 0.01D);
      assertEquals(9398.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(4699.0, rectangle0.getMinX(), 0.01D);
      assertEquals(44, shapeList1.size());
      assertEquals(0, shapeList0.size());
      
      boolean boolean0 = shapeList1.equals((Object) shapeList0);
      assertFalse(shapeList1.equals((Object)shapeList0));
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertNotSame(shapeList1, shapeList0);
      assertNotSame(shapeList0, shapeList1);
      assertFalse(boolean0);
      assertEquals(44, shapeList1.size());
      assertEquals(0, shapeList0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      ShapeList shapeList1 = (ShapeList)shapeList0.clone();
      assertNotNull(shapeList1);
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertNotSame(shapeList1, shapeList0);
      assertNotSame(shapeList0, shapeList1);
      assertEquals(0, shapeList1.size());
      assertEquals(0, shapeList0.size());
      
      boolean boolean0 = shapeList0.equals((Object) shapeList1);
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertNotSame(shapeList1, shapeList0);
      assertNotSame(shapeList0, shapeList1);
      assertTrue(boolean0);
      assertEquals(0, shapeList1.size());
      assertEquals(0, shapeList0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      Polygon polygon0 = new Polygon();
      assertNotNull(polygon0);
      assertEquals(0, polygon0.npoints);
      
      boolean boolean0 = shapeList0.equals((Object) polygon0);
      assertEquals(0, polygon0.npoints);
      assertFalse(boolean0);
      assertEquals(0, shapeList0.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      int int0 = 43;
      Shape shape0 = shapeList0.getShape(int0);
      assertNull(shape0);
      assertEquals(0, shapeList0.size());
  }
}
