/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:48:14 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Paint;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.plaf.FontUIResource;
import javax.swing.plaf.metal.MetalToolBarUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.entity.EntityCollection;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.junit.runner.RunWith;

 
public class MultiplePiePlotEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      boolean boolean0 = multiplePiePlot0.equals((Object) multiplePiePlot1);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertTrue(boolean0);
      assertTrue(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNotNull(combinedRangeXYPlot0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      
      Color color0 = (Color)combinedRangeXYPlot0.getDomainZeroBaselinePaint();
      assertNotNull(color0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      multiplePiePlot1.setAggregatedItemsPaint((Paint) color0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      boolean boolean0 = multiplePiePlot1.equals((Object) multiplePiePlot0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(boolean0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      double double0 = (-966.214684858);
      multiplePiePlot1.setLimit(double0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals((-966.214684858), multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      boolean boolean0 = multiplePiePlot1.equals((Object) multiplePiePlot0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals((-966.214684858), multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertFalse(boolean0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      
      Object object0 = null;
      boolean boolean0 = multiplePiePlot0.equals(object0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      boolean boolean0 = false;
      float float0 = Component.LEFT_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) float0, (Comparable) boolean0, (Comparable) float0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNotNull(legendItemCollection0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, legendItemCollection0.getItemCount());
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      
      boolean boolean1 = multiplePiePlot0.equals((Object) multiplePiePlot1);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
  }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
//       assertNotNull(multiplePiePlot0);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       
//       int int0 = ImageObserver.ERROR;
//       assertEquals(64, int0);
//       
//       String string0 = "SI_]pGN7f";
//       multiplePiePlot0.setLimit((double) int0);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(64.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       
//       JColorChooser jColorChooser0 = new JColorChooser();
//       assertNotNull(jColorChooser0);
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       
//       FontUIResource fontUIResource0 = (FontUIResource)jColorChooser0.getFont();
//       assertNotNull(fontUIResource0);
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(12, fontUIResource0.getSize());
//       assertEquals(false, fontUIResource0.isBold());
//       assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
//       assertEquals(false, fontUIResource0.hasUniformLineMetrics());
//       assertEquals(false, fontUIResource0.isItalic());
//       assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
//       assertEquals(true, fontUIResource0.isPlain());
//       assertEquals(false, fontUIResource0.isTransformed());
//       assertEquals(0, fontUIResource0.getStyle());
//       assertEquals(false, fontUIResource0.hasLayoutAttributes());
//       assertEquals("Dialog", fontUIResource0.getName());
//       
//       boolean boolean0 = true;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, (Font) fontUIResource0, (Plot) multiplePiePlot0, boolean0);
//       assertNotNull(jFreeChart0);
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(12, fontUIResource0.getSize());
//       assertEquals(false, fontUIResource0.isBold());
//       assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
//       assertEquals(false, fontUIResource0.hasUniformLineMetrics());
//       assertEquals(false, fontUIResource0.isItalic());
//       assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
//       assertEquals(true, fontUIResource0.isPlain());
//       assertEquals(false, fontUIResource0.isTransformed());
//       assertEquals(0, fontUIResource0.getStyle());
//       assertEquals(false, fontUIResource0.hasLayoutAttributes());
//       assertEquals("Dialog", fontUIResource0.getName());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(1, jFreeChart0.getSubtitleCount());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(64.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       
//       Number[][] numberArray0 = new Number[2][4];
//       DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
//       assertNotNull(defaultIntervalCategoryDataset0);
//       assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       
//       multiplePiePlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
//       assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(64.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       
//       EntityCollection entityCollection0 = null;
//       ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
//       assertNotNull(chartRenderingInfo0);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, (double) int0, chartRenderingInfo0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      boolean boolean0 = false;
      float float0 = Component.LEFT_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      defaultStatisticalCategoryDataset0.add((Number) float0, (Number) float0, (Comparable) boolean0, (Comparable) float0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, legendItemCollection0.getItemCount());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      LegendItemCollection legendItemCollection1 = multiplePiePlot0.getLegendItems();
      assertNotSame(legendItemCollection1, legendItemCollection0);
      assertNotNull(legendItemCollection1);
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, legendItemCollection1.getItemCount());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertTrue(legendItemCollection1.equals((Object)legendItemCollection0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      
      int int0 = ImageObserver.ERROR;
      assertEquals(64, int0);
      
      String string0 = "SI_]pGN7f";
      JColorChooser jColorChooser0 = new JColorChooser();
      assertNotNull(jColorChooser0);
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      
      FontUIResource fontUIResource0 = (FontUIResource)jColorChooser0.getFont();
      assertNotNull(fontUIResource0);
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(12, fontUIResource0.getSize());
      
      boolean boolean0 = false;
      boolean boolean1 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Font) fontUIResource0, (Plot) multiplePiePlot0, boolean1);
      assertNotNull(jFreeChart0);
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertFalse(boolean1 == boolean0);
      
      jFreeChart0.setAntiAlias(boolean0);
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[7];
      numberArray1[1] = (Number) int0;
      assertNotNull(numberArray1[1]);
      assertEquals(64L, numberArray1[1].longValue());
      assertEquals(64, numberArray1[1].byteValue());
      assertEquals(64, numberArray1[1].intValue());
      assertEquals(64.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(64.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(64, numberArray1[1].shortValue());
      
      numberArray0[1] = numberArray1;
      assertNotNull(numberArray0[1]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      
      EntityCollection entityCollection0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
      assertNotNull(chartRenderingInfo0);
      
      // Undeclared exception!
      try {
        BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, (double) int0, chartRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
//       assertNotNull(multiplePiePlot0);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       
//       float float0 = multiplePiePlot0.getForegroundAlpha();
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, float0, 0.01F);
//       
//       int int0 = ImageObserver.ERROR;
//       assertEquals(64, int0);
//       
//       String string0 = "S_]$GN7f";
//       JColorChooser jColorChooser0 = new JColorChooser();
//       assertNotNull(jColorChooser0);
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       
//       FontUIResource fontUIResource0 = (FontUIResource)jColorChooser0.getFont();
//       assertNotNull(fontUIResource0);
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(12, fontUIResource0.getSize());
//       assertEquals("Dialog", fontUIResource0.getName());
//       assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
//       assertEquals(false, fontUIResource0.isItalic());
//       assertEquals(0, fontUIResource0.getStyle());
//       assertEquals(false, fontUIResource0.isBold());
//       assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
//       assertEquals(true, fontUIResource0.isPlain());
//       assertEquals(false, fontUIResource0.isTransformed());
//       assertEquals(false, fontUIResource0.hasUniformLineMetrics());
//       assertEquals(false, fontUIResource0.hasLayoutAttributes());
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, (Font) fontUIResource0, (Plot) multiplePiePlot0, boolean0);
//       assertNotNull(jFreeChart0);
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(12, fontUIResource0.getSize());
//       assertEquals("Dialog", fontUIResource0.getName());
//       assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
//       assertEquals(false, fontUIResource0.isItalic());
//       assertEquals(0, fontUIResource0.getStyle());
//       assertEquals(false, fontUIResource0.isBold());
//       assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
//       assertEquals(true, fontUIResource0.isPlain());
//       assertEquals(false, fontUIResource0.isTransformed());
//       assertEquals(false, fontUIResource0.hasUniformLineMetrics());
//       assertEquals(false, fontUIResource0.hasLayoutAttributes());
//       
//       Number[][] numberArray0 = new Number[2][4];
//       Number[] numberArray1 = new Number[6];
//       numberArray1[0] = (Number) float0;
//       assertNotNull(numberArray1[0]);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1, numberArray1[0].byteValue());
//       assertEquals(1.0F, numberArray1[0].floatValue(), 0.01F);
//       assertEquals(1, numberArray1[0].intValue());
//       assertEquals(1, numberArray1[0].shortValue());
//       assertEquals(1.0, numberArray1[0].doubleValue(), 0.01D);
//       assertEquals(1L, numberArray1[0].longValue());
//       
//       DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
//       assertNotNull(defaultIntervalCategoryDataset0);
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
//       
//       multiplePiePlot0.setLimit((double) int0);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(64.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       
//       multiplePiePlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(64.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
//       
//       EntityCollection entityCollection0 = null;
//       ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
//       assertNotNull(chartRenderingInfo0);
//       
//       numberArray0[0] = numberArray1;
//       assertNotNull(numberArray0[0]);
//       
//       numberArray0[1] = numberArray1;
//       assertNotNull(numberArray0[1]);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, (double) int0, chartRenderingInfo0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      int int0 = defaultIntervalCategoryDataset0.getCategoryCount();
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, int0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      String string0 = "";
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) multiplePiePlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertNotNull(chartPanel0);
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      ChartRenderingInfo chartRenderingInfo0 = chartPanel0.getChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, (double) int0, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(600, chartPanel0.getMaximumDrawHeight());
      assertEquals(false, chartPanel0.getHorizontalAxisTrace());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.isDomainZoomable());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.getFillZoomRectangle());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(false, chartPanel0.isRangeZoomable());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(false, chartPanel0.isValid());
      assertEquals(800, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.getVerticalAxisTrace());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getTileWidth());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getHeight());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
//       assertNotNull(multiplePiePlot0);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       
//       TableOrder tableOrder0 = TableOrder.BY_ROW;
//       assertNotNull(tableOrder0);
//       assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
//       
//       multiplePiePlot0.setDataExtractOrder(tableOrder0);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
//       
//       int int0 = ImageObserver.ERROR;
//       assertEquals(64, int0);
//       
//       String string0 = "";
//       JColorChooser jColorChooser0 = new JColorChooser();
//       assertNotNull(jColorChooser0);
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       
//       FontUIResource fontUIResource0 = (FontUIResource)jColorChooser0.getFont();
//       assertNotNull(fontUIResource0);
//       assertEquals(false, fontUIResource0.isBold());
//       assertEquals(false, fontUIResource0.hasLayoutAttributes());
//       assertEquals(12, fontUIResource0.getSize());
//       assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
//       assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
//       assertEquals(true, fontUIResource0.isPlain());
//       assertEquals(false, fontUIResource0.hasUniformLineMetrics());
//       assertEquals("Dialog", fontUIResource0.getName());
//       assertEquals(false, fontUIResource0.isItalic());
//       assertEquals(0, fontUIResource0.getStyle());
//       assertEquals(false, fontUIResource0.isTransformed());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, (Font) fontUIResource0, (Plot) multiplePiePlot0, boolean0);
//       assertNotNull(jFreeChart0);
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(false, fontUIResource0.isBold());
//       assertEquals(false, fontUIResource0.hasLayoutAttributes());
//       assertEquals(12, fontUIResource0.getSize());
//       assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
//       assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
//       assertEquals(true, fontUIResource0.isPlain());
//       assertEquals(false, fontUIResource0.hasUniformLineMetrics());
//       assertEquals("Dialog", fontUIResource0.getName());
//       assertEquals(false, fontUIResource0.isItalic());
//       assertEquals(0, fontUIResource0.getStyle());
//       assertEquals(false, fontUIResource0.isTransformed());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       
//       Number[][] numberArray0 = new Number[2][4];
//       Number[] numberArray1 = new Number[7];
//       numberArray1[1] = (Number) int0;
//       assertNotNull(numberArray1[1]);
//       assertEquals(64L, numberArray1[1].longValue());
//       assertEquals(64.0, numberArray1[1].doubleValue(), 0.01D);
//       assertEquals(64, numberArray1[1].byteValue());
//       assertEquals(64, numberArray1[1].intValue());
//       assertEquals(64.0F, numberArray1[1].floatValue(), 0.01F);
//       assertEquals(64, numberArray1[1].shortValue());
//       
//       numberArray0[1] = numberArray1;
//       assertNotNull(numberArray0[1]);
//       
//       DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
//       assertNotNull(defaultIntervalCategoryDataset0);
//       assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       
//       multiplePiePlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      int int0 = ImageObserver.ERROR;
      assertEquals(64, int0);
      
      String string0 = "~8\\fT77 t(";
      JColorChooser jColorChooser0 = new JColorChooser();
      assertNotNull(jColorChooser0);
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      
      FontUIResource fontUIResource0 = (FontUIResource)jColorChooser0.getFont();
      assertNotNull(fontUIResource0);
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Font) fontUIResource0, (Plot) multiplePiePlot0, boolean0);
      assertNotNull(jFreeChart0);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      EntityCollection entityCollection0 = null;
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo(entityCollection0);
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, (double) int0, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(64, bufferedImage0.getTileWidth());
      assertEquals(64, bufferedImage0.getTileHeight());
      assertEquals(64, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(64, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
      assertEquals(0, fontUIResource0.getStyle());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals(true, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(false, fontUIResource0.isBold());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
//       assertNotNull(multiplePiePlot0);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       
//       int int0 = ImageObserver.ERROR;
//       assertEquals(64, int0);
//       
//       String string0 = "";
//       JColorChooser jColorChooser0 = new JColorChooser();
//       assertNotNull(jColorChooser0);
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       
//       FontUIResource fontUIResource0 = (FontUIResource)jColorChooser0.getFont();
//       assertNotNull(fontUIResource0);
//       assertEquals(false, fontUIResource0.isTransformed());
//       assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
//       assertEquals(12, fontUIResource0.getSize());
//       assertEquals(0, fontUIResource0.getStyle());
//       assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
//       assertEquals(false, fontUIResource0.hasUniformLineMetrics());
//       assertEquals("Dialog", fontUIResource0.getName());
//       assertEquals(true, fontUIResource0.isPlain());
//       assertEquals(false, fontUIResource0.isItalic());
//       assertEquals(false, fontUIResource0.isBold());
//       assertEquals(false, fontUIResource0.hasLayoutAttributes());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, (Font) fontUIResource0, (Plot) multiplePiePlot0, boolean0);
//       assertNotNull(jFreeChart0);
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(false, fontUIResource0.isTransformed());
//       assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
//       assertEquals(12, fontUIResource0.getSize());
//       assertEquals(0, fontUIResource0.getStyle());
//       assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=plain,size=12]", fontUIResource0.toString());
//       assertEquals(false, fontUIResource0.hasUniformLineMetrics());
//       assertEquals("Dialog", fontUIResource0.getName());
//       assertEquals(true, fontUIResource0.isPlain());
//       assertEquals(false, fontUIResource0.isItalic());
//       assertEquals(false, fontUIResource0.isBold());
//       assertEquals(false, fontUIResource0.hasLayoutAttributes());
//       assertEquals(true, jColorChooser0.isBackgroundSet());
//       assertEquals(true, jColorChooser0.isEnabled());
//       assertEquals(false, jColorChooser0.isDisplayable());
//       assertEquals(2, jColorChooser0.getComponentCount());
//       assertEquals(false, jColorChooser0.isCursorSet());
//       assertEquals(false, jColorChooser0.isPreferredSizeSet());
//       assertEquals(false, jColorChooser0.getIgnoreRepaint());
//       assertEquals(true, jColorChooser0.isVisible());
//       assertEquals(false, jColorChooser0.isMaximumSizeSet());
//       assertEquals(true, jColorChooser0.isFontSet());
//       assertEquals(false, jColorChooser0.isLightweight());
//       assertEquals(2, jColorChooser0.countComponents());
//       assertEquals(false, jColorChooser0.isShowing());
//       assertEquals(true, jColorChooser0.isForegroundSet());
//       assertEquals(false, jColorChooser0.isMinimumSizeSet());
//       assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
//       assertEquals(false, jColorChooser0.isValid());
//       assertEquals(false, jColorChooser0.isFocusCycleRoot());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
//       assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       
//       Number[][] numberArray0 = new Number[2][4];
//       Number[] numberArray1 = new Number[7];
//       numberArray1[1] = (Number) int0;
//       assertNotNull(numberArray1[1]);
//       assertEquals(64.0, numberArray1[1].doubleValue(), 0.01D);
//       assertEquals(64, numberArray1[1].shortValue());
//       assertEquals(64.0F, numberArray1[1].floatValue(), 0.01F);
//       assertEquals(64, numberArray1[1].byteValue());
//       assertEquals(64, numberArray1[1].intValue());
//       assertEquals(64L, numberArray1[1].longValue());
//       
//       numberArray0[1] = numberArray1;
//       assertNotNull(numberArray0[1]);
//       
//       DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
//       assertNotNull(defaultIntervalCategoryDataset0);
//       assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       
//       multiplePiePlot0.setDataset((CategoryDataset) defaultIntervalCategoryDataset0);
//       assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      assertNotNull(metalToolBarUI0);
      
      Color color0 = metalToolBarUI0.getDockingColor();
      assertNull(color0);
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsPaint((Paint) color0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      String string0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsKey((Comparable) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertNotNull(string0);
      assertEquals("ToolTipText", string0);
      
      multiplePiePlot0.setAggregatedItemsKey((Comparable) string0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      
      TableOrder tableOrder0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setDataExtractOrder(tableOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      
      JFreeChart jFreeChart0 = new JFreeChart((Plot) multiplePiePlot0);
      assertNotNull(jFreeChart0);
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'pieChart' argument must be a chart based on a PiePlot.
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      JFreeChart jFreeChart0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'pieChart' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      
      multiplePiePlot0.setPieChart(jFreeChart0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      
      Color color0 = (Color)multiplePiePlot0.getAggregatedItemsPaint();
      assertNotNull(color0);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getRed());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      double double0 = multiplePiePlot0.getLimit();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      
      Comparable comparable0 = multiplePiePlot0.getAggregatedItemsKey();
      assertNotNull(comparable0);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Other", comparable0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      String string0 = multiplePiePlot0.getPlotType();
      assertNotNull(string0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals("Multiple Pie Plot", string0);
  }
}
