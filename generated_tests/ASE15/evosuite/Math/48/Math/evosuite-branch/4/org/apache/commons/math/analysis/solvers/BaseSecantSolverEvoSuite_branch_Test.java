/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:25:15 GMT 2014
 */

package org.apache.commons.math.analysis.solvers;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.function.HarmonicOscillator;
import org.apache.commons.math.analysis.function.Logit;
import org.apache.commons.math.analysis.function.Sinc;
import org.apache.commons.math.analysis.function.Tan;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.solvers.AllowedSolution;
import org.apache.commons.math.analysis.solvers.IllinoisSolver;
import org.apache.commons.math.analysis.solvers.PegasusSolver;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.exception.ConvergenceException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BaseSecantSolverEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 477.492747;
      double double1 = (-1.0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(double0, double1);
      assertNotNull(pegasusSolver0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(477.492747, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      
      int int0 = 182;
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 182.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 182.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction1.polynomialDerivative();
      assertNotNull(polynomialFunction2);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertArrayEquals(new double[] {0.0, 0.0, 182.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction2.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      
      double double2 = 2143.923;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction2, doubleArray0[3], double2, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertEquals(60.666666666666515, double3, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 182.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2143.923, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(182, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(477.492747, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1071.4615, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1, polynomialFunction2.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      
      HarmonicOscillator harmonicOscillator0 = new HarmonicOscillator((double) int0, double2, double3);
      assertNotNull(harmonicOscillator0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertArrayEquals(new double[] {0.0, 0.0, 182.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals((-1.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(2143.923, pegasusSolver0.getMax(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(182, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(477.492747, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1071.4615, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1, polynomialFunction2.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      
      double double4 = (-0.5);
      assertFalse(double4 == double3);
      
      double double5 = 0.0;
      assertFalse(double5 == double3);
      
      AllowedSolution allowedSolution1 = AllowedSolution.BELOW_SIDE;
      assertNotSame(allowedSolution1, allowedSolution0);
      
      double double6 = pegasusSolver0.solve(int0, (UnivariateRealFunction) harmonicOscillator0, double4, double5, double4, allowedSolution1);
      assertFalse(double0 == double6);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double5);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(double4 == double6);
      assertFalse(double4 == double5);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double5);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double6);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(double6 == double2);
      assertFalse(double6 == double4);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double1);
      assertFalse(double6 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double6);
      assertFalse(double2 == double5);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double5 == double1);
      assertFalse(double5 == double4);
      assertFalse(double5 == double2);
      assertFalse(double5 == double6);
      assertFalse(double5 == double3);
      assertFalse(double5 == double0);
      assertFalse(double3 == double6);
      assertFalse(double3 == double5);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(allowedSolution1.equals((Object)allowedSolution0));
      assertFalse(allowedSolution0.equals((Object)allowedSolution1));
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(allowedSolution1, allowedSolution0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(allowedSolution0, allowedSolution1);
      assertEquals((-0.18470640976383207), double6, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 182.0, (-1.0)}, doubleArray0, 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals((-0.5), pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(3, pegasusSolver0.getEvaluations());
      assertEquals(182, pegasusSolver0.getMaxEvaluations());
      assertEquals((-1.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.5), pegasusSolver0.getMin(), 0.01D);
      assertEquals(477.492747, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1, polynomialFunction2.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-0.7990282978117359);
      double double1 = 1.0E-6;
      double double2 = (-932.4020162677);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double2);
      assertNotNull(illinoisSolver0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-932.4020162677), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      
      int int0 = 201;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      doubleArray0[3] = doubleArray0[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.subtract(polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction3 = polynomialFunction2.multiply(polynomialFunction1);
      assertNotNull(polynomialFunction3);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(5, polynomialFunction3.degree());
      assertEquals(3, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction3, double0, (double) int0, allowedSolution0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertEquals(1.9999999983912522, double3, 0.01D);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(5, polynomialFunction3.degree());
      assertEquals(3, polynomialFunction0.degree());
      assertEquals((-932.4020162677), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-0.7990282978117359), illinoisSolver0.getMin(), 0.01D);
      assertEquals(100.10048585109413, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(201.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(150, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(201, illinoisSolver0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      
      int int0 = 27;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = 4251.3;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double0, (double) int0, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4231.725304385401, double1, 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(27, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(27.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4251.3, illinoisSolver0.getMax(), 0.01D);
      assertEquals(27.0, illinoisSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-0.7990282978117359);
      double double1 = 1.0E-6;
      double double2 = (-932.4020162677);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double2);
      assertNotNull(illinoisSolver0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-932.4020162677), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 201;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = double1;
      doubleArray0[2] = double2;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.subtract(polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction3 = polynomialFunction2.multiply(polynomialFunction1);
      assertNotNull(polynomialFunction3);
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction3.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double3 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction3, double0, (double) int0, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction3.equals((Object)polynomialFunction0));
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction3));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertNotSame(polynomialFunction3, polynomialFunction1);
      assertNotSame(polynomialFunction3, polynomialFunction2);
      assertNotSame(polynomialFunction3, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction3);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction3);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction3);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals(2.0000000005362493, double3, 0.01D);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction3.degree());
      assertEquals(2, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(201, illinoisSolver0.getMaxEvaluations());
      assertEquals(201.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-932.4020162677), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-0.7990282978117359), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(162, illinoisSolver0.getEvaluations());
      assertEquals(100.10048585109413, illinoisSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 27;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = 4251.3;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4231.725304385401, double1, 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(27, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(2139.15, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(4251.3, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(27.0, illinoisSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-5958.805641913002);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      
      int int0 = 66;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = 4252.718380832879;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, double1, double0, allowedSolution0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals((-5881.061447763825), double2, 0.01D);
      assertEquals(4252.718380832879, illinoisSolver0.getMax(), 0.01D);
      assertEquals((-5958.805641913002), illinoisSolver0.getMin(), 0.01D);
      assertEquals((-5958.805641913002), illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(19, illinoisSolver0.getEvaluations());
      assertEquals(66, illinoisSolver0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-5947.01);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 41;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, double0, (double) int0, (double) int0, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-5931.326929977529), double1, 0.01D);
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(41.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-5947.01), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(41, illinoisSolver0.getMaxEvaluations());
      assertEquals(41.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-0.1428571423679182);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals((-0.1428571423679182), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-0.1428571423679182), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      
      int int0 = 27;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = 4252.674683398051;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double1, (double) int0, allowedSolution0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(4231.725304385451, double2, 0.01D);
      assertEquals((-0.1428571423679182), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(27, illinoisSolver0.getMaxEvaluations());
      assertEquals(13, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.1428571423679182), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(27.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(4252.674683398051, illinoisSolver0.getMax(), 0.01D);
      assertEquals(27.0, illinoisSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = (-14.724793527466497);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-14.724793527466497), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      
      int int0 = 45;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double1 = 4251.3;
      AllowedSolution allowedSolution0 = AllowedSolution.ABOVE_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double1, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(4244.29167499981, double2, 0.01D);
      assertEquals(4251.3, illinoisSolver0.getMax(), 0.01D);
      assertEquals(45.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-14.724793527466497), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(45.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(11, illinoisSolver0.getEvaluations());
      assertEquals(45, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      
      int int0 = 171;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = 1160.8672;
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1096.4158361947411, double1, 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(171, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(171.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(171.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(11, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1160.8672, illinoisSolver0.getMax(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 14;
      Sinc sinc0 = new Sinc();
      assertNotNull(sinc0);
      
      double double0 = 4251.226370421866;
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) sinc0, (double) int0, double0, (double) int0, allowedSolution0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4250.574860306871, double1, 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(4251.226370421866, illinoisSolver0.getMax(), 0.01D);
      assertEquals(14.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(10, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(14, illinoisSolver0.getMaxEvaluations());
      assertEquals(14.0, illinoisSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 1.0E-6;
      double double1 = (-932.4020162677);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1);
      assertNotNull(illinoisSolver0);
      assertFalse(double1 == double0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals((-932.4020162677), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0, illinoisSolver0.getEvaluations());
      
      int int0 = 201;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[1];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.subtract(polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction2.degree());
      
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction2, doubleArray0[2], doubleArray0[3], doubleArray0[3]);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertEquals(5.362493764947156E-10, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-932.4020162677), 1.0E-6, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction0.degree());
      assertEquals(2, polynomialFunction1.degree());
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(14, illinoisSolver0.getEvaluations());
      assertEquals(201, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-932.4020162677), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals((-932.4020162677), illinoisSolver0.getMin(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-6, illinoisSolver0.getStartValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 1.0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals(1.0, regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(1.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 1120;
      Logit logit0 = new Logit();
      assertNotNull(logit0);
      
      double double1 = 0.0;
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try {
        double double2 = regulaFalsiSolver0.solve(int0, (UnivariateRealFunction) logit0, double1, double0, double0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: convergence failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = (-0.7990282978117359);
      double double1 = 1.0E-6;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertFalse(double0 == double1);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-0.7990282978117359), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 201;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = double1;
      doubleArray0[2] = double0;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-0.7990282978117359), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-0.7990282978117359), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction2 = polynomialFunction0.multiply(polynomialFunction1);
      assertNotNull(polynomialFunction2);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-0.7990282978117359), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction2, double0, (double) int0, allowedSolution0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction1));
      assertFalse(polynomialFunction2.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction2));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertNotSame(polynomialFunction2, polynomialFunction1);
      assertNotSame(polynomialFunction2, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction1, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction2);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals(5.220905012775418E-9, double2, 0.01D);
      assertArrayEquals(new double[] {0.0, 1.0E-6, (-0.7990282978117359), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, polynomialFunction2.degree());
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(201, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(201.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(60, illinoisSolver0.getEvaluations());
      assertEquals((-0.7990282978117359), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100.10048585109413, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.7990282978117359), illinoisSolver0.getMin(), 0.01D);
      assertEquals(2, polynomialFunction0.degree());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-0.7990282978117359);
      double double1 = (-932.4020162677);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double1);
      assertNotNull(illinoisSolver0);
      assertFalse(double1 == double0);
      assertEquals((-932.4020162677), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      
      int int0 = 201;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = double0;
      doubleArray0[2] = double1;
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, (-0.7990282978117359), (-932.4020162677), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, polynomialFunction0.degree());
      
      PolynomialFunction polynomialFunction1 = polynomialFunction0.polynomialDerivative();
      assertNotNull(polynomialFunction1);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertArrayEquals(new double[] {0.0, (-0.7990282978117359), (-932.4020162677), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals(2, polynomialFunction0.degree());
      
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      double double2 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction1, double0, (double) int0, allowedSolution0);
      assertFalse(polynomialFunction1.equals((Object)polynomialFunction0));
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(polynomialFunction0.equals((Object)polynomialFunction1));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertNotSame(polynomialFunction1, polynomialFunction0);
      assertNotSame(polynomialFunction0, polynomialFunction1);
      assertEquals((-4.284784266180354E-4), double2, 0.01D);
      assertArrayEquals(new double[] {0.0, (-0.7990282978117359), (-932.4020162677), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, polynomialFunction1.degree());
      assertEquals((-0.7990282978117359), illinoisSolver0.getMin(), 0.01D);
      assertEquals(100.10048585109413, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-932.4020162677), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(5, illinoisSolver0.getEvaluations());
      assertEquals(201.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(201, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(2, polynomialFunction0.degree());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-4124.0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(double0, double0);
      assertNotNull(regulaFalsiSolver0);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-4124.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-4124.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      int int0 = 1620;
      Tan tan0 = new Tan();
      assertNotNull(tan0);
      
      double double1 = 0.0;
      double double2 = regulaFalsiSolver0.getMin();
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-4124.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-4124.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((double) int0, double2);
      assertNotNull(pegasusSolver0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, pegasusSolver0.getMaxEvaluations());
      assertEquals(0, pegasusSolver0.getEvaluations());
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(1620.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-4124.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-4124.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
      
      double double3 = pegasusSolver0.solve(int0, (UnivariateRealFunction) tan0, double0, double1, (double) int0);
      assertTrue(double1 == double3);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertTrue(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(0.0, double3, 0.01D);
      assertEquals(0.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-4124.0), pegasusSolver0.getMin(), 0.01D);
      assertEquals(1620.0, pegasusSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01D);
      assertEquals(2, pegasusSolver0.getEvaluations());
      assertEquals(1620, pegasusSolver0.getMaxEvaluations());
      assertEquals(1620.0, pegasusSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, regulaFalsiSolver0.getMaxEvaluations());
      assertEquals(0, regulaFalsiSolver0.getEvaluations());
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01D);
      assertEquals((-4124.0), regulaFalsiSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01D);
      assertEquals((-4124.0), regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-0.7990282978117359);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0, double0, double0);
      assertNotNull(illinoisSolver0);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals((-0.7990282978117359), illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals((-0.7990282978117359), illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals((-0.7990282978117359), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-0.7990282978117359);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(double0);
      assertNotNull(illinoisSolver0);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-0.7990282978117359), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0, illinoisSolver0.getMaxEvaluations());
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
      
      int int0 = 201;
      double[] doubleArray0 = new double[8];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      
      double double1 = illinoisSolver0.solve(int0, (UnivariateRealFunction) polynomialFunction0, doubleArray0[2], doubleArray0[3], doubleArray0[3]);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01D);
      assertEquals((-0.7990282978117359), illinoisSolver0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(2, illinoisSolver0.getEvaluations());
      assertEquals(201, illinoisSolver0.getMaxEvaluations());
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01D);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01D);
  }
}
