/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:13:43 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexField;
import org.apache.commons.math.exception.NotPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class ComplexEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertNotNull(complex0);
      
      double double0 = complex0.getImaginary();
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      
      Complex complex1 = Complex.valueOf(double0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-1330.07617);
      double double1 = Double.NaN;
      Complex complex0 = Complex.valueOf(double0, double1);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertNotNull(complex0);
      
      double double0 = complex0.getImaginary();
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
      
      Complex complex1 = Complex.valueOf(double0, double0);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertNotNull(complex0);
      
      int int0 = 542;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1762.21082723);
      Complex complex0 = Complex.valueOf(double0);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1762.21082723), complex0.getReal(), 0.01D);
      assertEquals(1762.21082723, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tanh();
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1762.21082723), complex0.getReal(), 0.01D);
      assertEquals(1762.21082723, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      int int0 = 3915;
      List<Complex> list0 = complex1.nthRoot(int0);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1762.21082723), complex0.getReal(), 0.01D);
      assertEquals(1762.21082723, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 105.37207791;
      Complex complex0 = new Complex(double0, double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(149.01862167575644, complex0.abs(), 0.01D);
      assertEquals(105.37207791, complex0.getReal(), 0.01D);
      assertEquals(105.37207791, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      int int0 = (-4);
      // Undeclared exception!
      try {
        List<Complex> list0 = complex0.nthRoot(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.tanh();
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-232.12516438716807);
      Complex complex0 = new Complex(double0);
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sinh();
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.2333149368905306E100, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-3.2333149368905306E100), complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.cosh();
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.2333149368905306E100, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-3.2333149368905306E100), complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.acos();
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.2333149368905306E100, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-3.2333149368905306E100), complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex3));
      assertNotNull(complex3);
      
      Complex complex4 = complex3.tan();
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.2333149368905306E100, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals((-3.2333149368905306E100), complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex4.getArgument(), 0.01D);
      assertEquals(false, complex4.isInfinite());
      assertEquals(Double.NaN, complex4.abs(), 0.01D);
      assertEquals(true, complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex4.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex3, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex3));
      assertNotNull(complex4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.45006785508716923, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.45006785508716923, complex1.getReal(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sinh();
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertSame(complex1, complex0);
      assertSame(complex0, complex1);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = 951.0;
      Complex complex1 = complex0.pow(double1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.asin();
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.sin();
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertSame(complex3, complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.6290542754547127, complex1.getReal(), 0.01D);
      assertEquals(0.6290542754547127, complex1.abs(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.subtract(double1);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.cosh();
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.add(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals(false, complex0.isNaN());
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.cos();
      assertEquals(false, complex1.isNaN());
      assertEquals(-0.0, complex1.getArgument(), 0.01D);
      assertEquals(-0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.9118983481109753, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.9118983481109753, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.subtract(double0);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.divide(complex1);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.atan();
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.subtract(double1);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.subtract(double1);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt1z();
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = (-718.8);
      Complex complex0 = Complex.valueOf(double0, double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-718.8), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(1016.5367086337807, complex0.abs(), 0.01D);
      assertEquals((-718.8), complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(double0);
      assertEquals((-718.8), complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(718.8, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.cosh();
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals((-718.8), complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(718.8, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.subtract(complex0);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals((-718.8), complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(718.8, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-718.8), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(1016.5367086337807, complex0.abs(), 0.01D);
      assertEquals((-718.8), complex0.getReal(), 0.01D);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.conjugate();
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.add(complex1);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.negate();
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.multiply(double0);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(double0, double1);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.multiply(double1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-232.12516438716807);
      Complex complex0 = new Complex(double0);
      assertEquals(false, complex0.isNaN());
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.pow(double1);
      assertEquals(false, complex0.isNaN());
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.subtract(double1);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.multiply(double0);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex1 = Complex.valueOf(double0, double1);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals(false, complex0.isNaN());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = 951.0;
      Complex complex1 = complex0.pow(double1);
      assertEquals(false, complex0.isNaN());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.pow(complex1);
      assertEquals(false, complex0.isNaN());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.subtract(double1);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double1 == double0);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.pow(complex1);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertFalse(double0 == double1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertNotNull(complex2);
  }

  //@Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.sqrt1z();
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      
      int int0 = complex2.hashCode();
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertEquals(7, int0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-718.8);
      Complex complex0 = Complex.valueOf(double0, double0);
      assertEquals((-718.8), complex0.getImaginary(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-718.8), complex0.getReal(), 0.01D);
      assertEquals(1016.5367086337807, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      int int0 = complex0.hashCode();
      assertEquals((-718.8), complex0.getImaginary(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-718.8), complex0.getReal(), 0.01D);
      assertEquals(1016.5367086337807, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(585736192, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.subtract(double0);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      
      Complex complex2 = Complex.valueOf(double0, double0);
      assertEquals(false, complex2.isNaN());
      assertEquals((-2.356194490192345), complex2.getArgument(), 0.01D);
      assertEquals((-1769.397), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-1769.397), complex2.getReal(), 0.01D);
      assertEquals(2502.3052346222676, complex2.abs(), 0.01D);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      
      boolean boolean0 = complex1.equals((Object) complex2);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals((-2.356194490192345), complex2.getArgument(), 0.01D);
      assertEquals((-1769.397), complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals((-1769.397), complex2.getReal(), 0.01D);
      assertEquals(2502.3052346222676, complex2.abs(), 0.01D);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(boolean0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.subtract(double0);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.pow(double0);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.asin();
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex3));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertNotNull(complex3);
      
      boolean boolean0 = complex2.equals((Object) complex3);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertTrue(boolean0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex3));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = (-718.8);
      Complex complex0 = Complex.valueOf(double0, double0);
      assertEquals((-718.8), complex0.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-718.8), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1016.5367086337807, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = complex0.equals(object0);
      assertEquals((-718.8), complex0.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-718.8), complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1016.5367086337807, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = (Complex)complex0.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(true, complex0.isInfinite());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(boolean0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = Complex.valueOf(double0, double0);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals((-1769.397), complex1.getReal(), 0.01D);
      assertEquals(2502.3052346222676, complex1.abs(), 0.01D);
      assertEquals((-1769.397), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      boolean boolean0 = complex0.equals((Object) complex1);
      assertEquals((-2.356194490192345), complex1.getArgument(), 0.01D);
      assertEquals((-1769.397), complex1.getReal(), 0.01D);
      assertEquals(2502.3052346222676, complex1.abs(), 0.01D);
      assertEquals((-1769.397), complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(boolean0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.divide(double0);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 933.9467425967595;
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide(double0);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0010707248651240916, complex1.getImaginary(), 0.01D);
      assertEquals(1.5707963267948966, complex1.getArgument(), 0.01D);
      assertEquals(0.0010707248651240916, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(double0, double0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide(double0);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
  }

  //@Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      double double1 = 0.0;
      Complex complex1 = complex0.divide(double1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex1 = complex0.divide(double0);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.divide(complex0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      double double0 = 0.0;
      Complex complex2 = complex1.divide(double0);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = (-718.8);
      Complex complex0 = Complex.valueOf(double0, double0);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-718.8), complex0.getImaginary(), 0.01D);
      assertEquals((-718.8), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1016.5367086337807, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.atan();
      assertEquals(false, complex1.isInfinite());
      assertEquals((-6.956035596990812E-4), complex1.getImaginary(), 0.01D);
      assertEquals((-1.5701007227864268), complex1.getReal(), 0.01D);
      assertEquals((-3.1411496224491193), complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5701008768734483, complex1.abs(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals((-718.8), complex0.getImaginary(), 0.01D);
      assertEquals((-718.8), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(1016.5367086337807, complex0.abs(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = 951.0;
      Complex complex1 = complex0.pow(double1);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.divide(complex1);
      assertEquals(false, complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(2.356194490192345, complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(true, complex1.isInfinite());
      assertEquals(false, complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isNaN());
      assertEquals(0.0, complex2.getArgument(), 0.01D);
      assertEquals(0.0, complex2.abs(), 0.01D);
      assertEquals(0.0, complex2.getReal(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(double1 == double0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(double0 == double1);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt1z();
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.divide(complex1);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(false, complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(0.0, complex1.getReal(), 0.01D);
      assertEquals(0.0, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.conjugate();
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
      
      Complex complex2 = complex0.add(complex1);
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertNotNull(complex2);
      
      Complex complex3 = complex0.divide(complex2);
      assertEquals((-0.7853981633974483), complex1.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(true, complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals(0.7853981633974483, complex0.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = (-232.12516438716807);
      Complex complex0 = new Complex(double0);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sinh();
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals((-3.2333149368905306E100), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3.2333149368905306E100, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.cosh();
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals((-3.2333149368905306E100), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3.2333149368905306E100, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex2);
      
      Complex complex3 = complex2.divide(complex0);
      assertEquals(232.12516438716807, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals((-232.12516438716807), complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(false, complex2.isInfinite());
      assertEquals((-3.2333149368905306E100), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(3.2333149368905306E100, complex1.abs(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex3.getReal(), 0.01D);
      assertEquals(Double.NaN, complex3.getArgument(), 0.01D);
      assertEquals(false, complex3.isInfinite());
      assertEquals(true, complex3.isNaN());
      assertEquals(Double.NaN, complex3.abs(), 0.01D);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01D);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertNotNull(complex3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      double double1 = Double.NaN;
      Complex complex1 = complex0.subtract(double1);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertNotNull(complex1);
      
      Complex complex2 = complex1.conjugate();
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double0 == double1);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.add(double0);
      assertEquals(11.720549908265244, complex1.abs(), 0.01D);
      assertEquals(0.0, complex1.getImaginary(), 0.01D);
      assertEquals(3.141592653589793, complex1.getArgument(), 0.01D);
      assertEquals((-11.720549908265244), complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(false, complex1.isInfinite());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.add(double0);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      double double0 = Double.NaN;
      Complex complex1 = complex0.divide(double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      
      Complex complex2 = complex1.add(double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex2.getArgument(), 0.01D);
      assertEquals(false, complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01D);
      assertEquals(true, complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01D);
      assertEquals(Double.NaN, complex2.abs(), 0.01D);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 105.37207791;
      double double1 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(105.37207791, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.acos();
      assertEquals(Double.NaN, complex1.getArgument(), 0.01D);
      assertEquals(true, complex1.isNaN());
      assertEquals(Double.NaN, complex1.abs(), 0.01D);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01D);
      assertEquals(Double.NaN, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01D);
      assertEquals(105.37207791, complex0.getReal(), 0.01D);
      assertEquals(true, complex0.isInfinite());
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(double1 == double0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(double0 == double1);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.sqrt();
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01D);
      assertEquals(0.7853981633974483, complex1.getArgument(), 0.01D);
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01D);
      assertEquals(false, complex1.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01D);
      assertEquals(false, complex1.isNaN());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertNotSame(complex1, complex0);
      assertNotSame(complex0, complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex0.equals((Object)complex1));
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertNotNull(complex0);
      
      double double0 = complex0.abs();
      assertEquals(Double.NaN, complex0.abs(), 0.01D);
      assertEquals(Double.NaN, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(true, complex0.isNaN());
      assertEquals(Double.NaN, complex0.getArgument(), 0.01D);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01D);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = (-3.940510424527919E-20);
      Complex complex0 = Complex.valueOf(double0, double0);
      assertEquals(false, complex0.isNaN());
      assertEquals((-3.940510424527919E-20), complex0.getImaginary(), 0.01D);
      assertEquals(5.572723285039945E-20, complex0.abs(), 0.01D);
      assertEquals((-3.940510424527919E-20), complex0.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertNotNull(complex0);
      
      boolean boolean0 = complex0.isNaN();
      assertEquals(false, complex0.isNaN());
      assertEquals((-3.940510424527919E-20), complex0.getImaginary(), 0.01D);
      assertEquals(5.572723285039945E-20, complex0.abs(), 0.01D);
      assertEquals((-3.940510424527919E-20), complex0.getReal(), 0.01D);
      assertEquals((-2.356194490192345), complex0.getArgument(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = (-5.860274954132622);
      Complex complex0 = new Complex(double0);
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertNotNull(complex0);
      
      ComplexField complexField0 = complex0.getField();
      assertEquals(5.860274954132622, complex0.abs(), 0.01D);
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(false, complex0.isNaN());
      assertEquals((-5.860274954132622), complex0.getReal(), 0.01D);
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = (-1769.397);
      Complex complex0 = new Complex(double0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertNotNull(complex0);
      
      int int0 = 809;
      List<Complex> list0 = complex0.nthRoot(int0);
      assertEquals(809, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(3.141592653589793, complex0.getArgument(), 0.01D);
      assertEquals((-1769.397), complex0.getReal(), 0.01D);
      assertEquals(1769.397, complex0.abs(), 0.01D);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertNotNull(complex0);
      
      String string0 = complex0.toString();
      assertEquals(1.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.getArgument(), 0.01D);
      assertEquals(1.0, complex0.abs(), 0.01D);
      assertEquals(0.0, complex0.getReal(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals("(0.0, 1.0)", string0);
      assertNotNull(string0);
  }
}
