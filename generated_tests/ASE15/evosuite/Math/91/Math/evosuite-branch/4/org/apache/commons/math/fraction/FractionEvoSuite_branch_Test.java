/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:49:10 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-2119);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,119, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = 7;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 7/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 46;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(-23, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals((-2.1420419216156006E-8), fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals((-2.142042E-8F), fraction0.floatValue(), 0.01F);
      assertEquals(1073741824, fraction0.getDenominator());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      
      int int0 = 0;
      int int1 = fraction0.getDenominator();
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      Fraction fraction1 = Fraction.getReducedFraction(int0, int1);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotNull(fraction1);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.multiply(fraction1);
      assertNotNull(fraction2);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertNotNull(fraction2);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = (-3241.710060021408);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(87, fraction0.byteValue());
      assertEquals(169, fraction0.getDenominator());
      assertEquals((-3241L), fraction0.longValue());
      assertEquals((-3241.71F), fraction0.floatValue(), 0.01F);
      assertEquals(-547849, fraction0.getNumerator());
      assertEquals((-3241.7100591715975), fraction0.doubleValue(), 0.01D);
      assertEquals(-3241, fraction0.shortValue());
      assertEquals(-3241, fraction0.intValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-3241.710060021408);
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(-3241, fraction0.shortValue());
      assertEquals(-3241, fraction0.intValue());
      assertEquals(-547849, fraction0.getNumerator());
      assertEquals((-3241.71F), fraction0.floatValue(), 0.01F);
      assertEquals(87, fraction0.byteValue());
      assertEquals((-3241L), fraction0.longValue());
      assertEquals((-3241.7100591715975), fraction0.doubleValue(), 0.01D);
      assertEquals(169, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(-6483, fraction1.shortValue());
      assertEquals((-6483.42F), fraction1.floatValue(), 0.01F);
      assertEquals((-6483L), fraction1.longValue());
      assertEquals(169, fraction1.getDenominator());
      assertEquals(-83, fraction1.byteValue());
      assertEquals((-6483.420118343195), fraction1.doubleValue(), 0.01D);
      assertEquals(-1095698, fraction1.getNumerator());
      assertEquals(-6483, fraction1.intValue());
      assertEquals(-3241, fraction0.shortValue());
      assertEquals(-3241, fraction0.intValue());
      assertEquals(-547849, fraction0.getNumerator());
      assertEquals((-3241.71F), fraction0.floatValue(), 0.01F);
      assertEquals(87, fraction0.byteValue());
      assertEquals((-3241L), fraction0.longValue());
      assertEquals((-3241.7100591715975), fraction0.doubleValue(), 0.01D);
      assertEquals(169, fraction0.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(2147483647L, fraction0.longValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(2147483647L, fraction0.longValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      double double0 = 0.0;
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2147483647, fraction0.getNumerator());
      
      Fraction fraction1 = new Fraction(double0);
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertNotNull(fraction2);
      assertEquals(-1, fraction2.byteValue());
      assertEquals(2147483647L, fraction2.longValue());
      assertEquals(2.147483647E9, fraction2.doubleValue(), 0.01D);
      assertEquals(2147483647, fraction2.intValue());
      assertEquals(2147483647, fraction2.getNumerator());
      assertEquals(2.14748365E9F, fraction2.floatValue(), 0.01F);
      assertEquals(-1, fraction2.shortValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction2, fraction1);
      assertSame(fraction2, fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertNotNull(fraction0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.add(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = new Fraction(int0, int0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.reciprocal();
      assertNotNull(fraction2);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(4.656613E-10F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(4.656612875245797E-10, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(2147483647, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      boolean boolean0 = fraction1.equals((Object) fraction2);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(4.656613E-10F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(4.656612875245797E-10, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(2147483647, fraction2.getDenominator());
      assertEquals(0L, fraction2.longValue());
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction2 = fraction0.abs();
      assertNotNull(fraction2);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
      
      boolean boolean0 = fraction1.equals((Object) fraction2);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.intValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.intValue());
      assertEquals(1, fraction2.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertTrue(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertTrue(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.intValue());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      
      Fraction fraction1 = null;
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1L, fraction0.longValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertNotNull(fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertNotNull(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.getNumerator());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo(fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = new Fraction(int0, int0);
      assertNotNull(fraction1);
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int1 = fraction1.compareTo(fraction0);
      assertEquals(1, fraction1.intValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-1217.9196271103147);
      int int0 = 41;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(-1217, fraction0.intValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217L), fraction0.longValue());
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals(63, fraction0.byteValue());
      assertEquals(-1217, fraction0.shortValue());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.abs();
      assertNotNull(fraction1);
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(-1217, fraction0.intValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217L), fraction0.longValue());
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals(63, fraction0.byteValue());
      assertEquals(-1217, fraction0.shortValue());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      assertEquals(1217.92, fraction1.doubleValue(), 0.01D);
      assertEquals(25, fraction1.getDenominator());
      assertEquals(1217.92F, fraction1.floatValue(), 0.01F);
      assertEquals(1217L, fraction1.longValue());
      assertEquals(1217, fraction1.shortValue());
      assertEquals(30448, fraction1.getNumerator());
      assertEquals(-63, fraction1.byteValue());
      assertEquals(1217, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.abs();
      assertNotNull(fraction2);
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(-1217, fraction0.intValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217L), fraction0.longValue());
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals(63, fraction0.byteValue());
      assertEquals(-1217, fraction0.shortValue());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      assertEquals(25, fraction2.getDenominator());
      assertEquals(1217L, fraction2.longValue());
      assertEquals(-63, fraction2.byteValue());
      assertEquals(1217.92, fraction2.doubleValue(), 0.01D);
      assertEquals(1217, fraction2.intValue());
      assertEquals(1217, fraction2.shortValue());
      assertEquals(30448, fraction2.getNumerator());
      assertEquals(1217.92F, fraction2.floatValue(), 0.01F);
      assertEquals(1217.92, fraction1.doubleValue(), 0.01D);
      assertEquals(25, fraction1.getDenominator());
      assertEquals(1217.92F, fraction1.floatValue(), 0.01F);
      assertEquals(1217L, fraction1.longValue());
      assertEquals(1217, fraction1.shortValue());
      assertEquals(30448, fraction1.getNumerator());
      assertEquals(-63, fraction1.byteValue());
      assertEquals(1217, fraction1.intValue());
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 41;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 41/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      
      short short0 = fraction0.shortValue();
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals((short)1, short0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotNull(fraction1);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      short short1 = fraction1.shortValue();
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertNotSame(fraction1, fraction0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = null;
      try {
        fraction2 = new Fraction((int) short0, (int) short1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = (-727.1378012318885);
      int int0 = (-1);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to convert -727.138 to fraction after -1 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-3672);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) int0, (double) int0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert -3,672 to fraction (3,673/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      
      int int0 = 0;
      int int1 = fraction0.getDenominator();
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int1, (double) int0, int1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert 1 to fraction (-9,223,372,036,854,775,808/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Overflow trying to convert -\u221E to fraction (-9,223,372,036,854,775,808/1)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertNotNull(fraction0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      
      long long0 = fraction0.longValue();
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-1217.9196271103147);
      int int0 = 41;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals((-1217L), fraction0.longValue());
      assertEquals(-1217, fraction0.shortValue());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      assertEquals(63, fraction0.byteValue());
      assertEquals(-1217, fraction0.intValue());
      
      int int1 = fraction0.hashCode();
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals((-1217L), fraction0.longValue());
      assertEquals(-1217, fraction0.shortValue());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      assertEquals(63, fraction0.byteValue());
      assertEquals(-1217, fraction0.intValue());
      assertEquals((-1103278), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = (-1217.9196271103147);
      int int0 = 41;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(-1217, fraction0.shortValue());
      assertEquals(-1217, fraction0.intValue());
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217L), fraction0.longValue());
      assertEquals(63, fraction0.byteValue());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertNotNull(fraction1);
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(-1217, fraction0.shortValue());
      assertEquals(-1217, fraction0.intValue());
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217L), fraction0.longValue());
      assertEquals(63, fraction0.byteValue());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.intValue());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      Fraction fraction0 = new Fraction((double) int0);
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(2147483647, fraction0.getNumerator());
      
      float float0 = fraction0.floatValue();
      assertEquals(-1, fraction0.byteValue());
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(2.14748365E9F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.MINUS_ONE;
      assertNotNull(fraction0);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotNull(fraction1);
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1L), fraction0.longValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-2, fraction1.byteValue());
      assertEquals(-2, fraction1.shortValue());
      assertEquals(-2, fraction1.intValue());
      assertEquals((-2.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-2.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-2L), fraction1.longValue());
      assertEquals(-2, fraction1.getNumerator());
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = (-1217.9196271103147);
      int int0 = 41;
      Fraction fraction0 = new Fraction(double0, int0);
      assertNotNull(fraction0);
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(63, fraction0.byteValue());
      assertEquals(-1217, fraction0.shortValue());
      assertEquals(-1217, fraction0.intValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals((-1217L), fraction0.longValue());
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotNull(fraction1);
      assertEquals((-1217.92), fraction0.doubleValue(), 0.01D);
      assertEquals(63, fraction0.byteValue());
      assertEquals(-1217, fraction0.shortValue());
      assertEquals(-1217, fraction0.intValue());
      assertEquals(25, fraction0.getDenominator());
      assertEquals((-1217.92F), fraction0.floatValue(), 0.01F);
      assertEquals(-30448, fraction0.getNumerator());
      assertEquals((-1217L), fraction0.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }
}
