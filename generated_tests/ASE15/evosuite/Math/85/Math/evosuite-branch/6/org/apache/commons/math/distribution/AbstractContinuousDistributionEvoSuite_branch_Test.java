/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:10:55 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.distribution.BetaDistributionImpl;
import org.apache.commons.math.distribution.ChiSquaredDistributionImpl;
import org.apache.commons.math.distribution.GammaDistribution;
import org.apache.commons.math.distribution.GammaDistributionImpl;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractContinuousDistributionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 1.0E-6;
      double double1 = 40.53817027939877;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0E-6, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals(40.53817027939877, gammaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      ChiSquaredDistributionImpl chiSquaredDistributionImpl0 = new ChiSquaredDistributionImpl(double1, (GammaDistribution) gammaDistributionImpl0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(40.53817027939877, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(40.53817027939877, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(20.269085139699385, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertNotNull(chiSquaredDistributionImpl0);
      
      double double2 = chiSquaredDistributionImpl0.inverseCumulativeProbability(double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(40.53817027939877, double2, 0.01D);
      assertEquals(40.53817027939877, chiSquaredDistributionImpl0.getDegreesOfFreedom(), 0.01D);
      assertEquals(40.53817027939877, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(20.269085139699385, gammaDistributionImpl0.getAlpha(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NormalDistributionImpl normalDistributionImpl0 = new NormalDistributionImpl();
      assertEquals(1.0, normalDistributionImpl0.getStandardDeviation(), 0.01D);
      assertEquals(0.0, normalDistributionImpl0.getMean(), 0.01D);
      assertNotNull(normalDistributionImpl0);
      
      double double0 = 155.14723962496268;
      // Undeclared exception!
      try {
        double double1 = normalDistributionImpl0.inverseCumulativeProbability(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 155.147 out of [0, 1] range
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = (-15.271066527963862);
      BetaDistributionImpl betaDistributionImpl0 = new BetaDistributionImpl(double0, double0);
      assertEquals((-15.271066527963862), betaDistributionImpl0.getAlpha(), 0.01D);
      assertEquals((-15.271066527963862), betaDistributionImpl0.getBeta(), 0.01D);
      assertNotNull(betaDistributionImpl0);
      
      // Undeclared exception!
      try {
        double double1 = betaDistributionImpl0.inverseCumulativeProbability(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -15.271 out of [0, 1] range
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 1.0E-6;
      GammaDistributionImpl gammaDistributionImpl0 = new GammaDistributionImpl(double0, double0);
      assertEquals(1.0E-6, gammaDistributionImpl0.getBeta(), 0.01D);
      assertEquals(1.0E-6, gammaDistributionImpl0.getAlpha(), 0.01D);
      assertNotNull(gammaDistributionImpl0);
      
      try {
        double double1 = gammaDistributionImpl0.inverseCumulativeProbability(double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: number of iterations=1, maximum iterations=2,147,483,647, initial=0, lower bound=0, upper bound=0, final a value=0, final b value=0, f(a)=0.999, f(b)=1
         //
      }
  }
}
