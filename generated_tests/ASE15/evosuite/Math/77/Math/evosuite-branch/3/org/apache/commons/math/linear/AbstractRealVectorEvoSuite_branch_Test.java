/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:03:47 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractRealVectorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-1429.5616225746662);
      doubleArray0[1] = double0;
      doubleArray0[4] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertEquals(5718.246490298665, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1429.5616225746662, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2859.1232451493324, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, (-1429.5616225746662), 0.0, 0.0, (-1429.5616225746662), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertEquals(4, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, (-1429.5616225746662), 0.0, 0.0, (-1429.5616225746662), 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.map((UnivariateRealFunction) polynomialFunction0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(2.3882203519283556E16, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.1941101759641778E16, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(5.970550879820889E15, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(12, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(5718.246490298665, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(12, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1429.5616225746662, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2859.1232451493324, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, (-1429.5616225746662), 0.0, 0.0, (-1429.5616225746662), 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      AbstractRealVector.SparseEntryIterator abstractRealVector_SparseEntryIterator0 = arrayRealVector0.new SparseEntryIterator();
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(abstractRealVector_SparseEntryIterator0);
      
      AbstractRealVector.EntryImpl abstractRealVector_EntryImpl0 = null;
      abstractRealVector_SparseEntryIterator0.advance(abstractRealVector_EntryImpl0);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2703.439793);
      doubleArray0[0] = double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(2703.439793, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2703.439793, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(2703.439793, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {(-2703.439793), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      AbstractRealVector.SparseEntryIterator abstractRealVector_SparseEntryIterator0 = arrayRealVector0.new SparseEntryIterator();
      assertEquals(2703.439793, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(2703.439793, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(2703.439793, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {(-2703.439793), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(abstractRealVector_SparseEntryIterator0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAcosToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[26];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(26, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      int int0 = 1872;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(1872, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) arrayRealVector0);
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertEquals(1872, openMapRealMatrix0.getRowDimension());
      assertEquals(26, openMapRealMatrix0.getColumnDimension());
      assertEquals(1872, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(26, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealMatrix0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2703.439793);
      doubleArray0[0] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {(-2703.439793), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.getLInfNorm();
      assertEquals(2703.439793, double1, 0.01D);
      assertEquals(0.1111111111111111, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {(-2703.439793), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[2]);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double0 = openMapRealVector0.getL1Norm();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[2]);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.POSITIVE_INFINITY;
      doubleArray0[4] = double0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      double double1 = openMapRealVector0.dotProduct(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertEquals(6, openMapRealVector0.getDimension());
      assertEquals(0.16666666666666666, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.POSITIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector((RealVector) openMapRealVector0);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      try {
        RealVector realVector0 = openMapRealVector0.add((RealVector) arrayRealVector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector must have at least one element
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      Double[] doubleArray1 = new Double[2];
      double double0 = 347.037;
      Double double1 = new Double(double0);
      assertEquals(347.037, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray1[0] = double1;
      doubleArray1[1] = (Double) doubleArray0[1];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1, (double) doubleArray1[1]);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      ArrayRealVector arrayRealVector0 = (ArrayRealVector)openMapRealVector0.add(doubleArray0);
      assertEquals(347.037, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(347.037, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(3, arrayRealVector0.getDimension());
      assertEquals(347.037, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[13];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(13, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      int int0 = 10;
      try {
        openMapRealVector0.setSubVector(int0, doubleArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 22 out of allowed range [0, 12]
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-2682);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-2682, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((double) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index -2,682 out of allowed range [0, -2,682]
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      try {
        RealVector realVector0 = openMapRealVector0.ebeMultiply(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 3
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      AbstractRealVector.SparseEntryIterator abstractRealVector_SparseEntryIterator0 = openMapRealVector0.new SparseEntryIterator();
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(abstractRealVector_SparseEntryIterator0);
      
      // Undeclared exception!
      try {
        abstractRealVector_SparseEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Double[] doubleArray0 = new Double[4];
      doubleArray0[3] = (Double) double0;
      doubleArray0[0] = doubleArray0[3];
      doubleArray0[1] = (Double) double0;
      doubleArray0[2] = (Double) double0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAbs();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(true, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(true, arrayRealVector1.isInfinite());
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapFloor();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      double double0 = 1.0;
      Double double1 = new Double(double0);
      assertEquals(1.0, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double1;
      doubleArray0[4] = double1;
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray0[3];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapExpm1();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  //@Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSinToSelf();
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 8.129071113062219;
      int int0 = (-1039);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, double0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-1039, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAbsToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-1039, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-1039, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAdd(doubleArray0[2]);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(4, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapExp();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCos();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAsin();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCeil();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 32.376664041954406;
      int int0 = (-831);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, double0);
      assertEquals(-831, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(double0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-831, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-831, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-2463.7611902262);
      int int0 = (-782);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, double0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-782, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSignum();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-782, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-782, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog10ToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0, double0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSin();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-2813);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(-2813, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCosh();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-2813, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-2813, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((double) int0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = (-2463.7611902262);
      int int0 = (-782);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, double0);
      assertEquals(-782, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapPow((double) int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(-782, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-782, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, doubleArray0[2]);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCbrt();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertNotNull(arrayRealVector0);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog10();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAcos();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog1p();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(2, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(2, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAtan();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.projection(doubleArray0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(9, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-484);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-484, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapTan();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-484, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-484, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSqrt();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapInv();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 32.376664041954406;
      int int0 = (-831);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, double0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-831, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSinh();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-831, openMapRealVector0.getDimension());
      assertEquals(-831, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = (-2813);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(-2813, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapRint();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(-2813, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-2813, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapTanh();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
  }

  //@Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Double[] doubleArray0 = new Double[7];
      double double0 = 5757.697235223286;
      Double double1 = new Double(double0);
      assertEquals(5757.697235223286, (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = doubleArray0[2];
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[4];
      doubleArray0[6] = doubleArray0[5];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapUlp();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
  }
}
