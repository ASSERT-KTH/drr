/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:30:19 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.FunctionEvaluationException;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.linear.AbstractRealVector;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.MatrixIndexException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractRealVectorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = 1.0E-12;
      doubleArray0[2] = double0;
      doubleArray0[3] = double0;
      doubleArray0[4] = double0;
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.7320508075688772E-12, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(1.0E-12, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3.0E-12, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0E-12, 1.0E-12, 1.0E-12, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertNotNull(polynomialFunction0);
      assertEquals(4, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0E-12, 1.0E-12, 1.0E-12, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapToSelf((UnivariateRealFunction) polynomialFunction0);
      assertSame(arrayRealVector1, arrayRealVector0);
      assertSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(3.0000000000030003E-36, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(1.7320508075706094E-36, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(1.000000000001E-36, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(1.000000000001E-36, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(3.0000000000030003E-36, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(1.7320508075706094E-36, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(4, polynomialFunction0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 1.0E-12, 1.0E-12, 1.0E-12, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAcos();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(openMapRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      AbstractRealVector.SparseEntryIterator abstractRealVector_SparseEntryIterator0 = openMapRealVector0.new SparseEntryIterator();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(abstractRealVector_SparseEntryIterator0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = (Double) double0;
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) doubleArray0[0];
      doubleArray1[5] = (Double) doubleArray0[0];
      doubleArray1[6] = (Double) doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertNotNull(openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      RealVector realVector0 = null;
      // Undeclared exception!
      try {
        RealMatrix realMatrix0 = openMapRealVector0.outerProduct(realVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = (-377.37301679761);
      Double double1 = Double.valueOf(double0);
      assertEquals((-377.37301679761), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
      
      OpenMapRealMatrix openMapRealMatrix0 = (OpenMapRealMatrix)openMapRealVector0.outerProduct((RealVector) openMapRealVector0);
      assertNotNull(openMapRealMatrix0);
      assertEquals(1, openMapRealMatrix0.getColumnDimension());
      assertEquals(1, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double1 = openMapRealVector0.getLInfNorm();
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = (-2.9747049534501);
      Double double1 = new Double(double0);
      assertEquals((-2.9747049534501), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = double1;
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[3];
      doubleArray0[6] = double1;
      doubleArray0[7] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      
      double double2 = openMapRealVector0.getL1Norm();
      assertEquals(23.7976396276008, double2, 0.01D);
      assertFalse(double2 == double0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Double[] doubleArray0 = new Double[1];
      double double0 = (-377.37301679761);
      Double double1 = Double.valueOf(double0);
      assertEquals((-377.37301679761), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[0] = double1;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.unitVector();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.append(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = openMapRealVector1.dotProduct(doubleArray0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(6, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAcos();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(openMapRealVector0);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector2 = (ArrayRealVector)openMapRealVector0.add((RealVector) arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector2);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector2);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector2, arrayRealVector0);
      assertNotSame(arrayRealVector2, arrayRealVector1);
      assertNotNull(arrayRealVector2);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector2));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector2.equals((Object)arrayRealVector1));
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(4.967294132898051, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(15.707963267948966, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector1.getDimension());
      assertEquals(1.5707963267948966, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(9.934588265796101, arrayRealVector2.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector2.isInfinite());
      assertEquals(3.141592653589793, arrayRealVector2.getLInfNorm(), 0.01D);
      assertEquals(31.41592653589793, arrayRealVector2.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector2.isNaN());
      assertEquals(10, arrayRealVector2.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  //@Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      int int0 = 4;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(4, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        RealVector realVector0 = arrayRealVector0.getSubVector(int0, int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index 4 out of allowed range [0, 3]
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-3239);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-3239, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      // Undeclared exception!
      try {
        OpenMapRealVector openMapRealVector1 = openMapRealVector0.append((double) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // index -3,239 out of allowed range [0, -3,239]
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1290;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1290, arrayRealVector0.getDimension());
      
      AbstractRealVector.SparseEntryIterator abstractRealVector_SparseEntryIterator0 = arrayRealVector0.new SparseEntryIterator();
      assertNotNull(abstractRealVector_SparseEntryIterator0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(1290, arrayRealVector0.getDimension());
      
      // Undeclared exception!
      try {
        abstractRealVector_SparseEntryIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapFloor();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(16, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(16, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCoshToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 0.0;
      Double[] doubleArray1 = new Double[7];
      doubleArray1[0] = (Double) doubleArray0[0];
      doubleArray1[1] = (Double) double0;
      doubleArray1[2] = (Double) double0;
      doubleArray1[3] = (Double) doubleArray0[0];
      doubleArray1[4] = (Double) doubleArray0[0];
      doubleArray1[5] = (Double) doubleArray0[0];
      doubleArray1[6] = (Double) doubleArray0[0];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray1);
      assertNotNull(openMapRealVector0);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAcosToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(7, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(7, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 31;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapRintToSelf();
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(31, openMapRealVector1.getDimension());
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 1.0E-12;
      int int0 = (-1);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(-1, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapFloorToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(-1, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-1, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapExpm1();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1119;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1119, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSinToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(1119, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1119, openMapRealVector1.getDimension());
  }

  //@Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 383;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(383, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAbs();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(383, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(383, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double[] doubleArray0 = new Double[10];
      double double0 = (-2434.18478539382);
      Double double1 = new Double(double0);
      assertEquals((-2434.18478539382), (double)double1, 0.01D);
      assertTrue(double1.equals((Object)double0));
      
      doubleArray0[8] = double1;
      int int0 = (-1330);
      int int1 = 0;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, int0, int1);
      assertNotNull(arrayRealVector0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAdd((double) doubleArray0[8]);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1119;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1119, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapExp();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1119, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1119, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCos();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAsin();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = (-321.52588152);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCeil();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(4, openMapRealVector0.getDimension());
      assertEquals(4, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector();
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapUlp();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 31;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(31, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSignum();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(31, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(31, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog10ToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(3, openMapRealVector0.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapSin();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try {
        double double0 = openMapRealVector0.dotProduct(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // vector length mismatch: got 0 but expected 6
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapCosh();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-3239);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(-3239, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSubtract((double) int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-3239, openMapRealVector1.getDimension());
      assertEquals(-3239, openMapRealVector0.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 9;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(9, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      double[] doubleArray0 = new double[10];
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(9, polynomialFunctionLagrangeForm0.degree());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      try {
        RealVector realVector0 = openMapRealVector0.map((UnivariateRealFunction) polynomialFunctionLagrangeForm0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Abscissa 0 is duplicated at both indices 1 and 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapPow((double) int0);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapCbrt();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapLog10();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapMultiplyToSelf(doubleArray0[9]);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog1p();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 1119;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, int0);
      assertNotNull(openMapRealVector0);
      assertEquals(1119, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapAtanToSelf();
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertEquals(1119, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1119, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapAtan();
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(1, arrayRealVector1.getDimension());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(1, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = true;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.projection(doubleArray0);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotNull(arrayRealVector1);
      assertFalse(arrayRealVector1.equals((Object)arrayRealVector0));
      assertFalse(arrayRealVector0.equals((Object)arrayRealVector1));
      assertEquals(true, arrayRealVector1.isNaN());
      assertEquals(Double.NaN, arrayRealVector1.getL1Norm(), 0.01D);
      assertEquals(Double.NaN, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(8, arrayRealVector1.getDimension());
      assertEquals(Double.NaN, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(15, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapTan();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(15, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[15];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertNotNull(openMapRealVector0);
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(15, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSqrt();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(15, openMapRealVector0.getDimension());
      assertEquals(15, openMapRealVector1.getDimension());
      assertEquals(0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapInv();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(3, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapSinh();
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayRealVector arrayRealVector0 = new ArrayRealVector();
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      
      ArrayRealVector arrayRealVector1 = (ArrayRealVector)arrayRealVector0.mapRint();
      assertNotSame(arrayRealVector0, arrayRealVector1);
      assertNotSame(arrayRealVector1, arrayRealVector0);
      assertNotNull(arrayRealVector1);
      assertTrue(arrayRealVector0.equals((Object)arrayRealVector1));
      assertTrue(arrayRealVector1.equals((Object)arrayRealVector0));
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0, arrayRealVector1.getDimension());
      assertEquals(0.0, arrayRealVector1.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector1.isNaN());
      assertEquals(false, arrayRealVector1.isInfinite());
      assertEquals(0.0, arrayRealVector1.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector1.getL1Norm(), 0.01D);
  }

  //@Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, doubleArray0[0]);
      assertNotNull(openMapRealVector0);
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapLog();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(Double.NaN, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector1.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 1.0E-12;
      int int0 = (-1);
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-1, openMapRealVector0.getDimension());
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapTanh();
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertTrue(openMapRealVector1.equals((Object)openMapRealVector0));
      assertTrue(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(-0.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(-1, openMapRealVector1.getDimension());
      assertEquals(-0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(-1, openMapRealVector0.getDimension());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector((RealVector) arrayRealVector0);
      assertNotNull(openMapRealVector0);
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      OpenMapRealVector openMapRealVector1 = (OpenMapRealVector)openMapRealVector0.mapDivide(doubleArray0[5]);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotNull(openMapRealVector1);
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertEquals(10, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(10, openMapRealVector1.getDimension());
      assertEquals(10, openMapRealVector0.getDimension());
      assertEquals(0.0, openMapRealVector0.getSparcity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
