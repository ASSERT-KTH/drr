/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:13:23 GMT 2014
 */

package org.apache.commons.math3.random;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.NotStrictlyPositiveException;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class BitsStreamGeneratorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      long long0 = 2975L;
      Well512a well512a0 = new Well512a(long0);
      assertNotNull(well512a0);
      
      int int0 = (-257);
      int int1 = well512a0.next(int0);
      assertEquals(1117311081, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      int int2 = well44497b0.nextInt(int1);
      assertEquals(310022460, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      long long0 = 0L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      int int0 = 2;
      int int1 = well19937c0.nextInt(int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 0;
      Well44497a well44497a0 = new Well44497a((long) int0);
      assertNotNull(well44497a0);
      
      try {
        int int1 = well44497a0.nextInt(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 827;
      Well44497a well44497a0 = new Well44497a((long) int0);
      assertNotNull(well44497a0);
      
      double double0 = well44497a0.nextGaussian();
      assertEquals(1.464858552615813, double0, 0.01D);
      
      double double1 = well44497a0.nextGaussian();
      assertEquals((-0.5571979547638186), double1, 0.01D);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      byte[] byteArray0 = new byte[9];
      well512a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)120, (byte)53, (byte) (-116), (byte) (-123), (byte)105, (byte) (-58), (byte)115, (byte) (-4)}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      long long0 = 0L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      boolean boolean0 = well19937c0.nextBoolean();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      long long0 = 3517L;
      Well19937c well19937c0 = new Well19937c(long0);
      assertNotNull(well19937c0);
      
      boolean boolean0 = well19937c0.nextBoolean();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      int int0 = 77;
      MersenneTwister mersenneTwister0 = new MersenneTwister(int0);
      assertNotNull(mersenneTwister0);
      
      long long0 = mersenneTwister0.nextLong();
      assertEquals((-1492174893800152481L), long0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      int int0 = (-434);
      Well44497a well44497a0 = new Well44497a((long) int0);
      assertNotNull(well44497a0);
      
      float float0 = well44497a0.nextFloat();
      assertEquals(0.06052375F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      int int0 = 827;
      MersenneTwister mersenneTwister0 = new MersenneTwister((long) int0);
      assertNotNull(mersenneTwister0);
      
      int int1 = mersenneTwister0.nextInt();
      assertEquals(1413332428, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }
}
