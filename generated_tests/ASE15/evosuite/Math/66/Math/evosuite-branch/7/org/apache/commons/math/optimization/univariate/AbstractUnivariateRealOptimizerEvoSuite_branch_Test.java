/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:16:57 GMT 2014
 */

package org.apache.commons.math.optimization.univariate;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.FunctionEvaluationException;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math.exception.NoDataException;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractUnivariateRealOptimizerEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      int int0 = brentOptimizer0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      brentOptimizer0.setMaxEvaluations(int0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      
      try {
        double double0 = brentOptimizer0.computeObjectiveValue(int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of evaluations (0) exceeded
         //
      }
  }

  //@Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      
      double[] doubleArray0 = new double[2];
      int int0 = (-1828);
      brentOptimizer0.setMaxEvaluations(int0);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(-1828, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunctionLagrangeForm0);
      assertEquals(1, polynomialFunctionLagrangeForm0.degree());
      
      try {
        double double0 = brentOptimizer0.computeObjectiveValue(polynomialFunctionLagrangeForm0, int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // maximal number of evaluations (-1,828) exceeded
         //
      }
  }

  //@Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      
      double[] doubleArray0 = new double[8];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      
      double double0 = brentOptimizer0.computeObjectiveValue(polynomialFunction0, doubleArray0[7]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, polynomialFunction0.degree());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1, brentOptimizer0.getEvaluations());
  }

  //@Test(timeout = 4000)
  public void test3()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      
      double double0 = brentOptimizer0.getFunctionValue();
      assertEquals(0.0, double0, 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
  }

  //@Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = brentOptimizer0.getResult();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
      }
  }

  //@Test(timeout = 4000)
  public void test5()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      //  // Unstable assertion: assertNotNull(brentOptimizer0);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertNull(brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getIterationCount());
      //  // Unstable assertion: assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      //  // Unstable assertion: assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      
      double double0 = Double.NaN;
      int int0 = 0;
      brentOptimizer0.setResult(double0, double0, int0);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      //  // Unstable assertion: assertNull(brentOptimizer0.getGoalType());
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getEvaluations());
      //  // Unstable assertion: assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      //  // Unstable assertion: assertEquals(0, brentOptimizer0.getIterationCount());
      //  // Unstable assertion: assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      //  // Unstable assertion: assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      
      // Undeclared exception!
      try {
        double double1 = brentOptimizer0.getFunctionValue();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      
      // Undeclared exception!
      try {
        brentOptimizer0.checkResultComputed();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no data
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      
      int int0 = brentOptimizer0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      
      double[] doubleArray0 = new double[8];
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (double) int0, (double) int0, (double) int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(0, polynomialFunction0.degree());
      
      brentOptimizer0.checkResultComputed();
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(1, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(GoalType.MAXIMIZE, brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
      
      brentOptimizer0.clearResult();
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0, brentOptimizer0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      BrentOptimizer brentOptimizer0 = new BrentOptimizer();
      assertNotNull(brentOptimizer0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      
      double[] doubleArray0 = new double[6];
      int int0 = brentOptimizer0.getMaxEvaluations();
      assertEquals(1000, int0);
      assertEquals(0, brentOptimizer0.getIterationCount());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, brentOptimizer0.getEvaluations());
      assertEquals(0.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertNull(brentOptimizer0.getGoalType());
      assertEquals(0.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction0);
      assertEquals(0, polynomialFunction0.degree());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = brentOptimizer0.optimize((UnivariateRealFunction) polynomialFunction0, goalType0, (double) int0, doubleArray0[5]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.1074681888936786E-11, double0, 0.01D);
      assertEquals(66, brentOptimizer0.getEvaluations());
      assertEquals(1000, brentOptimizer0.getMaxEvaluations());
      assertEquals(1.0E-9, brentOptimizer0.getRelativeAccuracy(), 0.01D);
      assertEquals(65, brentOptimizer0.getIterationCount());
      assertEquals(0.0, brentOptimizer0.getMax(), 0.01D);
      assertEquals(500.0, brentOptimizer0.getStartValue(), 0.01D);
      assertEquals(100, brentOptimizer0.getMaximalIterationCount());
      assertEquals(GoalType.MINIMIZE, brentOptimizer0.getGoalType());
      assertEquals(1.0E-11, brentOptimizer0.getAbsoluteAccuracy(), 0.01D);
      assertEquals(1000.0, brentOptimizer0.getMin(), 0.01D);
      assertEquals(0, polynomialFunction0.degree());
  }
}
