/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:26:54 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.CholeskyDecompositionImpl;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.DenseRealMatrix;
import org.apache.commons.math.linear.NonSquareMatrixException;
import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
import org.apache.commons.math.linear.NotSymmetricMatrixException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.apache.commons.math.linear.RealMatrixImpl;
import org.apache.commons.math.linear.RealVectorImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CholeskyDecompositionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 1;
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(int0, int0);
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertNotNull(denseRealMatrix0);
      
      double double0 = (-1.2427394330628272);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0, (double) int0, double0);
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertNotNull(choleskyDecompositionImpl0);
      
      double double1 = choleskyDecompositionImpl0.getDeterminant();
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = (-1084.6471661915);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1084.6471661915), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = double1;
      doubleArray0[2] = doubleArray0[0];
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[3];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = doubleArray0[1];
      doubleArray0[7] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[3]);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapSinToSelf();
      assertEquals((-1084.6471661915), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertSame(openMapRealVector0, openMapRealVector1);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector1.mapExp();
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.mapAsinToSelf();
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector3.outerproduct(openMapRealVector2);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(openMapRealMatrix0);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(choleskyDecompositionImpl0);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      
      DenseRealMatrix denseRealMatrix0 = (DenseRealMatrix)choleskyDecompositionImpl0.getLT();
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals(8, denseRealMatrix0.getRowDimension());
      assertEquals(8, denseRealMatrix0.getColumnDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(Double.NaN, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(denseRealMatrix0);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      
      DenseRealMatrix denseRealMatrix1 = (DenseRealMatrix)choleskyDecompositionImpl0.getLT();
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals(8, denseRealMatrix1.getColumnDimension());
      assertEquals(Double.NaN, denseRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix1.isSquare());
      assertEquals(8, denseRealMatrix1.getRowDimension());
      assertEquals((-1084.6471661915), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertNotNull(denseRealMatrix1);
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(denseRealMatrix1, denseRealMatrix0);
      assertSame(openMapRealVector1, openMapRealVector0);
      assertNotSame(openMapRealVector1, openMapRealVector2);
      assertNotSame(openMapRealVector1, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector3);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 1;
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(int0, int0);
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertNotNull(denseRealMatrix0);
      
      int int1 = 0;
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0, (double) int0, (double) int1);
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertNotNull(choleskyDecompositionImpl0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      DenseRealMatrix denseRealMatrix1 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertEquals(1, denseRealMatrix1.getRowDimension());
      assertEquals(1, denseRealMatrix1.getColumnDimension());
      assertEquals(0.0, denseRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix1.isSquare());
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertNotNull(denseRealMatrix1);
      assertTrue(denseRealMatrix1.equals((Object)denseRealMatrix0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(denseRealMatrix0.equals((Object)denseRealMatrix1));
      assertNotSame(denseRealMatrix1, denseRealMatrix0);
      assertNotSame(denseRealMatrix0, denseRealMatrix1);
      
      DenseRealMatrix denseRealMatrix2 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertEquals(0.0, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(1, denseRealMatrix2.getRowDimension());
      assertEquals(true, denseRealMatrix2.isSquare());
      assertEquals(0.0, denseRealMatrix2.getFrobeniusNorm(), 0.01D);
      assertEquals(1, denseRealMatrix2.getColumnDimension());
      assertNotNull(denseRealMatrix2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(denseRealMatrix0.equals((Object)denseRealMatrix2));
      assertTrue(denseRealMatrix0.equals((Object)denseRealMatrix1));
      assertTrue(denseRealMatrix2.equals((Object)denseRealMatrix0));
      assertNotSame(denseRealMatrix0, denseRealMatrix2);
      assertNotSame(denseRealMatrix0, denseRealMatrix1);
      assertNotSame(denseRealMatrix2, denseRealMatrix0);
      assertSame(denseRealMatrix2, denseRealMatrix1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 1;
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(int0, int0);
      assertEquals(1, denseRealMatrix0.getColumnDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(1, denseRealMatrix0.getRowDimension());
      assertNotNull(denseRealMatrix0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0, (double) int0, (double) int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not positive definite matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 1.0E-12;
      doubleArray0[6] = double0;
      double double1 = Double.NEGATIVE_INFINITY;
      doubleArray0[8] = double1;
      RealVectorImpl realVectorImpl0 = new RealVectorImpl(doubleArray0);
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(10, realVectorImpl0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(true, realVectorImpl0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0E-12, 0.0, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertNotNull(realVectorImpl0);
      
      DenseRealMatrix denseRealMatrix0 = (DenseRealMatrix)realVectorImpl0.outerProduct(realVectorImpl0);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(Double.NaN, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(10, denseRealMatrix0.getRowDimension());
      assertEquals(10, denseRealMatrix0.getColumnDimension());
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getNorm(), 0.01D);
      assertEquals(false, realVectorImpl0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getLInfNorm(), 0.01D);
      assertEquals(10, realVectorImpl0.getDimension());
      assertEquals(Double.POSITIVE_INFINITY, realVectorImpl0.getL1Norm(), 0.01D);
      assertEquals(true, realVectorImpl0.isInfinite());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0E-12, 0.0, Double.NEGATIVE_INFINITY, 0.0}, doubleArray0, 0.01);
      assertNotNull(denseRealMatrix0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not symmetric matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      double double0 = 0.0;
      RealMatrixImpl realMatrixImpl0 = new RealMatrixImpl(doubleArray0);
      assertEquals(false, realMatrixImpl0.isSquare());
      assertEquals(1, realMatrixImpl0.getColumnDimension());
      assertEquals(14, realMatrixImpl0.getRowDimension());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(realMatrixImpl0);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) realMatrixImpl0, double0, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 14x1 matrix was provided instead of a square matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Double[] doubleArray0 = new Double[8];
      double double0 = (-1084.6471661915);
      Double double1 = new Double(double0);
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1084.6471661915), (double)double1, 0.01D);
      
      doubleArray0[0] = double1;
      doubleArray0[1] = doubleArray0[0];
      doubleArray0[2] = doubleArray0[1];
      doubleArray0[3] = double1;
      doubleArray0[4] = doubleArray0[0];
      doubleArray0[5] = doubleArray0[1];
      doubleArray0[6] = double1;
      doubleArray0[7] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0, (double) doubleArray0[0]);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealVector0);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapSinToSelf();
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector1.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector1.getSparcity(), 0.01D);
      assertNotNull(openMapRealVector1);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector1, openMapRealVector0);
      
      OpenMapRealVector openMapRealVector2 = openMapRealVector0.mapExp();
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertNotNull(openMapRealVector2);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      
      OpenMapRealVector openMapRealVector3 = openMapRealVector2.mapAsinToSelf();
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertNotNull(openMapRealVector3);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector3.outerproduct(openMapRealVector2);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertNotNull(openMapRealMatrix0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) openMapRealMatrix0);
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertNotNull(choleskyDecompositionImpl0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
      
      DecompositionSolver decompositionSolver0 = choleskyDecompositionImpl0.getSolver();
      assertEquals(8, openMapRealVector2.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector2.getEpsilon(), 0.01D);
      assertEquals(1.0, openMapRealVector2.getSparcity(), 0.01D);
      assertEquals(true, decompositionSolver0.isNonSingular());
      assertEquals(1.0, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(8, openMapRealVector0.getDimension());
      assertEquals((-1084.6471661915), openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(8, openMapRealMatrix0.getColumnDimension());
      assertEquals(8, openMapRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(1.0, openMapRealVector3.getSparcity(), 0.01D);
      assertEquals((-1084.6471661915), openMapRealVector3.getEpsilon(), 0.01D);
      assertEquals(8, openMapRealVector3.getDimension());
      assertNotNull(decompositionSolver0);
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector2.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector3));
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector2));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector0));
      assertFalse(openMapRealVector3.equals((Object)openMapRealVector1));
      assertNotSame(openMapRealVector2, openMapRealVector1);
      assertNotSame(openMapRealVector2, openMapRealVector0);
      assertSame(openMapRealVector2, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector3);
      assertNotSame(openMapRealVector0, openMapRealVector2);
      assertSame(openMapRealVector0, openMapRealVector1);
      assertSame(openMapRealVector3, openMapRealVector2);
      assertNotSame(openMapRealVector3, openMapRealVector0);
      assertNotSame(openMapRealVector3, openMapRealVector1);
  }
}
