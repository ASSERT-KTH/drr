/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:57:51 GMT 2014
 */

package org.apache.commons.math.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.linear.CholeskyDecompositionImpl;
import org.apache.commons.math.linear.DecompositionSolver;
import org.apache.commons.math.linear.DenseRealMatrix;
import org.apache.commons.math.linear.NonSquareMatrixException;
import org.apache.commons.math.linear.NotPositiveDefiniteMatrixException;
import org.apache.commons.math.linear.NotSymmetricMatrixException;
import org.apache.commons.math.linear.OpenMapRealMatrix;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealMatrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CholeskyDecompositionImplEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 40;
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(int0, int0);
      assertNotNull(denseRealMatrix0);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      double double0 = (-2744.158458);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0, (double) int0, double0);
      assertNotNull(choleskyDecompositionImpl0);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      
      double double1 = choleskyDecompositionImpl0.getDeterminant();
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 40;
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(int0, int0);
      assertNotNull(denseRealMatrix0);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      double double0 = (-2744.158458);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0, (double) int0, double0);
      assertNotNull(choleskyDecompositionImpl0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      DenseRealMatrix denseRealMatrix1 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertFalse(denseRealMatrix1.equals((Object)denseRealMatrix0));
      assertFalse(denseRealMatrix0.equals((Object)denseRealMatrix1));
      assertNotNull(denseRealMatrix1);
      assertNotSame(denseRealMatrix1, denseRealMatrix0);
      assertNotSame(denseRealMatrix0, denseRealMatrix1);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(40, denseRealMatrix1.getRowDimension());
      assertEquals(Double.NaN, denseRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix1.isSquare());
      assertEquals(40, denseRealMatrix1.getColumnDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      DenseRealMatrix denseRealMatrix2 = (DenseRealMatrix)choleskyDecompositionImpl0.getLT();
      assertFalse(denseRealMatrix2.equals((Object)denseRealMatrix1));
      assertFalse(denseRealMatrix2.equals((Object)denseRealMatrix0));
      assertFalse(denseRealMatrix0.equals((Object)denseRealMatrix2));
      assertFalse(denseRealMatrix0.equals((Object)denseRealMatrix1));
      assertNotNull(denseRealMatrix2);
      assertNotSame(denseRealMatrix2, denseRealMatrix1);
      assertNotSame(denseRealMatrix2, denseRealMatrix0);
      assertNotSame(denseRealMatrix0, denseRealMatrix2);
      assertNotSame(denseRealMatrix0, denseRealMatrix1);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(40, denseRealMatrix2.getColumnDimension());
      assertEquals(Double.NaN, denseRealMatrix2.getFrobeniusNorm(), 0.01D);
      assertEquals(40, denseRealMatrix2.getRowDimension());
      assertEquals(true, denseRealMatrix2.isSquare());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 40;
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(int0, int0);
      assertNotNull(denseRealMatrix0);
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      
      double double0 = (-2744.158458);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0, (double) int0, double0);
      assertNotNull(choleskyDecompositionImpl0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      
      DenseRealMatrix denseRealMatrix1 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertFalse(denseRealMatrix0.equals((Object)denseRealMatrix1));
      assertFalse(denseRealMatrix1.equals((Object)denseRealMatrix0));
      assertNotNull(denseRealMatrix1);
      assertNotSame(denseRealMatrix0, denseRealMatrix1);
      assertNotSame(denseRealMatrix1, denseRealMatrix0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(40, denseRealMatrix1.getRowDimension());
      assertEquals(true, denseRealMatrix1.isSquare());
      assertEquals(Double.NaN, denseRealMatrix1.getFrobeniusNorm(), 0.01D);
      assertEquals(40, denseRealMatrix1.getColumnDimension());
      
      DenseRealMatrix denseRealMatrix2 = (DenseRealMatrix)choleskyDecompositionImpl0.getL();
      assertFalse(denseRealMatrix0.equals((Object)denseRealMatrix1));
      assertFalse(denseRealMatrix0.equals((Object)denseRealMatrix2));
      assertFalse(denseRealMatrix2.equals((Object)denseRealMatrix0));
      assertNotNull(denseRealMatrix2);
      assertNotSame(denseRealMatrix0, denseRealMatrix1);
      assertNotSame(denseRealMatrix0, denseRealMatrix2);
      assertSame(denseRealMatrix2, denseRealMatrix1);
      assertNotSame(denseRealMatrix2, denseRealMatrix0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(Double.NaN, denseRealMatrix2.getFrobeniusNorm(), 0.01D);
      assertEquals(40, denseRealMatrix2.getColumnDimension());
      assertEquals(true, denseRealMatrix2.isSquare());
      assertEquals(40, denseRealMatrix2.getRowDimension());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 40;
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(int0, int0);
      assertNotNull(denseRealMatrix0);
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0, (double) int0, (double) int0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not positive definite matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 1735.3;
      doubleArray0[2] = double0;
      doubleArray0[3] = doubleArray0[2];
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1735.3, 1735.3, 0.0}, doubleArray0, 0.01);
      assertNotNull(openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.4, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      
      OpenMapRealVector openMapRealVector1 = openMapRealVector0.mapPow(double0);
      assertArrayEquals(new double[] {0.0, 0.0, 1735.3, 1735.3, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealVector1);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.4, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(0.4, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      
      OpenMapRealMatrix openMapRealMatrix0 = openMapRealVector1.outerproduct(openMapRealVector1);
      assertArrayEquals(new double[] {0.0, 0.0, 1735.3, 1735.3, 0.0}, doubleArray0, 0.01);
      assertFalse(openMapRealVector0.equals((Object)openMapRealVector1));
      assertFalse(openMapRealVector1.equals((Object)openMapRealVector0));
      assertNotNull(openMapRealMatrix0);
      assertNotSame(openMapRealVector0, openMapRealVector1);
      assertNotSame(openMapRealVector1, openMapRealVector0);
      assertEquals(5, openMapRealVector0.getDimension());
      assertEquals(0.4, openMapRealVector0.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector0.getEpsilon(), 0.01D);
      assertEquals(5, openMapRealMatrix0.getRowDimension());
      assertEquals(5, openMapRealMatrix0.getColumnDimension());
      assertEquals(true, openMapRealMatrix0.isSquare());
      assertEquals(0.4, openMapRealVector1.getSparcity(), 0.01D);
      assertEquals(1.0E-12, openMapRealVector1.getEpsilon(), 0.01D);
      assertEquals(5, openMapRealVector1.getDimension());
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) openMapRealMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // not symmetric matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 4;
      int int1 = 9;
      OpenMapRealMatrix openMapRealMatrix0 = new OpenMapRealMatrix(int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(openMapRealMatrix0);
      assertEquals(false, openMapRealMatrix0.isSquare());
      assertEquals(9, openMapRealMatrix0.getColumnDimension());
      assertEquals(4, openMapRealMatrix0.getRowDimension());
      
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = null;
      try {
        choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) openMapRealMatrix0, (double) int1, (double) int1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // a 4x9 matrix was provided instead of a square matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int int0 = 40;
      DenseRealMatrix denseRealMatrix0 = new DenseRealMatrix(int0, int0);
      assertNotNull(denseRealMatrix0);
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      double double0 = (-2744.158458);
      CholeskyDecompositionImpl choleskyDecompositionImpl0 = new CholeskyDecompositionImpl((RealMatrix) denseRealMatrix0, (double) int0, double0);
      assertNotNull(choleskyDecompositionImpl0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      
      DecompositionSolver decompositionSolver0 = choleskyDecompositionImpl0.getSolver();
      assertNotNull(decompositionSolver0);
      assertEquals(Double.NaN, choleskyDecompositionImpl0.getDeterminant(), 0.01D);
      assertEquals(40, denseRealMatrix0.getRowDimension());
      assertEquals(40, denseRealMatrix0.getColumnDimension());
      assertEquals(true, denseRealMatrix0.isSquare());
      assertEquals(0.0, denseRealMatrix0.getFrobeniusNorm(), 0.01D);
      assertEquals(true, decompositionSolver0.isNonSingular());
  }
}
