/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:09:48 GMT 2014
 */

package org.apache.commons.math.geometry.euclidean.threed;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class RotationEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 1417.6;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.24482949767532208, rotation0.getQ2(), 0.01D);
      assertEquals(0.9320172381930114, rotation0.getQ1(), 0.01D);
      assertEquals(2.6005948164138495, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-0.26721224668626414), rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder1 = RotationOrder.ZYZ;
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotNull(rotationOrder1);
      assertEquals("ZYZ", rotationOrder1.toString());
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotSame(rotationOrder0, rotationOrder1);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-1.3139123712631344), 2.60059481641385, 1.3139123712631344}, doubleArray0, 0.01);
      assertEquals("ZYZ", rotationOrder1.toString());
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.24482949767532208, rotation0.getQ2(), 0.01D);
      assertEquals(0.9320172381930114, rotation0.getQ1(), 0.01D);
      assertEquals(2.6005948164138495, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-0.26721224668626414), rotation0.getQ0(), 0.01D);
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-657.88202787);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double1, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = null;
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = null;
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      double double0 = 1063.8074232629324;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.561537835586715), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(1.9491063495822742, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.827451061516382, rotation0.getQ1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.5707963267948966, 1.9491063495822742, (-1.5707963267948966)}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.561537835586715), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(1.9491063495822742, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.827451061516382, rotation0.getQ1(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 1417.6;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.24482949767532208, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9320172381930114, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(2.6005948164138495, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.26721224668626414), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals("YXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.7417132310031586, 2.399879422586635, 0.7417132310031586}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.24482949767532208, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9320172381930114, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(2.6005948164138495, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.26721224668626414), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals("YXY", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_K;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 301.206003;
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948966, 3.141592653589793}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      RotationOrder rotationOrder1 = RotationOrder.XYX;
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotNull(rotationOrder1);
      assertEquals("XYX", rotationOrder1.toString());
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      
      double double0 = (-527.56258463736);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals((-0.22167799792826226), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9686371971516504, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.11225348782426384), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5022200750338398, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.734723475976807E-18, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.22498116572523155, 0.22498116572523114, 0.22498116572523155}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals((-0.22167799792826226), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9686371971516504, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.11225348782426384), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5022200750338398, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.734723475976807E-18, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = (-1323.9275237908032);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, (-3.141592653589793)}, doubleArray0, 0.01);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = (-247.39651647739842);
      double double1 = (-990.62297868);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals((-247.39651647739842), rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-990.62297868), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-247.39651647739842), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-247.39651647739842), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      double double0 = 4.0;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.4161468365471424), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      
      double double0 = 4.0;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.4161468365471424), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-501.4245);
      double double1 = 0.9999999999;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double1, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.9999999999, rotation0.getQ1(), 0.01D);
      assertEquals(0.9999999999, rotation0.getQ3(), 0.01D);
      assertEquals(0.9999999999, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-501.4245), rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      double double0 = (-501.4245);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals((-0.6568822856027887), rotation0.getQ1(), 0.01D);
      assertEquals(2.421096114199658, rotation0.getAngle(), 0.01D);
      assertEquals((-0.11291784061238058), rotation0.getQ2(), 0.01D);
      assertEquals((-0.6568822856027887), rotation0.getQ3(), 0.01D);
      assertEquals(0.3525065772350212, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder1 = RotationOrder.YXZ;
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotNull(rotationOrder1);
      assertEquals("YXZ", rotationOrder1.toString());
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotSame(rotationOrder0, rotationOrder1);
      assertNotSame(rotationOrder1, rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {1.4530423534310362, 0.32020715616576895, 2.4416121333624567}, doubleArray0, 0.01);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals("YXZ", rotationOrder1.toString());
      assertEquals((-0.6568822856027887), rotation0.getQ1(), 0.01D);
      assertEquals(2.421096114199658, rotation0.getAngle(), 0.01D);
      assertEquals((-0.11291784061238058), rotation0.getQ2(), 0.01D);
      assertEquals((-0.6568822856027887), rotation0.getQ3(), 0.01D);
      assertEquals(0.3525065772350212, rotation0.getQ0(), 0.01D);
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = (-687.9576560096466);
      double double1 = (-1.0);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double1, double1, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.0014535732278677664), rotation0.getQ1(), 0.01D);
      assertEquals((-0.0014535732278677664), rotation0.getQ2(), 0.01D);
      assertEquals(0.005035330685899769, rotation0.getAngle(), 0.01D);
      assertEquals((-0.9999968306822845), rotation0.getQ0(), 0.01D);
      assertEquals((-0.0014535732278677664), rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-0.002902927871630119), (-0.0029113671051401854), (-0.002902927871630119)}, doubleArray0, 0.01);
      assertEquals((-0.0014535732278677664), rotation0.getQ1(), 0.01D);
      assertEquals((-0.0014535732278677664), rotation0.getQ2(), 0.01D);
      assertEquals(0.005035330685899769, rotation0.getAngle(), 0.01D);
      assertEquals((-0.9999968306822845), rotation0.getQ0(), 0.01D);
      assertEquals((-0.0014535732278677664), rotation0.getQ3(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 55.9079613;
      double double1 = (-1810.0356386003);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(55.9079613, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals((-1810.0356386003), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(55.9079613, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(55.9079613, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      RotationOrder rotationOrder1 = RotationOrder.XZY;
      //  // Unstable assertion: assertNotSame(rotationOrder1, rotationOrder0);
      //  // Unstable assertion: assertNotNull(rotationOrder1);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder1.toString());
      //  // Unstable assertion: assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 0.5;
      Vector3D vector3D0 = new Vector3D(double0, double0, double0);
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.5, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.6154797086703875, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.75, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.8660254037844386, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.5, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.5, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.6154797086703875, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.75, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.8660254037844386, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.5, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.5, vector3D0.getY(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      double double1 = Rotation.distance(rotation0, rotation0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 0.5;
      Vector3D vector3D0 = new Vector3D(double0, double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.75, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.5, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.6154797086703875, vector3D0.getDelta(), 0.01D);
      assertEquals(0.5, vector3D0.getZ(), 0.01D);
      assertEquals(0.8660254037844386, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.5, vector3D0.getY(), 0.01D);
      assertEquals(0.5, vector3D0.getX(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(0.75, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.5, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.6154797086703875, vector3D0.getDelta(), 0.01D);
      assertEquals(0.5, vector3D0.getZ(), 0.01D);
      assertEquals(0.8660254037844386, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.5, vector3D0.getY(), 0.01D);
      assertEquals(0.5, vector3D0.getX(), 0.01D);
      
      double double1 = Rotation.distance(rotation0, rotation0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(0.75, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.5, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.6154797086703875, vector3D0.getDelta(), 0.01D);
      assertEquals(0.5, vector3D0.getZ(), 0.01D);
      assertEquals(0.8660254037844386, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.5, vector3D0.getY(), 0.01D);
      assertEquals(0.5, vector3D0.getX(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      
      double double0 = 4.0;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.4161468365471424), rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      
      double double1 = rotation0.getAngle();
      assertEquals(Double.NaN, double1, 0.01D);
      assertEquals((-0.4161468365471424), rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double double0 = (-527.56258463736);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals((-0.11225348782426384), rotation0.getQ2(), 0.01D);
      assertEquals((-0.22167799792826226), rotation0.getQ1(), 0.01D);
      assertEquals(0.9686371971516504, rotation0.getQ0(), 0.01D);
      assertEquals(1.734723475976807E-18, rotation0.getQ3(), 0.01D);
      assertEquals(0.5022200750338398, rotation0.getAngle(), 0.01D);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertNotNull(vector3D0);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.9999999999999999, vector3D0.getNorm(), 0.01D);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.45176186376206035, vector3D0.getY(), 0.01D);
      assertEquals(0.8921385646020631, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-6.981359116840623E-18), vector3D0.getDelta(), 0.01D);
      assertEquals(0.8921385646020631, vector3D0.getX(), 0.01D);
      assertEquals((-6.981359116840622E-18), vector3D0.getZ(), 0.01D);
      assertEquals(1.3439004283641234, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.4687392306462222, vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.11225348782426384), rotation0.getQ2(), 0.01D);
      assertEquals((-0.22167799792826226), rotation0.getQ1(), 0.01D);
      assertEquals(0.9686371971516504, rotation0.getQ0(), 0.01D);
      assertEquals(1.734723475976807E-18, rotation0.getQ3(), 0.01D);
      assertEquals(0.5022200750338398, rotation0.getAngle(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      double double0 = 4.0;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals((-0.4161468365471424), rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals((-0.4161468365471424), rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      assertNotNull(vector3D0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Vector3D vector3D1 = vector3D0.negate();
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ2(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertNotNull(vector3D0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation1 = new Rotation(vector3D0, vector3D0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.MINUS_K;
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = (-0.2499999701976776);
      Vector3D vector3D0 = Vector3D.PLUS_J;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.MINUS_K;
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Vector3D vector3D2 = new Vector3D(double0, vector3D0, double0, vector3D0, double0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D2);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(0.31249992549419847, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D2.getAlpha(), 0.01D);
      assertEquals(0.5590169277349287, vector3D2.getNorm(), 0.01D);
      assertEquals(0.4636476090008061, vector3D2.getDelta(), 0.01D);
      assertEquals(0.2499999701976776, vector3D2.getZ(), 0.01D);
      assertEquals((-0.4999999403953552), vector3D2.getY(), 0.01D);
      assertEquals(0.7499999105930328, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.4999999403953552, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals(2.0344439357957027, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.5257311121191336, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.8506508083520399, rotation0.getQ1(), 0.01D);
      assertEquals(0.31249992549419847, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D2.getAlpha(), 0.01D);
      assertEquals(0.5590169277349287, vector3D2.getNorm(), 0.01D);
      assertEquals(0.4636476090008061, vector3D2.getDelta(), 0.01D);
      assertEquals(0.2499999701976776, vector3D2.getZ(), 0.01D);
      assertEquals((-0.4999999403953552), vector3D2.getY(), 0.01D);
      assertEquals(0.7499999105930328, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.4999999403953552, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.ZERO;
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      assertNotNull(vector3D0);
      assertEquals(true, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.ZERO;
      assertNotSame(vector3D1, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double double0 = (-0.2499999701976776);
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      doubleArray0[2] = doubleArray1;
      assertNotNull(doubleArray0[2]);
      
      double double1 = 0.087;
      Rotation rotation0 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.5812835933686797, rotation0.getQ1(), 0.01D);
      assertEquals(0.1512009231333318, rotation0.getQ0(), 0.01D);
      assertEquals(1.2885692248740837, rotation0.getAngle(), 0.01D);
      assertEquals((-0.1512009231333318), rotation0.getQ2(), 0.01D);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double double0 = (-0.2499999701976776);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      double double1 = 0.087;
      doubleArray0[2] = doubleArray0[1];
      assertNotNull(doubleArray0[2]);
      
      Rotation rotation0 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation0);
      assertEquals(1.2885692248740837, rotation0.getAngle(), 0.01D);
      assertEquals(0.5812835933686797, rotation0.getQ2(), 0.01D);
      assertEquals((-0.1512009231333318), rotation0.getQ1(), 0.01D);
      assertEquals((-0.1512009231333318), rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[][] doubleArray0 = new double[3][6];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double double0 = 0.0;
      doubleArray0[1] = doubleArray0[0];
      assertNotNull(doubleArray0[1]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[2]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 0.0;
      double[][] doubleArray0 = new double[3][8];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x8 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      double double0 = (-7.44321345601866E-11);
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[][] doubleArray0 = new double[2][6];
      double double0 = 1417.6;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 2x6 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("ZYX", rotationOrder0.toString());
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("ZYX", rotationOrder0.toString());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      
      double double0 = 2406.432;
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      double double0 = rotation0.getQ2();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = (-1323.9275237908032);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      
      double double1 = rotation0.getQ0();
      assertEquals((-0.5), double1, 0.01D);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double double0 = (-0.1);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.1), rotation0.getQ3(), 0.01D);
      assertEquals((-0.1), rotation0.getQ1(), 0.01D);
      assertEquals((-0.1), rotation0.getQ0(), 0.01D);
      assertEquals((-0.1), rotation0.getQ2(), 0.01D);
      assertEquals(2.9412578112666736, rotation0.getAngle(), 0.01D);
      
      double double1 = Rotation.distance(rotation0, rotation0);
      assertEquals(3.061571304881815, double1, 0.01D);
      assertEquals((-0.1), rotation0.getQ3(), 0.01D);
      assertEquals((-0.1), rotation0.getQ1(), 0.01D);
      assertEquals((-0.1), rotation0.getQ0(), 0.01D);
      assertEquals((-0.1), rotation0.getQ2(), 0.01D);
      assertEquals(2.9412578112666736, rotation0.getAngle(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      
      double double0 = 1614.43194;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals((-0.17247519541953193), rotation0.getQ2(), 0.01D);
      assertEquals((-0.9850138613060195), rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.3466839451537841, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      
      double double1 = rotation0.getQ3();
      assertEquals(-0.0, double1, 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals("YZX", rotationOrder0.toString());
      assertEquals((-0.17247519541953193), rotation0.getQ2(), 0.01D);
      assertEquals((-0.9850138613060195), rotation0.getQ0(), 0.01D);
      assertEquals(-0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.3466839451537841, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals("ZYX", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      double double0 = 4.0;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.4161468365471424), rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Rotation rotation1 = rotation0.revert();
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      assertNotNull(rotation1);
      assertEquals((-0.4161468365471424), rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ2(), 0.01D);
      assertEquals(0.4161468365471424, rotation1.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ3(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
  }
}
