/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:20:12 GMT 2014
 */

package org.apache.commons.math.geometry.euclidean.threed;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.geometry.Vector;
import org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class RotationEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      double double0 = (-1856.8665340354821);
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = null;
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = 3593.3460511774247;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.4020483663274927, rotation0.getAngle(), 0.01D);
      assertEquals(0.3126411170187459, rotation0.getQ1(), 0.01D);
      assertEquals(0.5641643546899257, rotation0.getQ3(), 0.01D);
      assertEquals(0.764181989349769, rotation0.getQ0(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.4020483663274927, rotation0.getAngle(), 0.01D);
      assertEquals(0.3126411170187459, rotation0.getQ1(), 0.01D);
      assertEquals(0.5641643546899257, rotation0.getQ3(), 0.01D);
      assertEquals(0.764181989349769, rotation0.getQ0(), 0.01D);
      assertArrayEquals(new double[] {2.5056481242909983, 0.6359445292987956, 2.5056481242909983}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("ZXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("ZXZ", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 978.3270239347593;
      boolean boolean0 = true;
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals(0.5, rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertEquals(0.5, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ1(), 0.01D);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      double double0 = 1587.1877913289;
      double double1 = 0.0;
      Rotation rotation0 = new Rotation(double0, double1, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.7071067811865476, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.7071067811865476, rotation0.getQ3(), 0.01D);
      assertEquals(1.5707963267948968, rotation0.getAngle(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(1.5707963267948968, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals((-0.7071067811865476), rotation1.getQ0(), 0.01D);
      assertEquals(0.7071067811865476, rotation1.getQ3(), 0.01D);
      assertEquals(0.7071067811865476, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.7071067811865476, rotation0.getQ3(), 0.01D);
      assertEquals(1.5707963267948968, rotation0.getAngle(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
      
      Rotation rotation2 = rotation1.applyInverseTo(rotation0);
      assertNotNull(rotation2);
      assertEquals(1.0000000000000002, rotation2.getQ3(), 0.01D);
      assertEquals(0.0, rotation2.getQ2(), 0.01D);
      assertEquals(0.0, rotation2.getQ0(), 0.01D);
      assertEquals(0.0, rotation2.getQ1(), 0.01D);
      assertEquals(3.141592653589793, rotation2.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(1.5707963267948968, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals((-0.7071067811865476), rotation1.getQ0(), 0.01D);
      assertEquals(0.7071067811865476, rotation1.getQ3(), 0.01D);
      assertEquals(0.7071067811865476, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.7071067811865476, rotation0.getQ3(), 0.01D);
      assertEquals(1.5707963267948968, rotation0.getAngle(), 0.01D);
      assertFalse(rotation2.equals((Object)rotation1));
      assertFalse(rotation2.equals((Object)rotation0));
      assertFalse(double1 == double0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation1.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation2));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double1);
      assertNotSame(rotation2, rotation1);
      assertNotSame(rotation2, rotation0);
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation1, rotation2);
      assertNotSame(rotation0, rotation2);
      assertNotSame(rotation0, rotation1);
      
      try {
        double[] doubleArray0 = rotation2.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      double double0 = 1587.1877913289;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(1587.1877913289, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(1587.1877913289, rotation0.getQ2(), 0.01D);
      assertEquals(1587.1877913289, rotation0.getQ1(), 0.01D);
      assertEquals(1587.1877913289, rotation0.getQ0(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 238.68080414061666;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948968, 3.141592653589793}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      double double0 = 2981.445421;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(3.06759991030368, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.03698793253732097), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double0 = 0.0;
      double double1 = (-1619.8966392377563);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865476), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-0.7071067811865476), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 238.68080414061666;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals("ZYZ", rotationOrder0.toString());
      assertArrayEquals(new double[] {1.5707963267948966, 1.5707963267948968, 3.141592653589793}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      double double0 = 3.0;
      Vector3D vector3D1 = vector3D0.subtract(double0, (Vector<Euclidean3D>) vector3D0);
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(2.0, vector3D1.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(2.0, vector3D1.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(4.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(2.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(2.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-1.0), rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double double0 = (-1616.6458818);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(2.792220500941147, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5689683132168355), rotation0.getQ1(), 0.01D);
      assertEquals((-0.8037841539483941), rotation0.getQ2(), 0.01D);
      assertEquals(0.1737990000450339, rotation0.getQ0(), 0.01D);
      assertEquals((-5.551115123125783E-17), rotation0.getQ3(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(2.792220500941147, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5689683132168355), rotation0.getQ1(), 0.01D);
      assertEquals((-0.8037841539483941), rotation0.getQ2(), 0.01D);
      assertEquals(0.1737990000450339, rotation0.getQ0(), 0.01D);
      assertEquals((-5.551115123125783E-17), rotation0.getQ3(), 0.01D);
      assertArrayEquals(new double[] {1.2743347987434206, 1.867257854846373, 1.2743347987434204}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 72.94172359457923;
      double double1 = (-2950.13754);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-2950.13754), rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(72.94172359457923, rotation0.getQ0(), 0.01D);
      assertEquals((-2950.13754), rotation0.getQ2(), 0.01D);
      assertEquals(72.94172359457923, rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("ZYX", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = (-1689.52781513);
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertArrayEquals(new double[] {(-1.5707963267948966), 0.0, (-1.5707963267948966)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 238.68080414061666;
      double double1 = (-1736.954620891977);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.13367924806897685, rotation0.getQ2(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ1(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ0(), 0.01D);
      assertEquals(2.8734313960704667, rotation0.getAngle(), 0.01D);
      assertEquals((-0.9728255629387721), rotation0.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.13367924806897685, rotation0.getQ2(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ1(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ0(), 0.01D);
      assertEquals(2.8734313960704667, rotation0.getAngle(), 0.01D);
      assertEquals((-0.9728255629387721), rotation0.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertArrayEquals(new double[] {(-0.30843948321148923), 0.22627895465585254, 2.833153170378304}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-2778.6235047797);
      double double1 = 361.883505294;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(361.883505294, rotation0.getQ1(), 0.01D);
      assertEquals((-2778.6235047797), rotation0.getQ2(), 0.01D);
      assertEquals((-2778.6235047797), rotation0.getQ0(), 0.01D);
      assertEquals(361.883505294, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 238.68080414061666;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 238.68080414061666;
      double double1 = (-1736.954620891977);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.8734313960704667, rotation0.getAngle(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ0(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ2(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ1(), 0.01D);
      assertEquals((-0.9728255629387721), rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(2.8734313960704667, rotation0.getAngle(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ0(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ2(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ1(), 0.01D);
      assertEquals((-0.9728255629387721), rotation0.getQ3(), 0.01D);
      assertEquals("XZY", rotationOrder0.toString());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {(-2.833153170378304), 0.22627895465585254, (-2.833153170378304)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3710.58117803);
      double double2 = 230.21165619149966;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double2, double2, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(230.21165619149966, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals((-3710.58117803), rotation0.getQ1(), 0.01D);
      assertEquals(230.21165619149966, rotation0.getQ2(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 238.68080414061666;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      assertNotNull(rotationOrder0);
      assertEquals("XZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      double double0 = 0.19999954104423523;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.9950041881875606, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = rotationOrder0.getA1();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.7071067811865476, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.7071067811865475, rotation0.getQ2(), 0.01D);
      assertEquals(1.5707963267948963, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 238.68080414061666;
      double double1 = (-1736.954620891977);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.9487713636834822, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7005239117669252), rotation0.getQ2(), 0.01D);
      assertEquals(0.0962613579935653, rotation0.getQ0(), 0.01D);
      assertEquals(0.0962613579935653, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7005239117669252), rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = rotation0.getAngle();
      assertEquals(2.9487713636834822, double2, 0.01D);
      assertEquals(2.9487713636834822, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7005239117669252), rotation0.getQ2(), 0.01D);
      assertEquals(0.0962613579935653, rotation0.getQ0(), 0.01D);
      assertEquals(0.0962613579935653, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7005239117669252), rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 238.68080414061666;
      double double1 = (-1736.954620891977);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.8734313960704667, rotation0.getAngle(), 0.01D);
      assertEquals((-0.9728255629387721), rotation0.getQ3(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ1(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ2(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ0(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Vector3D vector3D0 = Vector3D.PLUS_K;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation1 = new Rotation(vector3D0, double1);
      assertNotNull(rotation1);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(2.7954761104110344, rotation1.getAngle(), 0.01D);
      assertEquals(0.17219573907717386, rotation1.getQ0(), 0.01D);
      assertEquals(0.9850627530485893, rotation1.getQ3(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(rotation1, rotation0);
      
      double double2 = Rotation.distance(rotation0, rotation1);
      assertEquals(0.7235207995389821, double2, 0.01D);
      assertEquals(2.8734313960704667, rotation0.getAngle(), 0.01D);
      assertEquals((-0.9728255629387721), rotation0.getQ3(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ1(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ2(), 0.01D);
      assertEquals(0.13367924806897685, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertEquals(2.7954761104110344, rotation1.getAngle(), 0.01D);
      assertEquals(0.17219573907717386, rotation1.getQ0(), 0.01D);
      assertEquals(0.9850627530485893, rotation1.getQ3(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double0 = (-2561.9542944406417);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double1 = rotation0.getAngle();
      assertEquals(3.110802753430971, double1, 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 0.25;
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(0.9613526445708216, rotation0.getQ0(), 0.01D);
      assertEquals((-0.24547363123563762), rotation0.getQ1(), 0.01D);
      assertEquals(1.734723475976807E-18, rotation0.getQ2(), 0.01D);
      assertEquals(0.5578450653641399, rotation0.getAngle(), 0.01D);
      assertEquals((-0.12467473338522769), rotation0.getQ3(), 0.01D);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertNotNull(vector3D0);
      assertEquals(1.0000000000000004, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.4528357594771734, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.8915939518293806, vector3D0.getX(), 0.01D);
      assertEquals((-7.066842443502998E-18), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0000000000000002, vector3D0.getNorm(), 0.01D);
      assertEquals(1.344429711306554, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.8915939518293806, vector3D0.getNormInf(), 0.01D);
      assertEquals((-6.300753981158434E-18), vector3D0.getY(), 0.01D);
      assertEquals(0.4699433300002127, vector3D0.getDelta(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(0.9613526445708216, rotation0.getQ0(), 0.01D);
      assertEquals((-0.24547363123563762), rotation0.getQ1(), 0.01D);
      assertEquals(1.734723475976807E-18, rotation0.getQ2(), 0.01D);
      assertEquals(0.5578450653641399, rotation0.getAngle(), 0.01D);
      assertEquals((-0.12467473338522769), rotation0.getQ3(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double double0 = 14.0;
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("XYX", rotationOrder0.toString());
      
      Vector3D vector3D1 = new Vector3D(double0, double0, double0);
      assertNotNull(vector3D1);
      assertEquals(14.0, vector3D1.getY(), 0.01D);
      assertEquals(14.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(24.24871130596428, vector3D1.getNorm(), 0.01D);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01D);
      assertEquals(42.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(588.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.6154797086703873, vector3D1.getDelta(), 0.01D);
      assertEquals(14.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(14.0, vector3D1.getZ(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D1, vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(14.0, vector3D1.getY(), 0.01D);
      assertEquals(14.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(24.24871130596428, vector3D1.getNorm(), 0.01D);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01D);
      assertEquals(42.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(588.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.6154797086703873, vector3D1.getDelta(), 0.01D);
      assertEquals(14.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(14.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      Vector3D vector3D2 = rotation0.getAxis();
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(14.0, vector3D1.getY(), 0.01D);
      assertEquals(14.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(24.24871130596428, vector3D1.getNorm(), 0.01D);
      assertEquals(0.7853981633974483, vector3D1.getAlpha(), 0.01D);
      assertEquals(42.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(588.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.6154797086703873, vector3D1.getDelta(), 0.01D);
      assertEquals(14.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(14.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertTrue(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertTrue(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double0 = (-2561.9542944406417);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertNotNull(vector3D0);
      assertEquals((-0.7853849962502895), vector3D0.getDelta(), 0.01D);
      assertEquals(1.4193266361646932, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.005131695072281396, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.707097470546206), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.707097470546206), vector3D0.getY(), 0.01D);
      assertEquals(0.707097470546206, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.563539045877534), vector3D0.getAlpha(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      
      Rotation rotation1 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation1);
      assertEquals((-0.7853849962502895), vector3D0.getDelta(), 0.01D);
      assertEquals(1.4193266361646932, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.005131695072281396, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals((-0.707097470546206), vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-0.707097470546206), vector3D0.getY(), 0.01D);
      assertEquals(0.707097470546206, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals((-1.563539045877534), vector3D0.getAlpha(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals(1.0, rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals(0.0, rotation1.getQ1(), 0.01D);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Vector3D vector3D1 = rotationOrder0.getA3();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.7071067811865475, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double0 = (-2561.9542944406417);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotation0.getAxis();
      assertNotNull(vector3D0);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.707097470546206, vector3D0.getNormInf(), 0.01D);
      assertEquals((-0.7853849962502895), vector3D0.getDelta(), 0.01D);
      assertEquals(1.4193266361646932, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.707097470546206), vector3D0.getZ(), 0.01D);
      assertEquals((-0.707097470546206), vector3D0.getY(), 0.01D);
      assertEquals((-1.563539045877534), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.005131695072281396, vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = rotationOrder0.getA3();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D1, vector3D0);
      
      Vector3D vector3D2 = Vector3D.MINUS_I;
      assertNotNull(vector3D2);
      assertEquals((-1.0), vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      
      Rotation rotation1 = new Rotation(vector3D1, vector3D0, vector3D2, vector3D1);
      assertNotNull(rotation1);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D2.getDelta(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNorm(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(1.0, vector3D2.getNormSq(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.707097470546206, vector3D0.getNormInf(), 0.01D);
      assertEquals((-0.7853849962502895), vector3D0.getDelta(), 0.01D);
      assertEquals(1.4193266361646932, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals((-0.707097470546206), vector3D0.getZ(), 0.01D);
      assertEquals((-0.707097470546206), vector3D0.getY(), 0.01D);
      assertEquals((-1.563539045877534), vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.005131695072281396, vector3D0.getX(), 0.01D);
      assertEquals((-0.5018110244935252), rotation1.getQ3(), 0.01D);
      assertEquals(0.4981823919979093, rotation1.getQ2(), 0.01D);
      assertEquals((-0.4981823919979093), rotation1.getQ1(), 0.01D);
      assertEquals(2.0902101895695706, rotation1.getAngle(), 0.01D);
      assertEquals(0.5018110244935253, rotation1.getQ0(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(vector3D1, vector3D2);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(rotation1, rotation0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA3();
      assertNotNull(vector3D0);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals("YXZ", rotationOrder0.toString());
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals("YZX", rotationOrder0.toString());
      
      Vector3D vector3D1 = vector3D0.negate();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Vector3D vector3D2 = vector3D0.add((Vector<Euclidean3D>) vector3D1);
      assertNotNull(vector3D2);
      assertEquals(Double.NaN, vector3D2.getDelta(), 0.01D);
      assertEquals(0.0, vector3D2.getZ(), 0.01D);
      assertEquals(0.0, vector3D2.getAlpha(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.0, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(0.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(0.0, vector3D2.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals((-3.141592653589793), vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(-0.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals((-1.5707963267948966), vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals((-1.0), vector3D1.getZ(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D2, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 0.25;
      Vector3D vector3D0 = new Vector3D(double0, double0);
      assertNotNull(vector3D0);
      assertEquals(0.25, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.25000000000000006, vector3D0.getDelta(), 0.01D);
      assertEquals(0.9387912809451863, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.4259080095018108, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.24740395925452294, vector3D0.getZ(), 0.01D);
      assertEquals(0.9999999999999999, vector3D0.getNorm(), 0.01D);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.9387912809451863, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.2397127693021015, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(0.25, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.25000000000000006, vector3D0.getDelta(), 0.01D);
      assertEquals(0.9387912809451863, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.4259080095018108, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.24740395925452294, vector3D0.getZ(), 0.01D);
      assertEquals(0.9999999999999999, vector3D0.getNorm(), 0.01D);
      assertEquals(0.9999999999999999, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.9387912809451863, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.2397127693021015, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D1, vector3D1, vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double0 = (-2561.9542944406417);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      
      double double1 = 0.0;
      Rotation rotation1 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation1);
      assertEquals("ZXY", rotationOrder0.toString());
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals(3.110802753430971, rotation1.getAngle(), 0.01D);
      assertEquals(0.7070136795641608, rotation1.getQ2(), 0.01D);
      assertEquals(0.015394341974573903, rotation1.getQ0(), 0.01D);
      assertEquals(0.707013679564161, rotation1.getQ3(), 0.01D);
      assertEquals((-0.005131086966910394), rotation1.getQ1(), 0.01D);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double double0 = 14.0;
      double double1 = 0.0;
      double double2 = 1637.7953414526537;
      Rotation rotation0 = new Rotation(rotationOrder0, double1, double0, double2);
      assertNotNull(rotation0);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(0.32232122485169773, rotation0.getQ2(), 0.01D);
      assertEquals((-0.6569367132625924), rotation0.getQ1(), 0.01D);
      assertEquals(2.3838575300035885, rotation0.getAngle(), 0.01D);
      assertEquals(0.5724861735502303, rotation0.getQ3(), 0.01D);
      assertEquals((-0.3698685764858366), rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(0.32232122485169773, rotation0.getQ2(), 0.01D);
      assertEquals((-0.6569367132625924), rotation0.getQ1(), 0.01D);
      assertEquals(2.3838575300035885, rotation0.getAngle(), 0.01D);
      assertEquals(0.5724861735502303, rotation0.getQ3(), 0.01D);
      assertEquals((-0.3698685764858366), rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      Rotation rotation1 = new Rotation(doubleArray0, double0);
      assertNotNull(rotation1);
      assertEquals((-0.32232122485169773), rotation1.getQ2(), 0.01D);
      assertEquals(2.3838575300035885, rotation1.getAngle(), 0.01D);
      assertEquals(0.6569367132625925, rotation1.getQ1(), 0.01D);
      assertEquals((-0.5724861735502303), rotation1.getQ3(), 0.01D);
      assertEquals(0.3698685764858366, rotation1.getQ0(), 0.01D);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals(0.32232122485169773, rotation0.getQ2(), 0.01D);
      assertEquals((-0.6569367132625924), rotation0.getQ1(), 0.01D);
      assertEquals(2.3838575300035885, rotation0.getAngle(), 0.01D);
      assertEquals(0.5724861735502303, rotation0.getQ3(), 0.01D);
      assertEquals((-0.3698685764858366), rotation0.getQ0(), 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(rotation0.equals((Object)rotation1));
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray0[0];
      assertNotNull(doubleArray0[1]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[1]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      double double0 = (-115.36473077326252);
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x2 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[][] doubleArray0 = new double[6][5];
      double[] doubleArray1 = new double[9];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[0]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 6x5 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = (-165.94676966602);
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = 238.68080414061666;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      
      double double1 = rotation0.getQ2();
      assertEquals(0.49999999999999994, double1, 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double0 = (-2561.9542944406417);
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      
      double double1 = rotation0.getQ0();
      assertEquals((-0.0153943419745739), double1, 0.01D);
      assertEquals(3.110802753430971, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ2(), 0.01D);
      assertEquals((-0.0153943419745739), rotation0.getQ0(), 0.01D);
      assertEquals(0.005131086966910392, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7070136795641608), rotation0.getQ3(), 0.01D);
      assertEquals("ZXY", rotationOrder0.toString());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      doubleArray0[2] = doubleArray1;
      assertNotNull(doubleArray0[2]);
      
      Rotation rotation0 = new Rotation(doubleArray0, doubleArray1[1]);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      double double0 = rotation0.getQ1();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.5, rotation0.getQ0(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double double0 = 0.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      
      double double1 = rotation0.getQ3();
      assertEquals(0.0, double1, 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      double double0 = 238.68080414061666;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      
      double double1 = Rotation.distance(rotation0, rotation0);
      assertEquals(0.0, double1, 0.01D);
      assertEquals(2.094395102393195, rotation0.getAngle(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ1(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ0(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ2(), 0.01D);
      assertEquals(0.49999999999999994, rotation0.getQ3(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double double0 = 0.25;
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals((-0.12467473338522769), rotation0.getQ3(), 0.01D);
      assertEquals(0.5578450653641399, rotation0.getAngle(), 0.01D);
      assertEquals(0.9613526445708216, rotation0.getQ0(), 0.01D);
      assertEquals(1.734723475976807E-18, rotation0.getQ2(), 0.01D);
      assertEquals((-0.24547363123563762), rotation0.getQ1(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals((-0.12467473338522769), rotation0.getQ3(), 0.01D);
      assertEquals(0.5578450653641399, rotation0.getAngle(), 0.01D);
      assertEquals(0.9613526445708216, rotation0.getQ0(), 0.01D);
      assertEquals(1.734723475976807E-18, rotation0.getQ2(), 0.01D);
      assertEquals((-0.24547363123563762), rotation0.getQ1(), 0.01D);
      assertArrayEquals(new double[] {0.25, 0.25000000000000155, 0.25}, doubleArray0, 0.01);
  }
}
