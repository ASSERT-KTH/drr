/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:40:58 GMT 2014
 */

package org.apache.commons.math.geometry.euclidean.threed;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.MathRuntimeException;
import org.apache.commons.math.geometry.Vector;
import org.apache.commons.math.geometry.euclidean.threed.CardanEulerSingularityException;
import org.apache.commons.math.geometry.euclidean.threed.Euclidean3D;
import org.apache.commons.math.geometry.euclidean.threed.NotARotationMatrixException;
import org.apache.commons.math.geometry.euclidean.threed.Rotation;
import org.apache.commons.math.geometry.euclidean.threed.RotationOrder;
import org.apache.commons.math.geometry.euclidean.threed.Vector3D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class RotationEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYZ", rotationOrder0.toString());
      
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      double double0 = 0.1977216110889636;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9951172492879196, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.945964501;
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.45554314746844304), rotation0.getQ3(), 0.01D);
      assertEquals(0.5207401937533203, rotation0.getQ0(), 0.01D);
      assertEquals(2.0461571571628023, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-0.7220180686134517), rotation0.getQ1(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      
      RotationOrder rotationOrder1 = RotationOrder.ZYZ;
      assertNotNull(rotationOrder1);
      assertEquals("ZYZ", rotationOrder1.toString());
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertNotSame(rotationOrder1, rotationOrder0);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder1);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-0.8520800196204099), 1.6134294232802824, 2.2895126339693834}, doubleArray0, 0.01);
      assertEquals((-0.45554314746844304), rotation0.getQ3(), 0.01D);
      assertEquals(0.5207401937533203, rotation0.getQ0(), 0.01D);
      assertEquals(2.0461571571628023, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-0.7220180686134517), rotation0.getQ1(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals("ZYZ", rotationOrder1.toString());
      assertFalse(rotationOrder0.equals((Object)rotationOrder1));
      assertFalse(rotationOrder1.equals((Object)rotationOrder0));
      assertNotSame(rotationOrder0, rotationOrder1);
      assertNotSame(rotationOrder1, rotationOrder0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-33.034839661140666);
      double double1 = (-0.06737303690176832);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double1, double1, double1, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.06737303690176832), rotation0.getQ1(), 0.01D);
      assertEquals((-0.06737303690176832), rotation0.getQ0(), 0.01D);
      assertEquals(3.0067444327654256, rotation0.getAngle(), 0.01D);
      assertEquals((-33.034839661140666), rotation0.getQ3(), 0.01D);
      assertEquals((-0.06737303690176832), rotation0.getQ2(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      assertNotNull(rotationOrder0);
      assertEquals("YZY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {2.3582339413954756, 2.950743419393231, 2.354155038989214}, doubleArray0, 0.01);
      assertEquals("YZY", rotationOrder0.toString());
      assertEquals((-0.06737303690176832), rotation0.getQ1(), 0.01D);
      assertEquals((-0.06737303690176832), rotation0.getQ0(), 0.01D);
      assertEquals(3.0067444327654256, rotation0.getAngle(), 0.01D);
      assertEquals((-33.034839661140666), rotation0.getQ3(), 0.01D);
      assertEquals((-0.06737303690176832), rotation0.getQ2(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      double double0 = 405.48560362562;
      double double1 = 0.0;
      double double2 = 0.0;
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double1, double2);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.10985349953218668), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.9939477896954809), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(2.9214413410531206, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      Vector3D vector3D0 = Vector3D.PLUS_I;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = rotation0.applyTo(vector3D0);
      //  // Unstable assertion: assertNotNull(vector3D1);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.2201513125366736, vector3D1.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isNaN());
      //  // Unstable assertion: assertEquals((-0.9758644172810638), vector3D1.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.1942417033817248, vector3D1.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.21837728610066098, vector3D1.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9758644172810638, vector3D1.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D1.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.10985349953218668), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.9939477896954809), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(2.9214413410531206, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertFalse(vector3D1.equals((Object)vector3D0));
      //  // Unstable assertion: assertFalse(vector3D0.equals((Object)vector3D1));
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertNotSame(vector3D1, vector3D0);
      //  // Unstable assertion: assertNotSame(vector3D0, vector3D1);
      
      Rotation rotation1 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation1);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.2201513125366736, vector3D1.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isNaN());
      //  // Unstable assertion: assertEquals((-0.9758644172810638), vector3D1.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D1.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.1942417033817248, vector3D1.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.21837728610066098, vector3D1.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.9758644172810638, vector3D1.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D1.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.9939477896954808), rotation1.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, rotation1.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.10985349953218666), rotation1.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation1.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation1.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.10985349953218668), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-0.9939477896954809), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(2.9214413410531206, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertFalse(vector3D1.equals((Object)vector3D0));
      //  // Unstable assertion: assertFalse(vector3D0.equals((Object)vector3D1));
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(rotation1.equals((Object)rotation0));
      //  // Unstable assertion: assertFalse(rotation0.equals((Object)rotation1));
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertNotSame(vector3D1, vector3D0);
      //  // Unstable assertion: assertNotSame(vector3D0, vector3D1);
      //  // Unstable assertion: assertNotSame(rotation1, rotation0);
      //  // Unstable assertion: assertNotSame(rotation0, rotation1);
      
      try {
        double[] doubleArray0 = rotation1.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.YZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA1();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("YZY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-2047.9549033);
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.8091981148506248, rotation0.getAngle(), 0.01D);
      assertEquals(0.9192603021826723, rotation0.getQ0(), 0.01D);
      assertEquals((-0.34969750893923196), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-0.1807543888062415), rotation0.getQ1(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.3635068405451225, 0.3635068405451215, 0.3635068405451225}, doubleArray0, 0.01);
      assertEquals("YXY", rotationOrder0.toString());
      assertEquals(0.8091981148506248, rotation0.getAngle(), 0.01D);
      assertEquals(0.9192603021826723, rotation0.getQ0(), 0.01D);
      assertEquals((-0.34969750893923196), rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals((-0.1807543888062415), rotation0.getQ1(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.negate();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D1);
      assertNotNull(rotation0);
      assertEquals(-0.0, rotation0.getQ2(), 0.01D);
      assertEquals((-1.0), rotation0.getQ3(), 0.01D);
      assertEquals(-0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D1.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      assertNotNull(rotationOrder0);
      assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals((-1.0), vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      
      Vector3D vector3D0 = rotationOrder0.getA2();
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals("XZX", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(1.5707963267948966, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1.5830993332061267E-10;
      double double1 = 0.10526403784751892;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.14159265058193, rotation0.getAngle(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ1(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ2(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ0(), 0.01D);
      assertEquals(1.0, rotation0.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 0.945964501;
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(0.5207401937533203, rotation0.getQ0(), 0.01D);
      assertEquals((-0.7220180686134517), rotation0.getQ1(), 0.01D);
      assertEquals((-0.45554314746844304), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(2.0461571571628023, rotation0.getAngle(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.9459645009999998, 0.9459645009999995, 0.9459645009999998}, doubleArray0, 0.01);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals(0.5207401937533203, rotation0.getQ0(), 0.01D);
      assertEquals((-0.7220180686134517), rotation0.getQ1(), 0.01D);
      assertEquals((-0.45554314746844304), rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(2.0461571571628023, rotation0.getAngle(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      assertNotNull(rotationOrder0);
      assertEquals("XYX", rotationOrder0.toString());
      
      double double0 = (-745.554216);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, 1.5707963267948966, 1.5707963267948966}, doubleArray0, 0.01);
      assertEquals("XYX", rotationOrder0.toString());
      assertEquals((-0.5), rotation0.getQ3(), 0.01D);
      assertEquals(2.0943951023931953, rotation0.getAngle(), 0.01D);
      assertEquals((-0.5), rotation0.getQ2(), 0.01D);
      assertEquals((-0.5), rotation0.getQ1(), 0.01D);
      assertEquals((-0.5), rotation0.getQ0(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.3999999761581421;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double1, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7071067811865475, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7071067811865475, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      
      double double0 = 1657.6687676787085;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.8545686101260783, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Euler angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 6.123233995736766E-17;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, (-1.4997597826618576E-32), 3.141592653589793}, doubleArray0, 0.01);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals("ZYX", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      assertNotNull(rotationOrder0);
      assertEquals("ZYX", rotationOrder0.toString());
      
      double double0 = 200.13;
      double double1 = (-431.693577115);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(200.13, rotation0.getQ1(), 0.01D);
      assertEquals(200.13, rotation0.getQ0(), 0.01D);
      assertEquals((-431.693577115), rotation0.getQ3(), 0.01D);
      assertEquals(200.13, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZYX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZYX", rotationOrder0.toString());
      
      double double0 = 200.13;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(200.13, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(200.13, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(200.13, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(200.13, rotation0.getQ3(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = (-0.12502530217170715);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(1.7976931348623157E308, rotation0.getQ1(), 0.01D);
      assertEquals(1.7976931348623157E308, rotation0.getQ0(), 0.01D);
      assertEquals(1.7976931348623157E308, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals((-0.12502530217170715), rotation0.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      assertNotNull(rotationOrder0);
      assertEquals("ZXY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.ZXY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals("ZXY", rotationOrder0.toString());
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 499.1917989449894;
      double double2 = (-560.6724457903794);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double2, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(499.1917989449894, rotation0.getQ1(), 0.01D);
      assertEquals(499.1917989449894, rotation0.getQ3(), 0.01D);
      assertEquals((-560.6724457903794), rotation0.getQ2(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YZX;
      assertNotNull(rotationOrder0);
      assertEquals("YZX", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {-0.0, 0.0, -0.0}, doubleArray0, 0.01);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals("YZX", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 0.0;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {3.141592653589793, -0.0, 3.141592653589793}, doubleArray0, 0.01);
      assertEquals("YXZ", rotationOrder0.toString());
      assertEquals(0.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = (-2047.9549033);
      double double1 = 0.0;
      double double2 = 533.6178182;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double1, double0, double2, boolean0);
      assertNotNull(rotation0);
      assertEquals((-2047.9549033), rotation0.getQ2(), 0.01D);
      assertEquals((-2047.9549033), rotation0.getQ0(), 0.01D);
      assertEquals(533.6178182, rotation0.getQ3(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      assertNotNull(rotationOrder0);
      assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-2047.9549033);
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals((-2047.9549033), rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals((-2047.9549033), rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals((-2047.9549033), rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals((-2047.9549033), rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.YXZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("YXZ", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Rotation rotation0 = Rotation.IDENTITY;
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XZY;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      //  // Unstable assertion: assertNotNull(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, -0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(1.0, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals("XZY", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NaN;
      //  // Unstable assertion: assertNotNull(vector3D0);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      //  // Unstable assertion: assertNotNull(rotationOrder0);
      //  // Unstable assertion: assertEquals("XYZ", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      //  // Unstable assertion: assertNotNull(rotation0);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ0(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormInf(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getY(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getX(), 0.01D);
      //  // Unstable assertion: assertEquals(false, vector3D0.isInfinite());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNorm1(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getZ(), 0.01D);
      //  // Unstable assertion: assertEquals(true, vector3D0.isNaN());
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getAlpha(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getNormSq(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      try {
        double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // Cardan angles singularity
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 6.123233995736766E-17;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      
      RotationOrder rotationOrder0 = RotationOrder.XYZ;
      assertNotNull(rotationOrder0);
      assertEquals("XYZ", rotationOrder0.toString());
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {(-3.141592653589793), 0.0, (-3.141592653589793)}, doubleArray0, 0.01);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals("XYZ", rotationOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 6.123233995736766E-17;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      
      double double1 = rotation0.getAngle();
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.945964501;
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals((-0.45554314746844304), rotation0.getQ3(), 0.01D);
      assertEquals((-0.7220180686134517), rotation0.getQ1(), 0.01D);
      assertEquals(0.5207401937533203, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(2.0461571571628023, rotation0.getAngle(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      
      double double1 = rotation0.getAngle();
      assertEquals((-0.45554314746844304), rotation0.getQ3(), 0.01D);
      assertEquals((-0.7220180686134517), rotation0.getQ1(), 0.01D);
      assertEquals(0.5207401937533203, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(2.0461571571628023, rotation0.getAngle(), 0.01D);
      assertEquals("XZX", rotationOrder0.toString());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(2.0461571571628023, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      double double0 = Rotation.distance(rotation0, rotation0);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      
      double double0 = 1657.6687676787085;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(0.8545686101260783, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      
      Rotation rotation1 = rotation0.revert();
      assertNotNull(rotation1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(0.8545686101260783, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ1(), 0.01D);
      assertEquals((-0.8545686101260783), rotation1.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ3(), 0.01D);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
      
      Vector3D vector3D1 = rotation1.getAxis();
      assertNotNull(vector3D1);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertEquals(0.8545686101260783, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ1(), 0.01D);
      assertEquals((-0.8545686101260783), rotation1.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation1.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation1.getQ3(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertTrue(vector3D0.equals((Object)vector3D1));
      assertTrue(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.POSITIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      
      double double0 = 1657.6687676787085;
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(0.8545686101260783, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      
      Vector3D vector3D1 = rotation0.getAxis();
      assertNotNull(vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.7853981633974483, vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormInf(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getZ(), 0.01D);
      assertEquals(true, vector3D1.isNaN());
      assertEquals(Double.NaN, vector3D1.getAlpha(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNorm(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(Double.NaN, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.8545686101260783, rotation0.getQ0(), 0.01D);
      assertEquals(Double.NaN, rotation0.getAngle(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ1(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ2(), 0.01D);
      assertEquals(Double.NaN, rotation0.getQ3(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D1, vector3D0);
      assertNotNull(rotation0);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(1.0, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D0, vector3D1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.PLUS_I;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.orthogonal();
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Vector3D vector3D2 = vector3D1.subtract((Vector<Euclidean3D>) vector3D0);
      assertNotNull(vector3D2);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(2.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(2.0, vector3D2.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D2.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.4142135623730951, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.7853981633974482, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
      
      Rotation rotation0 = new Rotation(vector3D1, vector3D0, vector3D2, vector3D0);
      assertNotNull(rotation0);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.7853981633974483, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ1(), 0.01D);
      assertEquals(0.9238795325112867, rotation0.getQ0(), 0.01D);
      assertEquals(0.3826834323650898, rotation0.getQ2(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(false, vector3D2.isNaN());
      assertEquals(1.0, vector3D2.getNormInf(), 0.01D);
      assertEquals(2.0, vector3D2.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D2.getY(), 0.01D);
      assertEquals(2.0, vector3D2.getNorm1(), 0.01D);
      assertEquals((-1.0), vector3D2.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D2.getAlpha(), 0.01D);
      assertEquals(1.4142135623730951, vector3D2.getNorm(), 0.01D);
      assertEquals(false, vector3D2.isInfinite());
      assertEquals(0.7853981633974482, vector3D2.getDelta(), 0.01D);
      assertEquals(1.0, vector3D2.getZ(), 0.01D);
      assertEquals(-0.0, vector3D1.getX(), 0.01D);
      assertEquals(3.141592653589793, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(1.5707963267948966, vector3D1.getDelta(), 0.01D);
      assertEquals(1.0, vector3D1.getZ(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm(), 0.01D);
      assertEquals(1.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(1.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D0.equals((Object)vector3D2));
      assertFalse(vector3D2.equals((Object)vector3D0));
      assertFalse(vector3D2.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertFalse(vector3D1.equals((Object)vector3D2));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D0, vector3D2);
      assertNotSame(vector3D2, vector3D0);
      assertNotSame(vector3D2, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      assertNotSame(vector3D1, vector3D2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.NEGATIVE_INFINITY;
      assertNotNull(vector3D0);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      
      Vector3D vector3D1 = vector3D0.getZero();
      assertNotNull(vector3D1);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm1(), 0.01D);
      assertEquals((-2.356194490192345), vector3D0.getAlpha(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormSq(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNorm(), 0.01D);
      assertEquals(true, vector3D0.isInfinite());
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(Double.POSITIVE_INFINITY, vector3D0.getNormInf(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getX(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_J;
      assertNotNull(vector3D0);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      
      Vector3D vector3D1 = Vector3D.crossProduct(vector3D0, vector3D0);
      assertNotNull(vector3D1);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals((-1.5707963267948966), vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals((-1.0), vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertFalse(vector3D0.equals((Object)vector3D1));
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D0, vector3D1);
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D1, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.MINUS_I;
      assertNotNull(vector3D0);
      assertEquals((-1.0), vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(3.141592653589793, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Vector3D vector3D1 = Vector3D.ZERO;
      assertNotNull(vector3D1);
      assertEquals(0.0, vector3D1.getZ(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D1.getNorm(), 0.01D);
      assertEquals(0.0, vector3D1.getX(), 0.01D);
      assertEquals(0.0, vector3D1.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D1.getY(), 0.01D);
      assertEquals(false, vector3D1.isInfinite());
      assertEquals(false, vector3D1.isNaN());
      assertEquals(0.0, vector3D1.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D1.getNormSq(), 0.01D);
      assertEquals(Double.NaN, vector3D1.getDelta(), 0.01D);
      assertFalse(vector3D1.equals((Object)vector3D0));
      assertNotSame(vector3D1, vector3D0);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D1, vector3D1, vector3D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, vector3D0, vector3D0, vector3D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // zero norm for rotation defining vector
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 1.5830993332061267E-10;
      double double1 = 0.10526403784751892;
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double0, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(1.5039317943506386E-9, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ2(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ0(), 0.01D);
      assertEquals(3.14159265058193, rotation0.getAngle(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(1.5039317943506386E-9, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ2(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ0(), 0.01D);
      assertEquals(3.14159265058193, rotation0.getAngle(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      Rotation rotation1 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation1);
      assertEquals(1.5039317943506386E-9, rotation0.getQ1(), 0.01D);
      assertEquals(1.0, rotation0.getQ3(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ2(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation0.getQ0(), 0.01D);
      assertEquals(3.14159265058193, rotation0.getAngle(), 0.01D);
      assertEquals(3.14159265058193, rotation1.getAngle(), 0.01D);
      assertEquals(1.0, rotation1.getQ3(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation1.getQ2(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation1.getQ1(), 0.01D);
      assertEquals(1.5039317943506386E-9, rotation1.getQ0(), 0.01D);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(double1 == double0);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double0 == double1);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 1.5830993332061267E-10;
      double double1 = (-2.5266406539717092);
      boolean boolean0 = true;
      Rotation rotation0 = new Rotation(double0, double0, double1, double1, boolean0);
      assertNotNull(rotation0);
      assertEquals(4.430468860074346E-11, rotation0.getQ0(), 0.01D);
      assertEquals(4.430468860074346E-11, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653501184, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(4.430468860074346E-11, rotation0.getQ0(), 0.01D);
      assertEquals(4.430468860074346E-11, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653501184, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Rotation rotation1 = new Rotation(doubleArray0, double0);
      assertNotNull(rotation1);
      assertEquals(4.430468860074346E-11, rotation0.getQ0(), 0.01D);
      assertEquals(4.430468860074346E-11, rotation0.getQ1(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653501184, rotation0.getAngle(), 0.01D);
      assertEquals((-0.7071067811865475), rotation0.getQ2(), 0.01D);
      assertEquals((-4.4304688600743445E-11), rotation1.getQ0(), 0.01D);
      assertEquals(0.7071067811865476, rotation1.getQ2(), 0.01D);
      assertEquals((-4.4304688600743464E-11), rotation1.getQ1(), 0.01D);
      assertEquals(3.141592653501184, rotation1.getAngle(), 0.01D);
      assertEquals(0.7071067811865475, rotation1.getQ3(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double1 == double0);
      assertNotSame(rotation0, rotation1);
      assertNotSame(rotation1, rotation0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 6.123233995736766E-17;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      
      double double1 = rotation0.getQ2();
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(6.123233995736766E-17, double1, 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertTrue(double0 == double1);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, double1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // the closest orthogonal matrix has a negative determinant -1
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = (-744.8043646213163);
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.12313951635102885), rotation0.getQ0(), 0.01D);
      assertEquals(2.8946869330545235, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.9923893689035744, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.12313951635102885), rotation0.getQ0(), 0.01D);
      assertEquals(2.8946869330545235, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.9923893689035744, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      
      double double1 = 0.0;
      Rotation rotation1 = new Rotation(doubleArray0, double1);
      assertNotNull(rotation1);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(0.9923893689035744, rotation1.getQ1(), 0.01D);
      assertEquals(2.8946869330545235, rotation1.getAngle(), 0.01D);
      assertEquals(0.0, rotation1.getQ2(), 0.01D);
      assertEquals((-0.12313951635102886), rotation1.getQ0(), 0.01D);
      assertEquals(0.0, rotation1.getQ3(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals((-0.12313951635102885), rotation0.getQ0(), 0.01D);
      assertEquals(2.8946869330545235, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(0.9923893689035744, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertFalse(rotation1.equals((Object)rotation0));
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(rotation0.equals((Object)rotation1));
      assertNotSame(rotation1, rotation0);
      assertNotSame(rotation0, rotation1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, doubleArray1[0]);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x3 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 1.129751136675506;
      double[][] doubleArray0 = new double[3][4];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 3x4 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = (-744.8043646213163);
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals(0.9923893689035744, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(2.8946869330545235, rotation0.getAngle(), 0.01D);
      assertEquals((-0.12313951635102885), rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      double[][] doubleArray0 = rotation0.getMatrix();
      assertNotNull(doubleArray0);
      assertEquals(0.9923893689035744, rotation0.getQ1(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(2.8946869330545235, rotation0.getAngle(), 0.01D);
      assertEquals((-0.12313951635102885), rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      
      Rotation rotation1 = null;
      try {
        rotation1 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // unable to orthogonalize matrix in 10 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = (-1.0);
      double[][] doubleArray0 = new double[4][6];
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(doubleArray0, double0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // a 4x6 matrix cannot be a rotation matrix
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = 2599.56546794945;
      Vector3D vector3D0 = Vector3D.ZERO;
      assertNotNull(vector3D0);
      assertEquals(0.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm(), 0.01D);
      assertEquals(0.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(0.0, vector3D0.getX(), 0.01D);
      assertEquals(Double.NaN, vector3D0.getDelta(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, vector3D0.getNormInf(), 0.01D);
      
      Rotation rotation0 = null;
      try {
        rotation0 = new Rotation(vector3D0, double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero norm for rotation axis
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      RotationOrder rotationOrder0 = RotationOrder.ZXZ;
      assertNotNull(rotationOrder0);
      assertEquals("ZXZ", rotationOrder0.toString());
      
      double double0 = (-744.8043646213163);
      Vector3D vector3D0 = rotationOrder0.getA2();
      assertNotNull(vector3D0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      
      Rotation rotation0 = new Rotation(vector3D0, double0);
      assertNotNull(rotation0);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(2.8946869330545235, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.9923893689035744, rotation0.getQ1(), 0.01D);
      assertEquals((-0.12313951635102885), rotation0.getQ0(), 0.01D);
      
      double[] doubleArray0 = rotation0.getAngles(rotationOrder0);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 2.8946869330545235, 0.0}, doubleArray0, 0.01);
      assertEquals("ZXZ", rotationOrder0.toString());
      assertEquals(false, vector3D0.isInfinite());
      assertEquals(0.0, vector3D0.getDelta(), 0.01D);
      assertEquals(0.0, vector3D0.getZ(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm(), 0.01D);
      assertEquals(1.0, vector3D0.getNorm1(), 0.01D);
      assertEquals(1.0, vector3D0.getX(), 0.01D);
      assertEquals(0.0, vector3D0.getAlpha(), 0.01D);
      assertEquals(1.0, vector3D0.getNormInf(), 0.01D);
      assertEquals(1.0, vector3D0.getNormSq(), 0.01D);
      assertEquals(0.0, vector3D0.getY(), 0.01D);
      assertEquals(false, vector3D0.isNaN());
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertEquals(2.8946869330545235, rotation0.getAngle(), 0.01D);
      assertEquals(0.0, rotation0.getQ3(), 0.01D);
      assertEquals(0.9923893689035744, rotation0.getQ1(), 0.01D);
      assertEquals((-0.12313951635102885), rotation0.getQ0(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = 6.123233995736766E-17;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      
      double double1 = rotation0.getQ0();
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(6.123233995736766E-17, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double double0 = 0.945964501;
      RotationOrder rotationOrder0 = RotationOrder.XZX;
      assertNotNull(rotationOrder0);
      assertEquals("XZX", rotationOrder0.toString());
      
      Rotation rotation0 = new Rotation(rotationOrder0, double0, double0, double0);
      assertNotNull(rotation0);
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals((-0.7220180686134517), rotation0.getQ1(), 0.01D);
      assertEquals((-0.45554314746844304), rotation0.getQ3(), 0.01D);
      assertEquals(2.0461571571628023, rotation0.getAngle(), 0.01D);
      assertEquals(0.5207401937533203, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      
      double double1 = rotation0.getQ3();
      assertEquals("XZX", rotationOrder0.toString());
      assertEquals((-0.7220180686134517), rotation0.getQ1(), 0.01D);
      assertEquals((-0.45554314746844304), rotation0.getQ3(), 0.01D);
      assertEquals(2.0461571571628023, rotation0.getAngle(), 0.01D);
      assertEquals(0.5207401937533203, rotation0.getQ0(), 0.01D);
      assertEquals(0.0, rotation0.getQ2(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.45554314746844304), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = 6.123233995736766E-17;
      boolean boolean0 = false;
      Rotation rotation0 = new Rotation(double0, double0, double0, double0, boolean0);
      assertNotNull(rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      
      double double1 = Rotation.distance(rotation0, rotation0);
      assertEquals(3.141592653589793, rotation0.getAngle(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ3(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ2(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ1(), 0.01D);
      assertEquals(6.123233995736766E-17, rotation0.getQ0(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }
}
