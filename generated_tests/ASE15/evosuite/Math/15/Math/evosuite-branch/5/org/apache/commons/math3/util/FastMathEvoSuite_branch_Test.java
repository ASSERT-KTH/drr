/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:20:16 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = (-0.7853981633974483);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.tan(double2);
      assertEquals(1.2246467991473532E-16, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = (-3225.13F);
      int int0 = FastMath.round(float0);
      assertEquals((-3225), int0);
      
      long long0 = 0L;
      long long1 = FastMath.max(long0, (long) int0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float1 = FastMath.copySign(float0, (float) long1);
      assertEquals(3225.13F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(long1 == long0);
      assertFalse(float0 == float1);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.getExponent((float) int0);
      assertEquals((-127), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      float float0 = FastMath.copySign((float) int0, (float) int1);
      assertEquals(-0.0F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 64;
      int int1 = FastMath.max(int0, int0);
      assertEquals(64, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = FastMath.copySign((float) int1, (float) int0);
      assertEquals(64.0F, float0, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = (-0.08453866829252482);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.copySign(double1, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1025;
      double double0 = (-1102.40167);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals((-4.9E-324), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double2, (double) int0);
      assertEquals(-0.0, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertTrue(double3 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = (-0.08453866829252482);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertEquals(1.6554360169522693, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.ceil(double0);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.copySign(double2, double1);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-23.8158022);
      long long0 = (-1774L);
      long long1 = FastMath.abs(long0);
      assertEquals(1774L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      int int0 = (-2594);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot((double) long1, double1);
      assertEquals(1774.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = (-1298.105595534606);
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = 2530.8F;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertEquals(2530.8F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double2 = FastMath.hypot((double) float1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float float0 = (-5261.993F);
      int int0 = FastMath.getExponent((double) float0);
      //  // Unstable assertion: assertEquals(12, int0);
      
      double double0 = FastMath.sqrt((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.hypot(double0, (double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      double double0 = (-2.3598354190515998E-8);
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double1 = FastMath.asin(double0);
      assertEquals((-2.3598354190516E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot(double1, (double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      float float0 = 0.0F;
      double double2 = (-772.3265830059343);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow((double) float0, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      
      double double4 = FastMath.hypot(double3, double1);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertTrue(double3 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = 1564.3103605341967;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.floor(double2);
      assertEquals(1564.0, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      
      double double4 = FastMath.max(double1, double3);
      assertEquals(1564.0, double4, 0.01D);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertTrue(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = (-1298.105595534606);
      double double1 = FastMath.max(double0, double0);
      assertEquals((-1298.105595534606), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = -0.0F;
      float float2 = FastMath.max(float1, float0);
      //  // Unstable assertion: assertEquals(0.0F, float2, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertTrue(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.ulp((float) int0);
      assertEquals(1.2207031E-4F, float1, 0.01F);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.max(float1, float0);
      assertEquals(798.7949F, float2, 0.01F);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.max(float1, float0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float float0 = (-2310.0F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-2310.0F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 258;
      int int1 = FastMath.abs(int0);
      assertEquals(258, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = 0L;
      long long1 = FastMath.max((long) int1, long0);
      assertEquals(258L, long1);
      assertTrue(int0 == int1);
      assertFalse(long1 == long0);
      assertTrue(int1 == int0);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = (-754);
      int int1 = FastMath.max(int0, int0);
      assertEquals((-754), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      int int3 = FastMath.min(int2, int2);
      assertEquals(0, int3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int2 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(-0.0F, float0, 0.01F);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.min((double) float0, (double) int3);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int3);
      assertFalse(int2 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = (-1298.105595534606);
      double double1 = FastMath.exp(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.min(double0, double1);
      assertEquals((-1298.105595534606), double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1.0F;
      double double1 = FastMath.min((double) float0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 0L;
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, (float) long0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.min(float0, (float) int0);
      assertEquals(798.7949F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = (-4187.973F);
      float float1 = 1398.5935F;
      float float2 = FastMath.min(float1, float0);
      assertEquals((-4187.973F), float2, 0.01F);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 128;
      int int1 = 451;
      long long0 = FastMath.min((long) int1, (long) int0);
      assertEquals(128L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      int int1 = 2047;
      int int2 = FastMath.min(int1, int0);
      assertEquals(0, int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 0.5;
      double double1 = FastMath.rint(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = 0.875;
      double double1 = FastMath.log(double0);
      assertEquals((-0.13353139262452263), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.rint(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 318.9571265565;
      double double1 = FastMath.rint(double0);
      assertEquals(319.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = (-1688.826F);
      float float1 = FastMath.ulp(float0);
      assertEquals(1.2207031E-4F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.rint((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = 1851.73464912561;
      double double1 = FastMath.tan(double0);
      assertEquals(4.191126780479916, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ceil(double1);
      assertEquals(5.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float float0 = (-745.0F);
      double double0 = FastMath.ceil((double) float0);
      assertEquals((-745.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = 4368491638549381120L;
      double double0 = FastMath.floor((double) long0);
      assertEquals(4.3684916385493811E18, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = 0.0;
      float float0 = 1.0F;
      float float1 = FastMath.nextAfter(float0, double0);
      assertEquals(0.99999994F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = (-1038.5817336909);
      double double1 = FastMath.toDegrees(double0);
      assertEquals((-59506.35001986858), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float1 = FastMath.nextAfter(float0, double1);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      long long0 = 4368491638549381120L;
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) long0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = (-2.3598354190515998E-8);
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.nextAfter(float1, double0);
      assertEquals(3.4028235E38F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = (-928.231331879);
      int int0 = 1025;
      double double1 = FastMath.log1p(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = FastMath.nextAfter((float) int0, double1);
      assertEquals(Float.NaN, float0, 0.01F);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.nextUp(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = 2474.2005243223293;
      double double1 = FastMath.nextUp(double0);
      assertEquals(2474.20052432233, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      int int0 = (-1953);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-1953), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = FastMath.ulp((float) int1);
      assertEquals(1.2207031E-4F, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double2 = FastMath.nextAfter((double) float0, double1);
      assertEquals(1.2207031249999999E-4, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = (-928.231331879);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double1, double2);
      assertEquals((-4.9E-324), double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.nextUp(double0);
      assertEquals((-1.7976931348623157E308), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = 147.2;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.toDegrees(double0);
      assertEquals(8433.938744325716, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double1, double2);
      assertEquals(1.7976931348623157E308, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = (-3225.13F);
      int int0 = FastMath.round(float0);
      assertEquals((-3225), int0);
      
      double double0 = FastMath.nextAfter((double) int0, (double) int0);
      assertEquals((-3225.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float float0 = (-700.0F);
      int int0 = FastMath.getExponent(float0);
      //  // Unstable assertion: assertEquals(9, int0);
      
      double double0 = FastMath.asin((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.nextAfter((double) int0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double0 = FastMath.nextUp((double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float float0 = 722.0F;
      int int0 = 128;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int0 = 142;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(0.0078125F, float2, 0.01F);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float float0 = 102.0F;
      int int0 = (-168);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = (-301.9F);
      int int0 = (-155);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-7.0E-45F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = (-283.4395F);
      int int0 = (-155);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-5.6E-45F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 2024;
      int int1 = (-127);
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(1.1896003E-35F, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = (-4187.973F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-4187.973F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      int int0 = 258;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertFalse(float0 == float2);
      assertTrue(float0 == float1);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertTrue(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = (-2643L);
      int int0 = (-270);
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(-0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      int int1 = 764;
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = 147.2;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.48905671666637957), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 1055;
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 3.3565057475434694E-275;
      int int0 = 1510;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(1.2055378428602061E180, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 406;
      int int1 = (-1896);
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float float0 = 1303.0F;
      double double0 = FastMath.hypot((double) float0, (double) float0);
      assertEquals(1842.720271772143, double0, 0.01D);
      
      int int0 = (-1075);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(4.55E-321, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = (-552.0F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-552.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int0 = (-1291);
      double double0 = FastMath.scalb((double) float1, int0);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-1075);
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals((-2.66E-321), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = (-1038.5817336909);
      int int0 = 4693;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = 147.2;
      int int0 = 8388608;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = 3125.7349F;
      int int0 = (-2489);
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.scalb((double) float1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.acos((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      int int0 = 2174;
      double double1 = FastMath.scalb(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = 147.2;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.abs(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.ulp((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 1156L;
      long long1 = FastMath.abs(long0);
      assertEquals(1156L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-3012);
      int int1 = FastMath.abs(int0);
      assertEquals(3012, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.toDegrees(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.toDegrees((double) float1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.toRadians((double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 396.97312538;
      int int0 = 1935;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = 396.97312538;
      int int0 = 1935;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = (-382.309502);
      double double1 = Double.POSITIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.nextUp(double2);
      assertEquals(4.9E-324, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      
      double double4 = FastMath.cbrt(double3);
      assertEquals(1.7031839360032603E-108, double4, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = (-1834.1596929913176);
      double double1 = FastMath.tan(double0);
      assertEquals(0.5864769087993837, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.9440940493119386, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = (-698.9435);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 5.041914939880371;
      double double1 = FastMath.acos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = (-1774L);
      float float0 = FastMath.signum((float) long0);
      assertEquals((-1.0F), float0, 0.01F);
      
      double double0 = FastMath.asin((double) float0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = (-382.309502);
      double double1 = Double.POSITIVE_INFINITY;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.cos(double2);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double4 = FastMath.asin(double3);
      assertEquals(1.5707963267948966, double4, 0.01D);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asin(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = 4368491638549381120L;
      double double0 = FastMath.asin((double) long0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = (-2.35387025694381E-8);
      double double1 = FastMath.sin(double0);
      assertEquals((-2.3538702569438096E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-2.356194490192345), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 191.561;
      double double1 = FastMath.cosh(double0);
      assertEquals(7.813673360493798E82, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 1025;
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double2, double1);
      assertEquals(4.9E-324, double3, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double4 = FastMath.atan2(double3, (double) int0);
      assertEquals(0.0, double4, 0.01D);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertTrue(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = (-0.08453866829252482);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 5.041914939880371;
      double double1 = 0.0;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float float0 = (-2355.4197F);
      int int0 = 3282;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.atan2((double) int0, (double) float1);
      assertEquals(3.141592653589793, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = (-2135.33438064768);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = (-2310.0F);
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals((-2310.0F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double2 = FastMath.atan2((double) float1, double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.abs(double0);
      assertEquals(1529.36, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.abs(long0);
      //  // Unstable assertion: assertEquals((-9223372036854775808L), long1);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      
      double double0 = FastMath.acos((double) long1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      
      int int0 = 0;
      double double1 = FastMath.sinh((double) int0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.atan2(double2, (double) long1);
      //  // Unstable assertion: assertEquals((-1.5707963267948966), double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(long1 == long0);
      //  // Unstable assertion: assertTrue(long0 == long1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = (-2.3598354190515998E-8);
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.atan2((double) float1, double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertEquals(0.7853981633974483, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      int int0 = (-1953);
      double double2 = FastMath.atan2(double1, (double) int0);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = (-1688.826F);
      int int0 = 0;
      double double0 = FastMath.sin((double) float0);
      assertEquals(0.9758977766360504, double0, 0.01D);
      
      long long0 = FastMath.round(double0);
      assertEquals(1L, long0);
      
      double double1 = FastMath.atanh((double) int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log((double) long0, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(3.141592653589793, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = 819.0407767;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.cosh(double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      
      double double4 = FastMath.atan2(double1, double3);
      assertEquals(-0.0, double4, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertTrue(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertTrue(double1 == double4);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = (-1798.641171141093);
      double double1 = 4.9E-324;
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-1.5707963267948966), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = 3125.7349F;
      float float1 = FastMath.abs(float0);
      assertEquals(3125.7349F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double2 = FastMath.atan2((double) float1, double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
      assertTrue(float0 == float1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 2330.7084544976597;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-0.08453866829252482);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.acos((double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = 4.664436780622191E168;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.9120223934840186), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float float0 = 658.6827F;
      float float1 = FastMath.abs(float0);
      assertEquals(658.6827F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.cos((double) float1);
      assertEquals(0.4960270883294787, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = FastMath.cos((double) float0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.log((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.cos(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = (-6726);
      double double0 = FastMath.sin((double) int0);
      assertEquals((-0.14931091174520347), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = 4368491638549381120L;
      double double0 = FastMath.cosh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = (-0.08453866829252482);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sin(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = 7.87675118338788E41;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.7563111009440926), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = 1.8014398509481984E16;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.4413505874729857), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = 9.650358667643114E174;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.9038825378337507), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = (-1.0126616322947826E158);
      double double1 = FastMath.floor(double0);
      assertEquals((-1.0126616322947826E158), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.5484493655854807, double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 8388608;
      double double0 = FastMath.tan((double) int0);
      assertEquals((-0.4793412386265429), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = (-3254.9);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      // Undeclared exception!
      try {
        double double2 = FastMath.cos(double1);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3.862412756175274E-8);
      double double2 = FastMath.hypot(double0, double1);
      assertEquals(3.862412756175274E-8, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.tan(double2);
      assertEquals(3.862412756175276E-8, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = (-2643L);
      long long1 = FastMath.min(long0, long0);
      assertEquals((-2643L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = (-270);
      double double0 = FastMath.pow((double) long1, int0);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = 0;
      double double0 = FastMath.pow((double) long0, int0);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long long0 = (-2643L);
      long long1 = FastMath.min(long0, long0);
      assertEquals((-2643L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      int int0 = 1008;
      double double0 = FastMath.pow((double) long1, int0);
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = (-6.093678455240319);
      double double1 = FastMath.atan(double0);
      //  // Unstable assertion: assertEquals((-1.4081416082913378), double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      float float0 = (-2107.76F);
      float float1 = FastMath.ulp(float0);
      //  // Unstable assertion: assertEquals(2.4414062E-4F, float1, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      
      double double2 = FastMath.asin(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.pow((double) float1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = (-1953);
      int int1 = 64;
      double double0 = FastMath.pow((double) int0, (double) int1);
      assertEquals(4.0266471112851955E210, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float float0 = (-2310.0F);
      float float1 = FastMath.ulp(float0);
      assertEquals(2.4414062E-4F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.pow((double) float0, (double) float1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = 4368491638549381120L;
      double double0 = 0.875;
      double double1 = FastMath.log(double0);
      assertEquals((-0.13353139262452263), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, (double) long0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = (-1953);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-1953), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.pow((double) int0, (double) int1);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.log((double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = 0.4342944622039795;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 1282;
      int int1 = 0;
      int int2 = FastMath.max(int0, int1);
      assertEquals(1282, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.log((double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      double double1 = FastMath.pow((double) int2, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 1301;
      int int1 = FastMath.max(int0, int0);
      assertEquals(1301, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 0;
      assertFalse(int2 == int1);
      
      double double0 = FastMath.log((double) int2);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double1 = FastMath.pow(double0, (double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(double1 == double0);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = 1.5574076175689697;
      float float0 = Float.NEGATIVE_INFINITY;
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      int int0 = FastMath.getExponent((double) float1);
      assertEquals(1024, int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.pow((double) float0, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = FastMath.abs(long0);
      assertEquals((-9223372036854775808L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = 0;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = 2.718281828459045;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1, double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.pow(double2, (double) long1);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(double3 == double2);
      assertTrue(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = 3.645999732952202E-9;
      float float0 = 433.058F;
      int int0 = 1023;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.pow(double0, (double) float1);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = 4368491638549381120L;
      double double0 = FastMath.cosh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow((double) long0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int1 = (-3012);
      double double0 = FastMath.pow((double) float1, (double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      long long0 = 4368491638549381120L;
      int int0 = 1798;
      double double0 = FastMath.cosh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow(double0, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float float0 = (-123.0F);
      double double0 = FastMath.IEEEremainder((double) float0, (double) float0);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = (-2049.63);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = (-2174);
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float0, 0.01F);
      
      double double0 = FastMath.pow((double) float0, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1060.79;
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = (-0.08453866829252482);
      double double1 = FastMath.acos(double0);
      assertEquals(1.6554360169522693, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.ceil(double0);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.log1p((double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float float0 = 798.7949F;
      int int0 = 1368;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.log1p((double) float1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = (-1051.0354);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = (-1953);
      float float0 = FastMath.ulp((float) int0);
      assertEquals(1.2207031E-4F, float0, 0.01F);
      
      double double0 = FastMath.log1p((double) float0);
      assertEquals(1.2206286252567737E-4, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = 0.6466736793518066;
      double double1 = FastMath.log1p(double0);
      assertEquals(0.4987573012383252, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 819.0407767;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.signum(double2);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.log(double3, double1);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double3);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = (-382.309502);
      double double1 = 4.9E-324;
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float float0 = 722.0F;
      float float1 = FastMath.nextUp(float0);
      assertEquals(722.00006F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.signum(float1);
      assertEquals(1.0F, float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      
      double double0 = FastMath.atanh((double) float2);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      double double0 = FastMath.log10((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = (-23.8158022);
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = 1851.73464912561;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = (-730.60028);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float float0 = (-745.0F);
      double double0 = FastMath.exp((double) float0);
      assertEquals(4.9E-324, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      long long0 = 0L;
      int int0 = FastMath.round((float) long0);
      assertEquals(0, int0);
      
      float float0 = FastMath.signum((float) int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.sin(double0);
      assertEquals(0.004961954789184062, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(0.004961995512540884, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = 0.058823529411764705;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.05889151782819173, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = 0.12038381397724152;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.1209704682758758, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.atanh(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = 2.7553817452272217E-6;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.014019330008057307, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.asinh(double1);
      assertEquals(0.014018870818377722, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = 0.097;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.09684852829972478, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = 0.1428571343421936;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.14237563473843468, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float float0 = 1303.0F;
      int int0 = (-2110);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.asinh((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = (-2291.588);
      double double1 = FastMath.asinh(double0);
      assertEquals((-8.430147534171256), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = 3322.841953694166;
      double double1 = 0.9921976327896118;
      double double2 = FastMath.log(double0, double1);
      assertEquals((-9.660099654894648E-4), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.tanh(double2);
      assertEquals((-9.660096650040455E-4), double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.9171523356672744, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = 0.9375;
      double double1 = FastMath.sinh(double0);
      assertEquals(1.0809919156930639, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = (-2.35387025694381E-8);
      double double1 = FastMath.sinh(double0);
      assertEquals((-2.3538702569438103E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = (-110.3648343);
      double double1 = FastMath.sinh(double0);
      assertEquals((-4.263914984603057E47), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float float0 = 658.6827F;
      float float1 = FastMath.abs(float0);
      assertEquals(658.6827F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.sinh((double) float1);
      assertEquals(5.770620067551903E285, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 0;
      int int1 = 764;
      long long0 = FastMath.max((long) int0, (long) int1);
      assertEquals(764L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = (-630.202688);
      long long0 = FastMath.round(double0);
      assertEquals((-630L), long0);
      
      double double1 = FastMath.toRadians((double) long0);
      assertEquals((-10.995574287564276), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(29804.870754823954, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = (-630.202688);
      long long0 = FastMath.round(double0);
      assertEquals((-630L), long0);
      
      double double1 = FastMath.cosh((double) long0);
      assertEquals(2.016014277073179E273, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long long0 = (-1774L);
      double double0 = 1.2579610347747803;
      float float0 = FastMath.signum((float) long0);
      assertEquals((-1.0F), float0, 0.01F);
      
      double double1 = FastMath.max(double0, (double) float0);
      assertEquals(1.2579610347747803, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.toDegrees(double1);
      assertEquals(72.07585808450469, double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = (-2.5857668567479893E-8);
      double double1 = FastMath.expm1(double0);
      assertEquals((-2.5857668233170385E-8), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(1.5707963526525648, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      double double0 = FastMath.cos((double) long0);
      assertEquals(0.011800076512800236, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      double double0 = (-1298.105595534606);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-1298.1055955346058), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double double0 = (-1298.105595534606);
      double double1 = FastMath.exp(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = FastMath.getExponent(double1);
      assertEquals((-1023), int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = FastMath.nextUp((float) int0);
      assertEquals((-1022.99994F), float0, 0.01F);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = (-1529.36);
      double double1 = FastMath.min(double0, double0);
      assertEquals((-1529.36), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.acosh(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
  }
}
