/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:31:12 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      int int0 = (-1379);
      float float2 = FastMath.copySign((float) int0, float1);
      //  // Unstable assertion: assertEquals(1379.0F, float2, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float2 == float1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-829.73F);
      float float2 = FastMath.copySign(float0, float1);
      //  // Unstable assertion: assertEquals(-0.0F, float2, 0.01F);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = (-4402);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-4402), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = FastMath.copySign((float) int1, (float) int0);
      assertEquals((-4402.0F), float0, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      double double0 = FastMath.copySign((double) int0, (double) int0);
      assertEquals((-127.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9993520699809768, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = 0.0F;
      double double2 = (-1542.9392);
      assertFalse(double2 == double1);
      
      float float1 = FastMath.nextAfter(float0, double2);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(float0 == float1);
      
      double double3 = FastMath.copySign(double1, (double) float1);
      assertEquals((-0.9993520699809768), double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(float1 == float0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9993520699809768, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.copySign(double1, double0);
      assertEquals(0.9993520699809768, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      float float0 = 1.4E-45F;
      double double1 = FastMath.hypot((double) float0, double0);
      assertEquals(1.401298464324817E-45, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-1634);
      int int1 = FastMath.min(int0, int0);
      //  // Unstable assertion: assertEquals((-1634), int1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, (double) int1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      
      double double0 = FastMath.hypot((double) int0, (double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = 1.8112388823726723E41;
      int int0 = 1024;
      double double1 = FastMath.pow(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double1, (double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.sqrt((double) int0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float float0 = (-1.4E-45F);
      long long0 = 1473L;
      long long1 = FastMath.abs(long0);
      assertEquals(1473L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.expm1((double) long1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double1 = FastMath.hypot(double0, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 2;
      double double0 = 0.07073719799518585;
      int int1 = FastMath.abs(int0);
      assertEquals(2, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.max(double0, (double) int1);
      assertEquals(2.0, double1, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = 5329.6901672;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(8.581048385489039, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.max(double2, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      float float0 = (-675.976F);
      float float1 = FastMath.max(float0, (float) int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = 1.4E-45F;
      float float1 = FastMath.ulp(float0);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      float float2 = 1218.2402F;
      assertFalse(float2 == float1);
      
      float float3 = FastMath.max(float2, float1);
      assertEquals(1218.2402F, float3, 0.01F);
      assertFalse(float1 == float3);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertFalse(float2 == float0);
      assertTrue(float2 == float3);
      assertFalse(float2 == float1);
      assertTrue(float0 == float1);
      assertFalse(float0 == float3);
      assertFalse(float0 == float2);
      assertTrue(float3 == float2);
      assertFalse(float3 == float1);
      assertFalse(float3 == float0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      long long0 = (-992L);
      long long1 = FastMath.max((long) int0, long0);
      assertEquals((-127L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = (-1063);
      int int1 = FastMath.abs(int0);
      assertEquals(1063, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = FastMath.max(int1, int0);
      assertEquals(1063, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = FastMath.random();
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      
      double double1 = (-939.5);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.IEEEremainder(double1, double1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.min(double2, double0);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9993520699809768, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double0);
      assertEquals(0.036015560066388196, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      
      double double3 = FastMath.min(double2, double1);
      assertEquals(0.036015560066388196, double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double3);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = 5329.6901672;
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertEquals(8.581048385489039, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      
      double double3 = FastMath.min(double2, double1);
      //  // Unstable assertion: assertEquals(8.581048385489039, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, (float) int1);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float float0 = 1.4E-45F;
      float float1 = 1218.2402F;
      float float2 = FastMath.min(float0, float1);
      assertEquals(1.4E-45F, float2, 0.01F);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertTrue(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-4402);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-4402L), long0);
      
      float float1 = FastMath.min(float0, (float) long0);
      assertEquals((-4402.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int int0 = (-3160);
      float float0 = FastMath.min((float) int0, (float) int0);
      assertEquals((-3160.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-1634);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-1634), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      long long0 = 4499201580859392L;
      long long1 = FastMath.min(long0, (long) int1);
      assertEquals((-1634L), long1);
      assertFalse(long1 == long0);
      assertTrue(int1 == int0);
      assertFalse(long0 == long1);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = (-4402);
      int int1 = (-6583);
      int int2 = FastMath.min(int0, int1);
      assertEquals((-6583), int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = (-0.5);
      double double1 = FastMath.rint(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      double double0 = 0.4311765432357788;
      double double1 = FastMath.rint(double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      double double0 = (-0.2651992193674488);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = 2443.4015481538268;
      double double1 = FastMath.exp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.rint(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = 0.5F;
      float float1 = FastMath.abs(float0);
      assertEquals(0.5F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.rint((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = (-4.2702997139152675E-8);
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.ceil(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = (-5034868814120038111L);
      long long1 = FastMath.round((double) long0);
      assertEquals((-5034868814120038400L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-3160);
      int int1 = 485;
      int int2 = FastMath.max(int0, int1);
      assertEquals(485, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = FastMath.min(int0, int0);
      assertEquals((-3160), int3);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      
      float float0 = FastMath.nextAfter((float) int3, (double) int2);
      assertEquals((-3159.9998F), float0, 0.01F);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int2 == int3);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = FastMath.round(float0);
      assertEquals((-1), int0);
      
      int int1 = 52;
      assertFalse(int1 == int0);
      
      int int2 = FastMath.min(int1, int1);
      assertEquals(52, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      
      float float1 = FastMath.nextAfter((float) int2, (double) int0);
      assertEquals(51.999996F, float1, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9993520699809768, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      float float0 = 0.0F;
      float float1 = FastMath.nextAfter(float0, double1);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 2032.3;
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, double0);
      assertEquals(3.4028235E38F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) long1);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = (-2046);
      double double0 = FastMath.acos((double) int0);
      assertEquals(Double.NaN, double0, 0.01D);
      
      float float0 = FastMath.nextAfter((float) int0, double0);
      assertEquals(Float.NaN, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      double double0 = FastMath.nextUp((double) int0);
      assertEquals((-126.99999999999999), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = (-2780.5213581471);
      double double1 = 672.35542721;
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals(672.3554272099999, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = (-0.8268491153117248);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double2, double1);
      assertEquals((-4.9E-324), double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.ulp(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = (-513.3779072055552);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.nextAfter(double1, double2);
      assertEquals(1.7976931348623157E308, double3, 0.01D);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.nextUp((double) float0);
      assertEquals((-1.7976931348623157E308), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = (-0.8268491153117248);
      double double1 = FastMath.signum(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double1, double1);
      assertEquals((-1.0), double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = (-1554.7909);
      double double1 = FastMath.min(double0, double0);
      //  // Unstable assertion: assertEquals((-1554.7909), double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      
      double double2 = FastMath.log1p(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      
      double double3 = FastMath.nextAfter(double1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = (-2780.5213581471);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = 4754.1094F;
      int int0 = (-172);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = (-137);
      float float0 = (-511.6432F);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals((-2.936689E-39F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = (-1.0F);
      float float2 = FastMath.scalb(float1, int0);
      assertEquals((-5.877472E-39F), float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals((-7.464389E-37F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = 256.68732F;
      int int0 = 278;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = (-3160);
      int int1 = 2898;
      int int2 = FastMath.max(int0, int1);
      assertEquals(2898, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      
      int int3 = FastMath.min(int0, int1);
      assertEquals((-3160), int3);
      assertTrue(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int3);
      
      float float0 = FastMath.scalb((float) int2, int3);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int3);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = (-1.4E-45F);
      int int0 = 1859;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals((-1.4E-45F), float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 2047;
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = Float.NaN;
      float float1 = FastMath.abs(float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      int int0 = (-1379);
      float float2 = FastMath.scalb(float1, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
      //  // Unstable assertion: assertTrue(float2 == float0);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float0 == float2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.floor(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      int int0 = 1620;
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 1024;
      double double0 = 0.19999954104423523;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(3.5953780191083565E307, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1.7976931348623157E308;
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      int int0 = 1090;
      double double3 = FastMath.scalb(double2, int0);
      assertEquals(65536.0, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 0.366272509098053;
      double double1 = FastMath.log(double0, double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = (-1596);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-1063);
      int int1 = FastMath.abs(int0);
      assertEquals(1063, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.scalb((double) int1, int0);
      assertEquals(1.075593E-317, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float float0 = 1648.33F;
      int int0 = 4015;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 52;
      int int1 = (-2751);
      double double0 = FastMath.scalb((double) int0, int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-4420);
      double double0 = FastMath.scalb((double) int0, int0);
      assertEquals(-0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = (-3001.540632949778);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      int int0 = 1704;
      double double3 = FastMath.scalb(double2, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 1704;
      double double0 = FastMath.atanh((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.scalb(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      int int0 = (-1703);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = (-193.1779894367);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      long long0 = FastMath.round(double1);
      assertEquals(0L, long0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.abs((double) long0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 32;
      double double1 = FastMath.hypot(double0, (double) int0);
      assertEquals(32.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 0.0;
      long long0 = FastMath.round(double0);
      assertEquals(0L, long0);
      
      float float0 = FastMath.abs((float) long0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 27;
      float float0 = FastMath.ulp((float) int0);
      assertEquals(1.9073486E-6F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = (-1);
      long long0 = FastMath.abs((long) int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(0.0F, float0, 0.01F);
      
      double double0 = FastMath.toDegrees((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 1458;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.toDegrees(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      long long0 = (-614L);
      long long1 = 0L;
      long long2 = FastMath.max(long0, long1);
      assertEquals(0L, long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      
      double double0 = FastMath.toRadians((double) long2);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.sqrt((double) int0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 1458;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.cbrt(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = (-1.1821586412088555E-114);
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = 0.366272509098053;
      double double1 = 0.0;
      double double2 = FastMath.nextAfter(double1, double0);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.acos(double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cosh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.floor(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-3001.540632949778);
      double double1 = FastMath.hypot(double0, double0);
      assertEquals(4244.8194711315, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9993520699809768, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(0.035999999999998665, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.asin((double) float0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.asin((double) float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = (-599.64);
      double double1 = FastMath.floor(double0);
      assertEquals((-600.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.asin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = (-1063);
      int int1 = FastMath.abs(int0);
      assertEquals(1063, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.asin((double) int1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.asin(double0);
      assertEquals(0.036007780538464686, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = 474.6234217416;
      double double1 = FastMath.atan2(double0, (double) float0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-3160);
      double double0 = 0.0;
      int int1 = FastMath.max(int0, int0);
      assertEquals((-3160), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double1 = FastMath.atan2((double) int1, double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float float0 = (-1525.1276F);
      double double0 = 474.6234217416;
      int int0 = 4015;
      double double1 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = 4015;
      double double0 = FastMath.scalb((double) float0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) float0, double0);
      assertEquals((-3.141592653589793), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 1458;
      double double0 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      int int1 = FastMath.max(int0, int0);
      assertEquals(1458, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.atan2((double) int1, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      float float2 = Float.POSITIVE_INFINITY;
      assertFalse(float2 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) float2);
      assertEquals(-0.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertFalse(float0 == float2);
      assertFalse(float1 == float2);
      assertTrue(float1 == float0);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      int int1 = 4015;
      assertFalse(int1 == int0);
      
      float float1 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) int0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.atan2((double) float0, (double) float0);
      assertEquals((-2.356194490192345), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      float float1 = 1648.33F;
      int int1 = 268;
      assertFalse(int1 == int0);
      
      float float2 = FastMath.scalb(float1, int1);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.atan2((double) float2, (double) int0);
      assertEquals(1.5707963267948966, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(int0 == int1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.7853981633974483, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.atan2((double) float1, (double) int0);
      assertEquals((-3.141592653589793), double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      float float0 = (-1181.3594F);
      int int0 = (-172);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      float float0 = 1.4E-45F;
      double double1 = FastMath.atan2(double0, (double) float0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 1458;
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.expm1((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals(0.0, double3, 0.01D);
      assertTrue(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(double3 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int int0 = (-1063);
      int int1 = FastMath.abs(int0);
      assertEquals(1063, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.atan2((double) int1, (double) int0);
      assertEquals(2.356194490192345, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.exp(double0);
      assertEquals(1.0366558464909237, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan(double1);
      assertEquals(0.8033942766566863, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-69.4107858);
      double double2 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.atan2(double1, double2);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.IEEEremainder(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      int int0 = 32;
      int int1 = FastMath.abs(int0);
      //  // Unstable assertion: assertEquals(32, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertTrue(int0 == int1);
      
      double double2 = FastMath.atan2((double) int1, double1);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double2, 0.01D);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(int0 == int1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = (-1732.10638044);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = (-1767.905368903);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      long long0 = (-407L);
      int int0 = FastMath.round((float) long0);
      assertEquals((-407), int0);
      
      double double0 = FastMath.cos((double) int0);
      assertEquals(0.16302052197242078, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      double double0 = (-69.4107858);
      double double1 = FastMath.atan2((double) int0, double0);
      assertEquals(3.141592653589793, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cos(double1);
      assertEquals((-1.0), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = 619.5;
      double double1 = FastMath.ulp(double0);
      assertEquals(1.1368683772161603E-13, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1620;
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      
      double double3 = FastMath.cos(double2);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 268;
      float float0 = FastMath.scalb((float) int0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      
      double double0 = FastMath.sin((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.sin((double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = 9.007199254740992E15;
      double double1 = FastMath.cos(double0);
      assertEquals((-0.5285117844130887), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = 4.169293918423203E144;
      double double1 = FastMath.max(double0, double0);
      assertEquals(4.169293918423203E144, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.sin(double1);
      assertEquals((-0.822969546315216), double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = 2.7472456017809066E228;
      double double1 = FastMath.tan(double0);
      assertEquals((-2.317849430471569), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = (-1.056727406551016E244);
      double double1 = FastMath.tan(double0);
      assertEquals((-7.760459284265633), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-2.7651059253677425E203);
      double double1 = FastMath.tan(double0);
      assertEquals((-2.69157003716203), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = (-4.135121057126514E24);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.02457967515371647), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = (-247.6364266);
      long long0 = FastMath.round(double0);
      //  // Unstable assertion: assertEquals((-248L), long0);
      
      double double1 = FastMath.log10((double) long0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      // Undeclared exception!
      try {
        double double2 = FastMath.cos(double1);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = (-5034868814120038111L);
      double double0 = FastMath.sin((double) long0);
      assertEquals(0.3933748048922591, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      double double1 = FastMath.tan(double0);
      assertEquals((-0.004962015874444895), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 1044;
      int int1 = FastMath.min(int0, int0);
      assertEquals(1044, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.tan((double) int1);
      assertEquals(1.5278000054384582, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = (-1356.3169);
      double double1 = FastMath.log(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      //  // Unstable assertion: assertEquals(1.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.sin(double2);
      //  // Unstable assertion: assertEquals(0.8414709848078965, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = (-2780.5213581471);
      int int0 = (-365);
      double double1 = FastMath.pow(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = 0;
      double double1 = FastMath.pow(double0, int0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float float0 = 1759.95F;
      float float1 = FastMath.signum(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      int int0 = 1044;
      double double0 = FastMath.pow((double) float1, int0);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = (-1241.0);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = (-964.746231036506);
      double double1 = 4132.0;
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      double double0 = (-193.1779894367);
      double double1 = (-8.0E298);
      double double2 = FastMath.pow(double0, double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = (-1443);
      int int1 = FastMath.min(int0, int0);
      assertEquals((-1443), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = 1177.00268648741;
      double double1 = FastMath.sinh((double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(int0 == int1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = FastMath.pow(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      int int1 = 4015;
      assertFalse(int1 == int0);
      
      float float1 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = FastMath.getExponent((float) int0);
      assertEquals(10, int2);
      assertFalse(float0 == float1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      double double0 = FastMath.pow((double) float1, (double) int2);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      int int1 = 268;
      assertFalse(int1 == int0);
      
      float float1 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = (-1356.3169);
      double double1 = FastMath.log(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      int int0 = FastMath.getExponent(double1);
      assertEquals(1024, int0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.pow((double) int0, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      float float0 = (-1525.1276F);
      float float1 = 1648.33F;
      int int0 = 268;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      
      double double0 = FastMath.pow((double) float2, (double) float0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float2 == float0);
      assertFalse(float2 == float1);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      float float0 = 1648.33F;
      int int0 = 268;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      int int1 = FastMath.getExponent((float) int0);
      assertEquals(10, int1);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
      
      double double0 = FastMath.pow((double) float1, (double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      double double0 = 0.07073719799518585;
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.pow((double) float1, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float float0 = (-1525.1276F);
      int int0 = FastMath.round(float0);
      assertEquals((-1525), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) float1, (double) int0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = (-1720.00505451);
      double double1 = 0.0;
      double double2 = FastMath.pow(double1, double0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double0 = FastMath.pow((double) float1, (double) float0);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = (-3270.126011151573);
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      double double1 = FastMath.hypot((double) int0, double0);
      assertEquals(3270.126011151573, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.log1p(double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double3 == double0);
      assertTrue(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = (-2.4467928392518484E-293);
      double double1 = FastMath.cos(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log10(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float float0 = 0.5F;
      float float1 = FastMath.abs(float0);
      assertEquals(0.5F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.log((double) float1, (double) float1);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9993520699809768, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(0.6928231630624335, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 32;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1, (double) int0);
      assertEquals((-0.004655493482309125), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      float float0 = 0.0F;
      double double0 = (-3270.126011151573);
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      double double1 = FastMath.hypot((double) int0, double0);
      assertEquals(3270.126011151573, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.log(double2, (double) int0);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = 7.980432566722885E241;
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.expm1(double1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = (-2780.5213581471);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = (-725.4350823);
      double double1 = FastMath.exp(double0);
      assertEquals(8.86230677E-316, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = (-745);
      double double0 = FastMath.expm1((double) int0);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = (-2200.1799);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = (-4296.973);
      double double1 = FastMath.asinh(double0);
      assertEquals((-9.058813294401505), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.expm1(double1);
      assertEquals((-0.9998836390190885), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      float float2 = FastMath.signum(float1);
      assertEquals(0.0F, float2, 0.01F);
      assertTrue(float0 == float2);
      assertTrue(float0 == float1);
      assertTrue(float2 == float1);
      assertTrue(float2 == float0);
      assertTrue(float1 == float2);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float float0 = (-2034.144F);
      float float1 = FastMath.signum(float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float float0 = 1759.95F;
      float float1 = FastMath.signum(float0);
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.signum((double) float1);
      assertEquals(1.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.atanh(double0);
      assertEquals((-0.010715100793361396), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = 0.07073719799518585;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.0708555372623453, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = 0.11113807559013367;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.11159907727494156, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = (-1063);
      double double0 = FastMath.sin((double) int0);
      assertEquals((-0.909335056539327), double0, 0.01D);
      
      double double1 = FastMath.atanh(double0);
      assertEquals((-1.5236697754951287), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.035992228531467885, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 0.11111095942313305;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.11088359754107008, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = 1625.60515102061;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.9857455144196681), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals((-0.7555423484161949), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = (-1356.3169);
      double double1 = FastMath.ceil(double0);
      assertEquals((-1356.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals((-1.0), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = 0.097;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.09684852829972478, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.09654685870926291, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.floor(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals((-1.1752011936438014), double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = (-1.1821586412088555E-114);
      double double1 = FastMath.cbrt(double0);
      assertEquals((-1.0573657865229117E-38), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals((-1.0573657865229117E-38), double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      double double0 = 0.25;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.2526123168081683, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = (-418);
      double double0 = FastMath.sinh((double) int0);
      assertEquals((-1.714207693407102E181), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      long long0 = (-176L);
      double double0 = 0.37707096338272095;
      double double1 = FastMath.copySign((double) long0, double0);
      assertEquals(176.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(1.3639511594053057E76, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log1p(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = (-172);
      double double0 = FastMath.cosh((double) int0);
      assertEquals(2.498163689753789E74, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      double double0 = 23.2;
      double double1 = FastMath.cosh(double0);
      assertEquals(5.9511649034885645E9, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = (-4296.973);
      double double1 = FastMath.asinh(double0);
      assertEquals((-9.058813294401505), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cosh(double1);
      assertEquals(4296.9731163609795, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      float float0 = (-1.4E-45F);
      double double0 = FastMath.acosh((double) float0);
      //  // Unstable assertion: assertEquals(710.1881780014921, double0, 0.01D);
      
      double double1 = FastMath.toRadians(double0);
      //  // Unstable assertion: assertEquals(12.395122014865601, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.toDegrees((double) float1);
      assertEquals((-8.028848784397557E-44), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.expm1((double) float1);
      assertEquals((-1.401298464324817E-45), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9993520699809768, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals(0.9993520699809769, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = 1419;
      float float0 = FastMath.nextUp((float) int0);
      assertEquals(1419.0001F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float float0 = (-1.4E-45F);
      float float1 = FastMath.max(float0, float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.atan((double) float1);
      assertEquals((-1.401298464324817E-45), double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double double0 = 0.036;
      double double1 = FastMath.cos(double0);
      assertEquals(0.9993520699809768, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log(double1, double1);
      assertEquals(1.0, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }
}
