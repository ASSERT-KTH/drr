/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:58:14 GMT 2014
 */

package org.apache.commons.math3.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      float float1 = FastMath.copySign(float0, float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = (-1488);
      float float0 = FastMath.signum((float) int0);
      assertEquals((-1.0F), float0, 0.01F);
      
      int int1 = 115;
      float float1 = FastMath.copySign((float) int1, float0);
      assertEquals((-115.0F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = 1734L;
      long long1 = FastMath.max(long0, long0);
      assertEquals(1734L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = 275;
      float float0 = (-1918.55F);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      float float2 = FastMath.copySign(float1, (float) long1);
      assertEquals(Float.POSITIVE_INFINITY, float2, 0.01F);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double double0 = (-1167.57570137413);
      double double1 = FastMath.copySign(double0, double0);
      assertEquals((-1167.57570137413), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double double0 = (-1167.57570137413);
      int int0 = 2097;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.copySign(double1, (double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      double double0 = (-2797.3861963501);
      double double1 = FastMath.nextUp(double0);
      assertEquals((-2797.3861963500995), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 0.0;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.hypot(double2, double1);
      assertEquals(2797.3861963500995, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float float0 = (-662.2F);
      double double0 = 1.3242245776666673E-186;
      double double1 = FastMath.hypot((double) float0, double0);
      assertEquals(662.2000122070312, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-135.08);
      double double1 = FastMath.cosh(double0);
      //  // Unstable assertion: assertEquals(2.3092375977324025E58, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.acos(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      
      double double3 = FastMath.hypot(double1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double double0 = (-1167.57570137413);
      double double1 = FastMath.acos(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.hypot(double1, double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = (-5406.45149121);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      long long0 = FastMath.round(double1);
      assertEquals(0L, long0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.hypot((double) long0, double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 2097;
      int int1 = FastMath.abs(int0);
      assertEquals(2097, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.hypot((double) int1, (double) int1);
      assertEquals(2965.6058402963804, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      double double0 = 1.3134287685114547E204;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.hypot(double1, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = (-5406.45149121);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.max(double1, double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float float0 = (-1.4E-45F);
      double double0 = FastMath.toDegrees((double) float0);
      assertEquals((-8.028848784397557E-44), double0, 0.01D);
      
      float float1 = FastMath.nextAfter(float0, (double) float0);
      assertEquals((-1.4E-45F), float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      
      double double1 = FastMath.max(double0, (double) float1);
      assertEquals((-1.401298464324817E-45), double1, 0.01D);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      int int0 = 2295;
      double double0 = FastMath.max((double) int0, (double) float1);
      assertEquals(2295.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      float float0 = (-1.4E-45F);
      double double0 = FastMath.toDegrees((double) float0);
      assertEquals((-8.028848784397557E-44), double0, 0.01D);
      
      double double1 = FastMath.max(double0, double0);
      assertEquals((-8.028848784397557E-44), double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1500;
      int int1 = FastMath.abs(int0);
      assertEquals(1500, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = (-53);
      assertFalse(int2 == int1);
      
      float float0 = FastMath.scalb((float) int1, int2);
      assertEquals(1.6653345E-13F, float0, 0.01F);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      float float1 = -0.0F;
      assertFalse(float1 == float0);
      
      float float2 = FastMath.max(float1, float0);
      assertEquals(1.6653345E-13F, float2, 0.01F);
      assertFalse(float0 == float1);
      assertTrue(float0 == float2);
      assertTrue(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = 1.3134287685114547E204;
      float float0 = (-1.4E-45F);
      float float1 = FastMath.nextAfter(float0, double0);
      assertEquals(1.4E-45F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      long long0 = 1023L;
      float float2 = FastMath.max(float1, (float) long0);
      assertEquals(1023.0F, float2, 0.01F);
      assertFalse(float1 == float2);
      assertFalse(float1 == float0);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 1971L;
      float float0 = 1462.542F;
      int int0 = FastMath.round(float0);
      assertEquals(1463, int0);
      
      float float1 = FastMath.max((float) long0, (float) int0);
      assertEquals(1971.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1500;
      int int1 = FastMath.abs(int0);
      assertEquals(1500, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = FastMath.max((float) int1, (float) int1);
      assertEquals(1500.0F, float0, 0.01F);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = (-3405);
      int int1 = FastMath.max(int0, int0);
      assertEquals((-3405), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      long long0 = FastMath.max((long) int1, (long) int0);
      assertEquals((-3405L), long0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 2097;
      int int1 = 0;
      int int2 = FastMath.abs(int1);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      
      int int3 = FastMath.abs(int0);
      assertEquals(2097, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      long long0 = FastMath.max((long) int3, (long) int2);
      assertEquals(2097L, long0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int3);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1925;
      int int1 = (-53);
      int int2 = FastMath.max(int0, int1);
      assertEquals(1925, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float float0 = (-1.0F);
      int int0 = (-1387);
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.min((double) float1, (double) float1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.round(float0);
      assertEquals(0, int0);
      
      double double0 = FastMath.min((double) float0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = (-135.489);
      double double1 = (-2983.3312275056);
      double double2 = FastMath.min(double0, double1);
      assertEquals((-2983.3312275056), double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 0.6027565002441406;
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double1 = FastMath.min((double) long1, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = -0.0F;
      float float1 = FastMath.min(float0, float0);
      assertEquals(-0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = (-2942);
      int int1 = FastMath.max(int0, int0);
      assertEquals((-2942), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float1 = FastMath.min(float0, (float) int1);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-1.0F);
      float float2 = FastMath.min(float0, float1);
      assertEquals((-1.0F), float2, 0.01F);
      assertFalse(float1 == float0);
      assertTrue(float1 == float2);
      assertFalse(float0 == float1);
      assertFalse(float0 == float2);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = (-3212.392586369);
      int int0 = 2585;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int1 = FastMath.getExponent(double1);
      assertEquals(1024, int1);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      
      long long0 = FastMath.min((long) int1, (long) int0);
      assertEquals(1024L, long0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = 2863.5;
      double double1 = FastMath.rint(double0);
      assertEquals(2864.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-0.12505662589444566);
      double double1 = FastMath.rint(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 0.6027565002441406;
      double double1 = FastMath.rint(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 5019;
      int int1 = FastMath.min(int0, int0);
      assertEquals(5019, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.sin((double) int1);
      assertEquals((-0.9536257114807629), double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double1 = FastMath.ceil(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      double double0 = (-839.41743387562);
      double double1 = FastMath.ceil(double0);
      assertEquals((-839.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = (-839.41743387562);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.ceil(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = (-3.4028235E38F);
      int int0 = FastMath.round(float0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 2097;
      int int1 = FastMath.abs(int0);
      assertEquals(2097, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long0 = (-3613L);
      float float0 = FastMath.nextAfter((float) long0, (double) int1);
      assertEquals((-3612.9998F), float0, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 2097;
      int int1 = 0;
      int int2 = FastMath.abs(int1);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      
      int int3 = FastMath.abs(int0);
      assertEquals(2097, int3);
      assertTrue(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      
      float float0 = FastMath.nextAfter((float) int3, (double) int2);
      assertEquals(2096.9998F, float0, 0.01F);
      assertTrue(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int3);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float float0 = (-1.4E-45F);
      double double0 = (-0.6877638274536011);
      float float1 = FastMath.nextAfter(float0, double0);
      //  // Unstable assertion: assertEquals((-1.4E-45F), float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = 1971L;
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.nextAfter(float0, (double) long0);
      assertEquals(3.4028235E38F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.rint((double) float0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.log(double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float1 = FastMath.nextAfter(float0, double1);
      assertEquals(Float.NaN, float1, 0.01F);
      assertFalse(double0 == double1);
      assertFalse(float1 == float0);
      assertFalse(double1 == double0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      float float0 = Float.NaN;
      float float1 = FastMath.nextAfter(float0, double1);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 806;
      double double0 = FastMath.sqrt((double) int0);
      assertEquals(28.39013913315678, double0, 0.01D);
      
      double double1 = FastMath.nextUp(double0);
      assertEquals(28.390139133156783, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = (-3212.392586369);
      int int0 = 2585;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int1 = FastMath.getExponent(double1);
      assertEquals(1024, int1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      
      double double2 = FastMath.nextAfter((double) int1, double1);
      assertEquals(1023.9999999999999, double2, 0.01D);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = (-3279.41128);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextUp(double1);
      assertEquals((-1.7976931348623157E308), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = 3238.63456452736;
      float float0 = 1.4E-45F;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.nextAfter(double1, (double) float0);
      assertEquals(1.7976931348623157E308, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = (-3212.392586369);
      int int0 = 2585;
      double double1 = FastMath.scalb(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      int int1 = FastMath.getExponent(double1);
      //  // Unstable assertion: assertEquals(1024, int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double3 = FastMath.nextAfter((double) int1, double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 0.45994341373443604;
      int int0 = (-53);
      double double1 = FastMath.log1p((double) int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = 1L;
      int int0 = (-206);
      float float0 = FastMath.scalb((float) long0, int0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      float float0 = (-10.323818F);
      int int0 = FastMath.round(float0);
      assertEquals((-10), int0);
      
      int int1 = (-206);
      assertFalse(int1 == int0);
      
      float float1 = FastMath.scalb((float) int0, int1);
      assertEquals(-0.0F, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = 0.5F;
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(2.938736E-39F, float2, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float2 == float1);
      assertFalse(float2 == float0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = FastMath.getExponent(float0);
      assertEquals((-127), int0);
      
      float float1 = FastMath.scalb((float) int0, int0);
      assertEquals((-7.464389E-37F), float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = 2.0684484008569103E67;
      int int0 = 4154;
      int int1 = FastMath.getExponent(double0);
      assertEquals(223, int1);
      assertFalse(int1 == int0);
      
      float float0 = FastMath.scalb((float) int0, int1);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = (-3405);
      int int1 = FastMath.max(int0, int0);
      assertEquals((-3405), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = 3.4028235E38F;
      float float1 = FastMath.scalb(float0, int1);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(int1 == int0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float float0 = (-662.2F);
      int int0 = 806;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      float float2 = FastMath.scalb(float1, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float2, 0.01F);
      assertFalse(float0 == float2);
      assertFalse(float0 == float1);
      assertTrue(float2 == float1);
      assertFalse(float2 == float0);
      assertTrue(float1 == float2);
      assertFalse(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      float float0 = Float.NaN;
      int int0 = 1723;
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 1987;
      double double0 = (-98.4748);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = 3.3057007442449645E-37;
      int int0 = 1047;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(4.985043998024125E278, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = 2.925681159240093E-8;
      int int0 = (-1540);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float float0 = (-1067.37F);
      int int0 = FastMath.round(float0);
      assertEquals((-1067), int0);
      
      double double0 = FastMath.toRadians((double) int0);
      assertEquals((-18.622663118779496), double0, 0.01D);
      
      double double1 = FastMath.scalb(double0, int0);
      assertEquals((-1.178E-320), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 1925;
      int int1 = FastMath.max(int0, int0);
      assertEquals(1925, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      float float0 = (-1067.37F);
      int int2 = FastMath.round(float0);
      assertEquals((-1067), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double0 = FastMath.scalb((double) int1, int2);
      assertEquals(1.21738E-318, double0, 0.01D);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 667.857016800107;
      double double1 = FastMath.sqrt(double0);
      assertEquals(25.842929725557568, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = (-1023);
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(2.8751213679788414E-307, double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      int int0 = (-1488);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 2.925681159240093E-8;
      int int0 = 2495;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = 0.45994341373443604;
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1500;
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 1172;
      double double0 = FastMath.toRadians((double) int0);
      assertEquals(20.45525883337354, double0, 0.01D);
      
      int int1 = Integer.MIN_VALUE;
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 0.0;
      int int0 = FastMath.getExponent(double0);
      //  // Unstable assertion: assertEquals((-1023), int0);
      
      int int1 = (-3478);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      double double1 = FastMath.scalb((double) int0, int1);
      //  // Unstable assertion: assertEquals(-0.0, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = 3238.63456452736;
      int int0 = 2564;
      double double1 = FastMath.expm1(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.scalb(double1, int0);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-3405);
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double0 = FastMath.IEEEremainder((double) float1, (double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      
      double double1 = FastMath.scalb(double0, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      int int0 = (-3405);
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float0 = FastMath.ulp((float) long1);
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = (-3212.392586369);
      int int0 = 2585;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.ulp(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = 2.0684484008569103E67;
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.abs(double1);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 2097;
      int int1 = FastMath.abs(int0);
      assertEquals(2097, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = FastMath.abs((double) int1);
      assertEquals(2097.0, double0, 0.01D);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 2295;
      float float0 = FastMath.abs((float) int0);
      assertEquals(2295.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-3405);
      float float0 = FastMath.abs((float) int0);
      assertEquals(3405.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = (-2694L);
      long long1 = FastMath.abs(long0);
      assertEquals(2694L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = (-1218);
      int int1 = FastMath.abs(int0);
      assertEquals(1218, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = (-5406.45149121);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toDegrees(double1);
      assertEquals(-0.0, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = (-839.41743387562);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.toDegrees(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = (-934);
      int int1 = 0;
      double double0 = FastMath.cbrt((double) int1);
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      double double1 = FastMath.nextAfter(double0, (double) int0);
      //  // Unstable assertion: assertEquals((-4.9E-324), double1, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      double double2 = FastMath.toRadians(double1);
      //  // Unstable assertion: assertEquals(-0.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.abs(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.toRadians((double) int1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 1172;
      int int1 = FastMath.abs(int0);
      assertEquals(1172, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      float float0 = FastMath.scalb((float) int1, int1);
      assertEquals(Float.POSITIVE_INFINITY, float0, 0.01F);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = FastMath.toRadians((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.tanh(double0);
      assertEquals((-0.010714280720105463), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals((-0.2204555349010062), double2, 0.01D);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.log1p((double) int0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.cbrt(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertEquals(4.9E-324, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.cbrt(double1);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = (-2160.818);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals((-4.9E-324), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.acos(double2);
      assertEquals(1.5707963267948966, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = (-662.2F);
      int int0 = 806;
      float float1 = FastMath.scalb(float0, int0);
      assertEquals(Float.NEGATIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.pow((double) int0, (double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 2564;
      float float0 = FastMath.signum((float) int0);
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = FastMath.acos((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.acos((double) float0);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 3714.2;
      double double1 = FastMath.nextAfter(double0, double0);
      assertEquals(3714.2, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 0.15;
      double double1 = FastMath.asin(double0);
      assertEquals(0.15056827277668602, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float float0 = (-1.0F);
      double double0 = FastMath.asin((double) float0);
      assertEquals((-1.5707963267948966), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 1172;
      float float0 = FastMath.signum((float) int0);
      assertEquals(1.0F, float0, 0.01F);
      
      double double0 = FastMath.asin((double) float0);
      assertEquals(1.5707963267948966, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.asin(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 3714.2;
      double double1 = FastMath.nextAfter(double0, double0);
      assertEquals(3714.2, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.asin(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = (-2160.818);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals((-4.9E-324), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.atan2(double2, double0);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double4 = FastMath.atan2(double3, double2);
      assertEquals((-1.5707963267948966), double4, 0.01D);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertTrue(double4 == double3);
      assertTrue(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-839.41743387562);
      double double1 = 0.0;
      double double2 = FastMath.nextUp(double1);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double0, double2);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 4154;
      double double0 = 0.0;
      double double1 = FastMath.atan2((double) int0, double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 16;
      double double2 = FastMath.atan2((double) int0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = (-1993.9550266);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.atan2(double0, double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = (-16.24257930892343);
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 10.699960366000822;
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
      assertFalse(double1 == double0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.atan2((double) float0, (double) float0);
      assertEquals((-2.356194490192345), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.floor(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.log10(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      
      double double3 = FastMath.atan2(double2, double1);
      assertEquals((-1.5707963267948966), double3, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(double0 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      long long0 = (-844L);
      double double0 = FastMath.sinh((double) long0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) float1, double0);
      assertEquals(2.356194490192345, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.atan2((double) float1, (double) float1);
      assertEquals(0.7853981633974483, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.ulp(float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      
      long long0 = 2047L;
      long long1 = FastMath.abs(long0);
      assertEquals(2047L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.atan2((double) float1, (double) long1);
      assertEquals(1.5707963267948966, double0, 0.01D);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = (-5406.45149121);
      double double1 = FastMath.IEEEremainder(double0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 0.0;
      float float0 = Float.POSITIVE_INFINITY;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(Float.POSITIVE_INFINITY, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.atan2(double1, (double) float1);
      assertEquals(0.0, double2, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = (-1993.9550266);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      float float0 = 0.0F;
      float float1 = FastMath.copySign(float0, float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double2 = FastMath.atan2((double) float1, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertTrue(float1 == float0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = 310L;
      double double0 = FastMath.exp((double) long0);
      assertEquals(4.278478855371123E134, double0, 0.01D);
      
      double double1 = FastMath.ulp((double) long0);
      assertEquals(5.6843418860808015E-14, double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atan2(double1, double0);
      assertEquals(1.3285894539235093E-148, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = (-839.41743387562);
      float float0 = (-4049.0F);
      float float1 = FastMath.min(float0, float0);
      assertEquals((-4049.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double1 = FastMath.atan2(double0, (double) float1);
      assertEquals((-2.937173673013924), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.tanh(double0);
      assertEquals((-0.010714280720105463), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.acos(double1);
      assertEquals(1.581510812518017, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = 3.3057007442449645E-37;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tan(double1);
      assertEquals(1.633123935319537E16, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.tan(double1);
      assertEquals(Double.NaN, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.log10((double) float0);
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.tan(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2160.818);
      double double2 = FastMath.atan2(double0, double1);
      assertEquals(3.141592653589793, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.cos(double2);
      assertEquals((-1.0), double3, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = (-254.898);
      double double1 = FastMath.cos(double0);
      assertEquals((-0.9093842210859885), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.cos((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = (-2160.818);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double0, double1);
      assertEquals((-4.9E-324), double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      double double3 = FastMath.cos(double2);
      assertEquals(1.0, double3, 0.01D);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      double double0 = FastMath.sin((double) float0);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = (-595L);
      double double0 = FastMath.pow((double) long0, (double) long0);
      assertEquals(-0.0, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertEquals(-0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.abs(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      
      double double0 = FastMath.sin((double) float1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = 1.285159987981792E19;
      double double1 = FastMath.tan(double0);
      assertEquals(0.6267576294078746, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = 1.633123935319537E16;
      double double1 = FastMath.sin(double0);
      assertEquals((-0.9586967629285477), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = (-1.7976931348623157E308);
      double double1 = FastMath.sin(double0);
      assertEquals((-0.004961954789184062), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = 2.7668218233914262E48;
      double double1 = FastMath.sin(double0);
      assertEquals(0.9607136626356777, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      double double0 = (-2.516866097506943E81);
      double double1 = FastMath.sin(double0);
      assertEquals(0.0894430182372771, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      double double0 = 1.073741824E9;
      double double1 = FastMath.cos(double0);
      assertEquals(0.7867071229411882, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      float float1 = FastMath.nextUp(float0);
      assertEquals((-3.4028235E38F), float1, 0.01F);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
      
      double double0 = FastMath.sin((double) float1);
      assertEquals(0.5218765233336585, double0, 0.01D);
      assertFalse(float1 == float0);
      assertFalse(float0 == float1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = (-191.8541674445);
      double double1 = FastMath.tan(double0);
      assertEquals((-0.22048783961121268), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      double double0 = 2.0684484008569103E67;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      int int0 = 4154;
      double double2 = FastMath.pow(double1, int0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      double double0 = 10.699960366000822;
      int int0 = 0;
      double double1 = FastMath.pow(double0, int0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 2705;
      long long0 = (-4070L);
      long long1 = FastMath.min((long) int0, long0);
      assertEquals((-4070L), long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.pow((double) long1, (double) long1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.pow(double0, double0);
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = (-1.8853982316037226E201);
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = (-3405);
      float float1 = FastMath.scalb(float0, int0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      double double0 = FastMath.IEEEremainder((double) float1, (double) float1);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      
      double double1 = FastMath.pow((double) int0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = 0.0;
      float float0 = (-1.0F);
      double double1 = FastMath.atan2(double0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.log(double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      
      double double3 = FastMath.pow((double) float0, double2);
      assertEquals(Double.NaN, double3, 0.01D);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1177;
      int int1 = FastMath.abs(int0);
      assertEquals(1177, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      double double0 = (-3279.41128);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.pow(double1, (double) int1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      assertTrue(int1 == int0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      double double0 = (-1910.26951012664);
      float float0 = Float.NEGATIVE_INFINITY;
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 1172;
      int int1 = FastMath.abs(int0);
      assertEquals(1172, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = (-3279.41128);
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double1, (double) int1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(int0 == int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      double double0 = (-435.0);
      float float0 = Float.NEGATIVE_INFINITY;
      double double1 = FastMath.pow((double) float0, double0);
      assertEquals(-0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      double double0 = 1529.3633;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      int int0 = 0;
      double double2 = FastMath.nextUp((double) int0);
      assertEquals(4.9E-324, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.pow(double2, double1);
      assertEquals(0.0, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      double double0 = (-839.41743387562);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = 1529.3633;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.sinh(double2);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      
      double double4 = FastMath.pow(double1, double3);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      double double0 = 1.3134287685114547E204;
      double double1 = FastMath.sqrt(double0);
      assertEquals(1.146049199865108E102, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double0);
      assertEquals(2.2923656500939305E202, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.acosh(double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.pow(double3, double1);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertTrue(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double3 == double1);
      assertTrue(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = 1.3134287685114547E204;
      float float0 = (-1.4E-45F);
      double double1 = FastMath.toDegrees((double) float0);
      assertEquals((-8.028848784397557E-44), double1, 0.01D);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.toRadians(double0);
      assertEquals(2.2923656500939305E202, double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      
      double double3 = FastMath.acosh(double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.pow(double3, double1);
      assertEquals(0.0, double4, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double1 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double4);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 0;
      int int1 = 1166;
      int int2 = FastMath.min(int0, int0);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      double double0 = FastMath.log((double) int2, (double) int1);
      assertEquals(-0.0, double0, 0.01D);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      double double1 = (-1658.3103);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.pow(double0, double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertEquals(0.0, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertTrue(double1 == double0);
      
      double double2 = FastMath.cosh(double0);
      //  // Unstable assertion: assertEquals(1.0, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      
      double double3 = FastMath.log(double1, double2);
      //  // Unstable assertion: assertEquals(-0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      
      double double4 = FastMath.pow(double3, double2);
      //  // Unstable assertion: assertEquals(-0.0, double4, 0.01D);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double4);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertTrue(double4 == double3);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      double double2 = 0.0;
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double2, double1);
      //  // Unstable assertion: assertEquals(0.0, double3, 0.01D);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      double double0 = FastMath.pow((double) long1, (double) long1);
      assertEquals(1.0, double0, 0.01D);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      double double0 = 4889.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log1p(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      float float0 = (-662.2F);
      double double0 = FastMath.expm1((double) float0);
      assertEquals((-1.0), double0, 0.01D);
      
      double double1 = FastMath.log1p(double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.log1p(double0);
      assertEquals((-0.010772506387391526), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      double double0 = 10.699960366000822;
      double double1 = FastMath.signum(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = 253.0;
      assertFalse(double2 == double1);
      
      int int0 = (-132);
      double double3 = FastMath.pow(double2, int0);
      assertEquals(6.13891E-318, double3, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      
      double double4 = FastMath.log(double1, double3);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      double double0 = 4889.0;
      double double1 = FastMath.sinh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.log10(double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      double double0 = (-2.9084557554502667E-157);
      double double1 = FastMath.toDegrees(double0);
      assertEquals((-1.6664223968783376E-155), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.expm1(double1);
      assertEquals((-1.6664223968783376E-155), double2, 0.01D);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      double double0 = (-715.910246);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      double double0 = (-1622.1);
      double double1 = FastMath.expm1(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      
      int int0 = (-1488);
      float float0 = FastMath.signum((float) int0);
      //  // Unstable assertion: assertEquals((-1.0F), float0, 0.01F);
      
      double double2 = FastMath.pow(double1, (double) float0);
      //  // Unstable assertion: assertEquals(3.708456430845337E-309, double2, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = FastMath.signum(float0);
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      double double0 = (-1.1748423022293739E-44);
      double double1 = FastMath.sin(double0);
      assertEquals((-1.1748423022293739E-44), double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      
      double double2 = FastMath.signum(double1);
      assertEquals((-1.0), double2, 0.01D);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = 0.058823529411764705;
      double double1 = FastMath.log1p(double0);
      assertEquals(0.05715841383994861, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.atanh(double1);
      assertEquals(0.05722078326367543, double2, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      double double0 = 0.11111095942313305;
      double double1 = FastMath.atanh(double0);
      assertEquals(0.1115716220730297, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.atanh(double0);
      assertEquals((-0.010715100793361396), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.01071448572782725), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      double double0 = 0.09090909090909091;
      double double1 = FastMath.asinh(double0);
      assertEquals(0.09078433518852215, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      double double0 = (-0.12505662589444566);
      double double1 = FastMath.asinh(double0);
      assertEquals((-0.12473293534792326), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      double double0 = 3.761820584522275E-87;
      double double1 = FastMath.asinh(double0);
      assertEquals(3.761820584522275E-87, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      double double0 = 3.761820584522275E-87;
      double double1 = FastMath.acos(double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.tanh(double1);
      assertEquals(0.9171523356672744, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tanh(double0);
      assertEquals(0.0, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double double0 = (-2177.4277448342746);
      double double1 = FastMath.tanh(double0);
      assertEquals((-1.0), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      double double0 = 1735.332110773241;
      double double1 = FastMath.tanh(double0);
      assertEquals(1.0, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      double double0 = (-0.010714690733195933);
      double double1 = FastMath.tanh(double0);
      assertEquals((-0.010714280720105463), double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals((-0.010714485713706794), double2, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      double double0 = (-3802.0351);
      double double1 = FastMath.asinh(double0);
      assertEquals((-8.936438952843362), double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals((-3802.035100000002), double2, 0.01D);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      double double0 = 1.698702640965007;
      double double1 = FastMath.asinh(double0);
      assertEquals(1.300162453167684, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(1.6987026409650068, double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 16;
      int int1 = (-232);
      int int2 = FastMath.min(int0, int1);
      assertEquals((-232), int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      double double0 = FastMath.sinh((double) int2);
      assertEquals((-2.8529213946680437E100), double0, 0.01D);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = 0;
      double double0 = FastMath.sinh((double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.min(int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      double double0 = 469.14;
      double double1 = FastMath.scalb(double0, int1);
      assertEquals(469.14, double1, 0.01D);
      assertTrue(double0 == double1);
      assertTrue(int0 == int1);
      assertTrue(double1 == double0);
      assertTrue(int1 == int0);
      
      double double2 = FastMath.sinh(double1);
      assertEquals(2.7789660710859863E203, double2, 0.01D);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(int0 == int1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      double double0 = (-1167.57570137413);
      double double1 = FastMath.tan(double0);
      assertEquals(1.9491395533118117, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      double double2 = FastMath.copySign(double1, double0);
      assertEquals((-1.9491395533118117), double2, 0.01D);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      
      double double3 = FastMath.cosh(double2);
      assertEquals(3.582519457162282, double3, 0.01D);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      float float0 = Float.NEGATIVE_INFINITY;
      int int0 = FastMath.getExponent(float0);
      assertEquals(128, int0);
      
      double double0 = FastMath.cosh((double) int0);
      assertEquals(1.9438542029972974E55, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float float0 = 1121.6677F;
      double double0 = FastMath.cosh((double) float0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      long long0 = 0L;
      long long1 = FastMath.abs(long0);
      assertEquals(0L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      
      double double0 = FastMath.expm1((double) long1);
      assertEquals(0.0, double0, 0.01D);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      double double0 = (-3212.392586369);
      int int0 = 2585;
      double double1 = FastMath.scalb(double0, int0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int1 = FastMath.getExponent(double1);
      assertEquals(1024, int1);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
      
      float float0 = FastMath.nextUp((float) int1);
      assertEquals(1024.0001F, float0, 0.01F);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      double double0 = (-1167.57570137413);
      double double1 = FastMath.cosh(double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      long long0 = FastMath.round(double1);
      assertEquals(9223372036854775807L, long0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }
}
