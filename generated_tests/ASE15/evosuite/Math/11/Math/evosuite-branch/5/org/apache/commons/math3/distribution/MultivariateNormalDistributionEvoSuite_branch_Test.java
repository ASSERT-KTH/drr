/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:19:22 GMT 2014
 */

package org.apache.commons.math3.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.distribution.MultivariateNormalDistribution;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class MultivariateNormalDistributionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      double[] doubleArray0 = new double[1];
      double double0 = 2.462968349456787;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well19937a0, doubleArray0, doubleArray1);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new double[] {2.462968349456787}, doubleArray0, 0.01);
      
      double[] doubleArray2 = multivariateNormalDistribution0.sample();
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {3.3578696867386855}, doubleArray2, 0.01);
      assertArrayEquals(new double[] {2.462968349456787}, doubleArray0, 0.01);
      assertNotSame(doubleArray2, doubleArray0);
      assertNotSame(doubleArray0, doubleArray2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      double[] doubleArray0 = new double[1];
      double double0 = 2.462968349456787;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well19937a0, doubleArray0, doubleArray1);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new double[] {2.462968349456787}, doubleArray0, 0.01);
      
      double[] doubleArray2 = multivariateNormalDistribution0.getStandardDeviations();
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(doubleArray2);
      assertArrayEquals(new double[] {2.462968349456787}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {1.5693847040980065}, doubleArray2, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(doubleArray2, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 2329.2;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[2][4];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotSame(doubleArray2, doubleArray0);
      
      doubleArray2[1] = double0;
      doubleArray1[1] = doubleArray2;
      assertNotNull(doubleArray1[1]);
      
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) synchronizedRandomGenerator0, doubleArray0, doubleArray1);
      assertEquals(2, multivariateNormalDistribution0.getDimension());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new double[] {2329.2, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray0, doubleArray2);
      
      double[] doubleArray3 = new double[7];
      assertFalse(doubleArray3.equals((Object)doubleArray0));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray0);
      assertNotSame(doubleArray3, doubleArray2);
      
      try {
        double double1 = multivariateNormalDistribution0.density(doubleArray3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 2
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      double[] doubleArray0 = new double[1];
      double double0 = 2.462968349456787;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well19937a0, doubleArray0, doubleArray1);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new double[] {2.462968349456787}, doubleArray0, 0.01);
      
      double double1 = multivariateNormalDistribution0.density(doubleArray1[0]);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertFalse(double1 == double0);
      assertEquals(0.25420298755283344, double1, 0.01D);
      assertArrayEquals(new double[] {2.462968349456787}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = (-8.244395239939089E-9);
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][3];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 is smaller than, or equal to, the minimum (0): not positive definite matrix: value -0 at index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double[][] doubleArray1 = new double[7][10];
      doubleArray1[4] = doubleArray0;
      assertNotNull(doubleArray1[4]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray1[4], doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 7
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double[][] doubleArray0 = new double[20][6];
      MultivariateNormalDistribution multivariateNormalDistribution0 = null;
      try {
        multivariateNormalDistribution0 = new MultivariateNormalDistribution(doubleArray0[0], doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 20 != 6
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      double[] doubleArray0 = new double[1];
      double double0 = 2.462968349456787;
      doubleArray0[0] = double0;
      double[][] doubleArray1 = new double[1][10];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      MultivariateNormalDistribution multivariateNormalDistribution0 = new MultivariateNormalDistribution((RandomGenerator) well19937a0, doubleArray0, doubleArray1);
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertNotNull(multivariateNormalDistribution0);
      assertArrayEquals(new double[] {2.462968349456787}, doubleArray0, 0.01);
      
      Array2DRowRealMatrix array2DRowRealMatrix0 = (Array2DRowRealMatrix)multivariateNormalDistribution0.getCovariances();
      assertEquals(1, multivariateNormalDistribution0.getDimension());
      assertEquals(true, array2DRowRealMatrix0.isSquare());
      assertEquals(1, array2DRowRealMatrix0.getRowDimension());
      assertEquals(false, array2DRowRealMatrix0.isTransposable());
      assertEquals(1, array2DRowRealMatrix0.getColumnDimension());
      assertNotNull(array2DRowRealMatrix0);
      assertArrayEquals(new double[] {2.462968349456787}, doubleArray0, 0.01);
  }
}
