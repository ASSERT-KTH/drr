/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:09:28 GMT 2014
 */

package org.apache.commons.math3.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math3.exception.MathArithmeticException;
import org.apache.commons.math3.exception.NullArgumentException;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.apache.commons.math3.fraction.FractionField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 286;
      Fraction fraction0 = new Fraction((double) int0);
      assertEquals(286, fraction0.shortValue());
      assertEquals(286.0F, fraction0.floatValue(), 0.01F);
      assertEquals(286L, fraction0.longValue());
      assertEquals(28600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(286, fraction0.getNumerator());
      assertEquals(286, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(286.0, fraction0.doubleValue(), 0.01D);
      assertEquals(30, fraction0.byteValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals("286", string0);
      assertEquals(286, fraction0.shortValue());
      assertEquals(286.0F, fraction0.floatValue(), 0.01F);
      assertEquals(286L, fraction0.longValue());
      assertEquals(28600.0, fraction0.percentageValue(), 0.01D);
      assertEquals(286, fraction0.getNumerator());
      assertEquals(286, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(286.0, fraction0.doubleValue(), 0.01D);
      assertEquals(30, fraction0.byteValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals("1 / 5", string0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-3288);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-3,288, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 1/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 100;
      int int1 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertEquals((-4.656613E-8F), fraction0.floatValue(), 0.01F);
      assertEquals((-4.6566128730773926E-8), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(536870912, fraction0.getDenominator());
      assertEquals((-4.656612873077393E-6), fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(-25, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 0/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      Fraction fraction0 = new Fraction(int0, int1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // the fraction to divide by must not be zero: 0/1
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divide(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  //@Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      double double0 = 0.0;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = new Fraction(int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2147483648L), fraction1.longValue());
      assertEquals((-2.147483648E9), fraction1.doubleValue(), 0.01D);
      assertEquals(-2147483648, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals((-2.147483648E11), fraction1.percentageValue(), 0.01D);
      assertEquals(-2147483648, fraction1.intValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.multiply(fraction0);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-2147483648L), fraction1.longValue());
      assertEquals((-2.147483648E9), fraction1.doubleValue(), 0.01D);
      assertEquals(-2147483648, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals((-2.14748365E9F), fraction1.floatValue(), 0.01F);
      assertEquals((-2.147483648E11), fraction1.percentageValue(), 0.01D);
      assertEquals(-2147483648, fraction1.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction0.equals((Object)fraction2));
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiply(fraction0);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiply(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-534.99);
      Fraction fraction0 = new Fraction(double0);
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals(-53499, fraction0.getNumerator());
      assertEquals(-22, fraction0.byteValue());
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals(100, fraction0.getDenominator());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-534, fraction0.shortValue());
      assertEquals(-534, fraction0.intValue());
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals((short) (-534), short0);
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals(-53499, fraction0.getNumerator());
      assertEquals(-22, fraction0.byteValue());
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals(100, fraction0.getDenominator());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-534, fraction0.shortValue());
      assertEquals(-534, fraction0.intValue());
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      
      Fraction fraction1 = fraction0.divide((int) short0);
      assertEquals(17833, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(17800, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0018539325842697, fraction1.doubleValue(), 0.01D);
      assertEquals(1.001854F, fraction1.floatValue(), 0.01F);
      assertEquals(100.18539325842697, fraction1.percentageValue(), 0.01D);
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals(-53499, fraction0.getNumerator());
      assertEquals(-22, fraction0.byteValue());
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals(100, fraction0.getDenominator());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-534, fraction0.shortValue());
      assertEquals(-534, fraction0.intValue());
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      
      Fraction fraction2 = fraction1.divide((int) short0);
      assertEquals(17833, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1L, fraction1.longValue());
      assertEquals(17800, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0018539325842697, fraction1.doubleValue(), 0.01D);
      assertEquals(1.001854F, fraction1.floatValue(), 0.01F);
      assertEquals(100.18539325842697, fraction1.percentageValue(), 0.01D);
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals(-53499, fraction0.getNumerator());
      assertEquals(-22, fraction0.byteValue());
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals(100, fraction0.getDenominator());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-534, fraction0.shortValue());
      assertEquals(-534, fraction0.intValue());
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertEquals(-17833, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals((-0.001876130959895636), fraction2.doubleValue(), 0.01D);
      assertEquals(9505200, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals((-0.0018761309F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals((-0.1876130959895636), fraction2.percentageValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      
      Fraction fraction3 = new Fraction(double0);
      assertEquals((-534L), fraction3.longValue());
      assertEquals((-53499.0), fraction3.percentageValue(), 0.01D);
      assertEquals((-534.99), fraction3.doubleValue(), 0.01D);
      assertEquals(-22, fraction3.byteValue());
      assertEquals(-534, fraction3.shortValue());
      assertEquals(-534, fraction3.intValue());
      assertEquals(100, fraction3.getDenominator());
      assertEquals(-53499, fraction3.getNumerator());
      assertEquals((-534.99F), fraction3.floatValue(), 0.01F);
      assertTrue(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertNotNull(fraction3);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      
      // Undeclared exception!
      try {
        Fraction fraction4 = fraction2.add(fraction3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow, numerator too large after multiply: -5,085,204,781
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = (-447);
      Fraction fraction1 = new Fraction(int0);
      assertEquals(-447, fraction1.intValue());
      assertEquals(-447, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-447, fraction1.getNumerator());
      assertEquals(65, fraction1.byteValue());
      assertEquals((-44700.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-447.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-447L), fraction1.longValue());
      assertEquals((-447.0F), fraction1.floatValue(), 0.01F);
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(-447, fraction1.intValue());
      assertEquals(-447, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-447, fraction1.getNumerator());
      assertEquals(65, fraction1.byteValue());
      assertEquals((-44700.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-447.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-447L), fraction1.longValue());
      assertEquals((-447.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-446.8), fraction2.doubleValue(), 0.01D);
      assertEquals((-446.8F), fraction2.floatValue(), 0.01F);
      assertEquals(-446, fraction2.shortValue());
      assertEquals((-446L), fraction2.longValue());
      assertEquals((-44680.0), fraction2.percentageValue(), 0.01D);
      assertEquals(-2234, fraction2.getNumerator());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(-446, fraction2.intValue());
      assertEquals(66, fraction2.byteValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertEquals(-1, fraction2.intValue());
      assertEquals((-1L), fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals((-100.0), fraction2.percentageValue(), 0.01D);
      assertEquals((-1.0), fraction2.doubleValue(), 0.01D);
      assertEquals(-1, fraction2.getNumerator());
      assertEquals(-1, fraction2.byteValue());
      assertEquals((-1.0F), fraction2.floatValue(), 0.01F);
      assertEquals(-1, fraction2.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction1);
      assertSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      int int1 = 3;
      Fraction fraction0 = new Fraction(int0, int1);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(fraction1);
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fraction
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.THREE_FIFTHS;
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertNotNull(fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      
      Fraction fraction3 = Fraction.ONE;
      assertEquals(1.0F, fraction3.floatValue(), 0.01F);
      assertEquals(1.0, fraction3.doubleValue(), 0.01D);
      assertEquals(1, fraction3.shortValue());
      assertEquals(1L, fraction3.longValue());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(100.0, fraction3.percentageValue(), 0.01D);
      assertEquals(1, fraction3.intValue());
      assertEquals(1, fraction3.byteValue());
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertTrue(fraction3.equals((Object)fraction2));
      assertNotNull(fraction3);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      
      boolean boolean0 = fraction2.equals((Object) fraction3);
      assertTrue(boolean0);
      assertEquals(1.0F, fraction3.floatValue(), 0.01F);
      assertEquals(1.0, fraction3.doubleValue(), 0.01D);
      assertEquals(1, fraction3.shortValue());
      assertEquals(1L, fraction3.longValue());
      assertEquals(1, fraction3.getNumerator());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(100.0, fraction3.percentageValue(), 0.01D);
      assertEquals(1, fraction3.intValue());
      assertEquals(1, fraction3.byteValue());
      assertEquals(60.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(1, fraction2.byteValue());
      assertEquals(1.0F, fraction2.floatValue(), 0.01F);
      assertEquals(100.0, fraction2.percentageValue(), 0.01D);
      assertEquals(1L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(1, fraction2.shortValue());
      assertEquals(1, fraction2.getNumerator());
      assertEquals(1, fraction2.intValue());
      assertEquals(1.0, fraction2.doubleValue(), 0.01D);
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertTrue(fraction3.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction3));
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction1.equals((Object) fraction0);
      assertFalse(boolean0);
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals(-1, fraction1.shortValue());
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.byteValue());
      assertEquals(-1, fraction1.getNumerator());
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = (-447);
      Integer integer0 = new Integer(int0);
      assertEquals((-447), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      boolean boolean0 = fraction0.equals((Object) integer0);
      assertFalse(boolean0);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertTrue(integer0.equals((Object)int0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertFalse(boolean0);
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(50.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ONE;
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.byteValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals(1, int0);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.MINUS_ONE;
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      
      int int0 = fraction1.compareTo(fraction0);
      assertEquals((-1), int0);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(-1, fraction1.byteValue());
      assertEquals((-1.0), fraction1.doubleValue(), 0.01D);
      assertEquals(-1, fraction1.getNumerator());
      assertEquals((-100.0), fraction1.percentageValue(), 0.01D);
      assertEquals((-1.0F), fraction1.floatValue(), 0.01F);
      assertEquals(-1, fraction1.intValue());
      assertEquals((-1L), fraction1.longValue());
      assertEquals(-1, fraction1.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertNotNull(fraction1);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
  }

  //@Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = new Fraction(int0);
      assertEquals((-2147483648L), fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-2.147483648E9), fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals((-2.147483648E11), fraction0.percentageValue(), 0.01D);
      assertEquals((-2.14748365E9F), fraction0.floatValue(), 0.01F);
      assertEquals(-2147483648, fraction0.getNumerator());
      assertEquals(-2147483648, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.abs();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/1, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction -2,147,483,648/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.reciprocal();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // zero denominator in fraction 1/0
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 1246.1838723601024;
      Fraction fraction0 = new Fraction(double0);
      assertEquals(1246L, fraction0.longValue());
      assertEquals(1246.183870967742, fraction0.doubleValue(), 0.01D);
      assertEquals(1246.1838F, fraction0.floatValue(), 0.01F);
      assertEquals(1246, fraction0.intValue());
      assertEquals(386317, fraction0.getNumerator());
      assertEquals(1246, fraction0.shortValue());
      assertEquals(124618.3870967742, fraction0.percentageValue(), 0.01D);
      assertEquals(-34, fraction0.byteValue());
      assertEquals(310, fraction0.getDenominator());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = (-1725);
      double double0 = 1863.620462416959;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, (double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Unable to convert 1,863.62 to fraction after -1,725 iterations
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo(fraction0);
      assertEquals(0, int0);
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      
      short short0 = fraction0.shortValue();
      assertEquals((short)0, short0);
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      
      Fraction fraction1 = null;
      try {
        fraction1 = new Fraction((double) int0, (int) short0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 0 to fraction (1/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-447);
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction((double) int0, (double) int0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert -447 to fraction (-9,223,372,036,854,775,360/9,223,372,036,854,775,807)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      int int0 = 132;
      Fraction fraction0 = null;
      try {
        fraction0 = new Fraction(double0, double0, int0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: Overflow trying to convert 285,040,095,144,011,776 to fraction (285,040,095,144,011,776/1)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(23314, int0);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(25.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
  }

  //@Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      Fraction fraction1 = fraction0.add(int0);
      assertEquals((-4.29496736E8F), fraction1.floatValue(), 0.01F);
      assertEquals((-429496729L), fraction1.longValue());
      assertEquals(26215, fraction1.shortValue());
      assertEquals(103, fraction1.byteValue());
      assertEquals(5, fraction1.getDenominator());
      assertEquals(-429496729, fraction1.intValue());
      assertEquals((-4.294967292E8), fraction1.doubleValue(), 0.01D);
      assertEquals(-2147483646, fraction1.getNumerator());
      assertEquals((-4.294967292E10), fraction1.percentageValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 1.9987994582857286E-8;
      int int0 = 1408;
      Fraction fraction0 = new Fraction(double0, int0);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getDenominator();
      assertEquals(1, int0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-534.99);
      Fraction fraction0 = new Fraction(double0);
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals(-534, fraction0.intValue());
      assertEquals(100, fraction0.getDenominator());
      assertEquals(-534, fraction0.shortValue());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-22, fraction0.byteValue());
      assertEquals(-53499, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      double double1 = fraction0.percentageValue();
      assertEquals((-53499.0), double1, 0.01D);
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals(-534, fraction0.intValue());
      assertEquals(100, fraction0.getDenominator());
      assertEquals(-534, fraction0.shortValue());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-22, fraction0.byteValue());
      assertEquals(-53499, fraction0.getNumerator());
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.getNumerator();
      assertEquals(2, int0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      FractionField fractionField0 = fraction0.getField();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fractionField0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      int int0 = (-447);
      Integer integer0 = new Integer(int0);
      assertEquals((-447), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Fraction fraction1 = fraction0.multiply((int) integer0);
      assertEquals(-89, fraction1.intValue());
      assertEquals(-89, fraction1.byteValue());
      assertEquals((-89.4), fraction1.doubleValue(), 0.01D);
      assertEquals(-447, fraction1.getNumerator());
      assertEquals(5, fraction1.getDenominator());
      assertEquals((-89.4F), fraction1.floatValue(), 0.01F);
      assertEquals((-89L), fraction1.longValue());
      assertEquals(-89, fraction1.shortValue());
      assertEquals((-8940.0), fraction1.percentageValue(), 0.01D);
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = (-534.99);
      Fraction fraction0 = new Fraction(double0);
      assertEquals(-534, fraction0.intValue());
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      assertEquals(-53499, fraction0.getNumerator());
      assertEquals(100, fraction0.getDenominator());
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-22, fraction0.byteValue());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-534, fraction0.shortValue());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals((short) (-534), short0);
      assertEquals(-534, fraction0.intValue());
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      assertEquals(-53499, fraction0.getNumerator());
      assertEquals(100, fraction0.getDenominator());
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-22, fraction0.byteValue());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-534, fraction0.shortValue());
      
      Fraction fraction1 = fraction0.subtract((int) short0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(-99, fraction1.getNumerator());
      assertEquals((-0.99), fraction1.doubleValue(), 0.01D);
      assertEquals(100, fraction1.getDenominator());
      assertEquals((-99.0), fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals((-0.99F), fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(-534, fraction0.intValue());
      assertEquals((-534.99), fraction0.doubleValue(), 0.01D);
      assertEquals(-53499, fraction0.getNumerator());
      assertEquals(100, fraction0.getDenominator());
      assertEquals((-534.99F), fraction0.floatValue(), 0.01F);
      assertEquals((-53499.0), fraction0.percentageValue(), 0.01D);
      assertEquals(-22, fraction0.byteValue());
      assertEquals((-534L), fraction0.longValue());
      assertEquals(-534, fraction0.shortValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(0.4F, float0, 0.01F);
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(40.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_FIFTH;
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(0L, long0);
      assertEquals(0.2F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(20.0, fraction0.percentageValue(), 0.01D);
      assertEquals(0.2, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 767;
      Fraction fraction0 = new Fraction(int0);
      assertEquals(767.0, fraction0.doubleValue(), 0.01D);
      assertEquals(767L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(767, fraction0.shortValue());
      assertEquals(767.0F, fraction0.floatValue(), 0.01F);
      assertEquals(767, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(767, fraction0.getNumerator());
      assertEquals(76700.0, fraction0.percentageValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.divide(fraction0);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(100.0, fraction1.percentageValue(), 0.01D);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(767.0, fraction0.doubleValue(), 0.01D);
      assertEquals(767L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(767, fraction0.shortValue());
      assertEquals(767.0F, fraction0.floatValue(), 0.01F);
      assertEquals(767, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(767, fraction0.getNumerator());
      assertEquals(76700.0, fraction0.percentageValue(), 0.01D);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(66.66666666666666, fraction0.percentageValue(), 0.01D);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.divide(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow in fraction 2/-2,147,483,648, cannot negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.percentageValue(), 0.01D);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(100.0, fraction0.percentageValue(), 0.01D);
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertNotNull(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
  }
}
