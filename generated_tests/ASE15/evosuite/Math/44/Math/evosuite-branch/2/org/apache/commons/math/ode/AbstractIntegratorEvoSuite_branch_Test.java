/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:59:56 GMT 2014
 */

package org.apache.commons.math.ode;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math.ode.nonstiff.GillIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math.ode.sampling.StepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractIntegratorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 1336.8450739130035;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(double0, double0, double0, double0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(1336.8450739130035, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(1336.8450739130035, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(1336.8450739130035, dormandPrince853Integrator0.getMinStep(), 0.01D);
      
      int int0 = Integer.MAX_VALUE;
      dormandPrince853Integrator0.setMaxEvaluations(int0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(1336.8450739130035, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(1336.8450739130035, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(1336.8450739130035, dormandPrince853Integrator0.getMinStep(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-0.08899033645133331);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(double0);
      assertNotNull(eulerIntegrator0);
      assertEquals(0, eulerIntegrator0.getEvaluations());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(2147483647, eulerIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(0, eulerIntegrator0.getEvaluations());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(2147483647, eulerIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-0.08899033645133331);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      
      double double1 = midpointIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-1331.683635);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      
      double double1 = midpointIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      
      int int0 = 0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(double0, double1, double0, (double) int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1331.683635, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      int int1 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(1331.683635, dormandPrince853Integrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, dormandPrince853Integrator0.getMaxEvaluations());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01D);
      assertEquals(0, dormandPrince853Integrator0.getEvaluations());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[5];
      GillIntegrator gillIntegrator0 = new GillIntegrator(double0);
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(0, gillIntegrator0.getEvaluations());
      
      // Undeclared exception!
      try {
        gillIntegrator0.computeDerivatives(doubleArray0[4], doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-0.08899033645133331);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      
      midpointIntegrator0.clearEventHandlers();
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-1331.683635);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      
      String string0 = classicalRungeKuttaIntegrator0.getName();
      assertEquals("classical Runge-Kutta", string0);
      assertNotNull(string0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      int int0 = threeEighthesIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[5];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, doubleArray0, doubleArray0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EventHandler eventHandler0 = null;
      int int0 = 74;
      highamHall54Integrator0.addEventHandler(eventHandler0, double0, doubleArray0[3], int0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = (-1331.683635);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      Collection<StepHandler> collection0 = midpointIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-0.08899033645133331);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      
      midpointIntegrator0.clearStepHandlers();
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, midpointIntegrator0.getEvaluations());
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
  }
}
