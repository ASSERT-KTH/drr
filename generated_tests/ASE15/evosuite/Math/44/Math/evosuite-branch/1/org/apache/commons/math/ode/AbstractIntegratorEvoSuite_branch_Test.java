/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:49:18 GMT 2014
 */

package org.apache.commons.math.ode;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import org.apache.commons.math.analysis.solvers.MullerSolver2;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
import org.apache.commons.math.ode.events.EventHandler;
import org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math.ode.nonstiff.GillIntegrator;
import org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math.ode.sampling.StepHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class AbstractIntegratorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[4];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(double0, double0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
      
      int int0 = 2257;
      highamHall54Integrator0.setMaxEvaluations(int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01D);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01D);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01D);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01D);
      assertEquals(2257, highamHall54Integrator0.getMaxEvaluations());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, highamHall54Integrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-0.08333333333333333);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, double0, double0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-8.428938276109013);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(double0);
      assertNotNull(midpointIntegrator0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(0, midpointIntegrator0.getEvaluations());
      
      double double1 = midpointIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, midpointIntegrator0.getMaxEvaluations());
      assertEquals(0, midpointIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-0.08333333333333333);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, double0, double0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 1295.78058655;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, double0, double0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      assertEquals(1295.78058655, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1295.78058655, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(1295.78058655, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      
      boolean boolean0 = true;
      int int0 = 2754;
      double[] doubleArray0 = new double[7];
      // Undeclared exception!
      try {
        double double1 = graggBulirschStoerIntegrator0.initializeStep(boolean0, int0, doubleArray0, (double) int0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-0.08333333333333333);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(double0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
      
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(2147483647, classicalRungeKuttaIntegrator0.getMaxEvaluations());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, classicalRungeKuttaIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      
      double double1 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = (-0.08333333333333333);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double0, double0, double0, double0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
      
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
      assertNotNull(string0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMaxStep(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(0.08333333333333333, graggBulirschStoerIntegrator0.getMinStep(), 0.01D);
      assertEquals(2147483647, graggBulirschStoerIntegrator0.getMaxEvaluations());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, graggBulirschStoerIntegrator0.getEvaluations());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 1295.78058655;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(double0, double0, double0, double0);
      assertNotNull(dormandPrince54Integrator0);
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals(1295.78058655, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(1295.78058655, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(1295.78058655, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
      
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, dormandPrince54Integrator0.getEvaluations());
      assertEquals(1295.78058655, dormandPrince54Integrator0.getMaxStep(), 0.01D);
      assertEquals(1295.78058655, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(1295.78058655, dormandPrince54Integrator0.getMinStep(), 0.01D);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01D);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01D);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01D);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(2147483647, dormandPrince54Integrator0.getMaxEvaluations());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      
      int int0 = 2257;
      EventHandler eventHandler0 = null;
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertNotNull(mullerSolver2_0);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01D);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01D);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, mullerSolver2_0.getEvaluations());
      assertEquals(0, mullerSolver2_0.getMaxEvaluations());
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01D);
      
      threeEighthesIntegrator0.addEventHandler(eventHandler0, double0, double0, int0, (UnivariateRealSolver) mullerSolver2_0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01D);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01D);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01D);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01D);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01D);
      assertEquals(0, mullerSolver2_0.getEvaluations());
      assertEquals(0, mullerSolver2_0.getMaxEvaluations());
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-8.428938276109013);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(double0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      Collection<StepHandler> collection0 = threeEighthesIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(0, threeEighthesIntegrator0.getEvaluations());
      assertEquals(2147483647, threeEighthesIntegrator0.getMaxEvaluations());
      assertEquals("3/8", threeEighthesIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-356);
      GillIntegrator gillIntegrator0 = new GillIntegrator((double) int0);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals(0, gillIntegrator0.getEvaluations());
      
      gillIntegrator0.clearStepHandlers();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01D);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01D);
      assertEquals(2147483647, gillIntegrator0.getMaxEvaluations());
      assertEquals(0, gillIntegrator0.getEvaluations());
  }
}
