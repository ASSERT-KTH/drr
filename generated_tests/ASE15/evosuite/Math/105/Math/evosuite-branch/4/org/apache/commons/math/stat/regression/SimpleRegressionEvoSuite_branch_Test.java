/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:16:21 GMT 2014
 */

package org.apache.commons.math.stat.regression;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.stat.regression.SimpleRegression;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class SimpleRegressionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      
      double double0 = (-761.75662);
      // Undeclared exception!
      try {
        double double1 = simpleRegression0.getSlopeConfidenceInterval(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      
      double double0 = simpleRegression0.getRSquare();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      
      // Undeclared exception!
      try {
        double double1 = simpleRegression0.getSlopeConfidenceInterval(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[2];
      double double0 = 2594.9;
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[1] = double0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      simpleRegression0.addData(doubleArray0);
      assertEquals(5050129.5075, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(1683376.5025000002, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(648.7250000000001, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(336675.3005000003, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(5L, simpleRegression0.getN());
      assertEquals(0.5590169943749475, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(0.06249999999999998, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(648.725, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals((-0.24999999999999994), simpleRegression0.getR(), 0.01D);
      assertEquals(5386804.808, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals((-0.2500000000000001), simpleRegression0.getSlope(), 0.01D);
      
      double double1 = simpleRegression0.getR();
      assertEquals((-0.24999999999999994), double1, 0.01D);
      assertFalse(double1 == double0);
      assertEquals(5050129.5075, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(1683376.5025000002, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(648.7250000000001, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(336675.3005000003, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(5L, simpleRegression0.getN());
      assertEquals(0.5590169943749475, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(0.06249999999999998, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(648.725, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals((-0.24999999999999994), simpleRegression0.getR(), 0.01D);
      assertEquals(5386804.808, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals((-0.2500000000000001), simpleRegression0.getSlope(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      
      double[][] doubleArray0 = new double[7][4];
      simpleRegression0.addData(doubleArray0);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(7L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      
      double double0 = simpleRegression0.getSlopeConfidenceInterval();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(7L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      //  // Unstable assertion: assertNotNull(simpleRegression0);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(0L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      
      double double0 = simpleRegression0.getTotalSumSquares();
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(0L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      
      double[][] doubleArray0 = new double[7][4];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = double0;
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(0L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      
      doubleArray0[1] = doubleArray1;
      //  // Unstable assertion: assertNotNull(doubleArray0[1]);
      
      simpleRegression0.addData(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(7L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      
      double double1 = simpleRegression0.getR();
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(7L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      //  // Unstable assertion: assertNotNull(simpleRegression0);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(0L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      
      double double0 = 2231.06;
      simpleRegression0.addData(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(1L, simpleRegression0.getN());
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      
      simpleRegression0.addData(double0, double0);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(2L, simpleRegression0.getN());
      
      double double1 = simpleRegression0.getSlopeStdErr();
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(2L, simpleRegression0.getN());
      
      double double2 = simpleRegression0.predict(double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, simpleRegression0.getTotalSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      //  // Unstable assertion: assertEquals(2L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      
      double double0 = simpleRegression0.getInterceptStdErr();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      
      double double0 = simpleRegression0.getIntercept();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      
      long long0 = simpleRegression0.getN();
      assertEquals(0L, long0);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      
      double double0 = simpleRegression0.getRegressionSumSquares();
      assertEquals(Double.NaN, double0, 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      
      simpleRegression0.clear();
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleRegression simpleRegression0 = new SimpleRegression();
      assertNotNull(simpleRegression0);
      assertEquals(Double.NaN, simpleRegression0.getSlopeStdErr(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRSquare(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSlope(), 0.01D);
      assertEquals(0L, simpleRegression0.getN());
      assertEquals(Double.NaN, simpleRegression0.getIntercept(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getR(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getSumSquaredErrors(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getMeanSquareError(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getTotalSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getRegressionSumSquares(), 0.01D);
      assertEquals(Double.NaN, simpleRegression0.getInterceptStdErr(), 0.01D);
      
      // Undeclared exception!
      try {
        double double0 = simpleRegression0.getSignificance();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // degrees of freedom must be positive.
         //
      }
  }
}
