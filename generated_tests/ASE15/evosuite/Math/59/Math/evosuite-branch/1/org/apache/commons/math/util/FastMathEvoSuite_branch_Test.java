/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:34:35 GMT 2014
 */

package org.apache.commons.math.util;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.util.FastMath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class FastMathEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double double0 = FastMath.random();
      //  // Unstable assertion: assertEquals(0.0, double0, 0.01D);
      
      double double1 = (-1653.9133);
      //  // Unstable assertion: assertFalse(double1 == double0);
      
      double double2 = FastMath.log1p(double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
      
      double double3 = FastMath.max(double2, double0);
      //  // Unstable assertion: assertTrue(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double3);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      double double0 = (-1749.2);
      float float0 = 1.0F;
      double double1 = FastMath.ceil(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1749.0), double1, 0.01D);
      
      int int0 = FastMath.round(float0);
      assertEquals(1, int0);
      
      double double2 = FastMath.max((double) int0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.0, double2, 0.01D);
  }

  //@Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-3644.3894F);
      float float2 = FastMath.max(float0, float1);
      assertTrue(float0 == float2);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertFalse(float1 == float2);
      assertFalse(float2 == float1);
      assertTrue(float2 == float0);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = FastMath.round(float0);
      assertEquals(1, int0);
      
      long long0 = FastMath.max((long) int0, (long) int0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 998L;
      long long1 = 0L;
      long long2 = FastMath.max(long0, long1);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(998L, long2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 0;
      int int1 = FastMath.max(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 904;
      int int1 = 2163;
      int int2 = FastMath.max(int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(2163, int2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = (-688.625294371021);
      double double1 = FastMath.log(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.min(double1, double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = 998L;
      long long1 = FastMath.abs(long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(998L, long1);
      
      double double0 = FastMath.min((double) long1, (double) long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(998.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double double0 = 1479.7;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(25.825636941760095, double1, 0.01D);
      
      double double2 = FastMath.min(double0, double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertEquals(25.825636941760095, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-2915);
      float float0 = FastMath.abs((float) int0);
      //  // Unstable assertion: assertEquals(2915.0F, float0, 0.01F);
      
      float float1 = Float.NaN;
      //  // Unstable assertion: assertFalse(float1 == float0);
      
      float float2 = FastMath.min(float1, float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = (-2915);
      long long0 = FastMath.min((long) int0, (long) int0);
      assertEquals((-2915L), long0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 1L;
      long long1 = (-1L);
      long long2 = FastMath.min(long0, long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals((-1L), long2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 0;
      int int1 = (-418);
      int int2 = FastMath.min(int0, int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-418), int2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      double double0 = 1.5;
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = 0.5;
      double double1 = FastMath.rint(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double double0 = (-0.048761289570406596);
      double double1 = FastMath.rint(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = (-2.6033824355191673E-8);
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-2.603382435519167E-8), double1, 0.01D);
      
      double double2 = FastMath.ceil(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(-0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.ceil(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = (-2121.112);
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.floor(double1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.9999999999999999), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = 0.49999999999999994;
      double double1 = FastMath.nextUp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.5, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 998L;
      double double0 = FastMath.asinh((double) long0);
      assertEquals(7.598900707874323, double0, 0.01D);
      
      long long1 = FastMath.abs(long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(998L, long1);
      
      double double1 = FastMath.nextAfter((double) long1, double0);
      assertFalse(double1 == double0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertFalse(double0 == double1);
      assertEquals(997.9999999999999, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = (-4267615245585081135L);
      double double0 = FastMath.atan2((double) long0, (double) long0);
      assertEquals((-2.356194490192345), double0, 0.01D);
      
      double double1 = 0.0;
      assertFalse(double1 == double0);
      
      double double2 = FastMath.nextAfter(double1, double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-4.9E-324), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double1, double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      double double0 = (-2478.6512516);
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.nextAfter(double1, double1);
      //  // Unstable assertion: assertTrue(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertTrue(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 1479.7;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(25.825636941760095, double1, 0.01D);
      
      double double2 = FastMath.abs(double1);
      assertFalse(double2 == double0);
      assertTrue(double2 == double1);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(25.825636941760095, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float float0 = 1.0F;
      int int0 = FastMath.round(float0);
      assertEquals(1, int0);
      
      float float1 = FastMath.abs((float) int0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = (-1L);
      long long1 = FastMath.abs(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1L, long1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = (-3366);
      int int1 = FastMath.abs(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3366, int1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      float float0 = 2195.2F;
      double double0 = FastMath.asin((double) float0);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
      
      double double1 = FastMath.cbrt(double0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertTrue(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.nextUp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.cbrt(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.7031839360032603E-108, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      double double0 = (-2741.3728723025);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.3271462314821956), double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.9040783722004233, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.5707963267948966, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.acos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.max(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double0 = FastMath.acos((double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(3.141592653589793, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      double double0 = 8.0;
      double double1 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1490.479161252178, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = 8.0;
      double double1 = FastMath.log10(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.9030899869919435, double1, 0.01D);
      
      double double2 = FastMath.acos(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.4438851810851734, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.asin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.exp(double1);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(1.0, double2, 0.01D);
      
      double double3 = FastMath.asin(double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertEquals(1.5707963267948966, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 3151;
      double double1 = FastMath.asin(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.atan2((double) int0, double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(1.5707963267948966, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-3366);
      double double1 = FastMath.atan2((double) int0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.log(double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(3.141592653589793, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-3.141592653589793), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      double double0 = 2464.04009;
      double double1 = (-1696.526774080352);
      double double2 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.atan2(double1, double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertEquals(-0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = 2464.04009;
      int int0 = 3151;
      double double1 = FastMath.exp(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      int int1 = FastMath.abs(int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(3151, int1);
      
      double double2 = FastMath.atan2((double) int1, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertTrue(int0 == int1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(int1 == int0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = 4.469664527819298;
      double double2 = FastMath.atan2(double0, double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-1.5707963267948966), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-2.356194490192345), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = 2.479773539153719E-5;
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0000000003074638, double1, 0.01D);
      
      double double2 = 3269.2533487;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.cosh(double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = FastMath.atan2(double3, double1);
      assertFalse(double1 == double4);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double4 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertEquals(1.5707963267948966, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = 1479.7;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.atan2(double1, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.7853981633974483, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = 0.0;
      int int0 = (-3693);
      int int1 = FastMath.min(int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-3693), int1);
      
      double double1 = FastMath.atan2(double0, (double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(3.141592653589793, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 3151;
      float float0 = 0.0F;
      float float1 = FastMath.min(float0, (float) int0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
      
      double double0 = FastMath.exp((double) int0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.atan2((double) float1, double0);
      assertFalse(double0 == double1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertFalse(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atan2(double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  //@Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.random();
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
      
      double double3 = FastMath.atan2(double2, double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double2 == double3);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertEquals(3.141592653589793, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      long long0 = (-4267615245585081135L);
      double double0 = 95.5641818728323;
      double double1 = FastMath.atan2((double) long0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.5707963267948966), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      double double0 = 8.0;
      double double1 = FastMath.log10(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(0.9030899869919435, double1, 0.01D);
      
      double double2 = (-3805.4703385783832);
      //  // Unstable assertion: assertFalse(double2 == double1);
      
      double double3 = FastMath.asin(double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
      
      double double4 = FastMath.atan2(double1, double3);
      //  // Unstable assertion: assertFalse(double4 == double2);
      //  // Unstable assertion: assertFalse(double4 == double1);
      //  // Unstable assertion: assertFalse(double4 == double3);
      //  // Unstable assertion: assertFalse(double4 == double0);
      //  // Unstable assertion: assertFalse(double3 == double4);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double4);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double4);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double4);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertEquals(1.5707963267948966, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = (-3336.2);
      double double1 = FastMath.atan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.570496584582184), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.2246467991473532E-16), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      double double0 = (-2478.6512516);
      double double1 = FastMath.asin(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      // Undeclared exception!
      try {
        double double2 = FastMath.tan(double1);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.log1p(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.tanh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.tan(double1);
      assertTrue(double1 == double2);
      assertTrue(double1 == double0);
      assertTrue(double2 == double0);
      assertTrue(double2 == double1);
      assertTrue(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = (-2121.112);
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-0.8592682891499066), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double double0 = 3.141592653589793;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cos(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.cos(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      double double0 = (-3.141592653589793);
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.2246467991473532E-16), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      long long0 = 998L;
      double double0 = FastMath.expm1((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = 0.49999999999999994;
      double double1 = FastMath.atan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.4636476090008061, double1, 0.01D);
      
      long long0 = FastMath.round(double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0L, long0);
      
      double double2 = FastMath.sin((double) long0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = (-4267615245585081135L);
      double double0 = FastMath.cos((double) long0);
      assertEquals(0.7295351973773256, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double double0 = 8.0E298;
      double double1 = FastMath.sin(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.042338395486962485, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 4.503599627370495E15;
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.4732928859543091, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 444.74573261194854;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.4145474605786403E193, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.930686866694797, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      double double0 = 2.85040095144011776E17;
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.9999577912686926, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      double double0 = (-626.32);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(5.084987737807812E271, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals((-0.9312846042994296), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 443.59482610589095;
      double double1 = FastMath.expm1(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(4.4749190001334936E192, double1, 0.01D);
      
      double double2 = FastMath.sin(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(0.5960919830926542, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.tan(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.5574077246549023), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.sin(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.8414709848078965), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = 1890.0F;
      double double0 = (-8.759009668711894);
      double double1 = FastMath.pow(double0, (double) float0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = (-1749.2);
      double double1 = FastMath.toDegrees(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-100221.77752428359), double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = (-75.92F);
      double double0 = (-8.0E298);
      double double1 = FastMath.pow((double) float0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-4747.47844687127);
      double double2 = FastMath.cbrt(double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertEquals((-16.806901981316415), double2, 0.01D);
      
      long long0 = FastMath.round(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(0L, long0);
      
      float float0 = Float.NaN;
      float float1 = FastMath.max(float0, (float) long0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      
      double double3 = FastMath.pow(double2, (double) float1);
      //  // Unstable assertion: assertFalse(double3 == double1);
      //  // Unstable assertion: assertFalse(double3 == double2);
      //  // Unstable assertion: assertFalse(double3 == double0);
      //  // Unstable assertion: assertFalse(double2 == double3);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double3);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertTrue(float0 == float1);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double3);
      //  // Unstable assertion: assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = (-1.8270843113106163);
      double double1 = FastMath.tan(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(3.81605487234873, double1, 0.01D);
      
      double double2 = Double.NEGATIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.sin(double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals((-0.6244773768319938), double3, 0.01D);
      
      double double4 = FastMath.pow(double3, double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double4);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double4);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(Double.POSITIVE_INFINITY, double4, 0.01D);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = (-1.8270843113106163);
      double double1 = FastMath.atan2(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-2.356194490192345), double1, 0.01D);
      
      double double2 = Double.NEGATIVE_INFINITY;
      assertFalse(double2 == double1);
      
      double double3 = FastMath.pow(double1, double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      double double0 = (-467.19);
      double double1 = FastMath.signum(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      int int0 = 2288;
      double double3 = FastMath.pow(double2, (double) int0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2464.04009;
      double double2 = FastMath.tan(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.6707265724635691, double2, 0.01D);
      
      double double3 = FastMath.asin(double0);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertTrue(double3 == double0);
      assertEquals(0.0, double3, 0.01D);
      
      double double4 = FastMath.log(double3);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertTrue(double3 == double0);
      assertFalse(double3 == double4);
      assertEquals(Double.NEGATIVE_INFINITY, double4, 0.01D);
      
      double double5 = FastMath.pow(double4, double2);
      assertFalse(double4 == double2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double5);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertFalse(double0 == double4);
      assertFalse(double0 == double1);
      assertTrue(double0 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double5);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double5);
      assertFalse(double2 == double4);
      assertFalse(double5 == double2);
      assertFalse(double5 == double1);
      assertFalse(double5 == double4);
      assertFalse(double5 == double3);
      assertFalse(double5 == double0);
      assertFalse(double3 == double5);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertTrue(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double1 == double3);
      assertFalse(double1 == double5);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double5, 0.01D);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = (-467.19);
      double double1 = FastMath.signum(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      int int0 = (-911);
      double double3 = FastMath.pow(double2, (double) int0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertEquals(-0.0, double3, 0.01D);
  }

  //@Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float float0 = (-28.65238F);
      double double0 = FastMath.random();
      assertEquals(0.0, double0, 0.01D);
      
      double double1 = FastMath.log(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NEGATIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, (double) float0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-467.19);
      double double1 = FastMath.signum(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
      
      double double2 = FastMath.atanh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      int int0 = (-888);
      double double3 = FastMath.pow(double2, (double) int0);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(0.0, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.log(double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertFalse(double3 == double0);
      assertEquals(Double.NEGATIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      long long0 = 998L;
      double double0 = FastMath.expm1((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = (-1.0);
      assertFalse(double1 == double0);
      
      double double2 = FastMath.rint(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals((-1.0), double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double0);
      assertFalse(double2 == double3);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertTrue(double1 == double2);
      assertEquals(Double.NaN, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 998L;
      double double0 = FastMath.expm1((double) long0);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01D);
      
      double double1 = FastMath.pow((double) long0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 2385.161;
      double double1 = 0.0;
      double double2 = FastMath.pow(double0, double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(1.0, double2, 0.01D);
      
      double double3 = FastMath.atanh(double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
      
      double double4 = (-413.0121);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      
      double double5 = FastMath.pow(double3, double4);
      assertFalse(double5 == double2);
      assertFalse(double5 == double4);
      assertFalse(double5 == double0);
      assertTrue(double5 == double1);
      assertFalse(double5 == double3);
      assertFalse(double3 == double5);
      assertFalse(double3 == double0);
      assertFalse(double3 == double4);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double4);
      assertFalse(double1 == double2);
      assertFalse(double1 == double3);
      assertTrue(double1 == double5);
      assertFalse(double4 == double2);
      assertFalse(double4 == double0);
      assertFalse(double4 == double5);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double2 == double3);
      assertFalse(double2 == double4);
      assertFalse(double2 == double0);
      assertFalse(double2 == double5);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double4);
      assertFalse(double0 == double3);
      assertFalse(double0 == double5);
      assertFalse(double0 == double1);
      assertEquals(0.0, double5, 0.01D);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 1479.7;
      double double1 = FastMath.toRadians(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(25.825636941760095, double1, 0.01D);
      
      double double2 = FastMath.cosh(double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
      
      double double3 = FastMath.pow(double2, double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(double3 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.exp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1.0, double1, 0.01D);
      
      double double2 = FastMath.pow(double0, double1);
      assertTrue(double2 == double0);
      assertFalse(double2 == double1);
      assertTrue(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.sqrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      int int0 = (-3366);
      double double2 = FastMath.pow(double1, (double) int0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = (-3805.4703385783832);
      double double1 = FastMath.cosh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertTrue(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.acosh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(710.1881780014921, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertEquals(6.566937061453962, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.log1p(double1);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      float float0 = (-1.0F);
      float float1 = FastMath.max(float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.0F), float1, 0.01F);
      
      double double0 = FastMath.pow((double) float1, (double) float1);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-1.0), double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 0.6666666269302368;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.17609128494165033), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.ulp(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(4.9E-324, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(1.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      double double1 = FastMath.log10(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      double double0 = -0.0;
      double double1 = FastMath.tan(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(-0.0, double1, 0.01D);
      
      double double2 = FastMath.log(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = (-2741.3728723025);
      double double1 = FastMath.cos(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-0.3271462314821956), double1, 0.01D);
      
      double double2 = FastMath.expm1(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-0.2790216944085988), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.expm1(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = (-709.9924114921);
      double double1 = FastMath.exp(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = (-717.81726F);
      float float2 = FastMath.min(float0, float1);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertEquals((-717.81726F), float2, 0.01F);
      
      double double0 = FastMath.expm1((double) float2);
      //  // Unstable assertion: assertTrue(float2 == float1);
      //  // Unstable assertion: assertFalse(float2 == float0);
      //  // Unstable assertion: assertFalse(float0 == float2);
      //  // Unstable assertion: assertFalse(float0 == float1);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertTrue(float1 == float2);
      //  // Unstable assertion: assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = (-803.1876699);
      double double1 = FastMath.expm1(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = FastMath.sqrt(double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.pow(double1, double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertEquals(3.708456430845337E-309, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.signum(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      double double0 = (-1749.2);
      double double1 = FastMath.atanh(double0);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      
      double double2 = FastMath.signum(double1);
      //  // Unstable assertion: assertFalse(double2 == double1);
      //  // Unstable assertion: assertFalse(double2 == double0);
      //  // Unstable assertion: assertFalse(double1 == double2);
      //  // Unstable assertion: assertFalse(double1 == double0);
      //  // Unstable assertion: assertFalse(double0 == double2);
      //  // Unstable assertion: assertFalse(double0 == double1);
      //  // Unstable assertion: assertEquals(1.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      double double0 = 0.030589580535888672;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.03059912701512731, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      double double0 = 0.058823529411764705;
      double double1 = FastMath.atanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.05889151782819173, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      double double0 = 0.14285714285714285;
      double double1 = FastMath.atanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(0.14384103622589045, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.atanh(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      double double0 = 2.479773539153719E-5;
      double double1 = FastMath.nextAfter(double0, double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(2.4797735391537192E-5, double1, 0.01D);
      
      double double2 = FastMath.asinh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals(2.4797735388995724E-5, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double double0 = 0.041666663879186654;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.04165461696372619, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double double0 = 0.1428571343421936;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.14237563473843468, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      double double0 = 0.5000000000042687;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.4812118250634215, double1, 0.01D);
      
      double double2 = FastMath.toRadians(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.008398730746887677, double2, 0.01D);
      
      double double3 = FastMath.asinh(double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double0 == double3);
      assertEquals(0.008398632010794249, double3, 0.01D);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      double double0 = 0.5000000000042687;
      double double1 = FastMath.asinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.4812118250634215, double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertEquals(0.44721359550301243, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      double double0 = 1.0;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.7615941559557649, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double double0 = (-4747.47844687127);
      double double1 = FastMath.cbrt(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-16.806901981316415), double1, 0.01D);
      
      double double2 = FastMath.tanh(double1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals((-0.999999999999995), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double double0 = (-2383.591993655215);
      double double1 = FastMath.tanh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double double0 = 615.28436;
      double double1 = FastMath.tanh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(1.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      double double0 = 0.19999999999923582;
      double double1 = FastMath.sinh(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals(0.20133600254031447, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double double0 = (-4747.47844687127);
      double double1 = FastMath.cbrt(double0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertEquals((-16.806901981316415), double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertEquals((-9956685.576707399), double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double double0 = (-286.006);
      double double1 = FastMath.sinh(double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals((-8.124517819580557E123), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      double double0 = 303.0013;
      double double1 = FastMath.nextAfter(double0, double0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(303.00130000000007, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double1);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertEquals(1.9532714572047434E131, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.sinh(double1);
      assertTrue(double1 == double0);
      assertTrue(double1 == double2);
      assertTrue(double2 == double1);
      assertTrue(double2 == double0);
      assertTrue(double0 == double1);
      assertTrue(double0 == double2);
      assertEquals(0.0, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = (-2.957007209750105E-8);
      double double1 = FastMath.max(double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-2.957007209750105E-8), double1, 0.01D);
      
      double double2 = FastMath.cosh(double1);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double0 == double2);
      assertTrue(double0 == double1);
      assertEquals(1.0000000000000004, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      double double0 = 0.0;
      double double1 = FastMath.cbrt(double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
      
      double double2 = FastMath.log10(double1);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertTrue(double1 == double0);
      assertFalse(double1 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertEquals(Double.NaN, double2, 0.01D);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = 1.0F;
      double double0 = FastMath.acosh((double) float0);
      assertEquals(0.0, double0, 0.01D);
  }
}
