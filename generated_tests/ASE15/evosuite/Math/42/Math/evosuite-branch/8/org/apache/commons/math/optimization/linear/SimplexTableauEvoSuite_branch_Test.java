/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:57:51 GMT 2014
 */

package org.apache.commons.math.optimization.linear;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.LinkedList;
import org.apache.commons.math.exception.OutOfRangeException;
import org.apache.commons.math.linear.ArrayRealVector;
import org.apache.commons.math.linear.OpenMapRealVector;
import org.apache.commons.math.linear.RealVector;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexTableau;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class SimplexTableauEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, doubleArray0[1]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      double double0 = 0.0;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType1 = GoalType.MAXIMIZE;
      assertNotSame(goalType1, goalType0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType1, boolean0, doubleArray0[2]);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType1.equals((Object)goalType0));
      assertNotNull(simplexTableau1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType1, goalType0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(goalType1.equals((Object)goalType0));
      assertFalse(goalType0.equals((Object)goalType1));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(8, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(goalType1, goalType0);
      assertNotSame(goalType0, goalType1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, doubleArray0[0]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      int int0 = 1282;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean0 == boolean1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, doubleArray0[0]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertTrue(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean0);
      assertTrue(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean1);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(simplexTableau0, simplexTableau1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 14.985317893989835;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linearObjectiveFunction0.equals((Object) linearObjectiveFunction0);
      assertTrue(boolean1 == boolean0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean2 = linkedList0.add(linearConstraint0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertTrue(boolean2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, double0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertNotNull(simplexTableau1);
      assertEquals(1, linkedList0.size());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean3 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1 == boolean3);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertFalse(boolean3);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 14.985317893989835;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linearObjectiveFunction0.equals((Object) linearObjectiveFunction0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      int int0 = 0;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertTrue(boolean0 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertEquals(1, linkedList0.size());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertEquals(1, linkedList0.size());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 14.985317893989835;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction1 = new LinearObjectiveFunction(doubleArray0, double0);
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertNotNull(linearObjectiveFunction1);
      assertEquals(14.985317893989835, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction1, linkedList0, goalType0, boolean0, double0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertNotNull(simplexTableau1);
      assertEquals(14.985317893989835, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(linearObjectiveFunction1.equals((Object)linearObjectiveFunction0));
      assertFalse(boolean0 == boolean1);
      assertFalse(linearObjectiveFunction0.equals((Object)linearObjectiveFunction1));
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(14.985317893989835, linearObjectiveFunction1.getConstantTerm(), 0.01D);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
      assertNotSame(linearObjectiveFunction1, linearObjectiveFunction0);
      assertNotSame(linearObjectiveFunction0, linearObjectiveFunction1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[8]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      double double0 = 0.0;
      int int0 = (-1144);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = true;
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, doubleArray0[6]);
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean2 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertFalse(boolean2);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      int int0 = 3360;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(int0);
      assertNotNull(arrayRealVector0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3360, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      
      Relationship relationship0 = Relationship.LEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) arrayRealVector0, relationship0, (double) int0);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3360, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3360.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      
      boolean boolean1 = simplexTableau0.equals((Object) linearConstraint0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(3360, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(3360.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.LEQ, linearConstraint0.getRelationship());
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, doubleArray0[0]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau1 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertNotNull(simplexTableau1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau1, simplexTableau0);
      
      boolean boolean1 = simplexTableau0.equals((Object) simplexTableau1);
      assertFalse(simplexTableau0.equals((Object)simplexTableau1));
      assertFalse(simplexTableau1.equals((Object)simplexTableau0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(simplexTableau0, simplexTableau1);
      assertNotSame(simplexTableau1, simplexTableau0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 14.985317893989835;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linearObjectiveFunction0.equals((Object) linearObjectiveFunction0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      int int0 = 0;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      simplexTableau0.divideRow(int0, doubleArray0[0]);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, doubleArray0[0]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean1 = false;
      assertFalse(boolean1 == boolean0);
      
      int int0 = 1282;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean1, doubleArray0[1], int0);
      assertFalse(boolean1 == boolean0);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertFalse(boolean1 == boolean0);
      assertNotNull(realPointValuePair0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, realPointValuePair0.getValue(), 0.01D);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      doubleArray0[1] = doubleArray0[0];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.GEQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, doubleArray0[0], relationship0, doubleArray0, doubleArray0[0]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1]);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(realPointValuePair0);
      assertEquals(1, linkedList0.size());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals(0.0, realPointValuePair0.getValue(), 0.01D);
      assertArrayEquals(new double[] {1.0, 1.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = (-5876.658);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-5876.658), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, doubleArray0[0]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      int int0 = (-2209);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals((-5876.658), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(1, linkedList0.size());
      assertEquals((-5876.658), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(realPointValuePair0);
      assertEquals(1, linkedList0.size());
      assertEquals((-5876.658), realPointValuePair0.getValue(), 0.01D);
      assertEquals((-5876.658), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = (-1.0);
      doubleArray0[0] = double0;
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      //  // Unstable assertion: assertNotNull(linkedList0);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      //  // Unstable assertion: assertNotNull(linearObjectiveFunction0);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      //  // Unstable assertion: assertNotNull(simplexTableau0);
      //  // Unstable assertion: assertEquals((-1.0), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      //  // Unstable assertion: assertEquals(0, linkedList0.size());
      //  // Unstable assertion: assertEquals("[]", linkedList0.toString());
      //  // Unstable assertion: assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      int int0 = 3360;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[1], int0);
      assertNotNull(simplexTableau0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.isOptimal();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean1);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = (-5876.658);
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-5876.658), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, relationship0, doubleArray0[0]);
      assertNotNull(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      int int0 = (-2209);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-5876.658), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = simplexTableau0.isOptimal();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals((-5876.658), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 0.0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = 0;
      OpenMapRealVector openMapRealVector0 = new OpenMapRealVector(int0, int0, double0);
      assertNotNull(openMapRealVector0);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      Relationship relationship0 = Relationship.EQ;
      LinearConstraint linearConstraint0 = new LinearConstraint((RealVector) openMapRealVector0, relationship0, (double) int0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      
      boolean boolean0 = linkedList0.add(linearConstraint0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertTrue(boolean0);
      
      GoalType goalType0 = GoalType.MINIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      simplexTableau0.dropPhase1Objective();
      assertEquals(Relationship.EQ, linearConstraint0.getRelationship());
      assertEquals(0.0, linearConstraint0.getValue(), 0.01D);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(1, linkedList0.size());
      assertEquals(0, openMapRealVector0.getDimension());
      assertEquals(Double.NaN, openMapRealVector0.getSparsity(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  //@Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 1.0;
      doubleArray0[0] = double0;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[0]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
      
      RealPointValuePair realPointValuePair0 = simplexTableau0.getSolution();
      assertNotNull(realPointValuePair0);
      assertEquals(1.0, realPointValuePair0.getValue(), 0.01D);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {1.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 14.985317893989835;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean0 = linearObjectiveFunction0.equals((Object) linearObjectiveFunction0);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      Relationship relationship0 = Relationship.GEQ;
      double double1 = (-40.362140122532594);
      LinearConstraint linearConstraint0 = new LinearConstraint(doubleArray0, double0, relationship0, doubleArray0, double1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertNotNull(linearConstraint0);
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-55.34745801652243), linearConstraint0.getValue(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      boolean boolean1 = linkedList0.add(linearConstraint0);
      assertTrue(boolean1 == boolean0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertEquals(1, linkedList0.size());
      assertEquals(Relationship.GEQ, linearConstraint0.getRelationship());
      assertEquals((-55.34745801652243), linearConstraint0.getValue(), 0.01D);
      assertTrue(boolean1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double1);
      assertFalse(double0 == double1);
      assertTrue(boolean0 == boolean1);
      assertFalse(double1 == double0);
      assertNotNull(simplexTableau0);
      assertEquals(1, linkedList0.size());
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19() {}
//   @Test(timeout = 4000)
//   public void test19()  throws Throwable  {
//       double[] doubleArray0 = new double[12];
//       LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[8]);
//       assertNotNull(linearObjectiveFunction0);
//       assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       
//       LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
//       assertNotNull(linkedList0);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       
//       boolean boolean0 = true;
//       GoalType goalType0 = GoalType.MINIMIZE;
//       SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[2]);
//       assertNotNull(simplexTableau0);
//       assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//       
//       int int0 = simplexTableau0.hashCode();
//       assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
//       assertEquals(0, linkedList0.size());
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(1226, int0);
//       assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
//   }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      double double0 = 6.837671137556327E30;
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(6.837671137556327E30, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      boolean boolean0 = false;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(6.837671137556327E30, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 164;
      // Undeclared exception!
      try {
        simplexTableau0.setEntry(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (164)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 14.985317893989835;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, doubleArray0);
      assertNotNull(arrayRealVector0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = true;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0);
      assertNotNull(simplexTableau0);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double[][] doubleArray1 = simplexTableau0.getData();
      assertNotNull(doubleArray1);
      assertEquals(2, arrayRealVector0.getDimension());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(14.985317893989835, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction(doubleArray0, doubleArray0[8]);
      assertNotNull(linearObjectiveFunction0);
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MINIMIZE;
      boolean boolean0 = false;
      double double0 = 0.0;
      int int0 = (-1144);
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, double0, int0);
      assertNotNull(simplexTableau0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0.0, linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try {
        simplexTableau0.subtractRow(int0, int0, doubleArray0[6]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // row index (-1,144)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-2359.1196795139904);
      boolean boolean0 = false;
      ArrayRealVector arrayRealVector0 = new ArrayRealVector(doubleArray0, boolean0);
      assertNotNull(arrayRealVector0);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinearObjectiveFunction linearObjectiveFunction0 = new LinearObjectiveFunction((RealVector) arrayRealVector0, double0);
      assertNotNull(linearObjectiveFunction0);
      assertEquals((-2359.1196795139904), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      LinkedList<LinearConstraint> linkedList0 = new LinkedList<LinearConstraint>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      GoalType goalType0 = GoalType.MAXIMIZE;
      SimplexTableau simplexTableau0 = new SimplexTableau(linearObjectiveFunction0, linkedList0, goalType0, boolean0, doubleArray0[8]);
      assertNotNull(simplexTableau0);
      assertEquals((-2359.1196795139904), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = simplexTableau0.getNumDecisionVariables();
      assertEquals((-2359.1196795139904), linearObjectiveFunction0.getConstantTerm(), 0.01D);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, arrayRealVector0.isInfinite());
      assertEquals(false, arrayRealVector0.isNaN());
      assertEquals(0.0, arrayRealVector0.getLInfNorm(), 0.01D);
      assertEquals(9, arrayRealVector0.getDimension());
      assertEquals(0.0, arrayRealVector0.getNorm(), 0.01D);
      assertEquals(0.0, arrayRealVector0.getL1Norm(), 0.01D);
      assertEquals(10, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }
}
