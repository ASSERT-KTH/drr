/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:53:26 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ComplexFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try {
        complexFormat0.setRealFormat(numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getCurrencyInstance();
//       assertEquals("-\u00A4 ", decimalFormat0.getNegativePrefix());
//       assertEquals(2, decimalFormat0.getMaximumFractionDigits());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals("\u00A4 #,##0.00", decimalFormat0.toPattern());
//       assertEquals("\u00A4 #.##0,00", decimalFormat0.toLocalizedPattern());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("\u00A4 ", decimalFormat0.getPositivePrefix());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       assertEquals(false, decimalFormat0.isParseIntegerOnly());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals(2, decimalFormat0.getMinimumFractionDigits());
//       assertNotNull(decimalFormat0);
//       
//       String string0 = "";
//       ComplexFormat complexFormat0 = null;
//       try {
//         complexFormat0 = new ComplexFormat(string0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // imaginaryCharacter must be a non-empty string.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complexFormat0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("#.##0", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      
      complexFormat0.setRealFormat((NumberFormat) decimalFormat0);
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertEquals("#,##0", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals("#.##0", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(2296.446233624907, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(1366.61491982234, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(1845.543, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("1.845,54 + 1.366,61i", string0);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(2296.446233624907, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(1366.61491982234, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(1845.543, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertNotNull(string0);
      
      try {
        Complex complex1 = complexFormat0.parse(string0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"1.845,54 + 1.366,61i\"
         //
      }
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "2-2";
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"2-2\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complexFormat0);
      
      Complex complex0 = Complex.I;
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(119.139696, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(119.139696, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("119,14", string0);
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(119.139696, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(119.139696, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertNotNull(string0);
      
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      //  // Unstable assertion: assertEquals(0, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals(-1, parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertNotNull(parsePosition0);
      
      Complex complex1 = complexFormat0.parse(string0, parsePosition0);
      //  // Unstable assertion: assertNotSame(complex1, complex0);
      //  // Unstable assertion: assertNotSame(complex0, complex1);
      //  // Unstable assertion: assertFalse(complex1.equals((Object)complex0));
      //  // Unstable assertion: assertFalse(complex0.equals((Object)complex1));
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals(119.14, complex1.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex1.isInfinite());
      //  // Unstable assertion: assertEquals(0.0, complex1.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(119.14, complex1.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex1.isNaN());
      //  // Unstable assertion: assertEquals(0.0, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(119.139696, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(119.139696, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(6, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals(-1, parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complexFormat0);
      
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(1845.543, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(1366.61491982234, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(2296.446233624907, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertNotNull(complex0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      //  // Unstable assertion: assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(100, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      //  // Unstable assertion: assertNotNull(decimalFormat0);
      
      complexFormat0.setRealFormat((NumberFormat) decimalFormat0);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals("#.##0%", decimalFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("#,##0%", decimalFormat0.toPattern());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseIntegerOnly());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isParseBigDecimal());
      //  // Unstable assertion: assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      //  // Unstable assertion: assertEquals(3, decimalFormat0.getGroupingSize());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getNegativeSuffix());
      //  // Unstable assertion: assertEquals(100, decimalFormat0.getMultiplier());
      //  // Unstable assertion: assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      //  // Unstable assertion: assertEquals(true, decimalFormat0.isGroupingUsed());
      //  // Unstable assertion: assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      //  // Unstable assertion: assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      //  // Unstable assertion: assertEquals("", decimalFormat0.getPositivePrefix());
      //  // Unstable assertion: assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      //  // Unstable assertion: assertEquals("%", decimalFormat0.getPositiveSuffix());
      //  // Unstable assertion: assertEquals("-", decimalFormat0.getNegativePrefix());
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("1.845,54 + 1.366,61i", string0);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(1845.543, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(1366.61491982234, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(2296.446233624907, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertNotNull(string0);
      
      try {
        Complex complex1 = complexFormat0.parse(string0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"1.845,54 + 1.366,61i\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complexFormat0);
      
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertEquals(1366.61491982234, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(2296.446233624907, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(1845.543, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals("1.845,54 + 1.366,61i", string0);
      //  // Unstable assertion: assertEquals(1366.61491982234, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(2296.446233624907, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(1845.543, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertNotNull(string0);
      
      Complex complex1 = complexFormat0.parse(string0);
      //  // Unstable assertion: assertNotSame(complex1, complex0);
      //  // Unstable assertion: assertNotSame(complex0, complex1);
      //  // Unstable assertion: assertFalse(complex1.equals((Object)complex0));
      //  // Unstable assertion: assertFalse(complex0.equals((Object)complex1));
      //  // Unstable assertion: assertEquals(false, complex1.isNaN());
      //  // Unstable assertion: assertEquals(1366.61, complex1.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(2296.4408948849523, complex1.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(1845.54, complex1.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex1.isInfinite());
      //  // Unstable assertion: assertEquals(1366.61491982234, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(2296.446233624907, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(1845.543, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      int int0 = (-567);
      Integer integer0 = new Integer(int0);
      assertEquals((-567), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator((Object) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(4, attributedCharacterIterator0.getEndIndex());
      assertEquals(4, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(attributedCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      // Undeclared exception!
      try {
        String string0 = complexFormat0.format((Object) complexFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      String string0 = " ";
      try {
        Object object0 = complexFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "org.apache.commons.math.complex.Complex";
      ComplexFormat complexFormat0 = new ComplexFormat(string0);
      assertEquals("org.apache.commons.math.complex.Complex", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
  }
}
