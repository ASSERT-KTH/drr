/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:32:54 GMT 2014
 */

package org.apache.commons.math.complex;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.complex.Complex;
import org.apache.commons.math.complex.ComplexFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ComplexFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "|@WIeB;  Y1pz ";
      ComplexFormat complexFormat0 = new ComplexFormat(string0);
      assertEquals("|@WIeB;  Y1pz ", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      NumberFormat numberFormat0 = null;
      // Undeclared exception!
      try {
        complexFormat0.setRealFormat(numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // realFormat can not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryFormat can not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      NumberFormat numberFormat0 = null;
      ComplexFormat complexFormat0 = null;
      try {
        complexFormat0 = new ComplexFormat(string0, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // imaginaryCharacter must be a non-empty string.
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = " ";
      ComplexFormat complexFormat0 = new ComplexFormat(string0);
      assertEquals(" ", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      try {
        Object object0 = complexFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      String string0 = "76M";
      short short0 = (short)24;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)24, (short)short1);
      
      ParsePosition parsePosition0 = new ParsePosition((int) short1);
      assertEquals("java.text.ParsePosition[index=24,errorIndex=-1]", parsePosition0.toString());
      assertEquals(24, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertTrue(short1.equals((Object)short0));
      assertNotNull(parsePosition0);
      
      Object object0 = complexFormat0.parseObject(string0, parsePosition0);
      assertEquals(23, parsePosition0.getErrorIndex());
      assertEquals(24, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=24,errorIndex=23]", parsePosition0.toString());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertTrue(short1.equals((Object)short0));
      assertNull(object0);
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(306.47355, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isInfinite());
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(306.47355, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isInfinite());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("(-Infinity) + 306.47i", string0);
      
      ComplexFormat complexFormat0 = new ComplexFormat();
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complexFormat0);
      
      complexFormat0.setImaginaryCharacter(string0);
      //  // Unstable assertion: assertEquals("(-Infinity) + 306.47i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(306.47355, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isInfinite());
      
      try {
        Object object0 = complexFormat0.parseObject(string0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  //@Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "\"3JeE|u/kII,Q";
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      ComplexFormat complexFormat0 = new ComplexFormat(string0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      assertEquals("\"3JeE|u/kII,Q", complexFormat0.getImaginaryCharacter());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertNotNull(complexFormat0);
      
      String string1 = "4+15";
      assertNotSame(string1, string0);
      
      try {
        Object object0 = complexFormat0.parseObject(string1);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      String string0 = "448-`8_7>lGS^-]E";
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Complex complex0 = complexFormat0.parse(string0, parsePosition0);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(4, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=4]", parsePosition0.toString());
      assertNull(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "3)g8b74ExI&n";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      try {
        Complex complex0 = complexFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable complex number: \"3)g8b74ExI&n\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      String string0 = "76M";
      Complex complex0 = complexFormat0.parse(string0);
      assertEquals(false, complex0.isInfinite());
      assertEquals(76.0, complex0.getReal(), 0.01D);
      assertEquals(0.0, complex0.getImaginary(), 0.01D);
      assertEquals(false, complex0.isNaN());
      assertEquals(76.0, complex0.abs(), 0.01D);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complex0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      String string0 = "448-`8_7>lGS^-]E";
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator((Object) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot format given Object as a Date
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexFormat complexFormat0 = new ComplexFormat();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      short short0 = (short)3343;
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short)3343, (short)short1);
      
      AttributedCharacterIterator attributedCharacterIterator0 = complexFormat0.formatToCharacterIterator((Object) short1);
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(5, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(5, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertTrue(short1.equals((Object)short0));
      assertNotNull(attributedCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(306.47355, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertNotNull(complex0);
      
      String string0 = ComplexFormat.formatComplex(complex0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(306.47355, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("(-Infinity) + 306.47i", string0);
      
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertNotNull(complexFormat0);
      
      Complex complex1 = (Complex)complexFormat0.parseObject(string0);
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex0.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex0.isInfinite());
      //  // Unstable assertion: assertEquals(306.47355, complex0.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(false, complex0.isNaN());
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex0.abs(), 0.01D);
      //  // Unstable assertion: assertEquals("i", complexFormat0.getImaginaryCharacter());
      //  // Unstable assertion: assertEquals(false, complex1.isNaN());
      //  // Unstable assertion: assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01D);
      //  // Unstable assertion: assertEquals(306.47, complex1.getImaginary(), 0.01D);
      //  // Unstable assertion: assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01D);
      //  // Unstable assertion: assertEquals(true, complex1.isInfinite());
      //  // Unstable assertion: assertFalse(complex0.equals((Object)complex1));
      //  // Unstable assertion: assertFalse(complex1.equals((Object)complex0));
      //  // Unstable assertion: assertNotNull(complex1);
      //  // Unstable assertion: assertNotSame(complex0, complex1);
      //  // Unstable assertion: assertNotSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ComplexFormat complexFormat0 = ComplexFormat.getInstance();
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(complexFormat0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)complexFormat0.getRealFormat();
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.##", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.##", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertNotNull(decimalFormat0);
      
      ComplexFormat complexFormat1 = new ComplexFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      assertEquals("i", complexFormat1.getImaginaryCharacter());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.##", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.##", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(2, decimalFormat0.getMaximumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("i", complexFormat0.getImaginaryCharacter());
      assertFalse(complexFormat1.equals((Object)complexFormat0));
      assertFalse(complexFormat0.equals((Object)complexFormat1));
      assertNotNull(complexFormat1);
      assertNotSame(complexFormat1, complexFormat0);
      assertNotSame(complexFormat0, complexFormat1);
  }
}
