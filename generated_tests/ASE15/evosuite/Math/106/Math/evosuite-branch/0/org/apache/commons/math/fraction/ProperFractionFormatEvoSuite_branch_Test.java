/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:54 GMT 2014
 */

package org.apache.commons.math.fraction;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Locale;
import org.apache.commons.math.fraction.Fraction;
import org.apache.commons.math.fraction.FractionFormat;
import org.apache.commons.math.fraction.ProperFractionFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ProperFractionFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumberFormat numberFormat0 = null;
      ProperFractionFormat properFractionFormat0 = null;
      try {
        properFractionFormat0 = new ProperFractionFormat(numberFormat0, numberFormat0, numberFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // whole format can not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      properFractionFormat0.setDenominatorFormat((NumberFormat) decimalFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(100, decimalFormat0.getMultiplier());
      
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      String string0 = "pQLxk:]NJ!";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertNotNull(choiceFormat0);
      
      properFractionFormat0.setNumeratorFormat((NumberFormat) choiceFormat0);
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      
      String string1 = FractionFormat.formatFraction(fraction0);
      assertNotSame(string1, string0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0 / 1", string1);
      
      try {
        Fraction fraction1 = properFractionFormat0.parse(string1);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"0 / 1\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "ovrflow:& cd is 2^31";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertNotNull(choiceFormat0);
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0, (NumberFormat) choiceFormat0);
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertNotNull(properFractionFormat0);
      
      int int0 = 2;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Fraction fraction0 = properFractionFormat0.parse(string0, parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=2]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals(2, parsePosition0.getErrorIndex());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "\\`.{(Vo[iCHyf\\X9";
      double[] doubleArray0 = new double[1];
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("0.0#\\`.{(Vo[iCHyf\\X9", choiceFormat0.toPattern());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertNotNull(choiceFormat0);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(decimalFormat0);
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) choiceFormat0, (NumberFormat) decimalFormat0, (NumberFormat) choiceFormat0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("0.0#\\`.{(Vo[iCHyf\\X9", choiceFormat0.toPattern());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(properFractionFormat0);
      
      Fraction fraction0 = (Fraction)properFractionFormat0.parseObject(stringArray0[0]);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(9.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(9, fraction0.byteValue());
      assertEquals(9L, fraction0.longValue());
      assertEquals(9, fraction0.intValue());
      assertEquals(9.0, fraction0.doubleValue(), 0.01D);
      assertEquals(9, fraction0.shortValue());
      assertEquals(9, fraction0.getNumerator());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals("0.0#\\`.{(Vo[iCHyf\\X9", choiceFormat0.toPattern());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertNotNull(decimalFormat0);
      
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat((NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0, (NumberFormat) decimalFormat0);
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0", decimalFormat0.toPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(true, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertNotNull(properFractionFormat0);
      
      String string0 = "3]+([P[$M`H%Kt6;'";
      try {
        Fraction fraction0 = properFractionFormat0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable fraction number: \"3]+([P[$M`H%Kt6;'\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "\\`.{(Vo[iCHyf\\X9";
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      try {
        Object object0 = properFractionFormat0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Format.parseObject(String) failed
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      String string0 = "1^gp>yEd";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertNotNull(choiceFormat0);
      
      properFractionFormat0.setNumeratorFormat((NumberFormat) choiceFormat0);
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      
      String string1 = FractionFormat.formatFraction(fraction0);
      assertNotSame(string1, string0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0 / 1", string1);
      
      int int0 = 37;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals(37, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=37,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Fraction fraction1 = properFractionFormat0.parse(string1, parsePosition0);
      assertNotSame(string1, string0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(36, parsePosition0.getErrorIndex());
      assertEquals(36, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=36,errorIndex=36]", parsePosition0.toString());
      assertNotNull(fraction1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      int int0 = (-172);
      AttributedCharacterIterator attributedCharacterIterator0 = properFractionFormat0.formatToCharacterIterator((Object) int0);
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(10, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(10, attributedCharacterIterator0.getRunLimit());
      assertNotNull(attributedCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      int int0 = 0;
      AttributedCharacterIterator attributedCharacterIterator0 = properFractionFormat0.formatToCharacterIterator((Object) int0);
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(5, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(5, attributedCharacterIterator0.getRunLimit());
      assertNotNull(attributedCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ProperFractionFormat properFractionFormat0 = new ProperFractionFormat();
      assertNotNull(properFractionFormat0);
      
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      String string0 = "1^gp>yEd";
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string0);
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertNotNull(choiceFormat0);
      
      properFractionFormat0.setNumeratorFormat((NumberFormat) choiceFormat0);
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      
      String string1 = FractionFormat.formatFraction(fraction0);
      assertNotSame(string1, string0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0 / 1", string1);
      
      Fraction fraction1 = properFractionFormat0.parse(string1);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(string1, string0);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertNotNull(fraction1);
      assertTrue(fraction0.equals((Object)fraction1));
      assertTrue(fraction1.equals((Object)fraction0));
      assertFalse(string1.equals((Object)string0));
  }
}
