/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:30:37 GMT 2014
 */

package org.apache.commons.math.distribution;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.math.distribution.PoissonDistributionImpl;
import org.apache.commons.math.exception.NotStrictlyPositiveException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class PoissonDistributionImplEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 21.395545366972;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(0, int0);
      
      double double1 = poissonDistributionImpl0.probability((double) int0);
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(5.105434511941761E-10, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 21.395545366972;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      long long0 = 1L;
      int int0 = poissonDistributionImpl0.inverseCumulativeProbability((double) long0);
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(Integer.MAX_VALUE, int0);
      
      double double1 = poissonDistributionImpl0.probability(int0);
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 1686.44319529;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertEquals(1686.44319529, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = 1417;
      double double1 = poissonDistributionImpl0.probability((double) int0);
      assertEquals(1686.44319529, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(1.3656908780123334E-12, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = 0.031;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
      assertEquals(0.031, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = (-3679);
      double double1 = poissonDistributionImpl0.probability(int0);
      assertEquals(0.031, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.0, double1, 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = (-1829.649);
      PoissonDistributionImpl poissonDistributionImpl0 = null;
      try {
        poissonDistributionImpl0 = new PoissonDistributionImpl(double0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,829.649 is smaller than, or equal to, the minimum (0): mean (-1,829.649)
         //
      }
  }

  //@Test(timeout = 4000)
  public void test5()  throws Throwable  {
      double double0 = 21.395545366972;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(0, int0);
      
      int int1 = poissonDistributionImpl0.inverseCumulativeProbability((double) int0);
      assertEquals(21.395545366972, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      double double0 = 1686.44319529;
      int int0 = 1417;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0, int0);
      assertEquals(1686.44319529, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      double double0 = 1686.44319529;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertEquals(1686.44319529, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      double double1 = poissonDistributionImpl0.getMean();
      assertEquals(1686.44319529, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(1686.44319529, double1, 0.01D);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
  }

  //@Test(timeout = 4000)
  public void test8()  throws Throwable  {
      double double0 = 1686.44319529;
      PoissonDistributionImpl poissonDistributionImpl0 = new PoissonDistributionImpl(double0);
      assertEquals(1686.44319529, poissonDistributionImpl0.getMean(), 0.01D);
      assertNotNull(poissonDistributionImpl0);
      
      int int0 = poissonDistributionImpl0.sample();
      assertEquals(1686.44319529, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(1694, int0);
      
      double double1 = poissonDistributionImpl0.normalApproximateProbability(int0);
      assertEquals(1686.44319529, poissonDistributionImpl0.getMean(), 0.01D);
      assertEquals(0.5777692922152928, double1, 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }
}
