/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:58 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "-00:00:00.003";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = (-1L);
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset(long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertTrue(boolean0);
      
      int int0 = (-1);
      long long1 = fixedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-1L), long1);
  }

  //@Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 9223372036854775807L;
      boolean boolean0 = true;
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(9223372036854775807L, long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  //@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "America/Los_Angeles";
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      long long0 = 885L;
      long long1 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-3599115L), long1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-86399993);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-23:59:59.993", fixedDateTimeZone0.toString());
      assertEquals("-23:59:59.993", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = true;
      long long0 = fixedDateTimeZone0.convertLocalToUTC((long) int0, boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-23:59:59.993", fixedDateTimeZone0.toString());
      assertEquals("-23:59:59.993", fixedDateTimeZone0.getID());
      assertEquals(0L, long0);
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 885L;
      long long1 = fixedDateTimeZone0.getMillisKeepLocal((DateTimeZone) fixedDateTimeZone0, long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(885L, long1);
      
      long long2 = fixedDateTimeZone0.convertLocalToUTC(long1, boolean0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertTrue(long0 == long1);
      assertTrue(long0 == long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals(885L, long2);
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 9223372036854775807L;
      YearMonthDay yearMonthDay0 = null;
      try {
        yearMonthDay0 = new YearMonthDay(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  //@Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(boolean0);
  }

  //@Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-12219292800000L);
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset(long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  //@Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-1L);
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(boolean0);
  }

  //@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(copticChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) copticChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(dateTime0);
      
      int int1 = fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  //@Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-1L);
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = cachedDateTimeZone0.getName(long0, locale0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(string0);
      assertEquals("\u82F1\u56FD\u590F\u6642\u9593", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "-00:00:00.003";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = (-1L);
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = fixedDateTimeZone0.getName(long0, locale0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("-00:00:00.003", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  //@Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-1L);
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = cachedDateTimeZone0.getShortName(long0, locale0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(string0);
      assertEquals("BST", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "-00:00:00.003";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = (-1L);
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = fixedDateTimeZone0.getShortName(long0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("-00:00:00.003", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "-00:00:00.003";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = (-1);
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-01:01", fixedDateTimeZone1.getID());
      assertEquals("-01:01", fixedDateTimeZone1.toString());
      assertNotNull(fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone1.toTimeZone();
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-01:01", fixedDateTimeZone1.getID());
      assertEquals("-01:01", fixedDateTimeZone1.toString());
      assertEquals("GMT-01:01", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-01:01", fixedDateTimeZone1.getID());
      assertEquals("-01:01", fixedDateTimeZone1.toString());
      assertEquals("GMT-01:01", zoneInfo0.getID());
      assertEquals("-01:01", fixedDateTimeZone2.toString());
      assertEquals("-01:01", fixedDateTimeZone2.getID());
      assertEquals(true, fixedDateTimeZone2.isFixed());
      assertNotNull(fixedDateTimeZone2);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone2);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone2, fixedDateTimeZone1);
  }

  //@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-4);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.toString();
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertEquals("-00:00:00.004", string0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      
      ReadableInstant readableInstant0 = null;
      int int1 = fixedDateTimeZone0.getOffset(readableInstant0);
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertEquals((-4), int1);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0);
      assertEquals("-00:00:00.004", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.004,offset=-4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-4, simpleTimeZone0.getRawOffset());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '-00:00:00.004' is not recognised
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 16;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+16:16", fixedDateTimeZone0.toString());
      assertEquals("+16:16", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone0.toTimeZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+16:16", fixedDateTimeZone0.toString());
      assertEquals("+16:16", fixedDateTimeZone0.getID());
      assertEquals("GMT+16:16", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+16:16", fixedDateTimeZone0.toString());
      assertEquals("+16:16", fixedDateTimeZone0.getID());
      assertEquals("GMT+16:16", zoneInfo0.getID());
      assertEquals("+16:16", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+16:16", fixedDateTimeZone1.getID());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1073741872;
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 1073741872
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-86400008);
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -86400008
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 21;
      int int1 = 86399981;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 86399981
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1773;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1773
         //
      }
  }

  //@Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-12219292800000L);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals((-75000), int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -75000
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 885L;
      int int0 = fixedDateTimeZone0.getStandardOffset(long0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, int0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.toString();
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(string0);
      assertEquals("+00:00:00.001", string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone1.getID());
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "UTC";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
  }

  //@Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      int int0 = (-1607);
      YearMonth yearMonth0 = new YearMonth((long) int0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
  }

  @Test(timeout = 4000)
  public void test34() {}
//   @Test(timeout = 4000)
//   public void test34()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(cachedDateTimeZone0);
//       
//       long long0 = (-12219292800000L);
//       String string0 = cachedDateTimeZone0.getName(long0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(string0);
//       assertEquals("-00:01:15", string0);
//   }

  @Test(timeout = 4000)
  public void test35() {}
//   @Test(timeout = 4000)
//   public void test35()  throws Throwable  {
//       DateTimeZone dateTimeZone0 = null;
//       GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
//       assertNotNull(gJChronology0);
//       
//       StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
//       assertNotNull(strictChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
//       assertEquals("Europe/London", zoneInfo0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(zoneInfo0);
//   }

  @Test(timeout = 4000)
  public void test36() {}
//   @Test(timeout = 4000)
//   public void test36()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertEquals(false, set0.isEmpty());
//       assertEquals(578, set0.size());
//       assertNotNull(set0);
//   }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-1607);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -1607
         //
      }
  }

  @Test(timeout = 4000)
  public void test38() {}
//   @Test(timeout = 4000)
//   public void test38()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test(timeout = 4000)
  public void test39() {}
//   @Test(timeout = 4000)
//   public void test39()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(cachedDateTimeZone0);
//       
//       long long0 = (-12219292800000L);
//       String string0 = cachedDateTimeZone0.getShortName(long0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(string0);
//       assertEquals("-00:01:15", string0);
//   }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       Object object0 = cachedDateTimeZone0.writeReplace();
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(object0);
//   }
}
