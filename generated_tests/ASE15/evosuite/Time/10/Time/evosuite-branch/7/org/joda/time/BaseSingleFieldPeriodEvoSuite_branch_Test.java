/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:50:07 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

 
public class BaseSingleFieldPeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Hours hours1 = Hours.ONE;
      assertFalse(hours1.equals((Object)hours0));
      assertNotSame(hours1, hours0);
      assertEquals(1, hours1.size());
      assertNotNull(hours1);
      
      int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(hours0.equals((Object)hours1));
      assertEquals((-1), int0);
      assertNotSame(hours1, hours0);
      assertNotSame(hours0, hours1);
      assertEquals(1, hours1.size());
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.FIVE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = 170;
      Months months1 = months0.multipliedBy(int0);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
      assertNotNull(months1);
      
      int int1 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertFalse(int1 == int0);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      assertFalse(int0 == int1);
      assertEquals(1, int1);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(minutes0);
      
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(seconds0);
      
      // Undeclared exception!
      try {
        int int0 = minutes0.compareTo((BaseSingleFieldPeriod) seconds0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Seconds
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(0, int0);
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) minutes0);
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(weeks0);
      
      Weeks weeks1 = Weeks.standardWeeksIn((ReadablePeriod) weeks0);
      assertTrue(weeks1.equals((Object)weeks0));
      assertTrue(weeks0.equals((Object)weeks1));
      assertNotSame(weeks1, weeks0);
      assertNotSame(weeks0, weeks1);
      assertEquals(1, weeks1.size());
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(weeks1);
      
      boolean boolean0 = weeks0.equals((Object) weeks1);
      assertTrue(weeks1.equals((Object)weeks0));
      assertTrue(weeks0.equals((Object)weeks1));
      assertTrue(boolean0);
      assertNotSame(weeks1, weeks0);
      assertNotSame(weeks0, weeks1);
      assertEquals(1, weeks1.size());
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(minutes0);
      
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertNotNull(seconds0);
      
      boolean boolean0 = days0.equals((Object) seconds0);
      assertFalse(boolean0);
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      
      boolean boolean1 = days0.equals((Object) boolean0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       Weeks weeks0 = Weeks.THREE;
//       assertEquals(1, weeks0.size());
//       assertNotNull(weeks0);
//       
//       int int0 = weeks0.hashCode();
//       assertEquals(12475, int0);
//       assertEquals(1, weeks0.size());
//       
//       Weeks weeks1 = weeks0.plus(int0);
//       assertFalse(weeks0.equals((Object)weeks1));
//       assertFalse(weeks1.equals((Object)weeks0));
//       assertNotSame(weeks0, weeks1);
//       assertNotSame(weeks1, weeks0);
//       assertEquals(1, weeks0.size());
//       assertEquals(1, weeks1.size());
//       assertNotNull(weeks1);
//       
//       boolean boolean0 = weeks0.equals((Object) weeks1);
//       assertFalse(weeks0.equals((Object)weeks1));
//       assertFalse(weeks1.equals((Object)weeks0));
//       assertFalse(boolean0);
//       assertNotSame(weeks0, weeks1);
//       assertNotSame(weeks1, weeks0);
//       assertEquals(1, weeks0.size());
//       assertEquals(1, weeks1.size());
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = weeks0.getFieldType(int0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Months months0 = Months.THREE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = null;
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) islamicChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(2, monthDay0.size());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.THREE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = months0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Months months0 = Months.THREE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = 37;
      // Undeclared exception!
      try {
        int int1 = months0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 37
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 170;
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) islamicChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      assertEquals(1, weeks0.size());
      assertEquals(2, monthDay0.size());
      assertNotNull(weeks0);
      
      // Undeclared exception!
      try {
        DurationFieldType durationFieldType0 = weeks0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 170
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.NINE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      // Undeclared exception!
      try {
        Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P9M
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      MutablePeriod mutablePeriod0 = minutes0.toMutablePeriod();
      assertEquals(1, minutes0.size());
      assertNotNull(mutablePeriod0);
      
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) mutablePeriod0);
      assertEquals(1, minutes0.size());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Weeks weeks0 = Weeks.standardWeeksIn(readablePeriod0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 9;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeZone dateTimeZone0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      Partial partial1 = partial0.with(dateTimeFieldType1, int0);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertEquals(2, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalTime localTime0 = LocalTime.fromDateFields((Date) mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertNotNull(dateTime0);
      
      LocalDate localDate0 = dateTime0.toLocalDate();
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadablePartial) localDate0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 5097599988L;
      DateTimeZone dateTimeZone0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, (Chronology) islamicChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      YearMonthDay yearMonthDay1 = null;
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadablePartial) yearMonthDay0, (ReadablePartial) yearMonthDay1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Seconds seconds0 = Seconds.secondsBetween(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test21() {}
//   @Test(timeout = 4000)
//   public void test21()  throws Throwable  {
//       Weeks weeks0 = Weeks.THREE;
//       assertEquals(1, weeks0.size());
//       assertNotNull(weeks0);
//       
//       int int0 = weeks0.hashCode();
//       assertEquals(12475, int0);
//       assertEquals(1, weeks0.size());
//       
//       DateTimeZone dateTimeZone0 = null;
//       IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
//       assertNotNull(islamicChronology0);
//       
//       DateMidnight dateMidnight0 = new DateMidnight((long) int0, (Chronology) islamicChronology0);
//       assertEquals(1, weeks0.size());
//       assertEquals((-3600000L), dateMidnight0.getMillis());
//       assertNotNull(dateMidnight0);
//       
//       DateMidnight dateMidnight1 = null;
//       // Undeclared exception!
//       try {
//         Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // ReadableInstant objects must not be null
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test22() {}
//   @Test(timeout = 4000)
//   public void test22()  throws Throwable  {
//       Weeks weeks0 = Weeks.THREE;
//       assertEquals(1, weeks0.size());
//       assertNotNull(weeks0);
//       
//       int int0 = weeks0.hashCode();
//       assertEquals(12475, int0);
//       assertEquals(1, weeks0.size());
//       
//       DateTimeZone dateTimeZone0 = null;
//       IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
//       assertNotNull(islamicChronology0);
//       
//       DateMidnight dateMidnight0 = new DateMidnight((long) int0, (Chronology) islamicChronology0);
//       assertEquals((-3600000L), dateMidnight0.getMillis());
//       assertEquals(1, weeks0.size());
//       assertNotNull(dateMidnight0);
//       
//       Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
//       assertEquals(1, minutes0.size());
//       assertEquals((-3600000L), dateMidnight0.getMillis());
//       assertEquals(1, weeks0.size());
//       assertNotNull(minutes0);
//   }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Years years0 = Years.yearsBetween(readableInstant0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Days days0 = Days.TWO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Hours hours0 = days0.toStandardHours();
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertNotNull(period0);
  }
}
