/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:49:23 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.joda.time.Days;
import org.joda.time.Hours;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

 
public class PeriodFormatterBuilderEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.push((Object) string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[org.joda.time.format.PeriodFormatterBuilder]", linkedList0.toString());
      
      linkedList0.addFirst((Object) string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[org.joda.time.format.PeriodFormatterBuilder, org.joda.time.format.PeriodFormatterBuilder]", linkedList0.toString());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals("[org.joda.time.format.PeriodFormatterBuilder, org.joda.time.format.PeriodFormatterBuilder]", linkedList0.toString());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertEquals(2, linkedList0.size());
      assertEquals("[org.joda.time.format.PeriodFormatterBuilder, org.joda.time.format.PeriodFormatterBuilder]", linkedList0.toString());
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[org.joda.time.format.PeriodFormatterBuilder, org.joda.time.format.PeriodFormatterBuilder]", linkedList0.toString());
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      linkedList0.push((Object) string0);
      assertEquals("[org.joda.time.format.PeriodFormatterBuilder]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      linkedList0.addFirst((Object) periodFormatterBuilder_SimpleAffix0);
      assertEquals(2, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals(2, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Builder has created neither a printer nor a parser";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.append(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter1 = periodFormatterBuilder1.toFormatter();
      assertEquals(true, periodFormatter1.isParser());
      assertEquals(true, periodFormatter1.isPrinter());
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertNotNull(periodFormatter1);
      assertNotSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Builder has created neither a printer nor a parser";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      int int0 = 1495;
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendLiteral(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      Years years0 = Years.TWO;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals(1, years0.size());
      assertNotNull(mutablePeriod0);
      
      int int1 = periodFormatter0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, int0);
      assertEquals(1, years0.size());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals((-1496), int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "Builder has created neither a printer nor a parser";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 1495;
      int int1 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(50, int1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      Years years0 = Years.TWO;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals(1, years0.size());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        int int2 = periodFormatterBuilder_Composite0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, int1, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "9]Hgf";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendWeeks();
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9]Hgf\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "9]Hgf";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendYears();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.appendMinutes();
      assertNotNull(periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9]Hgf\" is malformed at \"]Hgf\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "9]Hgf";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendWeeks();
      assertNotNull(periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9]Hgf\" is malformed at \"]Hgf\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "9]Hgf";
      String string1 = "]hgf";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(string1, string0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9]Hgf\" is too short
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "9]Hgf";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9]Hgf\" is malformed at \"]Hgf\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Cannot have two adjacent separators";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      int int0 = (-1225);
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(stringArray0[3]);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      boolean boolean1 = true;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean1, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertFalse(boolean1 == boolean0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      
      Writer writer0 = null;
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Locale locale0 = new Locale(stringArray0[5], string0);
      assertEquals("cannot have two adjacent separators", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CANNOT HAVE TWO ADJACENT SEPARATORS", locale0.getCountry());
      assertEquals("cannot have two adjacent separators_CANNOT HAVE TWO ADJACENT SEPARATORS", locale0.toString());
      assertNotNull(locale0);
      
      periodFormatterBuilder_Separator1.printTo(writer0, (ReadablePeriod) seconds0, locale0);
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals("cannot have two adjacent separators", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CANNOT HAVE TWO ADJACENT SEPARATORS", locale0.getCountry());
      assertEquals("cannot have two adjacent separators_CANNOT HAVE TWO ADJACENT SEPARATORS", locale0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "!(7/y";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      int int0 = 14;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo((Writer) stringWriter0, (ReadablePeriod) hours0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "D_z6-B:dK3&S`SD";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[2]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      int int0 = 86400000;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(86400000, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "ERdVB}W{>3";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      
      Months months0 = Months.EIGHT;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) months0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(1, months0.size());
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "No formatter supplied";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      
      ReadableInterval readableInterval0 = null;
      Hours hours0 = Hours.hoursIn(readableInterval0);
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) mutablePeriod0, locale0);
      assertEquals(1, hours0.size());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      String string0 = "@";
      String string1 = "Field type must not be null";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(periodFormatterBuilder2);
      assertNotSame(string1, string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotSame(string0, string1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      String[] stringArray0 = new String[8];
      String string0 = null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(stringArray0[3], string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[1];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      int int0 = 8;
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[10];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(stringArray0[9]);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_CompositeAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatterArray0[5], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Months months0 = Months.MIN_VALUE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        int int1 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) months0, int0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Cannot have two adjacent separators";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertNotNull(periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_FieldFormatterArray0[0], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertNotNull(period0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 3;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      String string0 = "Cannot have two adjacent separators";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendHours();
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      assertNotNull(periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertNotNull(period0);
      
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        int int1 = periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Cannot have two adjacent separators";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(stringArray0[0], stringArray0[0], stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_FieldFormatterArray0[2], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertNotNull(period0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Cannot have two adjacent separators";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_FieldFormatterArray0[0], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertNotNull(period0);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "9]Hgf";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSuffix(string0);
      assertNotNull(periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9]Hgf\" is malformed at \"]Hgf\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "*ZxaIG@RnDP{B&,gg";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"*ZxaIG@RnDP{B&,gg\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "Unit duration field must be precise";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "org.joda.time.field.MillisDurationField";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.parse(string1, int0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string1;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[10];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int1, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      periodFormatterBuilder_FieldFormatterArray0[4] = periodFormatterBuilder_FieldFormatterArray0[0];
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[4]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string1, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[2], periodFormatterBuilder_FieldFormatterArray0[4], boolean0, boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(periodFormatterBuilder_Separator0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mutablePeriod0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int2 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) mutablePeriod0, stringArray0[4], int1, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "org.joda.time.format.PeriodFormatterBuilder$Literal";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[3];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[4];
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      int int0 = 8;
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[9], stringArray0[0]);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      int int1 = 89;
      periodFormatterBuilder_FieldFormatterArray0[2] = periodFormatterBuilder_FieldFormatterArray0[0];
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[2]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[4], periodFormatterBuilder_FieldFormatterArray0[2], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      ReadWritablePeriod readWritablePeriod0 = null;
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        int int2 = periodFormatterBuilder_Separator0.parseInto(readWritablePeriod0, string0, int1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 3;
      String string0 = "Cannot have two adjacent separators";
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[2] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[2]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_FieldFormatterArray0[2], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      ReadWritablePeriod readWritablePeriod0 = null;
      Locale locale0 = null;
      // Undeclared exception!
      try {
        int int1 = periodFormatterBuilder_Separator0.parseInto(readWritablePeriod0, string0, int0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Cannot have two adjacent separators";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      int int0 = (-1225);
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(stringArray0[3]);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Writer writer0 = null;
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Locale locale0 = new Locale(stringArray0[5], string0);
      assertEquals("cannot have two adjacent separators_CANNOT HAVE TWO ADJACENT SEPARATORS", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CANNOT HAVE TWO ADJACENT SEPARATORS", locale0.getCountry());
      assertEquals("cannot have two adjacent separators", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo(writer0, (ReadablePeriod) seconds0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 3;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      String string0 = "Cannot have two adjacent separators";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      assertNotNull(periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Separator0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertFalse(periodFormatterBuilder_Separator0.equals((Object)periodFormatterBuilder_Separator1));
      assertFalse(periodFormatterBuilder_Separator1.equals((Object)periodFormatterBuilder_Separator0));
      assertNotNull(periodFormatterBuilder_Separator1);
      assertNotSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertNotNull(period0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        int int1 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "centuryOfEra";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = 1627;
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[1];
      int int1 = 0;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[0], string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int1, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[0], periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Years years0 = Years.MAX_VALUE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Locale locale0 = null;
      int int2 = periodFormatterBuilder_Separator0.countFieldsToPrint((ReadablePeriod) years0, int1, locale0);
      assertEquals(1, years0.size());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 3;
      String string0 = "Cannot have two adjacent separators";
      boolean boolean0 = true;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[3];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "No field to apply suffix to";
      String string1 = "s5>";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertNotSame(string1, string0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "No field to apply suffix to";
      String string1 = ",%dg";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      assertNotSame(string0, string1);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertNotSame(string0, string1);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertNotSame(string0, string1);
      
      int int2 = periodFormatterBuilder_CompositeAffix0.scan(string0, int1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      String string0 = "cannot have two adjacent _%,s~6bk>+";
      String string1 = "No formatter supplied";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = periodFormatterBuilder_PluralAffix0.scan(string1, int0);
      assertTrue(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      int int0 = 2451;
      String string1 = "cannot have two adjacent _%,s~6bk>+";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = periodFormatterBuilder_PluralAffix0.scan(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-2452), int1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "l~z+y-+2MPiT)c>v4v";
      int int0 = 1314;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1315), int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "Cannot have two adjacent separators";
      String[] stringArray0 = new String[6];
      String string1 = " j5lo";
      assertNotSame(string1, string0);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      int int0 = 0;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[1], string0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertNotSame(string0, string1);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      assertNotSame(string0, string1);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-6), int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "l~z+y-+2MPiT)c>v4v";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-19), int1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "";
      int int0 = 2451;
      String string1 = "cannot have two adjacent _%,s~6bk>+";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = periodFormatterBuilder_PluralAffix0.parse(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-2452), int1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "*ZxaIG@RnDO{<&,gg";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 1;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "yH($Sp&D@VVe>:";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 1;
      int int1 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      StringBuffer stringBuffer0 = new StringBuffer(int1);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.capacity());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, int0);
      assertEquals("yH($Sp&D@VVe>:", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.capacity());
      assertEquals(14, stringBuffer0.length());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "D_z6-B:dK3&S`SD";
      int int0 = 86400000;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals(86400000, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, int0);
      assertEquals(86400000, stringBuffer0.capacity());
      assertEquals(15, stringBuffer0.length());
      assertEquals("D_z6-B:dK3&S`SD", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "AET";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 0;
      String string1 = "37";
      assertNotSame(string1, string0);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "xUukd#v";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "0$L";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "@";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "69/ts88Prr2**k=X/N";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "s:73Um^9Q";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "-AeN6tW 'sv\"8xt";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "k(yY";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.parse(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "9]Hgf";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendYears();
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSuffix(string0);
      assertNotNull(periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder2.toFormatter();
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        Period period0 = periodFormatter0.parsePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"9]Hgf\" is malformed at \"]Hgf\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Prefix not followed by field";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodParser periodParser0 = null;
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodParser0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodParser0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Separator0, (PeriodParser) periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      String string0 = "Cannot have two adjacent separators";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      assertNotNull(periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      assertNotNull(periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "No instant converter found for type: ";
      boolean boolean0 = false;
      PeriodPrinter periodPrinter0 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertEquals(false, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertNotNull(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodParser periodParser0 = null;
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) periodFormatterBuilder_Literal0, periodParser0);
      assertEquals(false, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      assertEquals(false, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "f^*F*6vzi3RXw";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      String string0 = "@";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string0, string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendYears();
      assertNotNull(periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSeparator(string0);
      assertNotNull(periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      String string0 = "@";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string0, string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparator(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "Prefix not followed by field";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMinutes();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      String string0 = "@";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSuffix(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "#4}s9ZC";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "_\"vI ";
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = null;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "_\"vI ";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix(string0, string0);
      assertNotNull(periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "${:";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = "l~z+y-+2MPiT)c>v4v";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      periodFormatterBuilder0.clear();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter0 = null;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatterBuilder0.toParser();
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      
      PeriodPrinter periodPrinter1 = periodFormatterBuilder1.toPrinter();
      assertNull(periodPrinter1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "AET";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 0;
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, int0);
      assertEquals(6, stringBuffer0.length());
      assertEquals(8, stringBuffer0.capacity());
      assertEquals("AETAET", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "Cannot have two adjacent separators";
      int int0 = (-1225);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1225), int1);
      
      int int2 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(70, int2);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "9]hgfhronology[";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 1523;
      int int1 = periodFormatterBuilder_PluralAffix0.calculatePrintedLength(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(16, int1);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) charArrayWriter0, int1);
      assertEquals(32, charArrayWriter0.size());
      assertEquals("9]hgfhronology[9]hgfhronology[", charArrayWriter0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period0 = months0.toPeriod();
      assertEquals(1, months0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Days days0 = Days.standardDaysIn((ReadablePeriod) period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P-2147483648M
         //
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "Cannot have two adjacent separators";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      assertNotNull(pipedWriter0);
      
      char char0 = '5';
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) pipedWriter0, (int) char0);
      assertEquals(true, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "@";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(boolean0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "No field to apply suffix to";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "No field to apply suffix to";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "~";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[8];
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0, string0, stringArray0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 3;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(int0);
      assertNotNull(periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "D_z6-B:dK3&S`SD";
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[2]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      int int0 = 86400000;
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(86400000, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
