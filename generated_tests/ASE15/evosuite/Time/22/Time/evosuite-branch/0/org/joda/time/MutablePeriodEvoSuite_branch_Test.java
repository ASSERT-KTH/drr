/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:38:32 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class MutablePeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = Duration.standardDays((long) PeriodType.YEAR_INDEX);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      long long0 = (-1577L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableDuration readableDuration0 = null;
      mutablePeriod0.add(readableDuration0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      String string0 = null;
      Interval interval0 = Interval.parse(string0);
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1935;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.add(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1935;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime();
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      mutablePeriod0.setPeriod((ReadableInstant) mutableDateTime0, (ReadableInstant) instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1476;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      int int1 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(PeriodType.YEAR_INDEX, PeriodType.YEAR_INDEX, int1, PeriodType.YEAR_INDEX, int0, int0, int0, int0, periodType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.setPeriod(readableInterval0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 18;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0);
      assertEquals(18L, mutableInterval0.getEndMillis());
      assertEquals(18L, mutableInterval0.getStartMillis());
      assertNotNull(mutableInterval0);
      
      mutablePeriod0.setPeriod((ReadableInterval) mutableInterval0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(18L, mutableInterval0.getEndMillis());
      assertEquals(18L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertEquals(1, years0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      
      mutablePeriod0.setPeriod((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(1, years0.size());
      assertEquals(0L, instant0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-67);
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.millis((long) int0);
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int1 = mutablePeriod0.indexOf(durationFieldType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals((-1), int1);
      
      mutablePeriod0.setHours(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = period0.getYears();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.addDays(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "G(soh=698\"\"";
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"G(soh=698\"\"\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1476;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      int int1 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int1, int1, int1, int1, int1, int0, int1, int0, periodType0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setValue(int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-67);
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.millis((long) int0);
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertEquals((-67L), duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setMinutes(int0);
      assertEquals((-67L), duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int int0 = 117;
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) hours0, periodType0);
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(1, hours0.size());
      assertEquals(5, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.setMonths(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.clear();
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1476;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      int int1 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(PeriodType.YEAR_INDEX, PeriodType.YEAR_INDEX, int1, PeriodType.YEAR_INDEX, PeriodType.YEAR_INDEX, PeriodType.YEAR_INDEX, PeriodType.YEAR_INDEX, PeriodType.YEAR_INDEX, periodType0);
      assertFalse(int1 == int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setMillis(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      long long0 = (-1577L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-67);
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.millis((long) int0);
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int1 = mutablePeriod0.indexOf(durationFieldType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals((-67L), duration0.getMillis());
      assertEquals((-1), int1);
      
      mutablePeriod0.addSeconds(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals((-67L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-67);
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.millis((long) int0);
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int1 = mutablePeriod0.indexOf(durationFieldType0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertEquals((-1), int1);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((long) int1);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertFalse(int0 == int1);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(int1 == int0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 1138;
      Seconds seconds0 = Seconds.seconds(int0);
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addMinutes(int0);
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-67);
      ReadableInstant readableInstant0 = null;
      Duration duration0 = Duration.millis((long) int0);
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int1 = mutablePeriod0.indexOf(durationFieldType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
      assertEquals((-1), int1);
      
      mutablePeriod0.addWeeks(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-67L), duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2897;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(1, minutes0.size());
      assertEquals(180000L, duration0.getMillis());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, readableInstant0);
      assertEquals(1, minutes0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(180000L, duration0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-68);
      mutablePeriod0.setWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
  }

  //@Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(fixedDateTimeZone0);
      
      DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0, periodType0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, mutablePeriod0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      long long0 = 0L;
      mutablePeriod0.setPeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1138;
      Seconds seconds0 = Seconds.seconds(int0);
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addMonths(int0);
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      long long0 = (-1577L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 2897;
      int int1 = mutablePeriod0.getWeeks();
      assertFalse(int1 == int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(0, int1);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(int0, int0, int1, int1);
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(8, mutablePeriod1.size());
      assertNotNull(mutablePeriod1);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2316;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) islamicChronology0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 2316;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      DateTime dateTime0 = new DateTime((long) int0, (Chronology) islamicChronology0);
      assertEquals(2316L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(2316L, dateTime0.getMillis());
      assertNotNull(mutablePeriod0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      mutablePeriod0.add((long) int0, (Chronology) buddhistChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(2316L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-68);
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1476;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      int int1 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int1, int0, int0, int0, int0, int0, periodType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addMillis(PeriodType.YEAR_INDEX);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1476;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      int int1 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int1, int1, int1, int1, int0, int1, int1, int1, periodType0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.add((long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) mutablePeriod0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-1);
      mutablePeriod0.addYears(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ReadableDuration readableDuration0 = null;
      ReadableInstant readableInstant0 = null;
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      PeriodType periodType0 = minutes0.getPeriodType();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableDuration0, readableInstant0, periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertNotNull(mutablePeriod1);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-67);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-1);
      mutablePeriod0.setDays(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 0L;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, chronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = 0;
      mutablePeriod0.add(durationFieldType0, int0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals(8, mutablePeriod0.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 1476;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      int int1 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int1, int1, int1, int1, PeriodType.YEAR_INDEX, PeriodType.YEAR_INDEX, int1, PeriodType.YEAR_INDEX, periodType0);
      assertFalse(int1 == int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addHours(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-68);
      mutablePeriod0.setYears(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 1476;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) PeriodType.YEAR_INDEX, periodType0, (Chronology) julianChronology0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      long long0 = (-1577L);
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 2897;
      mutablePeriod0.setSeconds(int0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 0L;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, chronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-262);
      mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 1138;
      Seconds seconds0 = Seconds.seconds(int0);
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Minutes minutes0 = Minutes.THREE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(1, minutes0.size());
      assertEquals(180000L, duration0.getMillis());
      assertNotNull(duration0);
      
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(1, seconds0.size());
      assertEquals(1, minutes0.size());
      assertEquals(180000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = 0L;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      DateTime dateTime0 = new DateTime(long0, (Chronology) iSOChronology0);
      assertEquals(0L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = new Duration(long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableDuration) duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }
}
