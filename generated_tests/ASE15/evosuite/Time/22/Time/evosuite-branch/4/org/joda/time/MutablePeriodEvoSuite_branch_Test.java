/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:09:21 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class MutablePeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      Days days0 = Days.days(int0);
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = days0.toStandardDuration();
      assertEquals(1, days0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(1, days0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableDuration readableDuration0 = null;
      mutablePeriod0.add(readableDuration0);
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = Duration.standardHours(long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Interval interval0 = duration0.toIntervalTo((ReadableInstant) dateTime0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals((-3600000L), interval0.getEndMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(interval0);
      
      mutablePeriod0.add((ReadableInterval) interval0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals((-3600000L), interval0.getEndMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Days days0 = minutes0.toStandardDays();
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.add(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
  }

  //@Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = (-2796L);
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Chronology chronology0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, chronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTime(timeOfDay0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(dateTime0);
      
      mutablePeriod0.setPeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(4, timeOfDay0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = 6383L;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, chronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 121;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) julianChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = new DateMidnight((long) int0, (Chronology) julianChronology0);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals(0L, dateMidnight1.getMillis());
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      
      mutablePeriod0.setPeriod((ReadableInstant) dateMidnight1, (ReadableInstant) dateMidnight0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0L, dateMidnight1.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 6383L;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, chronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = Duration.standardHours(long0);
      assertEquals(22978800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      Interval interval0 = new Interval((ReadableDuration) duration0, readableInstant0);
      assertEquals(22978800000L, duration0.getMillis());
      assertEquals(1369430481320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertNotNull(interval0);
      
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(22978800000L, duration0.getMillis());
      assertEquals(1369430481320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 43;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      MutableInterval mutableInterval0 = null;
      mutablePeriod0.setPeriod((ReadableInterval) mutableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 43;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setHours(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 0L;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, chronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) days0, (Chronology) gregorianChronology0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 16;
      mutablePeriod0.addDays(int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "nd4f.jR]19hr";
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"nd4f.jR]19hr\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = PeriodType.YEAR_INDEX;
      assertEquals(0, int0);
      
      Duration duration0 = Duration.standardSeconds((long) int0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setValue(int0, int0);
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 0;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 6383L;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, chronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 121;
      mutablePeriod0.setMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.setMonths(int0);
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 279;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.clear();
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = (-2796L);
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.setMillis(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) days0, (Chronology) gregorianChronology0);
      assertEquals(1, days0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 16;
      // Undeclared exception!
      try {
        mutablePeriod0.addSeconds(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, int0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((long) int0);
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(1, weeks0.size());
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotNull(mutablePeriod1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 452L;
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, months0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = (-3);
      // Undeclared exception!
      try {
        mutablePeriod0.addMinutes(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 279;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int1 = mutablePeriod0.getDays();
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(279, int1);
      
      mutablePeriod0.addWeeks(int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = 452L;
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, months0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(1, months0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setPeriod(long0, long0);
      assertEquals(1, months0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 6383L;
      Duration duration0 = Duration.standardHours(long0);
      assertEquals(22978800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, readableInstant0);
      assertEquals(22978800000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-1309);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, months0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-1309);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-4080);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = (-2796L);
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, chronology0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = (-2796L);
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      Chronology chronology0 = null;
      int int0 = mutablePeriod0.getMillis();
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals((-796), int0);
      
      mutablePeriod0.add((long) int0, chronology0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-1309);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      mutablePeriod0.set(durationFieldType0, PeriodType.MINUTE_INDEX);
      assertEquals(8, mutablePeriod0.size());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addMillis(int0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.add((long) int0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      MutablePeriod mutablePeriod0 = period0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) period0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) days0, (Chronology) gregorianChronology0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 16;
      // Undeclared exception!
      try {
        mutablePeriod0.addYears(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
      }
  }

  //@Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = 6383L;
      Duration duration0 = Duration.standardHours(long0);
      assertEquals(22978800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) julianChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateMidnight0, periodType0);
      assertEquals(22978800000L, duration0.getMillis());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertEquals(1, weeks0.size());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotNull(mutablePeriod1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, int0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod(long0, (long) int0);
      assertFalse(mutablePeriod1.equals((Object)mutablePeriod0));
      assertFalse(mutablePeriod0.equals((Object)mutablePeriod1));
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals(8, mutablePeriod1.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotNull(mutablePeriod1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) days0, (Chronology) gregorianChronology0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 16;
      mutablePeriod0.setDays(int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Days days0 = minutes0.toStandardDays();
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(days0);
      
      int int0 = (-4080);
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      mutablePeriod0.add(durationFieldType0, int0);
      assertEquals(1, days0.size());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals(1, minutes0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = mutablePeriod0.get(durationFieldType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.addHours(int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = PeriodType.YEAR_INDEX;
      assertEquals(0, int0);
      
      Duration duration0 = Duration.standardSeconds((long) int0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Seconds seconds0 = duration0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setYears(int0);
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals((-1), int0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod1 = new MutablePeriod((Object) mutablePeriod0, periodType0, chronology0);
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertEquals(8, mutablePeriod1.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotNull(mutablePeriod1);
  }

  //@Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Duration duration0 = Duration.standardHours(long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Interval interval0 = duration0.toIntervalTo((ReadableInstant) dateTime0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals((-3600000L), interval0.getEndMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(interval0);
      
      ISOChronology iSOChronology0 = (ISOChronology)interval0.getChronology();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals((-3600000L), interval0.getEndMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(iSOChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0, (Chronology) iSOChronology0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-3600000L), interval0.getStartMillis());
      assertEquals((-3600000L), interval0.getEndMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      long long0 = 6383L;
      PeriodType periodType0 = PeriodType.seconds();
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = new MutablePeriod((Object) mutablePeriod0, periodType0);
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, mutablePeriod1.size());
      assertEquals(1, periodType0.size());
      assertEquals("Seconds", periodType0.getName());
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotNull(mutablePeriod1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, int0);
      
      mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(seconds0);
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(mutablePeriod0);
      
      long long0 = 1L;
      Duration duration0 = new Duration(long0, long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, weeks0.size());
  }

  //@Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long long0 = 6383L;
      Duration duration0 = Duration.standardHours(long0);
      assertEquals(22978800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      int int0 = 121;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) julianChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(121L, mutableDateTime0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(mutableDateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) mutableDateTime0, (ReadableDuration) duration0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(121L, mutableDateTime0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(22978800000L, duration0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(mutablePeriod0);
  }

  //@Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      DateTime dateTime0 = new DateTime((Object) evoSuiteFile0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(1, hours0.size());
      assertEquals(14400000L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableDuration) duration0, periodType0);
      assertEquals(1, hours0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(14400000L, duration0.getMillis());
      assertNotNull(mutablePeriod0);
  }
}
