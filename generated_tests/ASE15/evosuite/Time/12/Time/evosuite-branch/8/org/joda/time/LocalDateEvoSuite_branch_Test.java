/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:18:46 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Period;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class LocalDateEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = null;
      String string1 = localDate0.toString(string0, locale0);
      assertEquals(3, localDate0.size());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      assertEquals("2014-02-14", string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = localDate0.toDateMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(dateMidnight0);
      
      String string0 = dateMidnight0.toString();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(string0);
      assertEquals("2014-02-14T00:00:00.000Z", string0);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      try {
        String string1 = localDate0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        String string1 = localDate0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfHalfday' is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       long long0 = 0L;
//       YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       DateTimeFieldType dateTimeFieldType0 = null;
//       // Undeclared exception!
//       try {
//         LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The DateTimeFieldType must not be null
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      assertEquals("weekyearOfCentury", localDate_Property0.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.minusDays(int0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = (-1L);
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = (-22);
      LocalDate localDate1 = localDate0.minusDays(int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.minusWeeks(int0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 5;
      LocalDate localDate1 = localDate0.minusWeeks(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       int int0 = 1900;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1900,MONTH=1900,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1900,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2951510400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2063,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=194,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       int int1 = 0;
//       LocalDate localDate1 = localDate0.minusMonths(int1);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=2951510400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2063,MONTH=6,WEEK_OF_YEAR=28,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=194,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(3, localDate1.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertSame(localDate1, localDate0);
//       assertSame(localDate0, localDate1);
//   }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = (-1L);
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = (-22);
      LocalDate localDate1 = localDate0.minusMonths(int0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      byte byte0 = (byte)0;
      LocalDate localDate1 = localDate0.minusYears((int) byte0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 1601;
      LocalDate localDate1 = localDate0.minusYears(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 10000000000000000L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusDays(int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusWeeks(int0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 1601;
      LocalDate localDate1 = localDate0.plusWeeks(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = 10000000000000000L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusMonths(int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 82;
      LocalDate localDate1 = localDate0.plusMonths(int0);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusYears(int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 192;
      LocalDate localDate1 = localDate0.plusYears(int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Years years0 = Years.THREE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      int int0 = 0;
      Period period0 = years0.toPeriod();
      assertEquals(1, years0.size());
      assertNotNull(period0);
      
      LocalDate localDate1 = localDate0.withPeriodAdded((ReadablePeriod) period0, int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals(1, years0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      byte byte0 = (byte)87;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (int) byte0);
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = (-406);
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'eras' is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-152);
      LocalDate localDate0 = new LocalDate((long) int0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 82;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'clockhourOfDay' is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)timeOfDay0.getChronology();
      assertEquals(4, timeOfDay0.size());
      assertNotNull(iSOChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 1900;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, int0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test29() {}
//   @Test(timeout = 4000)
//   public void test29()  throws Throwable  {
//       Chronology chronology0 = null;
//       YearMonthDay yearMonthDay0 = new YearMonthDay();
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0, chronology0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       LocalDate localDate1 = null;
//       LocalDate localDate2 = localDate0.withFields((ReadablePartial) localDate1);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate2.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate2);
//       assertSame(localDate2, localDate0);
//       assertSame(localDate0, localDate2);
//   }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withFields((ReadablePartial) localDate0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localDate0.toDateTime(localTime0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 0L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(localDate0);
      
      LocalTime localTime0 = null;
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(69681320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTimeZone dateTimeZone0 = null;
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalTime localTime0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(localDate0);
      
      LocalTime localTime0 = new LocalTime();
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localTime0.size());
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test36() {}
//   @Test(timeout = 4000)
//   public void test36()  throws Throwable  {
//       int int0 = (-24);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-24,MONTH=-24,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-24,HOUR_OF_DAY=-24,MINUTE=-24,SECOND=-24,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertNotNull(date0);
//       
//       LocalDate localDate0 = LocalDate.fromDateFields(date0);
//       assertEquals(3, localDate0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertNotNull(localDate0);
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar1);
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       
//       LocalDate localDate1 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar1);
//       assertEquals(3, localDate1.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertNotNull(localDate1);
//       assertFalse(localDate1.equals((Object)localDate0));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertNotSame(localDate1, localDate0);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       
//       int int1 = localDate1.compareTo((ReadablePartial) localDate0);
//       assertEquals(3, localDate1.size());
//       assertEquals(3, localDate0.size());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(1, int1);
//       assertFalse(localDate1.equals((Object)localDate0));
//       assertFalse(localDate0.equals((Object)localDate1));
//       assertFalse(mockGregorianCalendar0.equals((Object)mockGregorianCalendar1));
//       assertFalse(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotSame(localDate1, localDate0);
//       assertNotSame(localDate0, localDate1);
//       assertNotSame(mockGregorianCalendar0, mockGregorianCalendar1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//   }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 6;
      LocalDate localDate1 = localDate0.withDayOfWeek(int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
      
      int int1 = localDate0.compareTo((ReadablePartial) localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals((-1), int1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test38() {}
//   @Test(timeout = 4000)
//   public void test38()  throws Throwable  {
//       Chronology chronology0 = null;
//       YearMonthDay yearMonthDay0 = new YearMonthDay();
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0, chronology0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(localDate0);
//       
//       boolean boolean0 = localDate0.isAfter((ReadablePartial) yearMonthDay0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = (-3297L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) fixedDateTimeZone0);
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals(3, localDate0.size());
      //  // Unstable assertion: assertNotNull(localDate0);
      
      int int0 = localDate0.hashCode();
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals(3, localDate0.size());
      //  // Unstable assertion: assertEquals(1556043939, int0);
      
      int int1 = localDate0.hashCode();
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals(3, localDate0.size());
      //  // Unstable assertion: assertEquals(1556043939, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-25);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-25:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-25:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("-25:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-25:00", fixedDateTimeZone0.getID());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = LocalDate.now();
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate1, localDate0);
      
      boolean boolean0 = localDate0.equals((Object) localDate1);
      assertEquals("-25:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-25:00", fixedDateTimeZone0.getID());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertFalse(boolean0);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      byte byte0 = (byte)87;
      Instant instant0 = new Instant((long) byte0);
      assertEquals(87L, instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(87L, instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = localDate0.equals((Object) fixedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(87L, instant0.getMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      MockDate mockDate0 = (MockDate)localDate0.toDate();
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      long long0 = 520L;
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      int int0 = (-406);
      LocalDate localDate1 = localDate0.withPeriodAdded((ReadablePeriod) period0, int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 0L;
      int int0 = (-25);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-25:00", fixedDateTimeZone0.toString());
      assertEquals("-25:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-25:00", fixedDateTimeZone0.toString());
      assertEquals("-25:00", fixedDateTimeZone0.getID());
      assertNotNull(localDate0);
      
      DurationFieldType durationFieldType0 = null;
      boolean boolean0 = localDate0.isSupported(durationFieldType0);
      assertEquals(3, localDate0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-25:00", fixedDateTimeZone0.toString());
      assertEquals("-25:00", fixedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       int int0 = (-24);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-24,MONTH=-24,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-24,HOUR_OF_DAY=-24,MINUTE=-24,SECOND=-24,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertNotNull(date0);
//       
//       LocalDate localDate0 = LocalDate.fromDateFields(date0);
//       assertEquals(3, localDate0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertNotNull(localDate0);
//       
//       DateTimeFieldType dateTimeFieldType0 = null;
//       boolean boolean0 = localDate0.isSupported(dateTimeFieldType0);
//       assertEquals(3, localDate0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-1325);
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertEquals("Tue Oct 18 20:55:00 GMT 460", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Tue Oct 18 20:55:00 GMT 460", mockDate0.toString());
      assertNotNull(localDate0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        int int1 = localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hourOfDay' is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       int int0 = 4693;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4693,MONTH=4693,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4693,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(3, localDate0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=98676403200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5096,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=341,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(localDate0);
//       
//       DateTimeFieldType dateTimeFieldType0 = null;
//       // Undeclared exception!
//       try {
//         int int1 = localDate0.get(dateTimeFieldType0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // The DateTimeFieldType must not be null
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 4092;
      // Undeclared exception!
      try {
        int int1 = localDate0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 4092
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = (-1L);
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = (-22);
      // Undeclared exception!
      try {
        DateTimeField dateTimeField0 = localDate0.getField(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -22
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      MockDate mockDate0 = (MockDate)localDate0.toDate();
      assertEquals(3, localDate0.size());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.fromDateFields(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertEquals("weekyear", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long long0 = (-3297L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getYearOfCentury();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(69, int0);
  }

  @Test(timeout = 4000)
  public void test57() {}
//   @Test(timeout = 4000)
//   public void test57()  throws Throwable  {
//       Chronology chronology0 = null;
//       YearMonthDay yearMonthDay0 = new YearMonthDay();
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0, chronology0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(localDate0);
//       
//       LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
//       assertEquals("dayOfYear", localDate_Property0.getName());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(localDate_Property0);
//   }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withDayOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      assertEquals(3, localDate0.size());
      assertEquals("weekOfWeekyear", localDate_Property0.getName());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test61() {}
//   @Test(timeout = 4000)
//   public void test61()  throws Throwable  {
//       long long0 = 0L;
//       YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       String string0 = null;
//       String string1 = localDate0.toString(string0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(string1);
//       assertEquals("1970-01-01", string1);
//   }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertEquals(3, localDate0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getDayOfYear();
      assertEquals(3, localDate0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(45, int0);
  }

  @Test(timeout = 4000)
  public void test64() {}
//   @Test(timeout = 4000)
//   public void test64()  throws Throwable  {
//       long long0 = 0L;
//       YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       int int0 = 1;
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(localDate0);
//       
//       LocalDate localDate1 = localDate0.withWeekOfWeekyear(int0);
//       assertEquals(3, localDate1.size());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(localDate1);
//       assertSame(localDate1, localDate0);
//       assertSame(localDate0, localDate1);
//   }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      assertEquals("dayOfWeek", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Object object0 = null;
      DateTime dateTime0 = new DateTime(object0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(localDateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTime0.getZone();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((Object) localDateTime0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getEra();
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test68() {}
//   @Test(timeout = 4000)
//   public void test68()  throws Throwable  {
//       int int0 = (-24);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-24,MONTH=-24,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-24,HOUR_OF_DAY=-24,MINUTE=-24,SECOND=-24,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertNotNull(date0);
//       
//       LocalDate localDate0 = LocalDate.fromDateFields(date0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       // Undeclared exception!
//       try {
//         LocalDate localDate1 = localDate0.withYearOfCentury(int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Value -24 for yearOfCentury must be in the range [0,99]
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test69() {}
//   @Test(timeout = 4000)
//   public void test69()  throws Throwable  {
//       int int0 = 4693;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4693,MONTH=4693,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4693,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=98676403200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5096,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=341,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       int int1 = localDate0.getYearOfEra();
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=98676403200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5096,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=341,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals(5096, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      long long0 = (-1933L);
      MockDate mockDate0 = new MockDate(long0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.withWeekyear(int0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test72() {}
//   @Test(timeout = 4000)
//   public void test72()  throws Throwable  {
//       long long0 = 0L;
//       YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(localDate0);
//       
//       int int0 = localDate0.getCenturyOfEra();
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(19, int0);
//   }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      assertEquals(3, localDate0.size());
      assertEquals("centuryOfEra", localDate_Property0.getName());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.withCenturyOfEra(int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Object object0 = null;
      DateTime dateTime0 = new DateTime(object0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(localDateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTime0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate((Object) localDateTime0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(localDate0);
      
      LocalDate localDate1 = localDate0.withEra(int0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.withYear(int0);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      assertEquals("monthOfYear", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 39;
      LocalDate localDate0 = new LocalDate((long) int0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try {
        DateTime dateTime0 = localDate0.toDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
      }
  }

  @Test(timeout = 4000)
  public void test79() {}
//   @Test(timeout = 4000)
//   public void test79()  throws Throwable  {
//       long long0 = 0L;
//       YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(localDate0);
//       
//       ReadablePeriod readablePeriod0 = null;
//       LocalDate localDate1 = localDate0.minus(readablePeriod0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate1.size());
//       assertNotNull(localDate1);
//       assertSame(localDate0, localDate1);
//       assertSame(localDate1, localDate0);
//   }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getWeekyear();
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      YearMonthDay yearMonthDay0 = dateTime0.toYearMonthDay();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = localDate0.getDayOfWeek();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(5, int0);
      
      LocalDate localDate1 = localDate0.withMonthOfYear(int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Interval interval0 = localDate0.toInterval();
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertNotNull(interval0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      long long0 = 0L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = (-827);
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withDayOfMonth(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -827 for dayOfMonth must be in the range [1,28]
         //
      }
  }

  @Test(timeout = 4000)
  public void test84() {}
//   @Test(timeout = 4000)
//   public void test84()  throws Throwable  {
//       int int0 = (-24);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-24,MONTH=-24,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-24,HOUR_OF_DAY=-24,MINUTE=-24,SECOND=-24,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertNotNull(date0);
//       
//       LocalDate localDate0 = LocalDate.fromDateFields(date0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62990094264000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=28,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=35,SECOND=36,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("Mon Dec 05 23:35:36 GMT 28", date0.toString());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       // Undeclared exception!
//       try {
//         LocalDate localDate1 = localDate0.withYearOfEra(int0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Value -24 for yearOfEra must be in the range [1,292278993]
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDate0);
      
      Weeks weeks0 = Weeks.THREE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      LocalDate localDate1 = localDate0.plus((ReadablePeriod) weeks0);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate1.size());
      assertEquals(1, weeks0.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      assertEquals(3, localDate1.size());
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test89() {}
//   @Test(timeout = 4000)
//   public void test89()  throws Throwable  {
//       long long0 = 0L;
//       YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       int int0 = 1;
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertEquals("dayOfMonth", localDate_Property0.getName());
//       assertNotNull(localDate_Property0);
//       
//       LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(int0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, localDate1.size());
//       assertEquals("dayOfMonth", localDate_Property0.getName());
//       assertNotNull(localDate1);
//       assertFalse(localDate0.equals((Object)localDate1));
//       assertFalse(localDate1.equals((Object)localDate0));
//       assertNotSame(localDate0, localDate1);
//       assertNotSame(localDate1, localDate0);
//   }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      long long0 = (-1933L);
      MockDate mockDate0 = new MockDate(long0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertEquals("era", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertEquals("era", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(localDate1);
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertEquals(3, localDate1.size());
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test92() {}
//   @Test(timeout = 4000)
//   public void test92()  throws Throwable  {
//       int int0 = 4693;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4693,MONTH=4693,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4693,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=98676403200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5096,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=341,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       LocalDate.Property localDate_Property0 = localDate0.year();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=98676403200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5096,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=341,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(3, localDate0.size());
//       assertEquals("year", localDate_Property0.getName());
//       assertNotNull(localDate_Property0);
//       
//       ISOChronology iSOChronology0 = (ISOChronology)localDate_Property0.getChronology();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=98676403200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=5096,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=341,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(3, localDate0.size());
//       assertEquals("year", localDate_Property0.getName());
//       assertNotNull(iSOChronology0);
//   }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      YearMonthDay yearMonthDay0 = dateTime0.toYearMonthDay();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(yearMonthDay0);
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("era", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("era", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.addToCopy(int0);
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertEquals(3, localDate0.size());
      assertEquals("year", localDate_Property0.getName());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      assertEquals(3, localDate0.size());
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate1.size());
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      long long0 = (-1933L);
      MockDate mockDate0 = new MockDate(long0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals("era", localDate_Property0.getName());
      assertNotNull(localDate_Property0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for era is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertEquals(3, localDate0.size());
      assertEquals("dayOfMonth", localDate_Property0.getName());
      assertNotNull(localDate_Property0);
      
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals("dayOfMonth", localDate_Property0.getName());
      assertNotNull(localDate1);
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test(timeout = 4000)
  public void test99() {}
//   @Test(timeout = 4000)
//   public void test99()  throws Throwable  {
//       long long0 = 0L;
//       YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
//       assertEquals(3, yearMonthDay0.size());
//       assertNotNull(yearMonthDay0);
//       
//       LocalDate localDate0 = new LocalDate((Object) yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
//       assertEquals("dayOfMonth", localDate_Property0.getName());
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate_Property0);
//       
//       LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
//       assertEquals(3, localDate1.size());
//       assertEquals("dayOfMonth", localDate_Property0.getName());
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate1);
//       assertSame(localDate1, localDate0);
//       assertSame(localDate0, localDate1);
//   }
}
