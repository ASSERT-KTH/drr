/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:30:13 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      int int0 = 44;
      Period period0 = new Period((long) int0, (long) int0);
      assertNotNull(period0);
      
      Period period1 = period0.plusMonths(int0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      
      // Undeclared exception!
      try {
        Period period2 = period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P44M
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      ReadableInstant readableInstant0 = null;
      Period period0 = duration0.toPeriodTo(readableInstant0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      
      int int0 = 1;
      Period period1 = period0.multipliedBy(int0);
      assertNotNull(period1);
      assertEquals(0L, duration0.getMillis());
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.negated();
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 20587512;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Months months0 = null;
      Period period1 = period0.minus((ReadablePeriod) months0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Period period0 = duration0.toPeriod((Chronology) buddhistChronology0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      
      Months months0 = Months.FIVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period1 = period0.minus((ReadablePeriod) months0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, months0.size());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-3042);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusMillis(int1);
      assertNotNull(period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1034;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusSeconds(int1);
      assertNotNull(period1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-3042);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusMinutes(int1);
      assertNotNull(period1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-3042);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.plusHours(int0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1034;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Period period1 = period0.plusDays(int0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 10039L;
      PeriodType periodType0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      int int0 = (-398);
      Period period1 = period0.minusWeeks(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1034;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.minusMonths(int1);
      assertNotNull(period1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.plusYears(int0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-3042);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 4;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, years0.size());
      
      int int1 = 0;
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(int1);
      assertNotNull(durationFieldType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, years0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int1);
      assertNotNull(period1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, years0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 961;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-10);
      Period period0 = new Period();
      assertNotNull(period0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1270;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 10039L;
      PeriodType periodType0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      int int0 = 0;
      Years years0 = Years.MAX_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      DurationFieldType durationFieldType0 = years0.getFieldType(int0);
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, years0.size());
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, years0.size());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-3042);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 4;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Period period0 = years0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1034;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = null;
      Period period1 = period0.withPeriodType(periodType0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 4;
      LocalTime localTime0 = new LocalTime(int0, int0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertNotNull(period0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      LocalDate localDate0 = new LocalDate((Object) dateTime0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(interval0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try {
        Seconds seconds0 = period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      Months months0 = Months.TWELVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, months0.size());
      
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertNotNull(period0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 10039L;
      PeriodType periodType0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusWeeks(int0);
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1034;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Minutes minutes0 = period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      int int0 = 0;
      Period period0 = new Period((long) int0, periodType0);
      assertNotNull(period0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      ReadableInstant readableInstant0 = null;
      Period period0 = duration0.toPeriodTo(readableInstant0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 302;
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-2);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Days days0 = period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = 10039L;
      PeriodType periodType0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.withHours(int0);
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-3042);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(int0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Period period0 = duration0.toPeriod((Chronology) buddhistChronology0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      
      int int0 = 0;
      Period period1 = period0.withWeeks(int0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 10039L;
      PeriodType periodType0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 4;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, years0.size());
      
      Period period1 = period0.withSeconds(int0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, years0.size());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 20587512;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = 10039L;
      PeriodType periodType0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusHours(int0);
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) islamicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(0L, duration0.getMillis());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 10039L;
      PeriodType periodType0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.withDays(int0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-4397);
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-3042);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      Period period1 = period0.minusMinutes(int0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(interval0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(2, yearMonth0.size());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
      
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(2, yearMonth0.size());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      PeriodType periodType0 = period0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(2, yearMonth0.size());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
      
      Period period1 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0, periodType0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(2, yearMonth0.size());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Period period0 = duration0.toPeriod((Chronology) buddhistChronology0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      
      int int0 = 0;
      Period period1 = period0.minusDays(int0);
      assertNotNull(period1);
      assertEquals(0L, duration0.getMillis());
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 4;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, years0.size());
      
      Period period1 = period0.minusMillis(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, years0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 4;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, years0.size());
      
      PeriodType periodType0 = null;
      Period period1 = period0.normalizedStandard(periodType0);
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertEquals(1, years0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 1034;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertNotNull(period0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(3, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = " I;o]TA8DA9o4";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \" I;o]TA8DA9o4\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      ReadableInstant readableInstant0 = null;
      Period period0 = duration0.toPeriodTo(readableInstant0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      
      int int0 = 1;
      Period period1 = period0.withMinutes(int0);
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(0L, duration0.getMillis());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = PeriodType.YEAR_INDEX;
      assertEquals(0, int0);
      
      YearMonth yearMonth0 = YearMonth.now((Chronology) buddhistChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(interval0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Period period1 = period0.withMillis(int0);
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertEquals(2, yearMonth0.size());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)dateMidnight0.toGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertNotNull(localDate0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertNotNull(dateTime0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(period0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392336000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Europe/London\",offset=0,dstSavings=3600000,useDaylight=true,transitions=242,lastRule=java.util.SimpleTimeZone[id=Europe/London,offset=0,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=-1,startDayOfWeek=1,startTime=3600000,startTimeMode=2,endMode=2,endMonth=9,endDay=-1,endDayOfWeek=1,endTime=3600000,endTimeMode=2]],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 1034;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 1034;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = 4;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, years0.size());
      
      Period period1 = period0.toPeriod();
      assertNotNull(period1);
      assertEquals(1, years0.size());
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 4;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, years0.size());
      
      Period period1 = period0.negated();
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(1, years0.size());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long long0 = 0L;
      Duration duration0 = Duration.standardSeconds(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      ReadableInstant readableInstant0 = null;
      Period period0 = duration0.toPeriodTo(readableInstant0);
      assertNotNull(period0);
      assertEquals(0L, duration0.getMillis());
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, hours0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "org.joda.time.DurationFieldType";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      long long0 = 0L;
      Duration duration0 = Duration.standardHours(long0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = new DateTime(long0, dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0);
      assertNotNull(period0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
  }
}
