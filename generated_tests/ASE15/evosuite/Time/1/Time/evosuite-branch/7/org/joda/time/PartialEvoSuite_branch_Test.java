/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:17 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, partial0.size());
      assertEquals("[]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = partial0.toString();
      assertEquals(0, partial0.size());
      assertEquals("[]", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, partial0.size());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 453;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      String string0 = "w!";
      String string1 = partial0.toString(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\uFFFD!", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      String string0 = partial0.toString();
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("-044", string0);
      assertNotNull(string0);
      
      String string1 = partial0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotSame(string1, string0);
      assertEquals("-044", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(localDateTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(partial0);
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("[year=2014, monthOfYear=2, dayOfMonth=14, millisOfDay=73281320]", string1);
      assertNotNull(string1);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(4, localDateTime0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(4, partial0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertNotNull(dateTimeFieldType0);
//       
//       int int0 = 453;
//       Partial partial0 = new Partial(dateTimeFieldType0, int0);
//       assertEquals(1, partial0.size());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertNotNull(partial0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=453,MONTH=453,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=453,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=453,HOUR_OF_DAY=453,MINUTE=453,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDate localDate0 = LocalDate.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-46639826820000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=492,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=15,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=33,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       boolean boolean0 = partial0.isMatch((ReadablePartial) localDate0);
//       assertEquals(1, partial0.size());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-46639826820000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=492,MONTH=0,WEEK_OF_YEAR=3,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=15,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=33,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals(3, localDate0.size());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, partial0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      CopticChronology copticChronology0 = null;
      DateMidnight dateMidnight0 = new DateMidnight((long) int0, (Chronology) copticChronology0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertEquals(1, partial0.size());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      long long0 = (-3561L);
      Instant instant0 = new Instant(long0);
      assertEquals((-3561L), instant0.getMillis());
      assertNotNull(instant0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
      assertEquals(0, partial0.size());
      assertEquals((-3561L), instant0.getMillis());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) hours0, intArray0[3]);
      assertEquals(8, partial1.size());
      assertEquals(1, hours0.size());
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(partial0);
      
      int int0 = 0;
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.withPeriodAdded(readablePeriod0, int0);
      assertEquals(4, partial1.size());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
//       assertNotNull(buddhistChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(cachedDateTimeZone0);
//       
//       LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(localDateTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDateTime0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(partial0);
//       
//       int int0 = 0;
//       Integer integer0 = new Integer(int0);
//       assertTrue(integer0.equals((Object)int0));
//       assertEquals(0, (int)integer0);
//       
//       Months months0 = Months.MIN_VALUE;
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       DurationFieldType durationFieldType0 = months0.getFieldType((int) integer0);
//       assertTrue(integer0.equals((Object)int0));
//       assertEquals("months", durationFieldType0.getName());
//       assertEquals("months", durationFieldType0.toString());
//       assertEquals(1, months0.size());
//       assertNotNull(durationFieldType0);
//       
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, (int) integer0);
//       assertTrue(integer0.equals((Object)int0));
//       assertEquals("months", durationFieldType0.getName());
//       assertEquals("months", durationFieldType0.toString());
//       assertEquals(4, partial1.size());
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(1, months0.size());
//       assertSame(partial1, partial0);
//       assertSame(partial0, partial1);
//       assertNotNull(partial1);
//   }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int[] intArray0 = new int[7];
      int int0 = (-774);
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(2, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 453;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Years years0 = Years.MAX_VALUE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, years0.size());
      assertNotNull(durationFieldType0);
      
      int int1 = 0;
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, partial0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, years0.size());
      assertEquals(1, partial1.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
//       assertNotNull(buddhistChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(localDateTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDateTime0);
//       assertEquals(4, partial0.size());
//       assertEquals(4, localDateTime0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(partial0);
//       
//       int int0 = 0;
//       Integer integer0 = new Integer(int0);
//       assertTrue(integer0.equals((Object)int0));
//       assertEquals(0, (int)integer0);
//       
//       Months months0 = Months.MIN_VALUE;
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       DurationFieldType durationFieldType0 = months0.getFieldType((int) integer0);
//       assertTrue(integer0.equals((Object)int0));
//       assertEquals(1, months0.size());
//       assertEquals("months", durationFieldType0.getName());
//       assertEquals("months", durationFieldType0.toString());
//       assertNotNull(durationFieldType0);
//       
//       int int1 = 1566;
//       Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertTrue(integer0.equals((Object)int0));
//       assertFalse(integer0.equals((Object)int1));
//       assertEquals(1, months0.size());
//       assertEquals(4, partial0.size());
//       assertEquals(4, partial1.size());
//       assertEquals(4, localDateTime0.size());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("months", durationFieldType0.getName());
//       assertEquals("months", durationFieldType0.toString());
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//       assertNotNull(partial1);
//   }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 577;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertNotNull(lenientDateTimeField0);
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) julianChronology0, (DateTimeField) lenientDateTimeField0);
      assertEquals("clockhourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("clockhourOfHalfday", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals("clockhourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(true, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("clockhourOfHalfday", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("clockhourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(true, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("clockhourOfHalfday", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int[] intArray0 = new int[5];
      int int0 = (-3752);
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3752 for clockhourOfHalfday must be in the range [1,12]
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 453;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(0, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertEquals(0, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 189;
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertEquals(3, partial0.size());
      assertEquals(3, localDate0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = 0L;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 3265;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3265 for weekOfWeekyear must not be larger than 53
         //
      }
  }

  @Test(timeout = 4000)
  public void test23() {}
//   @Test(timeout = 4000)
//   public void test23()  throws Throwable  {
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
//       assertNotNull(buddhistChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDateTime0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, partial0.size());
//       assertNotNull(partial0);
//       
//       int int0 = 0;
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
//       assertEquals("millisOfDay", dateTimeFieldType0.toString());
//       assertEquals("millisOfDay", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       Partial partial1 = partial0.with(dateTimeFieldType0, int0);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertEquals("millisOfDay", dateTimeFieldType0.toString());
//       assertEquals("millisOfDay", dateTimeFieldType0.getName());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals(4, partial1.size());
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, partial0.size());
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//       assertNotNull(partial1);
//   }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-1615);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      long long0 = 0L;
      MonthDay monthDay0 = new MonthDay(long0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)monthDay0.getChronology();
      assertEquals(2, monthDay0.size());
      assertNotNull(iSOChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) iSOChronology0);
      assertEquals(2, monthDay0.size());
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 577;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) islamicChronology0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) islamicChronology0);
      //  // Unstable assertion: assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.dayOfMonth();
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", lenientDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isSupported());
      //  // Unstable assertion: assertNotNull(lenientDateTimeField0);
      
      int int0 = (-1194);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField((DateTimeField) lenientDateTimeField0, int0);
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", lenientDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals(-1193, offsetDateTimeField0.getMinimumValue());
      //  // Unstable assertion: assertEquals(-1194, offsetDateTimeField0.getOffset());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(-1164, offsetDateTimeField0.getMaximumValue());
      //  // Unstable assertion: assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = offsetDateTimeField0.getType();
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", lenientDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals(-1193, offsetDateTimeField0.getMinimumValue());
      //  // Unstable assertion: assertEquals(-1194, offsetDateTimeField0.getOffset());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(-1164, offsetDateTimeField0.getMaximumValue());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      //  // Unstable assertion: assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", lenientDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].getName());
      //  // Unstable assertion: assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].toString());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals(-1193, offsetDateTimeField0.getMinimumValue());
      //  // Unstable assertion: assertEquals(-1194, offsetDateTimeField0.getOffset());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(-1164, offsetDateTimeField0.getMaximumValue());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      //  // Unstable assertion: assertNotNull(dateTimeFieldTypeArray0[1]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      //  // Unstable assertion: assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      //  // Unstable assertion: assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      //  // Unstable assertion: assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      //  // Unstable assertion: assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      //  // Unstable assertion: assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", lenientDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].toString());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldTypeArray0[0].getName());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals(-1193, offsetDateTimeField0.getMinimumValue());
      //  // Unstable assertion: assertEquals(-1194, offsetDateTimeField0.getOffset());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(-1164, offsetDateTimeField0.getMaximumValue());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      //  // Unstable assertion: assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", lenientDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(true, lenientDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].toString());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldTypeArray0[2].getName());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isSupported());
      //  // Unstable assertion: assertEquals(-1193, offsetDateTimeField0.getMinimumValue());
      //  // Unstable assertion: assertEquals(-1194, offsetDateTimeField0.getOffset());
      //  // Unstable assertion: assertEquals(true, offsetDateTimeField0.isLenient());
      //  // Unstable assertion: assertEquals("dayOfMonth", offsetDateTimeField0.getName());
      //  // Unstable assertion: assertEquals(-1164, offsetDateTimeField0.getMaximumValue());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      //  // Unstable assertion: assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      //  // Unstable assertion: assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: dayOfWeek < dayOfMonth
         //
      }
  }

  @Test(timeout = 4000)
  public void test29() {}
//   @Test(timeout = 4000)
//   public void test29()  throws Throwable  {
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       int int0 = 453;
//       Partial partial0 = new Partial(dateTimeFieldType0, int0);
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals(1, partial0.size());
//       assertNotNull(partial0);
//       
//       int int1 = 0;
//       Partial.Property partial_Property0 = new Partial.Property(partial0, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals(1, partial0.size());
//       assertNotNull(partial_Property0);
//       
//       int int2 = partial_Property0.compareTo((ReadablePartial) partial0);
//       assertTrue(int1 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(int2 == int0);
//       assertTrue(int2 == int1);
//       assertEquals("yearOfEra", dateTimeFieldType0.toString());
//       assertEquals("yearOfEra", dateTimeFieldType0.getName());
//       assertEquals(1, partial0.size());
//       assertEquals(0, int2);
//       
//       DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
//       assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
//       assertEquals("dayOfWeek", dateTimeFieldType1.toString());
//       assertEquals("dayOfWeek", dateTimeFieldType1.getName());
//       assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
//       assertNotNull(dateTimeFieldType1);
//       
//       // Undeclared exception!
//       try {
//         Partial partial1 = partial0.with(dateTimeFieldType1, int2);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Value 0 for dayOfWeek must not be smaller than 1
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int[] intArray0 = new int[3];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("weekyearOfCentury", dateTimeFieldType1.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("weekyearOfCentury", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekyearOfCentury", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType1.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[2].getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[2].toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: hourOfHalfday < weekyearOfCentury
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertEquals("era", dateTimeFieldTypeArray0[4].getName());
      assertEquals("era", dateTimeFieldTypeArray0[4].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[4]);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate unsupported: era and era
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int[] intArray0 = new int[3];
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[1].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[1].getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[2].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[2].getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: hourOfHalfday and hourOfHalfday
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[3];
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      int[] intArray0 = new int[1];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-3687);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 453;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertNotNull(mutablePeriod0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) mutablePeriod0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      int int0 = 21;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+21:21", fixedDateTimeZone0.getID());
      assertEquals("+21:21", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+21:21", fixedDateTimeZone0.getID());
      assertEquals("+21:21", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      Partial partial0 = new Partial((Chronology) zonedChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+21:21", fixedDateTimeZone0.getID());
      assertEquals("+21:21", fixedDateTimeZone0.toString());
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+21:21", fixedDateTimeZone0.getID());
      assertEquals("+21:21", fixedDateTimeZone0.toString());
      assertEquals(0, partial0.size());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 63;
      Weeks weeks0 = Weeks.weeks(int0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Partial partial1 = partial0.plus((ReadablePeriod) weeks0);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertEquals(1, weeks0.size());
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1453;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[8];
      int[] intArray0 = new int[5];
      int int0 = (-3752);
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldTypeArray0[0]);
      assertEquals(8, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 453;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      int int1 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertFalse(int1 == int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int0 == int1);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 577;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      String string0 = "U)f5e,@`7]WO:vi.yS1";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"U)f5e,@`7]WO:vi.yS1\" for yearOfEra is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[7];
      int int0 = (-774);
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      assertEquals(2, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(2, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertEquals(2, partial0.size());
      assertEquals(2, partial1.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Partial partial0 = null;
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
