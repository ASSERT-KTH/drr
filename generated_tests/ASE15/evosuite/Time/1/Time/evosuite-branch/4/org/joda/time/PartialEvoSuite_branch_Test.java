/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:00:42 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      String string1 = partial0.toString(string0, locale0);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, partial0.size());
      
      String string2 = partial0.toString(string1, locale0);
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertEquals("[]", string2);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, partial0.size());
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("[]", string0);
      assertEquals(0, partial0.size());
      
      String string1 = partial0.toString(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[]", string1);
      assertEquals(0, partial0.size());
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 117;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("0117", string0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      String string1 = partial0.toString();
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("0117", string1);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType1.getName());
      assertEquals("yearOfEra", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      int[] intArray0 = new int[4];
      int int0 = 20;
      intArray0[2] = int0;
      Partial partial0 = new Partial(dateTimeFieldType1, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType1.getName());
      assertEquals("yearOfEra", dateTimeFieldType1.toString());
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      Partial partial1 = partial0.with(dateTimeFieldType0, intArray0[2]);
      assertArrayEquals(new int[] {0, 0, 20, 0}, intArray0);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(partial0, partial1);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertEquals(2, partial1.size());
      assertEquals("yearOfEra", dateTimeFieldType1.getName());
      assertEquals("yearOfEra", dateTimeFieldType1.toString());
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      
      String string0 = null;
      String string1 = partial1.toString(string0);
      assertArrayEquals(new int[] {0, 0, 20, 0}, intArray0);
      assertNotNull(string1);
      assertNotSame(partial1, partial0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(partial0, partial1);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertEquals("[yearOfEra=20, dayOfMonth=20]", string1);
      assertEquals(2, partial1.size());
      assertEquals("yearOfEra", dateTimeFieldType1.getName());
      assertEquals("yearOfEra", dateTimeFieldType1.toString());
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 117;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("0117", string0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      int int0 = 24;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      int int1 = (-306);
      Partial partial1 = new Partial(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(boolean0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int0 == int1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      int int0 = 24;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      assertEquals(1, partial0.size());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      int int0 = 1215;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertFalse(boolean0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = new LocalTime(object0, (Chronology) buddhistChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertNotNull(partial0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      
      DateMidnight dateMidnight0 = null;
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertTrue(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = 847;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      Hours hours0 = Hours.hours(int0);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      int int1 = 0;
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) hours0, int1);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, hours0.size());
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      Chronology chronology0 = null;
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      assertEquals(5, partial0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.withPeriodAdded(readablePeriod0, intArray0[0]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(5, partial1.size());
      assertEquals(5, partial0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 2020L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals(0, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      Chronology chronology0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      assertEquals(5, partial0.size());
      
      Days days0 = Days.days(int0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) days0);
      assertNotNull(weeks0);
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DurationFieldType durationFieldType0 = weeks0.getFieldType(intArray0[4]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, intArray0[3]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals(1, days0.size());
      assertEquals(1, weeks0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(5, partial1.size());
      assertEquals(5, partial0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = (-475L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = (-2657);
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(3, partial1.size());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 0L;
      TimeOfDay timeOfDay0 = new TimeOfDay(long0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = timeOfDay0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, timeOfDay0.size());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) buddhistChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, timeOfDay0.size());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, timeOfDay0.size());
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = 2544L;
      TimeOfDay timeOfDay0 = new TimeOfDay(long0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = timeOfDay0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "N";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) buddhistChronology0);
      assertNotNull(partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      int int1 = (-31);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      int int0 = 1215;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      
      int int1 = 132;
      Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertFalse(int1 == int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = 847;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      int int1 = (-2188);
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertFalse(int0 == int1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = (-1988);
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1988 for millisOfSecond must not be smaller than 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Object object0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      LocalTime localTime0 = new LocalTime(object0, (Chronology) buddhistChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertNotNull(partial0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(5, partial1.size());
      assertEquals(4, localTime0.size());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(4, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = (-1230);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1230 for era must not be smaller than 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = 6;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-1315);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Chronology chronology0 = null;
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      int int0 = 24;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) gregorianChronology0);
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[10];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType2);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertEquals("yearOfEra", dateTimeFieldType2.getName());
      assertEquals("yearOfEra", dateTimeFieldType2.toString());
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType2;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("yearOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("yearOfEra", dateTimeFieldTypeArray0[1].toString());
      assertEquals("yearOfEra", dateTimeFieldType2.getName());
      assertEquals("yearOfEra", dateTimeFieldType2.toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[3].toString());
      assertEquals("year", dateTimeFieldTypeArray0[3].getName());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[4].toString());
      assertEquals("year", dateTimeFieldTypeArray0[4].getName());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[5].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[5].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[6].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[6].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[7].getName());
      assertEquals("year", dateTimeFieldTypeArray0[7].toString());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[8].getName());
      assertEquals("year", dateTimeFieldTypeArray0[8].toString());
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[9]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[9].getName());
      assertEquals("year", dateTimeFieldTypeArray0[9].toString());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: yearOfEra < year
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[2].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[3].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[3].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[4].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[4].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[6].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[6].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldTypeArray0[4];
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[7].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[7].toString());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[8].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[8].getName());
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[9]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[9].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[9].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[10];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[5].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[5].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year and year
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 2020L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals(0, int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      Chronology chronology0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType1.toString());
      
      int[] intArray0 = new int[5];
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[2].toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[3].toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[3].getName());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[4].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[4].getName());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: halfdayOfDay < weekOfWeekyear
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[4].getName());
      assertEquals("era", dateTimeFieldTypeArray0[4].toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("era", dateTimeFieldTypeArray0[5].toString());
      assertEquals("era", dateTimeFieldTypeArray0[5].getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("era", dateTimeFieldTypeArray0[6].getName());
      assertEquals("era", dateTimeFieldTypeArray0[6].toString());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[7].toString());
      assertEquals("era", dateTimeFieldTypeArray0[7].getName());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("era", dateTimeFieldTypeArray0[8].getName());
      assertEquals("era", dateTimeFieldTypeArray0[8].toString());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[9];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate unsupported: era and era
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(lenientChronology0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay((Object) dateMidnight0, (Chronology) lenientChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = 196;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(5, partial1.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 2020L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals(0, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      Chronology chronology0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(chronology0, dateTimeField0, int0);
      assertNotNull(skipDateTimeField0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[0].getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("halfdayOfDay", skipDateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[5];
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[2].toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[3].getName());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[3].toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[4].getName());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[4].toString());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: halfdayOfDay and halfdayOfDay
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[4];
      DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      int[] intArray0 = new int[5];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 117;
      Chronology chronology0 = null;
      DateTimeFieldType dateTimeFieldType0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      Chronology chronology0 = null;
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(partial0);
      assertEquals(5, partial0.size());
      
      Days days0 = Days.days(intArray0[0]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.minus((ReadablePeriod) days0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = 6;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      int int0 = 1215;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      PeriodType periodType0 = null;
      Period period0 = new Period((long) int0, periodType0, (Chronology) copticChronology0);
      assertNotNull(period0);
      
      Partial partial1 = partial0.plus((ReadablePeriod) period0);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Partial partial0 = null;
      int int0 = (-1962);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 117;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int1 = partial_Property0.get();
      assertEquals(117, int1);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = 117;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 58;
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      String string0 = "";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"\" for hourOfDay is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial_Property0.getPartial();
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      
      int int0 = 1215;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }
}
