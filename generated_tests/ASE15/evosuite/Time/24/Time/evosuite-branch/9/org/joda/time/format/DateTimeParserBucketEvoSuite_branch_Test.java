/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:10:47 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.MutableDateTime;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class DateTimeParserBucketEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)julianChronology0.halfdays();
      assertNotNull(preciseDurationField0);
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertNotNull(unsupportedDurationField0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("minutes", unsupportedDurationField0.getName());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      
      int int0 = DateTimeParserBucket.compareReverse(preciseDurationField0, unsupportedDurationField0);
      assertEquals(1, int0);
      assertEquals("halfdays", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(43200000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("minutes", unsupportedDurationField0.getName());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      
      DateTimeField dateTimeField0 = julianChronology0.centuryOfEra();
      assertNotNull(dateTimeField0);
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = 515;
      DateTimeParserBucket.SavedField dateTimeParserBucket_SavedField0 = new DateTimeParserBucket.SavedField(dateTimeField0, int0);
      assertNotNull(dateTimeParserBucket_SavedField0);
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int1 = dateTimeParserBucket_SavedField0.compareTo(dateTimeParserBucket_SavedField0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 0L;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      String string0 = locale0.getVariant();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int0 = 0;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeField dateTimeField0 = gregorianChronology0.dayOfYear();
      assertNotNull(dateTimeField0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      boolean boolean0 = dateTimeParserBucket0.restoreState((Object) string0);
      assertFalse(boolean0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,366]
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 15356250;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+04:15:56.250", fixedDateTimeZone0.getID());
      assertEquals("+04:15:56.250", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals("+04:15:56.250", fixedDateTimeZone0.getID());
      assertEquals("+04:15:56.250", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) ethiopicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("+04:15:56.250", fixedDateTimeZone0.getID());
      assertEquals("+04:15:56.250", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)zonedChronology0.eras();
      assertNotNull(unsupportedDurationField0);
      assertEquals("+04:15:56.250", fixedDateTimeZone0.getID());
      assertEquals("+04:15:56.250", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      
      int int1 = DateTimeParserBucket.compareReverse(unsupportedDurationField0, unsupportedDurationField0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      assertEquals("+04:15:56.250", fixedDateTimeZone0.getID());
      assertEquals("+04:15:56.250", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      ISOChronology iSOChronology1 = (ISOChronology)iSOChronology0.withUTC();
      assertNotNull(iSOChronology1);
      assertFalse(iSOChronology0.equals((Object)iSOChronology1));
      assertFalse(iSOChronology1.equals((Object)iSOChronology0));
      assertNotSame(iSOChronology0, iSOChronology1);
      assertNotSame(iSOChronology1, iSOChronology0);
      
      Locale locale0 = null;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int1, (Chronology) iSOChronology1, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(iSOChronology0.equals((Object)iSOChronology1));
      assertFalse(iSOChronology1.equals((Object)iSOChronology0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("+04:15:56.250", fixedDateTimeZone0.getID());
      assertEquals("+04:15:56.250", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertNotSame(iSOChronology0, iSOChronology1);
      assertNotSame(iSOChronology1, iSOChronology0);
      
      long long0 = dateTimeParserBucket0.computeMillis();
      assertFalse(iSOChronology0.equals((Object)iSOChronology1));
      assertFalse(iSOChronology1.equals((Object)iSOChronology0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0L, long0);
      assertEquals("+04:15:56.250", fixedDateTimeZone0.getID());
      assertEquals("+04:15:56.250", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertNotSame(iSOChronology0, iSOChronology1);
      assertNotSame(iSOChronology1, iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = (-7L);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int0 = 0;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gregorianChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      String string0 = "t";
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot parse \"t\": Value 0 for dayOfYear must be in the range [1,366]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = null;
      long long0 = 1527L;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeField dateTimeField0 = gregorianChronology0.dayOfYear();
      assertNotNull(dateTimeField0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = 63;
      dateTimeParserBucket0.saveField(dateTimeField0, int0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      boolean boolean0 = true;
      String string0 = "Illegal instant due to time zone offset transition (";
      long long1 = dateTimeParserBucket0.computeMillis(boolean0, string0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(952041600000L, long1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 999988L;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DurationField durationField0 = ethiopicChronology0.minutes();
      assertNotNull(durationField0);
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      
      int int0 = DateTimeParserBucket.compareReverse(durationField0, durationField0);
      assertEquals(0, int0);
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = "-c0RhVjh4-%L";
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) ethiopicChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket0.new SavedState();
      assertNotNull(dateTimeParserBucket_SavedState0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      
      boolean boolean0 = dateTimeParserBucket_SavedState0.restoreState(dateTimeParserBucket0);
      assertTrue(boolean0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      dateTimeParserBucket0.saveField(dateTimeFieldType0, string0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("minutes", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      
      // Undeclared exception!
      try {
        long long1 = dateTimeParserBucket0.computeMillis(boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"-c0RhVjh4-%L\" for millisOfSecond is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = (-539L);
      int int0 = (-27);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-27), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) iSOChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      DateTimeParserBucket dateTimeParserBucket1 = new DateTimeParserBucket(long0, (Chronology) iSOChronology0, locale0, (Integer) int0, int0);
      assertNotNull(dateTimeParserBucket1);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      
      DateTimeParserBucket.SavedState dateTimeParserBucket_SavedState0 = dateTimeParserBucket1.new SavedState();
      assertNotNull(dateTimeParserBucket_SavedState0);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      
      boolean boolean0 = dateTimeParserBucket0.restoreState((Object) dateTimeParserBucket_SavedState0);
      assertFalse(dateTimeParserBucket1.equals((Object)dateTimeParserBucket0));
      assertFalse(dateTimeParserBucket0.equals((Object)dateTimeParserBucket1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket1.getOffset());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotSame(dateTimeParserBucket1, dateTimeParserBucket0);
      assertNotSame(dateTimeParserBucket0, dateTimeParserBucket1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 41L;
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      
      int int0 = 515;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(515, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      dateTimeParserBucket0.setOffset(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(515, dateTimeParserBucket0.getOffset());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 0L;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      Locale locale1 = dateTimeParserBucket0.getLocale();
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = (-539L);
      int int0 = (-27);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-27), (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) iSOChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      DateTimeZone dateTimeZone0 = dateTimeParserBucket0.getZone();
      assertNull(dateTimeZone0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 41L;
      DateTimeZone dateTimeZone0 = null;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int0 = 515;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(515, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) julianChronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      dateTimeParserBucket0.setPivotYear(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = null;
      long long0 = 1527L;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      Integer integer0 = dateTimeParserBucket0.getPivotYear();
      assertEquals(0, dateTimeParserBucket0.getOffset());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Chronology chronology0 = null;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      String string0 = "37\\H\\a&";
      int int0 = 249;
      Integer integer0 = Integer.getInteger(string0, int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(249, (int)integer0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) integer0, chronology0, locale0, integer0);
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      int int1 = dateTimeParserBucket0.getOffset();
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      Locale locale0 = null;
      long long0 = 1527L;
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) gregorianChronology0, locale0);
      assertNotNull(dateTimeParserBucket0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      
      GregorianChronology gregorianChronology1 = (GregorianChronology)dateTimeParserBucket0.getChronology();
      assertNotNull(gregorianChronology1);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "37\\H\\a&";
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((Object) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"37\\H\\a&\" is malformed at \"\\H\\a&\"
         //
      }
  }
}
