/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:27 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class DateTimeFormatterEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      String string0 = "";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(string0);
      assertNotNull(mutableDateTime0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
  }

  //@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(string0);
      assertNotNull(mutableDateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  //@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1056;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      String string0 = "";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) cachedDateTimeZone0);
      assertNull(dateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{=Europe/London}", hashMap0.toString());
      
      String string1 = "Instant must not be null";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Instant must not be null\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-506);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string0 = ".*rN,E4}]u9nl+";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \".*rN,E4}]u9nl+\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime(string0);
      assertNotNull(dateTime0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime(string0);
      assertNotNull(dateTime0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "6U@wWg~o7{w$|c*_";
      // Undeclared exception!
      try {
        Instant instant0 = Instant.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6U@wWg~o7{w$|c*_\" is malformed at \"U@wWg~o7{w$|c*_\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "-q%d";
      // Undeclared exception!
      try {
        Instant instant0 = Instant.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-q%d\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      String string0 = "+~[z<";
      boolean boolean0 = false;
      int int0 = 610;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate(string0);
      assertNotNull(localDate0);
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      char char0 = 'f';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      // Undeclared exception!
      try {
        LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char char0 = 'n';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      String string0 = "@`2`";
      // Undeclared exception!
      try {
        long long0 = dateTimeFormatter0.parseMillis(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"@`2`\"
         //
      }
  }

  //@Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 2632;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateTime dateTime0 = yearMonthDay0.toDateTime((ReadableInstant) instant0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTimeISO();
      assertNotNull(mutableDateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, yearMonthDay0.size());
      
      String string0 = "i2_xf{nU";
      int int1 = dateTimeFormatter1.parseInto((ReadWritableInstant) mutableDateTime0, string0, int0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-2633), int1);
      assertFalse(int1 == int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
  }

  //@Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string0);
      assertNotNull(mutableDateTime0);
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      int int0 = (-1217);
      int int1 = dateTimeFormatter1.parseInto((ReadWritableInstant) mutableDateTime0, string0, int0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1216, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2000;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      Integer integer0 = new Integer(int0);
      assertEquals(2000, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      ReadWritableInstant readWritableInstant0 = null;
      String string0 = "";
      // Undeclared exception!
      try {
        int int1 = dateTimeFormatter0.parseInto(readWritableInstant0, string0, (int) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      String string0 = "+~[z<";
      boolean boolean0 = false;
      int int0 = 610;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      // Undeclared exception!
      try {
        String string1 = dateTimeFormatter0.print((long) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
      }
  }

  //@Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "|";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      DateMidnight dateMidnight0 = DateMidnight.parse(string0, dateTimeFormatter0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      String string1 = dateTimeFormatter0.print((ReadableInstant) dateMidnight0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("|", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldTypeArray0[0], boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatter0.printTo((Writer) pipedWriter0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) pipedOutputStream0, charsetEncoder0);
      assertNotNull(outputStreamWriter0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      int int0 = 709;
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) outputStreamWriter0, int0);
      assertNotNull(bufferedWriter0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      dateTimeFormatter0.printTo((Writer) bufferedWriter0, (ReadablePartial) localDateTime0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 2000;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      int int1 = 0;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertFalse(int0 == int1);
      
      Integer integer0 = new Integer(int1);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(integer0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
      
      Locale locale0 = null;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale0);
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withPivotYear(int0);
      assertNotNull(dateTimeFormatter3);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter3, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter3);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, dateTimeFormatter3.isPrinter());
      assertEquals(false, dateTimeFormatter3.isOffsetParsed());
      assertEquals(true, dateTimeFormatter3.isParser());
      assertEquals(2000, dateTimeFormatter3.getDefaultYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter3.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter3));
      assertFalse(int0 == int1);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter3));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_Composite0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = (-1681);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(int0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear((Integer) int0);
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-506);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      DateTimeZone dateTimeZone0 = null;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone(dateTimeZone0);
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3698;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      Chronology chronology0 = null;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "8a]\"`4+.axi3uogV!";
      Instant instant0 = null;
      try {
        instant0 = new Instant((Object) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"8a]\"`4+.axi3uogV!\" is malformed at \"a]\"`4+.axi3uogV!\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char char0 = '`';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(true, dateTimeFormatter2.isOffsetParsed());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      
      Locale locale1 = null;
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withLocale(locale1);
      assertNotNull(dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 3698;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, dateTimeParser0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_Composite0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char char0 = 'n';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((int) char0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      dateTimeFormatter0.printTo((Writer) charArrayWriter0, (long) char0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("n", charArrayWriter0.toString());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldTypeArray0[0], boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      int int0 = (-80);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(int0);
      assertNotNull(dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(-80, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      char char0 = 'n';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter((int) char0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      dateTimeFormatter0.printTo((Appendable) charArrayWriter0, (long) char0);
      assertEquals(1, charArrayWriter0.size());
      assertEquals("n", charArrayWriter0.toString());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_Composite0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      DateTimeZone dateTimeZone0 = dateTimeFormatter0.getZone();
      assertNull(dateTimeZone0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "|";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertNull(chronology0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
  }

  //@Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "|";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      DateMidnight dateMidnight0 = DateMidnight.parse(string0, dateTimeFormatter0);
      assertNotNull(dateMidnight0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      int int0 = 210;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(int0);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      dateTimeFormatter0.printTo((Writer) charArrayWriter0, (ReadableInstant) dateMidnight0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("|", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "|";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      char char0 = 'n';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      Appendable appendable0 = null;
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      // Undeclared exception!
      try {
        dateTimeFormatter0.printTo(appendable0, (ReadablePartial) timeOfDay0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char char0 = '`';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      Integer integer0 = dateTimeFormatter0.getPivotYear();
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
  }

  //@Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = ".";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      long long0 = dateTimeFormatter0.parseMillis(string0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals((-3600000L), long0);
      
      int int0 = (-1834);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:01.834", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.834", fixedDateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime(long0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:01.834", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.834", fixedDateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals((-3600000L), dateTime0.getMillis());
      
      dateTimeFormatter0.printTo((Appendable) mockPrintWriter0, (ReadableInstant) dateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:01.834", fixedDateTimeZone0.getID());
      assertEquals("-00:00:01.834", fixedDateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals((-3600000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "|";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      
      Chronology chronology0 = dateTimeFormatter0.getChronolgy();
      assertNull(chronology0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        String string0 = dateTimeFormatter0.print(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "0vq2^T:O00";
      // Undeclared exception!
      try {
        YearMonth yearMonth0 = YearMonth.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0vq2^T:O00\" is malformed at \"vq2^T:O00\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      
      long long0 = 9223372036854775807L;
      String string1 = dateTimeFormatter0.print(long0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }
}
