/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:41:40 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang.math.Fraction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.junit.runner.RunWith;

 
public class FractionEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(2.0, fraction1.doubleValue(), 0.01D);
      assertEquals(2, fraction1.shortValue());
      assertEquals(2, fraction1.getProperWhole());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(2L, fraction1.longValue());
      assertEquals(2.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(2, fraction1.intValue());
      assertEquals(2, fraction1.byteValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(string0);
      assertEquals("2", string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.intValue());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertNotNull(string0);
      assertEquals("-1", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-72);
      Fraction fraction0 = Fraction.getFraction(int0, int0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(72, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(72, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(72, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(72, fraction0.getDenominator());
      assertNotNull(string0);
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      String string0 = fraction1.toProperString();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.byteValue());
      assertNotNull(string0);
      assertEquals("0", string0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-2768.0405192313);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-2768, fraction0.shortValue());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals((-2768L), fraction0.longValue());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals(-2768, fraction0.intValue());
      assertEquals(48, fraction0.byteValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(-2768, fraction0.shortValue());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals((-2768L), fraction0.longValue());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals(-2768, fraction0.intValue());
      assertEquals(48, fraction0.byteValue());
      assertNotNull(string0);
      assertEquals("-22816958/8243", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toString();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(string0);
      assertEquals("2/5", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertNotSame(fraction1, fraction0);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction1.compareTo((Object) fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, int0);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(5, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((-0.8333333333333334), fraction2.doubleValue(), 0.01D);
      assertEquals(-5, fraction2.getNumerator());
      assertEquals(6, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals((-0.8333333F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction3 = fraction2.divideBy(fraction1);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertEquals(5, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((-0.8333333333333334), fraction2.doubleValue(), 0.01D);
      assertEquals(-5, fraction2.getNumerator());
      assertEquals(6, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals((-0.8333333F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0L, fraction3.longValue());
      assertEquals(-5, fraction3.getNumerator());
      assertEquals((-0.5555556F), fraction3.floatValue(), 0.01F);
      assertEquals(5, fraction3.getProperNumerator());
      assertEquals((-0.5555555555555556), fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.byteValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(9, fraction3.getDenominator());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0, fraction3.intValue());
      assertNotNull(fraction3);
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
      
      int int0 = fraction2.compareTo((Object) fraction3);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertEquals(5, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals((-0.8333333333333334), fraction2.doubleValue(), 0.01D);
      assertEquals(-5, fraction2.getNumerator());
      assertEquals(6, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals((-0.8333333F), fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.5, fraction1.doubleValue(), 0.01D);
      assertEquals(1.5F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals(2, fraction1.getDenominator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0L, fraction3.longValue());
      assertEquals(-5, fraction3.getNumerator());
      assertEquals((-0.5555556F), fraction3.floatValue(), 0.01F);
      assertEquals(5, fraction3.getProperNumerator());
      assertEquals((-0.5555555555555556), fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.byteValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(9, fraction3.getDenominator());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0, fraction3.intValue());
      assertEquals((-1), int0);
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.negate();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((-0.25), fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-0.25F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      boolean boolean0 = fraction0.equals((Object) fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(-1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperNumerator());
      assertEquals((-0.25), fraction1.doubleValue(), 0.01D);
      assertEquals(4, fraction1.getDenominator());
      assertEquals((-0.25F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getNumerator());
      assertFalse(boolean0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      byte byte0 = fraction0.byteValue();
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals((byte)0, byte0);
      
      boolean boolean0 = fraction0.equals((Object) byte0);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE;
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.reduce();
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction1, fraction2);
      assertSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.byteValue());
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.intValue());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1L, fraction0.longValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.shortValue());
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction0));
      
      // Undeclared exception!
      try {
        Fraction fraction3 = fraction1.divideBy(fraction2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The fraction to divide by must not be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_QUARTER;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.25F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0.25, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.divideBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction2 = fraction0.multiplyBy(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0L, fraction1.longValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.shortValue());
      assertNotNull(fraction2);
      assertTrue(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fraction fraction0 = Fraction.ZERO;
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.multiplyBy(fraction0);
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-3665.7019531874193);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-3665, fraction0.getProperWhole());
      assertEquals(-3665, fraction0.intValue());
      assertEquals(-3665, fraction0.shortValue());
      assertEquals(6707, fraction0.getDenominator());
      assertEquals(-24585863, fraction0.getNumerator());
      assertEquals((-3665.7019531832416), fraction0.doubleValue(), 0.01D);
      assertEquals((-3665.7021F), fraction0.floatValue(), 0.01F);
      assertEquals(4708, fraction0.getProperNumerator());
      assertEquals((-3665L), fraction0.longValue());
      assertEquals(-81, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.multiplyBy(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.add(fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fraction fraction0 = Fraction.FOUR_FIFTHS;
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.add(fraction0);
      assertSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertEquals(4, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.8F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.8, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(4, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0.8, fraction2.doubleValue(), 0.01D);
      assertEquals(5, fraction2.getDenominator());
      assertEquals(4, fraction2.getNumerator());
      assertEquals(4, fraction2.getProperNumerator());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.8F, fraction2.floatValue(), 0.01F);
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.ZERO;
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction1.subtract(fraction0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction2.intValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.byteValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.shortValue());
      assertEquals((-0.4), fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(-2, fraction2.getNumerator());
      assertEquals((-0.4F), fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertNotNull(fraction2);
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.byteValue());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = null;
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction0.subtract(fraction1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The fraction must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 2.147483647E9;
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(2.147483647E9, fraction0.doubleValue(), 0.01D);
      assertEquals(2147483647, fraction0.intValue());
      assertEquals(2147483647, fraction0.getNumerator());
      assertEquals(2147483647L, fraction0.longValue());
      assertEquals(2147483647, fraction0.getProperWhole());
      assertEquals(2.14748365E9F, fraction0.floatValue(), 0.01F);
      assertEquals(-1, fraction0.shortValue());
      assertEquals(1, fraction0.getDenominator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: add
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-1910.3016033);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(2991, fraction0.getProperNumerator());
      assertEquals(-1910, fraction0.getProperWhole());
      assertEquals(-18944461, fraction0.getNumerator());
      assertEquals(-118, fraction0.byteValue());
      assertEquals((-1910.3016033074518), fraction0.doubleValue(), 0.01D);
      assertEquals(9917, fraction0.getDenominator());
      assertEquals(-1910, fraction0.shortValue());
      assertEquals((-1910.3015F), fraction0.floatValue(), 0.01F);
      assertEquals((-1910L), fraction0.longValue());
      assertEquals(-1910, fraction0.intValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.invert();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals((-5.2347756E-4F), fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(9917, fraction1.getProperNumerator());
      assertEquals((-5.234775483979196E-4), fraction1.doubleValue(), 0.01D);
      assertEquals(18944461, fraction1.getDenominator());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(-9917, fraction1.getNumerator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(2991, fraction0.getProperNumerator());
      assertEquals(-1910, fraction0.getProperWhole());
      assertEquals(-18944461, fraction0.getNumerator());
      assertEquals(-118, fraction0.byteValue());
      assertEquals((-1910.3016033074518), fraction0.doubleValue(), 0.01D);
      assertEquals(9917, fraction0.getDenominator());
      assertEquals(-1910, fraction0.shortValue());
      assertEquals((-1910.3015F), fraction0.floatValue(), 0.01F);
      assertEquals((-1910L), fraction0.longValue());
      assertEquals(-1910, fraction0.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      // Undeclared exception!
      try {
        Fraction fraction2 = fraction1.add(fraction0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = (-1.0);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      Fraction fraction1 = fraction0.pow(int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(-1, fraction0.getProperWhole());
      assertEquals(-1, fraction0.getNumerator());
      assertEquals(-1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(-1, fraction0.shortValue());
      assertEquals(-1, fraction0.intValue());
      assertEquals((-1L), fraction0.longValue());
      assertEquals((-1.0), fraction0.doubleValue(), 0.01D);
      assertEquals((-1.0F), fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-2768.0405192313);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-2768, fraction0.intValue());
      assertEquals((-2768L), fraction0.longValue());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals(-2768, fraction0.shortValue());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals(48, fraction0.byteValue());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = (-72);
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mulPos
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertNotNull(fraction0);
      
      int int0 = 2150;
      // Undeclared exception!
      try {
        Fraction fraction1 = fraction0.pow(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: mul
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_THIRDS;
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      int int0 = 0;
      Fraction fraction1 = fraction0.pow(int0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.6666667F, fraction0.floatValue(), 0.01F);
      assertEquals(0.6666666666666666, fraction0.doubleValue(), 0.01D);
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1, fraction1.byteValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1, fraction1.intValue());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.abs();
      assertSame(fraction1, fraction0);
      assertSame(fraction0, fraction1);
      assertEquals(0.6F, fraction1.floatValue(), 0.01F);
      assertEquals(3, fraction1.getProperNumerator());
      assertEquals(3, fraction1.getNumerator());
      assertEquals(0.6, fraction1.doubleValue(), 0.01D);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-2768.0405192313);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-2768, fraction0.shortValue());
      assertEquals((-2768L), fraction0.longValue());
      assertEquals(-2768, fraction0.intValue());
      assertEquals(48, fraction0.byteValue());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals(-22816958, fraction0.getNumerator());
      assertNotNull(fraction0);
      
      int int0 = (-72);
      Fraction fraction1 = Fraction.getFraction(int0, int0);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(72, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(72, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(-2769, fraction2.shortValue());
      assertEquals((-2769L), fraction2.longValue());
      assertEquals(-2769, fraction2.getProperWhole());
      assertEquals(-2769, fraction2.intValue());
      assertEquals((-2769.0405F), fraction2.floatValue(), 0.01F);
      assertEquals(47, fraction2.byteValue());
      assertEquals(24048, fraction2.getProperNumerator());
      assertEquals(593496, fraction2.getDenominator());
      assertEquals((-2769.040519228436), fraction2.doubleValue(), 0.01D);
      assertEquals(-1643414472, fraction2.getNumerator());
      assertEquals(-2768, fraction0.shortValue());
      assertEquals((-2768L), fraction0.longValue());
      assertEquals(-2768, fraction0.intValue());
      assertEquals(48, fraction0.byteValue());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(72, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(72, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.byteValue());
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction3 = fraction2.abs();
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertEquals(-2769, fraction2.shortValue());
      assertEquals((-2769L), fraction2.longValue());
      assertEquals(-2769, fraction2.getProperWhole());
      assertEquals(-2769, fraction2.intValue());
      assertEquals((-2769.0405F), fraction2.floatValue(), 0.01F);
      assertEquals(47, fraction2.byteValue());
      assertEquals(24048, fraction2.getProperNumerator());
      assertEquals(593496, fraction2.getDenominator());
      assertEquals((-2769.040519228436), fraction2.doubleValue(), 0.01D);
      assertEquals(-1643414472, fraction2.getNumerator());
      assertEquals(-47, fraction3.byteValue());
      assertEquals(2769, fraction3.shortValue());
      assertEquals(593496, fraction3.getDenominator());
      assertEquals(2769, fraction3.intValue());
      assertEquals(2769.0405F, fraction3.floatValue(), 0.01F);
      assertEquals(24048, fraction3.getProperNumerator());
      assertEquals(2769, fraction3.getProperWhole());
      assertEquals(2769.040519228436, fraction3.doubleValue(), 0.01D);
      assertEquals(1643414472, fraction3.getNumerator());
      assertEquals(2769L, fraction3.longValue());
      assertEquals(-2768, fraction0.shortValue());
      assertEquals((-2768L), fraction0.longValue());
      assertEquals(-2768, fraction0.intValue());
      assertEquals(48, fraction0.byteValue());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(72, fraction1.getNumerator());
      assertEquals(1, fraction1.shortValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1L, fraction1.longValue());
      assertEquals(72, fraction1.getDenominator());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.byteValue());
      assertNotNull(fraction3);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = Fraction.TWO_QUARTERS;
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      int int0 = fraction0.compareTo((Object) fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(1, int0);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction2 = Fraction.ZERO;
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction2.pow(int0);
      assertSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertSame(fraction2, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertEquals(0.0F, fraction3.floatValue(), 0.01F);
      assertEquals(0, fraction3.intValue());
      assertEquals(0, fraction3.byteValue());
      assertEquals(0.0, fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.getProperNumerator());
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction3.getNumerator());
      assertEquals(0L, fraction3.longValue());
      assertEquals(1, fraction3.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.intValue());
      assertEquals(2, fraction1.getProperNumerator());
      assertEquals(0.5F, fraction1.floatValue(), 0.01F);
      assertEquals(0.5, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getDenominator());
      assertEquals(2, fraction1.getNumerator());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0, fraction2.intValue());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertNotNull(fraction3);
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      
      // Undeclared exception!
      try {
        Fraction fraction4 = fraction3.invert();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Unable to invert zero.
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-2768.0405192313);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals(48, fraction0.byteValue());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-2768, fraction0.shortValue());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals(-2768, fraction0.intValue());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals((-2768L), fraction0.longValue());
      assertNotNull(fraction0);
      
      int int0 = (-72);
      Fraction fraction1 = Fraction.getFraction(int0, int0);
      assertNotSame(fraction1, fraction0);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(72, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(72, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      
      Fraction fraction2 = fraction0.subtract(fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(72, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(72, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(-2769, fraction2.intValue());
      assertEquals((-2769L), fraction2.longValue());
      assertEquals((-2769.040519228436), fraction2.doubleValue(), 0.01D);
      assertEquals(47, fraction2.byteValue());
      assertEquals(-2769, fraction2.shortValue());
      assertEquals(593496, fraction2.getDenominator());
      assertEquals((-2769.0405F), fraction2.floatValue(), 0.01F);
      assertEquals(-1643414472, fraction2.getNumerator());
      assertEquals(24048, fraction2.getProperNumerator());
      assertEquals(-2769, fraction2.getProperWhole());
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals(48, fraction0.byteValue());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-2768, fraction0.shortValue());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals(-2768, fraction0.intValue());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals((-2768L), fraction0.longValue());
      assertNotNull(fraction2);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      
      Fraction fraction3 = fraction2.reduce();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertEquals(1, fraction1.intValue());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(72, fraction1.getNumerator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1L, fraction1.longValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(72, fraction1.getDenominator());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(1, fraction1.shortValue());
      assertEquals(-2769, fraction3.intValue());
      assertEquals((-2769.040519228436), fraction3.doubleValue(), 0.01D);
      assertEquals(8243, fraction3.getDenominator());
      assertEquals((-2769.0403F), fraction3.floatValue(), 0.01F);
      assertEquals(47, fraction3.byteValue());
      assertEquals(-2769, fraction3.shortValue());
      assertEquals(-22825201, fraction3.getNumerator());
      assertEquals(334, fraction3.getProperNumerator());
      assertEquals((-2769L), fraction3.longValue());
      assertEquals(-2769, fraction3.getProperWhole());
      assertEquals(-2769, fraction2.intValue());
      assertEquals((-2769L), fraction2.longValue());
      assertEquals((-2769.040519228436), fraction2.doubleValue(), 0.01D);
      assertEquals(47, fraction2.byteValue());
      assertEquals(-2769, fraction2.shortValue());
      assertEquals(593496, fraction2.getDenominator());
      assertEquals((-2769.0405F), fraction2.floatValue(), 0.01F);
      assertEquals(-1643414472, fraction2.getNumerator());
      assertEquals(24048, fraction2.getProperNumerator());
      assertEquals(-2769, fraction2.getProperWhole());
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals(48, fraction0.byteValue());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals(-2768, fraction0.shortValue());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals(-2768, fraction0.intValue());
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals((-2768L), fraction0.longValue());
      assertNotNull(fraction3);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      int int1 = 2150;
      Fraction fraction0 = Fraction.getFraction(int0, int0, int1);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2150, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Fraction fraction1 = fraction0.reduce();
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction1, fraction0);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2150, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.0, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction1.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.intValue());
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-2768.0405192313);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals(-2768, fraction0.intValue());
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals((-2768L), fraction0.longValue());
      assertEquals(-2768, fraction0.shortValue());
      assertEquals(48, fraction0.byteValue());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals(334, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.reduce();
      assertSame(fraction0, fraction1);
      assertSame(fraction1, fraction0);
      assertEquals(-2768, fraction0.intValue());
      assertEquals(-2768, fraction0.getProperWhole());
      assertEquals(8243, fraction0.getDenominator());
      assertEquals(-22816958, fraction0.getNumerator());
      assertEquals((-2768L), fraction0.longValue());
      assertEquals(-2768, fraction0.shortValue());
      assertEquals(48, fraction0.byteValue());
      assertEquals((-2768.0405F), fraction0.floatValue(), 0.01F);
      assertEquals((-2768.040519228436), fraction0.doubleValue(), 0.01D);
      assertEquals(334, fraction0.getProperNumerator());
      assertEquals(334, fraction1.getProperNumerator());
      assertEquals((-2768.040519228436), fraction1.doubleValue(), 0.01D);
      assertEquals((-2768L), fraction1.longValue());
      assertEquals(-2768, fraction1.getProperWhole());
      assertEquals(8243, fraction1.getDenominator());
      assertEquals((-2768.0405F), fraction1.floatValue(), 0.01F);
      assertEquals(48, fraction1.byteValue());
      assertEquals(-22816958, fraction1.getNumerator());
      assertEquals(-2768, fraction1.shortValue());
      assertEquals(-2768, fraction1.intValue());
      assertNotNull(fraction1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = ".dc";
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".dc\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The string must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 1.7976931348623157E308;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(double0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The value must not be greater than Integer.MAX_VALUE or NaN
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-3301);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      int int1 = (-27);
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getReducedFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      Fraction fraction0 = Fraction.getReducedFraction(int0, int0);
      assertEquals(1.0, fraction0.doubleValue(), 0.01D);
      assertEquals(1, fraction0.getDenominator());
      assertEquals(1, fraction0.shortValue());
      assertEquals(1, fraction0.intValue());
      assertEquals(1.0F, fraction0.floatValue(), 0.01F);
      assertEquals(1, fraction0.getProperWhole());
      assertEquals(1, fraction0.byteValue());
      assertEquals(0, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(1L, fraction0.longValue());
      assertNotNull(fraction0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fraction fraction0 = Fraction.ONE_HALF;
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      short short0 = fraction0.shortValue();
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals((short)0, short0);
      
      int int0 = fraction0.hashCode();
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(23312, int0);
      
      Fraction fraction1 = Fraction.getReducedFraction(int0, int0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      short short1 = fraction1.shortValue();
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals((short)1, short1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(short1 == short0);
      
      Fraction fraction2 = Fraction.getReducedFraction((int) short0, (int) short1);
      assertNotSame(fraction2, fraction0);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction0, fraction2);
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(1, fraction2.getDenominator());
      assertEquals(0, fraction2.shortValue());
      assertEquals(0.0F, fraction2.floatValue(), 0.01F);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.0, fraction2.doubleValue(), 0.01D);
      assertEquals(0, fraction2.byteValue());
      assertEquals(0, fraction2.getNumerator());
      assertEquals(0, fraction2.getProperNumerator());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(1, fraction1.byteValue());
      assertEquals(1, fraction1.intValue());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(1, fraction1.getNumerator());
      assertEquals(1, fraction1.getProperWhole());
      assertEquals(1L, fraction1.longValue());
      assertEquals(1.0F, fraction1.floatValue(), 0.01F);
      assertEquals(1, fraction1.shortValue());
      assertEquals(1.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(1, fraction0.getProperNumerator());
      assertEquals(1, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.5, fraction0.doubleValue(), 0.01D);
      assertEquals(0.5F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction2);
      assertFalse(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(short0 == short1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction1.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction0.equals((Object)fraction2));
      assertFalse(short1 == short0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(string0);
      assertEquals("2/5", string0);
      
      Fraction fraction1 = fraction0.subtract(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction2 = Fraction.getFraction(string0);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction0);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getNumerator());
      assertNotNull(fraction2);
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction1));
      assertTrue(fraction2.equals((Object)fraction0));
      
      Fraction fraction3 = fraction0.negate();
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction1);
      assertEquals((-0.4), fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0L, fraction3.longValue());
      assertEquals(2, fraction3.getProperNumerator());
      assertEquals(0, fraction3.byteValue());
      assertEquals((-0.4F), fraction3.floatValue(), 0.01F);
      assertEquals(-2, fraction3.getNumerator());
      assertEquals(5, fraction3.getDenominator());
      assertEquals(0, fraction3.intValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction3);
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction1));
      
      Fraction fraction4 = fraction3.add(fraction2);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction4);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction4);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction2, fraction0);
      assertEquals((-0.4), fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0L, fraction3.longValue());
      assertEquals(2, fraction3.getProperNumerator());
      assertEquals(0, fraction3.byteValue());
      assertEquals((-0.4F), fraction3.floatValue(), 0.01F);
      assertEquals(-2, fraction3.getNumerator());
      assertEquals(5, fraction3.getDenominator());
      assertEquals(0, fraction3.intValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction4.doubleValue(), 0.01D);
      assertEquals(0L, fraction4.longValue());
      assertEquals(0, fraction4.shortValue());
      assertEquals(0, fraction4.byteValue());
      assertEquals(0, fraction4.getNumerator());
      assertEquals(0, fraction4.getProperWhole());
      assertEquals(0, fraction4.intValue());
      assertEquals(0.0F, fraction4.floatValue(), 0.01F);
      assertEquals(0, fraction4.getProperNumerator());
      assertEquals(1, fraction4.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getNumerator());
      assertNotNull(fraction4);
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction4));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction4));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction0));
      assertTrue(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction3));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction4));
      
      int int0 = fraction1.compareTo((Object) fraction4);
      assertNotSame(fraction3, fraction2);
      assertNotSame(fraction3, fraction4);
      assertNotSame(fraction3, fraction0);
      assertNotSame(fraction3, fraction1);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction1, fraction4);
      assertNotSame(fraction1, fraction3);
      assertNotSame(fraction1, fraction2);
      assertNotSame(fraction0, fraction2);
      assertNotSame(fraction0, fraction3);
      assertNotSame(fraction0, fraction4);
      assertNotSame(fraction0, fraction1);
      assertNotSame(fraction4, fraction0);
      assertNotSame(fraction4, fraction2);
      assertNotSame(fraction4, fraction1);
      assertNotSame(fraction4, fraction3);
      assertNotSame(fraction2, fraction1);
      assertNotSame(fraction2, fraction3);
      assertNotSame(fraction2, fraction4);
      assertNotSame(fraction2, fraction0);
      assertEquals((-0.4), fraction3.doubleValue(), 0.01D);
      assertEquals(0, fraction3.getProperWhole());
      assertEquals(0L, fraction3.longValue());
      assertEquals(2, fraction3.getProperNumerator());
      assertEquals(0, fraction3.byteValue());
      assertEquals((-0.4F), fraction3.floatValue(), 0.01F);
      assertEquals(-2, fraction3.getNumerator());
      assertEquals(5, fraction3.getDenominator());
      assertEquals(0, fraction3.intValue());
      assertEquals(0, fraction3.shortValue());
      assertEquals(1, fraction1.getDenominator());
      assertEquals(0, fraction1.getProperNumerator());
      assertEquals(0.0, fraction1.doubleValue(), 0.01D);
      assertEquals(0L, fraction1.longValue());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0, fraction1.getNumerator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0, fraction1.intValue());
      assertEquals(0.0F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.0, fraction4.doubleValue(), 0.01D);
      assertEquals(0L, fraction4.longValue());
      assertEquals(0, fraction4.shortValue());
      assertEquals(0, fraction4.byteValue());
      assertEquals(0, fraction4.getNumerator());
      assertEquals(0, fraction4.getProperWhole());
      assertEquals(0, fraction4.intValue());
      assertEquals(0.0F, fraction4.floatValue(), 0.01F);
      assertEquals(0, fraction4.getProperNumerator());
      assertEquals(1, fraction4.getDenominator());
      assertEquals(0, fraction2.getProperWhole());
      assertEquals(0.4, fraction2.doubleValue(), 0.01D);
      assertEquals(0L, fraction2.longValue());
      assertEquals(0, fraction2.shortValue());
      assertEquals(5, fraction2.getDenominator());
      assertEquals(0, fraction2.byteValue());
      assertEquals(2, fraction2.getProperNumerator());
      assertEquals(0, fraction2.intValue());
      assertEquals(0.4F, fraction2.floatValue(), 0.01F);
      assertEquals(2, fraction2.getNumerator());
      assertEquals(0, int0);
      assertFalse(fraction3.equals((Object)fraction2));
      assertFalse(fraction3.equals((Object)fraction4));
      assertFalse(fraction3.equals((Object)fraction0));
      assertFalse(fraction3.equals((Object)fraction1));
      assertFalse(fraction1.equals((Object)fraction0));
      assertTrue(fraction1.equals((Object)fraction4));
      assertFalse(fraction1.equals((Object)fraction3));
      assertFalse(fraction1.equals((Object)fraction2));
      assertTrue(fraction0.equals((Object)fraction2));
      assertFalse(fraction0.equals((Object)fraction3));
      assertFalse(fraction0.equals((Object)fraction4));
      assertFalse(fraction0.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction0));
      assertTrue(fraction4.equals((Object)fraction1));
      assertFalse(fraction4.equals((Object)fraction2));
      assertFalse(fraction4.equals((Object)fraction3));
      assertFalse(fraction2.equals((Object)fraction1));
      assertFalse(fraction2.equals((Object)fraction3));
      assertTrue(fraction2.equals((Object)fraction0));
      assertFalse(fraction2.equals((Object)fraction4));
      
      // Undeclared exception!
      try {
        Fraction fraction5 = Fraction.getReducedFraction(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 2147483645;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Numerator too large to represent as an Integer.
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = (-1910.3016033);
      Fraction fraction0 = Fraction.getFraction(double0);
      assertEquals((-1910.3016033074518), fraction0.doubleValue(), 0.01D);
      assertEquals(9917, fraction0.getDenominator());
      assertEquals(-1910, fraction0.getProperWhole());
      assertEquals(2991, fraction0.getProperNumerator());
      assertEquals(-1910, fraction0.intValue());
      assertEquals(-18944461, fraction0.getNumerator());
      assertEquals(-118, fraction0.byteValue());
      assertEquals((-1910.3015F), fraction0.floatValue(), 0.01F);
      assertEquals(-1910, fraction0.shortValue());
      assertEquals((-1910L), fraction0.longValue());
      assertNotNull(fraction0);
      
      String string0 = fraction0.toProperString();
      assertEquals((-1910.3016033074518), fraction0.doubleValue(), 0.01D);
      assertEquals(9917, fraction0.getDenominator());
      assertEquals(-1910, fraction0.getProperWhole());
      assertEquals(2991, fraction0.getProperNumerator());
      assertEquals(-1910, fraction0.intValue());
      assertEquals(-18944461, fraction0.getNumerator());
      assertEquals(-118, fraction0.byteValue());
      assertEquals((-1910.3015F), fraction0.floatValue(), 0.01F);
      assertEquals(-1910, fraction0.shortValue());
      assertEquals((-1910L), fraction0.longValue());
      assertNotNull(string0);
      assertEquals("-1910 2991/9917", string0);
      
      Fraction fraction1 = Fraction.getFraction(string0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(-18944461, fraction1.getNumerator());
      assertEquals((-1910.3016033074518), fraction1.doubleValue(), 0.01D);
      assertEquals(-1910, fraction1.intValue());
      assertEquals(-1910, fraction1.getProperWhole());
      assertEquals((-1910.3015F), fraction1.floatValue(), 0.01F);
      assertEquals(9917, fraction1.getDenominator());
      assertEquals(-118, fraction1.byteValue());
      assertEquals(-1910, fraction1.shortValue());
      assertEquals((-1910L), fraction1.longValue());
      assertEquals(2991, fraction1.getProperNumerator());
      assertEquals((-1910.3016033074518), fraction0.doubleValue(), 0.01D);
      assertEquals(9917, fraction0.getDenominator());
      assertEquals(-1910, fraction0.getProperWhole());
      assertEquals(2991, fraction0.getProperNumerator());
      assertEquals(-1910, fraction0.intValue());
      assertEquals(-18944461, fraction0.getNumerator());
      assertEquals(-118, fraction0.byteValue());
      assertEquals((-1910.3015F), fraction0.floatValue(), 0.01F);
      assertEquals(-1910, fraction0.shortValue());
      assertEquals((-1910L), fraction0.longValue());
      assertNotNull(fraction1);
      assertTrue(fraction1.equals((Object)fraction0));
      assertTrue(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_FIFTHS;
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertNotNull(fraction0);
      
      int int0 = fraction0.hashCode();
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0.6F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.6, fraction0.doubleValue(), 0.01D);
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(23389, int0);
      
      int int1 = (-1415);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The numerator must not be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fraction fraction0 = Fraction.THREE_QUARTERS;
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertNotNull(fraction0);
      
      int int0 = fraction0.compareTo((Object) fraction0);
      assertEquals(3, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(3, fraction0.getProperNumerator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.75F, fraction0.floatValue(), 0.01F);
      assertEquals(4, fraction0.getDenominator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0.75, fraction0.doubleValue(), 0.01D);
      assertEquals(0, int0);
      
      int int1 = (-599);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be negative
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-927);
      int int1 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      int int0 = Integer.MIN_VALUE;
      int int1 = fraction0.getDenominator();
      assertEquals(2, fraction0.getNumerator());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.intValue());
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Fraction fraction1 = Fraction.getFraction(int1, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // overflow: can't negate
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 1911;
      int int1 = 0;
      // Undeclared exception!
      try {
        Fraction fraction0 = Fraction.getFraction(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The denominator must not be zero
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction0);
      
      Fraction fraction1 = fraction0.add(fraction0);
      assertNotSame(fraction1, fraction0);
      assertNotSame(fraction0, fraction1);
      assertEquals(0.8F, fraction1.floatValue(), 0.01F);
      assertEquals(0, fraction1.intValue());
      assertEquals(0, fraction1.getProperWhole());
      assertEquals(0L, fraction1.longValue());
      assertEquals(4, fraction1.getNumerator());
      assertEquals(0, fraction1.shortValue());
      assertEquals(0.8, fraction1.doubleValue(), 0.01D);
      assertEquals(5, fraction1.getDenominator());
      assertEquals(0, fraction1.byteValue());
      assertEquals(4, fraction1.getProperNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getNumerator());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(0, fraction0.shortValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertNotNull(fraction1);
      assertFalse(fraction1.equals((Object)fraction0));
      assertFalse(fraction0.equals((Object)fraction1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertNotNull(fraction0);
      
      float float0 = fraction0.floatValue();
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.shortValue());
      assertEquals(0L, fraction0.longValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0.4F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertNotNull(fraction0);
      
      double double0 = fraction0.doubleValue();
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0, fraction0.shortValue());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0L, fraction0.longValue());
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fraction fraction0 = Fraction.TWO_FIFTHS;
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertNotNull(fraction0);
      
      long long0 = fraction0.longValue();
      assertEquals(0, fraction0.shortValue());
      assertEquals(0.4, fraction0.doubleValue(), 0.01D);
      assertEquals(5, fraction0.getDenominator());
      assertEquals(0, fraction0.intValue());
      assertEquals(0.4F, fraction0.floatValue(), 0.01F);
      assertEquals(0L, fraction0.longValue());
      assertEquals(2, fraction0.getProperNumerator());
      assertEquals(2, fraction0.getNumerator());
      assertEquals(0, fraction0.byteValue());
      assertEquals(0, fraction0.getProperWhole());
      assertEquals(0L, long0);
  }
}
