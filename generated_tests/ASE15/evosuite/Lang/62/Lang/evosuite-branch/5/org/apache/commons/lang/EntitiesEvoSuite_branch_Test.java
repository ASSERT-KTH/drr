/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:32:52 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;

 
public class EntitiesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "OAt?zc$xP0`=}IXfH";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      String string1 = "+(3tMI/{&d1Au";
      assertNotSame(string1, string0);
      
      entities0.unescape((Writer) mockFileWriter0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) byteArrayOutputStream0, boolean0);
      assertNotNull(mockPrintWriter0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      
      String string0 = "sum";
      entities0.unescape((Writer) mockPrintWriter0, string0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "%_ &,K>ot;a=9(lVc";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      entities0.unescape((Writer) mockFileWriter0, string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "t_/&/JB?At(S:t";
      String string1 = entities0.unescape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("t_/&/JB?At(S:t", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "crarr";
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string1 = entities0.unescape(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("crarr", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "OAz$gxPB`}I_fI";
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("OAz$gxPB`}I_fI", string1);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      
      int int0 = 1868;
      entities0.addEntity(string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "QX}ld<?>\"TV\"88%RN;5";
      String string1 = entities0.escape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("QX}ld&lt;?&gt;&quot;TV&quot;88%RN;5", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = entities0.unescape(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("QX}ld<?>\"TV\"88%RN;5", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 31;
      String string0 = "Y92%";
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
      
      entities_BinaryEntityMap0.size = int0;
      entities_BinaryEntityMap0.add(string0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "&@$P;W 7";
      String string1 = entities0.unescape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("&@$P;W 7", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertNotNull(pipedWriter0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      
      String string0 = "t=YS|}PUnn1bx.g84&";
      entities0.escape((Writer) pipedWriter0, string0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(true, pipedReader0.ready());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "OAt?zc$xP0`=}IXfH";
      int int0 = entities0.entityValue(string0);
      assertEquals((-1), int0);
      
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      // Undeclared exception!
      try {
        String string1 = entities_LookupEntityMap0.name(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 21;
      Entities.ArrayEntityMap entities_ArrayEntityMap0 = new Entities.ArrayEntityMap();
      assertNotNull(entities_ArrayEntityMap0);
      
      String string0 = entities_ArrayEntityMap0.name(int0);
      assertNull(string0);
      
      entities_ArrayEntityMap0.add(string0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
  }
}
