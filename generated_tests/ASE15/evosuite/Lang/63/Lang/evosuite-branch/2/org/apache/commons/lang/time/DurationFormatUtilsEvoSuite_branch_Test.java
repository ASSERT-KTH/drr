/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:29 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.DurationFormatUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DurationFormatUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "t?MG-ALa:m";
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0);
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 16;
      String string0 = (String)DurationFormatUtils.S;
      assertNotNull(string0);
      assertEquals("S", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0, int0);
      assertNotNull(durationFormatUtils_Token0);
      
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, int0);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotNull(durationFormatUtils_Token1);
      
      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token1, int0);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      assertNotNull(durationFormatUtils_Token2);
      
      boolean boolean0 = durationFormatUtils_Token2.equals((Object) durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token2.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token2));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token2));
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token2, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token2);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 3600107L;
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertNotNull(string0);
      assertEquals("1 hour", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0);
      assertNotNull(durationFormatUtils_Token0);
      
      int int0 = 2203;
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(string0, int0);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotNull(durationFormatUtils_Token1);
      
      boolean boolean1 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token1);
      assertFalse(boolean0 == boolean1);
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = (String)DurationFormatUtils.d;
      assertNotNull(string0);
      assertEquals("d", string0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(string0);
      assertNotNull(durationFormatUtils_Token0);
      
      int int0 = (-2291);
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, int0);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotNull(durationFormatUtils_Token1);
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token1);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = 60000L;
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertNotNull(string0);
      assertEquals("1 minute", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(24, stringBuffer0.capacity());
      assertEquals(8, stringBuffer0.length());
      assertEquals("1 minute", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      assertEquals(24, stringBuffer0.capacity());
      assertEquals(8, stringBuffer0.length());
      assertEquals("1 minute", stringBuffer0.toString());
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean1 = durationFormatUtils_Token0.equals((Object) stringBuffer0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(24, stringBuffer0.capacity());
      assertEquals(8, stringBuffer0.length());
      assertEquals("1 minute", stringBuffer0.toString());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = (-1927L);
      String string0 = "StrinDW ust n~Qeul";
      String string1 = DurationFormatUtils.formatDuration(long0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("-927trinDW u-1t n~Qeul", string1);
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = (-11L);
      String string0 = DurationFormatUtils.formatPeriodISO(long0, long0);
      assertNotNull(string0);
      assertEquals("P0Y0M0DT0H0M0.000S", string0);
      
      boolean boolean0 = false;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string1 = DurationFormatUtils.formatPeriod(long0, long0, string0, boolean0, (TimeZone) zoneInfo0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("P0Y000DT00000.0000", string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[10];
      long long0 = 60000L;
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertNotNull(string0);
      assertEquals("1 minute", string0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals("1 minute", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals(24, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(stringBuffer0);
      assertEquals("1 minute", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals(24, stringBuffer0.capacity());
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean1 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("1 minute", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals(24, stringBuffer0.capacity());
      assertTrue(boolean1);
      
      int int0 = (-15);
      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, int0);
      assertFalse(durationFormatUtils_Token1.equals((Object)durationFormatUtils_Token0));
      assertFalse(durationFormatUtils_Token0.equals((Object)durationFormatUtils_Token1));
      assertTrue(boolean0 == boolean1);
      assertEquals("1 minute", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals(24, stringBuffer0.capacity());
      assertNotSame(durationFormatUtils_Token1, durationFormatUtils_Token0);
      assertNotSame(durationFormatUtils_Token0, durationFormatUtils_Token1);
      assertNotNull(durationFormatUtils_Token1);
      
      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token1;
      assertEquals("1 minute", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals(24, stringBuffer0.capacity());
      assertNotNull(durationFormatUtils_TokenArray0[0]);
      
      // Undeclared exception!
      try {
        String string1 = DurationFormatUtils.format(durationFormatUtils_TokenArray0, int0, int0, int0, int0, int0, int0, int0, boolean1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-161);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-161), (int)integer0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(int0, (int) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(durationFormatUtils_Token0);
      
      boolean boolean0 = durationFormatUtils_Token0.equals((Object) durationFormatUtils_Token0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      assertFalse(boolean1 == boolean0);
      
      String string0 = DurationFormatUtils.formatDurationWords((long) int0, boolean1, boolean0);
      assertFalse(boolean1 == boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0 == boolean1);
      assertNotNull(string0);
      assertEquals("0 days", string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertFalse(boolean1 == boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0 == boolean1);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string1 = DurationFormatUtils.formatPeriod((long) int0, (long) int0, string0, boolean0, (TimeZone) zoneInfo0);
      assertFalse(boolean1 == boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0 == boolean1);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("0 0a00", string1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 44L;
      long long1 = 2419200063L;
      String string0 = ":(";
      boolean boolean0 = true;
      int int0 = 13;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(13, simpleTimeZone0.getRawOffset());
      assertEquals(":(", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=:(,offset=13,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      String string1 = DurationFormatUtils.formatPeriod(long0, long1, string0, boolean0, (TimeZone) simpleTimeZone0);
      assertFalse(long1 == long0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(long0 == long1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(13, simpleTimeZone0.getRawOffset());
      assertEquals(":(", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=:(,offset=13,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals(":(", string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = (-10L);
      long long1 = 2419200011L;
      String string0 = "t?MG-ALa:m";
      boolean boolean0 = true;
      int int0 = (-85);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("t?MG-ALa:m", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=t?MG-ALa:m,offset=-85,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-85, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      String string1 = DurationFormatUtils.formatPeriod(long0, long1, string0, boolean0, (TimeZone) simpleTimeZone0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("t?MG-ALa:m", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=t?MG-ALa:m,offset=-85,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-85, simpleTimeZone0.getRawOffset());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("t?0G-ALa:40320", string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 2419200025L;
      long long1 = (-1L);
      String string0 = DurationFormatUtils.formatPeriodISO(long1, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(string0);
      assertEquals("P0Y0M28DT0H0M0.026S", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long long0 = 44L;
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertNotNull(string0);
      assertEquals("0 seconds", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      long long0 = 2419200025L;
      boolean boolean1 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean1, boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotNull(string0);
      assertEquals("28 days 0 hours 0 minutes 0 seconds", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-161);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-161), (int)integer0);
      
      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(int0, (int) integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(durationFormatUtils_Token0);
      
      String string0 = durationFormatUtils_Token0.toString();
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();
      assertNotNull(durationFormatUtils0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-1927L);
      String string0 = DurationFormatUtils.formatDurationHMS(long0);
      assertNotNull(string0);
      assertEquals("0:00:-1.73", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = (-1927L);
      String string0 = DurationFormatUtils.formatDurationISO(long0);
      assertNotNull(string0);
      assertEquals("P0Y0M0DT0H0M-1.3S", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 3600107L;
      boolean boolean0 = true;
      String string0 = DurationFormatUtils.formatDurationWords(long0, boolean0, boolean0);
      assertNotNull(string0);
      assertEquals("1 hour", string0);
      
      String string1 = DurationFormatUtils.formatPeriod(long0, long0, string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("1 hour", string1);
  }
}
