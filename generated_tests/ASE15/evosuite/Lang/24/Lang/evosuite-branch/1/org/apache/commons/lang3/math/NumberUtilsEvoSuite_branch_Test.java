/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:48:02 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "8f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "--E%h1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = ".`YO{e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "+7sNVMM(pB#j^g6d_AY";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "-0ex";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = "-0xArray cannot be empy.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "0x,0L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "0xf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "0L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "-0x0XArray cannot be empty.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "E%he1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte byte0 = (byte) (-95);
      byte byte1 = (byte)31;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)31, byte2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte byte0 = (byte) (-95);
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-95), byte1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)7;
      short short0 = (short)11;
      short short1 = NumberUtils.max((short) byteArray0[2], (short) byte0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)11, short1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte byte0 = (byte)7;
      byte byte1 = (byte) (-123);
      short short0 = NumberUtils.max((short) byte1, (short) byte0, (short) byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals((short)7, short0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      short short1 = NumberUtils.max(shortArray0[0], shortArray0[0], short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 0;
      int int1 = 1885;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1885, int2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      short short1 = (short)76;
      assertFalse(short1 == short0);
      
      int int0 = NumberUtils.max((int) short0, (int) short1, (int) short0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertEquals(76, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 0L;
      long long1 = 1197L;
      longArray0[1] = long1;
      long long2 = NumberUtils.max(long0, long0, longArray0[1]);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(1197L, long2);
      assertArrayEquals(new long[] {0L, 1197L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 2089L;
      long long1 = 0L;
      long long2 = NumberUtils.max(long1, long0, long1);
      assertFalse(long0 == long1);
      assertTrue(long0 == long2);
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(2089L, long2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte byte0 = (byte) (-95);
      byte byte1 = (byte)31;
      byte byte2 = (byte)108;
      byte byte3 = NumberUtils.min(byte2, byte1, byte0);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte3);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte2);
      assertTrue(byte3 == byte0);
      assertEquals((byte) (-95), byte3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte byte0 = (byte) (-95);
      byte byte1 = (byte)108;
      byte byte2 = NumberUtils.min(byte1, byte0, byte0);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertEquals((byte) (-95), byte2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      short short0 = (short)5;
      short short1 = (short) (-1870);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short) (-1870), short2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short)1822;
      short short1 = NumberUtils.min(shortArray0);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
      
      byte byte0 = (byte) (-1);
      short short2 = NumberUtils.min(short0, (short) byte0, short1);
      assertFalse(short2 == short0);
      assertFalse(short2 == short1);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertEquals((short) (-1), short2);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 2179;
      int int1 = (-3864);
      int int2 = NumberUtils.min(int0, int0, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-3864), int2);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      short short0 = (short)0;
      int int0 = 25;
      short short1 = NumberUtils.min(short0, short0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
      
      int int1 = NumberUtils.min(int0, (int) short0, (int) short1);
      assertTrue(short0 == short1);
      assertFalse(int0 == int1);
      assertTrue(short1 == short0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 0;
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      long long0 = (-1L);
      long long1 = NumberUtils.min((long) int0, (long) byte0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-1L), long1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 1661L;
      long long1 = (-3806L);
      long long2 = NumberUtils.min(long0, long1, long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals((-3806L), long2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-1870.25F);
      floatArray0[0] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
      assertArrayEquals(new float[] {(-1870.25F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 2466.362181495569;
      doubleArray0[1] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertTrue(double1 == double0);
      assertEquals(2466.362181495569, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 2466.362181495569, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[21];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)7;
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)7, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)7}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      short short0 = (short)76;
      short[] shortArray0 = new short[9];
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)76, short1);
      assertArrayEquals(new short[] {(short)0, (short)76, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[19];
      int int0 = (-711);
      intArray0[0] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new int[] {(-711), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = 1197L;
      longArray0[1] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertTrue(long1 == long0);
      assertEquals(1197L, long1);
      assertArrayEquals(new long[] {0L, 1197L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = NumberUtils.max(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = 1.0F;
      float[] floatArray0 = new float[2];
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = (-698.6436);
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertTrue(double1 == double0);
      assertEquals((-698.6436), double1, 0.01D);
      assertArrayEquals(new double[] {0.0, (-698.6436), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[8] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)120;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)120, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)4075;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short)4075, (short)0}, shortArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "nd>hflQ<1)H. Xpc8GZ";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte)120;
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)120, byte2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) byte2;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {120, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[22];
      long long0 = (-1922L);
      longArray0[3] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertEquals((-1922L), long1);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-1922L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "-0{0L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -0{0L is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "-0L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "org.apahe.commoslng.tringUil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apahe.commoslng.tringUil is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "Gf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Gf is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "SecurityEQception occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // SecurityEQception occurred is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "0L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "FF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // FF is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "iwMC1mn?{^G D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // iwMC1mn?{^G D is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "[G{9~[[4(i*ce?]E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // [G{9~[[4(i*ce?]E is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "E%he1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"E%he1\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = ".`YO{e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .`YO{e is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "-0XE%h1";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-E%h1\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "0XArray cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Array cannot be empty.\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "-0xArray cannot be empy.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Array cannot be empy.\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "--E%h1";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "5.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(5.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "gzP<IUyh'";
      short short0 = (short)0;
      short short1 = NumberUtils.toShort(string0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte)17;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)17, byte1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 2179;
      String string0 = "-0ex";
      double double0 = NumberUtils.toDouble(string0, (double) int0);
      assertEquals(2179.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "-0X";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = null;
      long long0 = 1661L;
      long long1 = NumberUtils.toLong(string0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1661L, long1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      short short0 = (short)0;
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, (int) short0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 1411;
      byte[] byteArray0 = new byte[3];
      float float0 = NumberUtils.max((float) byteArray0[2], (float) int0, (float) byteArray0[2]);
      assertEquals(1411.0F, float0, 0.01F);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "..";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float float0 = 1.0F;
      String string0 = "nd>hflQ<1)H. Xpc8GZ";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      float float1 = NumberUtils.min(float0, (float) byte0, (float) byte0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = null;
      double double0 = 0.0;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      double double1 = NumberUtils.min(double0, double0, (double) short0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      double double0 = (-2201.94040779);
      double double1 = NumberUtils.max(double0, double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-2201.94040779), double1, 0.01D);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "5.";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
