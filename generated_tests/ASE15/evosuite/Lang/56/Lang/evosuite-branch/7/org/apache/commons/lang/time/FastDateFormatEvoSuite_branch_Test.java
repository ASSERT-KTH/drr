/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:35:42 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       String string0 = "wS8Z'z?[";
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
//       assertNotNull(simpleDateFormat0);
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       Locale locale0 = Locale.CANADA_FRENCH;
//       assertNotNull(locale0);
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("wS8Z'z?[", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       String string1 = locale0.getCountry();
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals("CA", string1);
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       
//       int int0 = (-1);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       String string2 = fastDateFormat0.format((long) int0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertNotNull(string2);
//       assertEquals("19998+0000z?[", string2);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("wS8Z'z?[", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       zoneInfo0.setRawOffset(int0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       String string3 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string2);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string2);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(string3.equals((Object)string2));
//       assertNotNull(string3);
//       assertEquals("4808-0000z?[", string3);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("wS8Z'z?[", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//   }

  @Test(timeout = 4000)
  public void test01() {}
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       int int0 = 1;
//       String string0 = "q:V3i39U:+bd>!C7?";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals("q:V3i39U:+bd>!C7?", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=q:V3i39U:+bd>!C7?,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(3600000, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       
//       Locale locale0 = Locale.FRANCE;
//       assertNotNull(locale0);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("d MMMM yyyy HH:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("q:V3i39U:+bd>!C7?", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=q:V3i39U:+bd>!C7?,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(3600000, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       
//       int int1 = (-1);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int1, int0, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(string1);
//       assertEquals("30 janvier 0002 00:59:00 GMT+00:00", string1);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("d MMMM yyyy HH:mm:ss z", fastDateFormat0.getPattern());
//       assertEquals("q:V3i39U:+bd>!C7?", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=q:V3i39U:+bd>!C7?,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(3600000, simpleTimeZone0.getDSTSavings());
//       assertEquals(true, simpleTimeZone0.useDaylightTime());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//   }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      String string0 = "q:V3i39U:+bd>!C7?";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=q:V3i39U:+bd>!C7?,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("q:V3i39U:+bd>!C7?", simpleTimeZone0.getID());
      assertEquals(true, simpleTimeZone0.useDaylightTime());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("java.util.SimpleTimeZone[id=q:V3i39U:+bd>!C7?,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("q:V3i39U:+bd>!C7?", simpleTimeZone0.getID());
      assertEquals(true, simpleTimeZone0.useDaylightTime());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("d MMMM yyyy HH:mm:ss z", fastDateFormat0.getPattern());
      
      String string1 = fastDateFormat0.format((long) int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("1 janvier 1970 01:00:00 GMT+01:00", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("java.util.SimpleTimeZone[id=q:V3i39U:+bd>!C7?,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("q:V3i39U:+bd>!C7?", simpleTimeZone0.getID());
      assertEquals(true, simpleTimeZone0.useDaylightTime());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(38, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("d MMMM yyyy HH:mm:ss z", fastDateFormat0.getPattern());
  }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CA", locale0.getCountry());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CA", locale0.getCountry());
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       assertEquals("\u4E0B\u534808\u664221\u520621\u79D2 GMT+00:00", string1);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//   }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       String string0 = fastDateFormat0.format((long) int0);
//       assertNotNull(string0);
//       assertEquals("\u4E0A\u534812\u664200\u520600\u79D2 GMT", string0);
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      String string0 = "k'*";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("k'*", fastDateFormat0.getPattern());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      
      String string1 = fastDateFormat0.format((long) int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("24*", string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("k'*", fastDateFormat0.getPattern());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       int int0 = 0;
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
//       assertNotNull(simpleDateFormat0);
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.FRENCH;
//       assertNotNull(locale0);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("fr", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("fr", locale0.toString());
//       
//       int int1 = 1000;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int0, int0, int0, int0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1000,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(date0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-30609878400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=999,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Sun Dec 31 00:00:00 GMT 999", date0.toString());
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(string0);
//       assertEquals("dimanche 31 d\u00E9cembre 0999", string0);
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-30609878400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=999,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Sun Dec 31 00:00:00 GMT 999", date0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("fr", locale0.toString());
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "k'*";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertNotNull(fastDateFormat0);
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("k'*", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      boolean boolean0 = fastDateFormat0.equals((Object) string0);
      assertFalse(boolean0);
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("k'*", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "D)9kK";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 0;
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang.time.FastDateFormat
         //
      }
  }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       String string0 = "";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       Long long0 = null;
//       Long long1 = Long.getLong(string0, long0);
//       // Undeclared exception!
//       try {
//         String string1 = fastDateFormat0.format((Object) long1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockDate0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(15, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(15, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//   }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 2;
      String string0 = "k'*";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(28, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("MMM d, yyyy h:mm:ss a", fastDateFormat0.getPattern());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
//       assertNotNull(simpleDateFormat0);
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("", simpleDateFormat0.toPattern());
//       assertEquals("", simpleDateFormat0.toLocalizedPattern());
//       
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(63, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       
//       String string1 = "MC";
//       assertNotSame(string1, string0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat1.getPattern());
//       assertEquals(26, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       
//       SimpleDateFormat simpleDateFormat1 = new SimpleDateFormat();
//       assertNotSame(simpleDateFormat1, simpleDateFormat0);
//       assertFalse(simpleDateFormat1.equals((Object)simpleDateFormat0));
//       assertNotNull(simpleDateFormat1);
//       assertEquals("yy. M. d a h:mm", simpleDateFormat1.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat1.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat1.isLenient());
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)simpleDateFormat1.getTimeZone();
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(simpleDateFormat1, simpleDateFormat0);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(simpleDateFormat1.equals((Object)simpleDateFormat0));
//       assertNotNull(zoneInfo1);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat1.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat1.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat1.isLenient());
//       
//       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((TimeZone) zoneInfo1);
//       assertNotSame(mockGregorianCalendar1, mockGregorianCalendar0);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(simpleDateFormat1, simpleDateFormat0);
//       assertTrue(mockGregorianCalendar1.equals((Object)mockGregorianCalendar0));
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(simpleDateFormat1.equals((Object)simpleDateFormat0));
//       assertNotNull(mockGregorianCalendar1);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
//       assertEquals(1, mockGregorianCalendar1.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar1.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar1.isLenient());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat1.toPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat1.toLocalizedPattern());
//       assertEquals(true, simpleDateFormat1.isLenient());
//   }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "x5cl)hlzqej";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "8vp<S4zt";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "ujW+N+h)A;8Md%=";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ujw+n+h)a;8md%=", locale0.toString());
      assertEquals("ujw+n+h)a;8md%=", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "atZT#{zZ!`B=4y8v";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "z r'av.*:";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "!q4^&}J&4\\\"!NJ+X~F%";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "hp";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "<null>";
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "l";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "4iE";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "g:|0./;ux%|<F";
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "FE}e0c;Ns_|C/_B";
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "\"ac@vj[^KioS";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "bfplcpQ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test27() {}
//   @Test(timeout = 4000)
//   public void test27()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       String string0 = "YeSDe>1ho* ";
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: Y
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "ZX{RA:";
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "W,h(f\\bdlPLERs@";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "V',FgU|C";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "!U,_Ag";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test32() {}
//   @Test(timeout = 4000)
//   public void test32()  throws Throwable  {
//       String string0 = "wS8Z'z?[";
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
//       assertNotNull(simpleDateFormat0);
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       
//       Locale locale0 = Locale.CANADA_FRENCH;
//       assertNotNull(locale0);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("wS8Z'z?[", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       
//       String string1 = locale0.getCountry();
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals("CA", string1);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       int int0 = (-1);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       String string2 = fastDateFormat0.format((long) int0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertNotNull(string2);
//       assertEquals("19998+0000z?[", string2);
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("wS8Z'z?[", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//   }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "RP:.0?kGvDq";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "Q:UTmn_xAVJ2%D@!";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "}G\\a\"4Pn]]U%D'|$X";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test(timeout = 4000)
  public void test36() {}
//   @Test(timeout = 4000)
//   public void test36()  throws Throwable  {
//       String string0 = "O|5tA.lO>nz";
//       int int0 = 4899;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4899,MONTH=4899,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4899,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=4899,MONTH=4899,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4899,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: O
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      
      String string0 = "No date time pattern for locale: ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "-?JnZ<1(w&[";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "Illegal pattern component: ";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.TAIWAN;
//       assertNotNull(locale0);
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TWN", locale0.getISO3Country());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       boolean boolean0 = zoneInfo0.observesDaylightTime();
//       assertFalse(boolean0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       String string0 = zoneInfo0.getDisplayName(boolean0, int0, locale0);
//       assertNotNull(string0);
//       assertEquals("GMT", string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: T
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = ";(C5:FUU\"S";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals(";(C5:FUU\"S", locale0.getCountry());
      assertEquals(";(C5:FUU\"S", locale0.getVariant());
      assertEquals(";(c5:fuu\"s_;(C5:FUU\"S_;(C5:FUU\"S", locale0.toString());
      assertEquals(";(c5:fuu\"s", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "Bt_7gX_4aOjY|.jz";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat1.getPattern());
//   }

  @Test(timeout = 4000)
  public void test44() {}
//   @Test(timeout = 4000)
//   public void test44()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat1.getPattern());
//       assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(boolean0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat1.getPattern());
//       assertEquals(17, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string0 = "!,H_Ag";
//       Locale locale0 = null;
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: A
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       
//       int int1 = 1;
//       String string0 = null;
//       int int2 = fastDateFormat0.getMaxLengthEstimate();
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int2);
//       assertEquals(17, int2);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       
//       int int3 = 0;
//       assertFalse(int3 == int2);
//       
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       
//       Locale locale1 = Locale.JAPAN;
//       assertNotSame(locale1, locale0);
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotNull(locale1);
//       assertEquals("JPN", locale1.getISO3Country());
//       assertEquals("ja_JP", locale1.toString());
//       assertEquals("JP", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       assertEquals("jpn", locale1.getISO3Language());
//       assertEquals("ja", locale1.getLanguage());
//       
//       String string1 = locale0.getDisplayVariant(locale1);
//       assertNotSame(locale1, locale0);
//       assertNotSame(locale0, locale1);
//       assertFalse(locale1.equals((Object)locale0));
//       assertFalse(locale0.equals((Object)locale1));
//       assertNotNull(string1);
//       assertEquals("", string1);
//       assertEquals("JPN", locale1.getISO3Country());
//       assertEquals("ja_JP", locale1.toString());
//       assertEquals("JP", locale1.getCountry());
//       assertEquals("", locale1.getVariant());
//       assertEquals("jpn", locale1.getISO3Language());
//       assertEquals("ja", locale1.getLanguage());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int3, int1, locale0);
//       assertNotSame(locale0, locale1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(locale0.equals((Object)locale1));
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2'", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat1.getTimeZoneOverridesCalendar();
//       assertNotSame(locale0, locale1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(locale0.equals((Object)locale1));
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(boolean0);
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2'", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       
//       String string2 = "xT'kP.+J,;]8E6V&x5Q";
//       assertNotSame(string2, string1);
//       assertFalse(string2.equals((Object)string1));
//       
//       Long long0 = Long.getLong(string2, (long) int1);
//       assertNotSame(string2, string1);
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertEquals(1L, (long)long0);
//       
//       int int4 = 1;
//       assertFalse(int4 == int2);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int3, int3, int4);
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int4);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int2);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       long long1 = Long.rotateRight((long) int1, int1);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertEquals((-9223372036854775808L), long1);
//       
//       String string3 = fastDateFormat1.format((Calendar) mockGregorianCalendar0);
//       assertNotSame(locale0, locale1);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertFalse(locale0.equals((Object)locale1));
//       assertFalse(int3 == int2);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int4);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int2);
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(string3);
//       assertEquals("0001\u5E741\u67081\u65E5 \u661F\u671F\u56DB \u4E0A\u534812\u65F600\u520600\u79D2", string3);
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167392000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=1,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2'", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       
//       String string4 = "&\"`[L_<wp*pQ";
//       assertNotSame(string4, string2);
//       assertNotSame(string4, string3);
//       assertNotSame(string4, string1);
//       assertFalse(string4.equals((Object)string3));
//       assertFalse(string4.equals((Object)string1));
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string4, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: L
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "D)9kK";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 0;
      Locale locale0 = Locale.CHINA;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      
      String string1 = fastDateFormat0.format((long) int0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals("1970\u5E741\u67081\u65E5 \u661F\u671F\u56DB", string1);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      
      Locale locale1 = Locale.FRENCH;
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertNotNull(locale1);
      //  // Unstable assertion: assertEquals("fr", locale1.toString());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("fra", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("fr", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale1);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("D)9kK", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("fr", locale1.toString());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("fra", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("fr", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("D)9kK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("D)9kK", simpleDateFormat0.toPattern());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("D)9kK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("D)9kK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:35:32 GMT 1934", date0.toString());
      
      String string2 = fastDateFormat1.format(date0);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertNotNull(string2);
      //  // Unstable assertion: assertEquals("345)9186", string2);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("D)9kK", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("D)9kK", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("D)9kK", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:35:32 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("fr", locale1.toString());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("fra", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("fr", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      
      FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertFalse(locale0.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(fastDateFormat2);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(15, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      
      Locale locale2 = fastDateFormat2.getLocale();
      //  // Unstable assertion: assertNotSame(locale2, locale1);
      //  // Unstable assertion: assertSame(locale2, locale0);
      //  // Unstable assertion: assertNotSame(locale0, locale1);
      //  // Unstable assertion: assertSame(locale0, locale2);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertFalse(locale2.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(locale0.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(locale2);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("zh_CN", locale2.toString());
      //  // Unstable assertion: assertEquals("zho", locale2.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale2.getLanguage());
      //  // Unstable assertion: assertEquals("", locale2.getVariant());
      //  // Unstable assertion: assertEquals("CN", locale2.getCountry());
      //  // Unstable assertion: assertEquals("CHN", locale2.getISO3Country());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(15, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      
      FastDateFormat fastDateFormat3 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale2);
      //  // Unstable assertion: assertNotSame(locale2, locale1);
      //  // Unstable assertion: assertSame(locale2, locale0);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(locale0, locale1);
      //  // Unstable assertion: assertSame(locale0, locale2);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat3);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertFalse(locale2.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(locale0.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(fastDateFormat3);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("zh_CN", locale2.toString());
      //  // Unstable assertion: assertEquals("zho", locale2.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale2.getLanguage());
      //  // Unstable assertion: assertEquals("", locale2.getVariant());
      //  // Unstable assertion: assertEquals("CN", locale2.getCountry());
      //  // Unstable assertion: assertEquals("CHN", locale2.getISO3Country());
      //  // Unstable assertion: assertEquals(true, fastDateFormat3.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(14, fastDateFormat3.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("D)9kK", fastDateFormat3.getPattern());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(15, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      
      String string3 = locale1.getDisplayScript();
      //  // Unstable assertion: assertNotSame(locale1, locale2);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string0);
      //  // Unstable assertion: assertNotSame(string3, string2);
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale2));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertEquals("", string3);
      //  // Unstable assertion: assertEquals("fr", locale1.toString());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("fra", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("fr", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      
      ZoneInfo zoneInfo1 = (ZoneInfo)fastDateFormat3.getTimeZone();
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo1);
      //  // Unstable assertion: assertNotSame(locale2, locale1);
      //  // Unstable assertion: assertSame(locale2, locale0);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat0);
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertNotSame(locale0, locale1);
      //  // Unstable assertion: assertSame(locale0, locale2);
      //  // Unstable assertion: assertNotSame(string0, string3);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat3);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertFalse(locale2.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(locale0.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(zoneInfo1);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("zh_CN", locale2.toString());
      //  // Unstable assertion: assertEquals("zho", locale2.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale2.getLanguage());
      //  // Unstable assertion: assertEquals("", locale2.getVariant());
      //  // Unstable assertion: assertEquals("CN", locale2.getCountry());
      //  // Unstable assertion: assertEquals("CHN", locale2.getISO3Country());
      //  // Unstable assertion: assertEquals(true, fastDateFormat3.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(14, fastDateFormat3.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("D)9kK", fastDateFormat3.getPattern());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(15, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      
      int int1 = 0;
      FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(int1);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat3);
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertNotNull(fastDateFormat4);
      //  // Unstable assertion: assertEquals(false, fastDateFormat4.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat4.getPattern());
      //  // Unstable assertion: assertEquals(16, fastDateFormat4.getMaxLengthEstimate());
      
      fastDateFormat4.init();
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat3);
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertEquals(false, fastDateFormat4.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat4.getPattern());
      //  // Unstable assertion: assertEquals(16, fastDateFormat4.getMaxLengthEstimate());
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       
//       String string1 = fastDateFormat0.toString();
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       assertEquals("FastDateFormat[ahh'\u6642'mm'\u5206'ss'\u79D2' z]", string1);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//   }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test49() {}
//   @Test(timeout = 4000)
//   public void test49()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = "V',FgU|C";
//       int int0 = (-4114);
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertNotNull(parsePosition0);
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals(-4114, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=-4114,errorIndex=-1]", parsePosition0.toString());
//       
//       Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//       assertNull(object0);
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test(timeout = 4000)
  public void test50() {}
//   @Test(timeout = 4000)
//   public void test50()  throws Throwable  {
//       String string0 = "wS8Z'z?[";
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
//       assertNotNull(simpleDateFormat0);
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       Locale locale0 = Locale.CANADA_FRENCH;
//       assertNotNull(locale0);
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr_CA", locale0.toString());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("wS8Z'z?[", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       String string1 = fastDateFormat0.getPattern();
//       assertSame(string1, string0);
//       assertSame(string0, string1);
//       assertNotNull(string1);
//       assertEquals("wS8Z'z?[", string1);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("wS8Z'z?[", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//   }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test52() {}
//   @Test(timeout = 4000)
//   public void test52()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test(timeout = 4000)
  public void test53() {}
//   @Test(timeout = 4000)
//   public void test53()  throws Throwable  {
//       String string0 = "org.apache.commons.lang.time.FastDateFormat$TwoDiitMonthField";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: o
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test54() {}
//   @Test(timeout = 4000)
//   public void test54()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       Long long0 = new Long((long) int0);
//       assertEquals(0L, (long)long0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer(int0);
//       assertNotNull(stringBuffer0);
//       assertEquals(0, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals("", stringBuffer0.toString());
//       
//       FieldPosition fieldPosition0 = new FieldPosition(int0);
//       assertNotNull(fieldPosition0);
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long0, stringBuffer0, fieldPosition0);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertNotNull(stringBuffer1);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(17, stringBuffer1.length());
//       assertEquals("70. 1. 1 \u4E0A\u5348 12:00", stringBuffer1.toString());
//       assertEquals(30, stringBuffer1.capacity());
//       assertEquals("70. 1. 1 \u4E0A\u5348 12:00", stringBuffer0.toString());
//       assertEquals(30, stringBuffer0.capacity());
//       assertEquals(17, stringBuffer0.length());
//   }

  @Test(timeout = 4000)
  public void test55() {}
//   @Test(timeout = 4000)
//   public void test55()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u6642'mm'\u5206'ss'\u79D2'", fastDateFormat0.getPattern());
//   }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = ">_=j}1TB_>4@d3'o{";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test57() {}
//   @Test(timeout = 4000)
//   public void test57()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.toString());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(17, attributedCharacterIterator0.getEndIndex());
//       assertEquals(17, attributedCharacterIterator0.getRunLimit());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }
}
