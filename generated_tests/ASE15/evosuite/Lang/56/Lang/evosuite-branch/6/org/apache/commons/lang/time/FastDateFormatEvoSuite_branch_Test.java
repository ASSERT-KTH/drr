/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:25:08 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "k5=9";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("k5=9", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateFormat0);
      
      long long0 = (-1434L);
      String string1 = fastDateFormat0.format(long0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("235=9", string1);
      assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("k5=9", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test01() {}
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = 1712;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0, int0, int0, int1);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=1712,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1712,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals("0142\u5E748\u670831\u65E5 \u661F\u671F\u56DB \u4E0A\u534812\u65F628\u520632\u79D2 GMT", string0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-57665259088000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=142,MONTH=7,WEEK_OF_YEAR=35,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=243,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=28,SECOND=32,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       int int0 = 1;
//       Locale locale0 = Locale.TAIWAN;
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer(int0);
//       assertEquals(0, stringBuffer0.length());
//       assertEquals(1, stringBuffer0.capacity());
//       assertEquals("", stringBuffer0.toString());
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133087539000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=1,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("0001\u5E742\u67081\u65E5", stringBuffer1.toString());
//       assertEquals(9, stringBuffer1.length());
//       assertEquals(10, stringBuffer1.capacity());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals(9, stringBuffer0.length());
//       assertEquals(10, stringBuffer0.capacity());
//       assertEquals("0001\u5E742\u67081\u65E5", stringBuffer0.toString());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(stringBuffer1);
//   }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) zoneInfo0);
//       assertFalse(boolean0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertNotNull(fastDateFormat0);
      
      Locale locale1 = null;
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "ZyW-2(8'b!D#4.";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertEquals(22, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ZyW-2(8'b!D#4.", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotNull(fastDateFormat0);
      
      // Undeclared exception!
      try {
        String string1 = fastDateFormat0.format((Object) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
      }
  }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       String string0 = "Xf{W&fr8'pG$Y";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.FRANCE;
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("Xf{W&fr8'pG$Y", fastDateFormat0.getPattern());
//       assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//       
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getGregorianChange();
//       assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(date0);
//       
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) date0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(26, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(fastDateFormat0);
      
      int int1 = 0;
      int int2 = 1371;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int1, locale0);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals(31, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat1.getPattern());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertFalse(int1 == int2);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotNull(fastDateFormat1);
      
      int int3 = 1315;
      int int4 = 1;
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "U";
      int int0 = 2;
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertEquals("d-MMM-yyyy", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(fastDateFormat0);
      
      Locale locale1 = Locale.JAPANESE;
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "xIC'l\"$VvI\"Yy^";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "]v@fo]~)$";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test(timeout = 4000)
  public void test11() {}
//   @Test(timeout = 4000)
//   public void test11()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = ",u$+I\\g";
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(locale0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: u
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       int int0 = 3;
//       String string0 = "&r)<ASM.,s,ZxD";
//       TimeZone timeZone0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, timeZone0);
//       assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ah:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ah:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(locale0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, timeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: r
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "q>WFCSAy%eVsQSnK^l";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "mwp.8:[";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "org.apache.commons.lang.time.FastDateFormat$UnpaddedMonthField";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "Z";
      String string1 = "nVJ??M4Ix\\m0";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertNotNull(dateFormatSymbols0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, dateFormatSymbols0);
      assertNotSame(string0, string1);
      assertEquals("Z", simpleDateFormat0.toPattern());
      assertEquals("Z", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(simpleDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertNotSame(string0, string1);
      assertEquals("Z", simpleDateFormat0.toPattern());
      assertEquals("Z", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("GaMjkHmsSEDFwWxhKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "-lIk";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "EiN";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "D]gMV({";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("D]gMV({", locale0.getVariant());
      assertEquals("d]gmv({_D]GMV({_D]gMV({", locale0.toString());
      assertEquals("D]GMV({", locale0.getCountry());
      assertEquals("d]gmv({", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "f*S}_4'3";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "{-5e8J6#n]C#=>6~^";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "7c.5[OT9#E^";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "ZyW-2(8'b!D#4.";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      //  // Unstable assertion: assertEquals(22, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("ZyW-2(8'b!D#4.", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Language());
      //  // Unstable assertion: assertNotNull(locale0);
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:24:58 GMT 1934", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      String string1 = fastDateFormat0.format(date0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertEquals("+0000343-2(8b!D#4.", string1);
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:24:58 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(22, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("ZyW-2(8'b!D#4.", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertNotNull(string1);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "YdN||[EJ#j^q)/";
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "/,Xg";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "}KV@GM,E\"Qc]Nz~}";
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Thevalidated object isnull";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test28() {}
//   @Test(timeout = 4000)
//   public void test28()  throws Throwable  {
//       String string0 = "RG";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: R
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test29() {}
//   @Test(timeout = 4000)
//   public void test29()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.CANADA_FRENCH;
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("fr", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("fr_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("fra", locale0.getISO3Language());
//       assertNotNull(locale0);
//       
//       String string0 = "GZQb6+!DE+[X";
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: Q
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "Px_:0xH%s~meApSJen";
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "S#_!O~f";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "hJ=W\\_.";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "?zDID";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "_zFs-G=3%L4.BGuHL_@";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "FastDateFormat%[";
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test36() {}
//   @Test(timeout = 4000)
//   public void test36()  throws Throwable  {
//       int int0 = 1659;
//       String string0 = "D7";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("D7", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals("457", string1);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("D7", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       
//       String string2 = "ivq.W1Y\\;kWb\\E";
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertFalse(string2.equals((Object)string1));
//       
//       int int1 = 0;
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("D7", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(5, fastDateFormat1.getMaxLengthEstimate());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertNotNull(fastDateFormat1);
//       
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertNotNull(locale0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int0, int1, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal date style 1659
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "EkC$e)";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "KB@@";
      Locale locale0 = new Locale(string0, string0);
      assertEquals("kb@@", locale0.getLanguage());
      assertEquals("kb@@_KB@@", locale0.toString());
      assertEquals("KB@@", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1;
      String string0 = "\"a?AL:G'w'";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=\"a?AL:G'w',offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("\"a?AL:G'w'", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat1);
//   }

  @Test(timeout = 4000)
  public void test42() {}
//   @Test(timeout = 4000)
//   public void test42()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       int int1 = 0;
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.PRC;
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1, timeZone0, locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale1 = fastDateFormat0.getLocale();
//       assertSame(locale1, locale0);
//       assertSame(locale0, locale1);
//       assertEquals("", locale1.getVariant());
//       assertEquals("CN", locale1.getCountry());
//       assertEquals("zh", locale1.getLanguage());
//       assertEquals("zho", locale1.getISO3Language());
//       assertEquals("CHN", locale1.getISO3Country());
//       assertEquals("zh_CN", locale1.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(locale1);
//       
//       FastDateFormat fastDateFormat1 = new FastDateFormat(string0, timeZone0, locale1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertSame(locale1, locale0);
//       assertSame(locale0, locale1);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertEquals("", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("", locale1.getVariant());
//       assertEquals("CN", locale1.getCountry());
//       assertEquals("zh", locale1.getLanguage());
//       assertEquals("zho", locale1.getISO3Language());
//       assertEquals("CHN", locale1.getISO3Country());
//       assertEquals("zh_CN", locale1.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertNotNull(fastDateFormat1);
//       
//       fastDateFormat1.init();
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertSame(locale1, locale0);
//       assertSame(locale0, locale1);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertEquals("", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("", locale1.getVariant());
//       assertEquals("CN", locale1.getCountry());
//       assertEquals("zh", locale1.getLanguage());
//       assertEquals("zho", locale1.getISO3Language());
//       assertEquals("CHN", locale1.getISO3Country());
//       assertEquals("zh_CN", locale1.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       
//       Locale locale2 = Locale.FRENCH;
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertEquals("", locale2.getCountry());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("fr", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("", locale2.getISO3Country());
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertNotNull(locale2);
//       
//       FastDateFormat fastDateFormat2 = new FastDateFormat(string0, timeZone0, locale2);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertEquals(0, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("", fastDateFormat2.getPattern());
//       assertEquals("", locale2.getCountry());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("fr", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("", locale2.getISO3Country());
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertNotNull(fastDateFormat2);
//       
//       int int2 = fastDateFormat2.getMaxLengthEstimate();
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertEquals(0, int2);
//       assertEquals(0, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("", fastDateFormat2.getPattern());
//       assertEquals("", locale2.getCountry());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("fr", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("", locale2.getISO3Country());
//       assertTrue(int2 == int1);
//       assertTrue(int2 == int0);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat2.getTimeZone();
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(0, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("", fastDateFormat2.getPattern());
//       assertEquals("", locale2.getCountry());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("fr", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("", locale2.getISO3Country());
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertNotNull(zoneInfo0);
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getDefault();
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertNotNull(zoneInfo1);
//       
//       FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(int1, (TimeZone) zoneInfo1);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals(true, fastDateFormat3.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat3.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat3.getPattern());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertTrue(int1 == int2);
//       assertNotNull(fastDateFormat3);
//       
//       FastDateFormat fastDateFormat4 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo1, locale0);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(locale0, locale2);
//       assertSame(locale0, locale1);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals(true, fastDateFormat4.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat4.getPattern());
//       assertEquals(15, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(locale0.equals((Object)locale2));
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertTrue(int0 == int2);
//       assertNotNull(fastDateFormat4);
//       
//       int int3 = 0;
//       assertTrue(int3 == int2);
//       
//       FastDateFormat fastDateFormat5 = FastDateFormat.getDateTimeInstance(int0, int3);
//       assertNotSame(fastDateFormat5, fastDateFormat4);
//       assertNotSame(fastDateFormat5, fastDateFormat0);
//       assertNotSame(fastDateFormat5, fastDateFormat3);
//       assertNotSame(fastDateFormat5, fastDateFormat2);
//       assertNotSame(fastDateFormat5, fastDateFormat1);
//       assertEquals(34, fastDateFormat5.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat5.getPattern());
//       assertEquals(false, fastDateFormat5.getTimeZoneOverridesCalendar());
//       assertTrue(int3 == int2);
//       assertTrue(int0 == int2);
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat1));
//       assertNotNull(fastDateFormat5);
//       
//       String string1 = fastDateFormat5.format((long) int0);
//       assertNotSame(string1, string0);
//       assertNotSame(fastDateFormat5, fastDateFormat4);
//       assertNotSame(fastDateFormat5, fastDateFormat0);
//       assertNotSame(fastDateFormat5, fastDateFormat3);
//       assertNotSame(fastDateFormat5, fastDateFormat2);
//       assertNotSame(fastDateFormat5, fastDateFormat1);
//       assertEquals("1970\u5E741\u67081\u65E5 \u661F\u671F\u56DB \u4E0A\u534812\u65F600\u520600\u79D2 GMT", string1);
//       assertEquals(34, fastDateFormat5.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat5.getPattern());
//       assertEquals(false, fastDateFormat5.getTimeZoneOverridesCalendar());
//       assertFalse(string1.equals((Object)string0));
//       assertTrue(int3 == int2);
//       assertTrue(int0 == int2);
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat1));
//       assertNotNull(string1);
//       
//       ZoneInfo zoneInfo2 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertEquals("GMT", zoneInfo2.getID());
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertNotNull(zoneInfo2);
//       
//       FastDateFormat fastDateFormat6 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo2, locale2);
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertNotSame(fastDateFormat6, fastDateFormat4);
//       assertNotSame(fastDateFormat6, fastDateFormat3);
//       assertNotSame(fastDateFormat6, fastDateFormat2);
//       assertNotSame(fastDateFormat6, fastDateFormat5);
//       assertNotSame(fastDateFormat6, fastDateFormat1);
//       assertNotSame(fastDateFormat6, fastDateFormat0);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertEquals("GMT", zoneInfo2.getID());
//       assertEquals("HH' h 'mm z", fastDateFormat6.getPattern());
//       assertEquals(true, fastDateFormat6.getTimeZoneOverridesCalendar());
//       assertEquals(11, fastDateFormat6.getMaxLengthEstimate());
//       assertEquals("", locale2.getCountry());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("fr", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("", locale2.getISO3Country());
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat0));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertTrue(int0 == int2);
//       assertNotNull(fastDateFormat6);
//       
//       int int4 = (-1409);
//       assertFalse(int4 == int2);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int4, int0, int4, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-1409,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1409,HOUR_OF_DAY=-1409,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int0);
//       assertTrue(int0 == int2);
//       assertFalse(int0 == int4);
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("Tue Jun 02 07:00:00 GMT 119", date0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-65877987600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=119,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int0);
//       assertTrue(int0 == int2);
//       assertFalse(int0 == int4);
//       assertNotNull(date0);
//       
//       String string2 = fastDateFormat6.format(date0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertNotSame(fastDateFormat6, fastDateFormat4);
//       assertNotSame(fastDateFormat6, fastDateFormat3);
//       assertNotSame(fastDateFormat6, fastDateFormat2);
//       assertNotSame(fastDateFormat6, fastDateFormat5);
//       assertNotSame(fastDateFormat6, fastDateFormat1);
//       assertNotSame(fastDateFormat6, fastDateFormat0);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertEquals("07 h 00 GMT", string2);
//       assertEquals("Tue Jun 02 07:00:00 GMT 119", date0.toString());
//       assertEquals("GMT", zoneInfo2.getID());
//       assertEquals("HH' h 'mm z", fastDateFormat6.getPattern());
//       assertEquals(true, fastDateFormat6.getTimeZoneOverridesCalendar());
//       assertEquals(11, fastDateFormat6.getMaxLengthEstimate());
//       assertEquals("", locale2.getCountry());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("fr", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("", locale2.getISO3Country());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-65877987600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=119,MONTH=5,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int0);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat0));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertTrue(int0 == int2);
//       assertFalse(int0 == int4);
//       assertNotNull(string2);
//       
//       List list0 = fastDateFormat6.parsePattern();
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo2, zoneInfo1);
//       assertNotSame(zoneInfo2, zoneInfo0);
//       assertNotSame(fastDateFormat6, fastDateFormat4);
//       assertNotSame(fastDateFormat6, fastDateFormat3);
//       assertNotSame(fastDateFormat6, fastDateFormat2);
//       assertNotSame(fastDateFormat6, fastDateFormat5);
//       assertNotSame(fastDateFormat6, fastDateFormat1);
//       assertNotSame(fastDateFormat6, fastDateFormat0);
//       assertNotSame(locale2, locale0);
//       assertNotSame(locale2, locale1);
//       assertEquals(false, list0.isEmpty());
//       assertEquals(5, list0.size());
//       assertEquals("GMT", zoneInfo2.getID());
//       assertEquals("HH' h 'mm z", fastDateFormat6.getPattern());
//       assertEquals(true, fastDateFormat6.getTimeZoneOverridesCalendar());
//       assertEquals(11, fastDateFormat6.getMaxLengthEstimate());
//       assertEquals("", locale2.getCountry());
//       assertEquals("fra", locale2.getISO3Language());
//       assertEquals("fr", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertEquals("fr", locale2.getLanguage());
//       assertEquals("", locale2.getISO3Country());
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo2.equals((Object)zoneInfo1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat6.equals((Object)fastDateFormat0));
//       assertFalse(locale2.equals((Object)locale0));
//       assertFalse(locale2.equals((Object)locale1));
//       assertTrue(int0 == int2);
//       assertFalse(int0 == int4);
//       assertNotNull(list0);
//       
//       int int5 = 0;
//       assertTrue(int5 == int2);
//       
//       int int6 = 0;
//       assertTrue(int6 == int2);
//       
//       FastDateFormat fastDateFormat7 = FastDateFormat.getDateInstance(int6, locale1);
//       assertNotSame(fastDateFormat7, fastDateFormat1);
//       assertNotSame(fastDateFormat7, fastDateFormat2);
//       assertNotSame(fastDateFormat7, fastDateFormat6);
//       assertNotSame(fastDateFormat7, fastDateFormat4);
//       assertNotSame(fastDateFormat7, fastDateFormat5);
//       assertNotSame(fastDateFormat7, fastDateFormat0);
//       assertNotSame(fastDateFormat7, fastDateFormat3);
//       assertNotSame(locale1, locale2);
//       assertSame(locale1, locale0);
//       assertNotSame(locale0, locale2);
//       assertSame(locale0, locale1);
//       assertNotSame(fastDateFormat0, fastDateFormat3);
//       assertNotSame(fastDateFormat0, fastDateFormat7);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(fastDateFormat0, fastDateFormat4);
//       assertNotSame(fastDateFormat0, fastDateFormat6);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat0, fastDateFormat5);
//       assertEquals(17, fastDateFormat7.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat7.getPattern());
//       assertEquals(false, fastDateFormat7.getTimeZoneOverridesCalendar());
//       assertEquals("", locale1.getVariant());
//       assertEquals("CN", locale1.getCountry());
//       assertEquals("zh", locale1.getLanguage());
//       assertEquals("zho", locale1.getISO3Language());
//       assertEquals("CHN", locale1.getISO3Country());
//       assertEquals("zh_CN", locale1.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertFalse(int6 == int4);
//       assertTrue(int6 == int2);
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat7.equals((Object)fastDateFormat3));
//       assertFalse(locale1.equals((Object)locale2));
//       assertFalse(locale0.equals((Object)locale2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat7));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat5));
//       assertFalse(int1 == int4);
//       assertTrue(int1 == int2);
//       assertNotNull(fastDateFormat7);
//       
//       String string3 = "org.apache.commons.lang.time.FastDateFormat$TwoDigitYearField";
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string1);
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string1));
//       
//       ZoneInfo zoneInfo3 = (ZoneInfo)TimeZone.getTimeZone(string3);
//       assertNotSame(zoneInfo3, zoneInfo2);
//       assertNotSame(zoneInfo3, zoneInfo1);
//       assertNotSame(zoneInfo3, zoneInfo0);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string1);
//       assertEquals("GMT", zoneInfo3.getID());
//       assertTrue(zoneInfo3.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo2));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string1));
//       assertNotNull(zoneInfo3);
//       
//       FastDateFormat fastDateFormat8 = FastDateFormat.getDateInstance(int5, (TimeZone) zoneInfo3);
//       assertNotSame(fastDateFormat8, fastDateFormat1);
//       assertNotSame(fastDateFormat8, fastDateFormat0);
//       assertNotSame(fastDateFormat8, fastDateFormat5);
//       assertNotSame(fastDateFormat8, fastDateFormat6);
//       assertNotSame(fastDateFormat8, fastDateFormat2);
//       assertNotSame(fastDateFormat8, fastDateFormat3);
//       assertNotSame(fastDateFormat8, fastDateFormat4);
//       assertNotSame(fastDateFormat8, fastDateFormat7);
//       assertNotSame(zoneInfo3, zoneInfo2);
//       assertNotSame(zoneInfo3, zoneInfo1);
//       assertNotSame(zoneInfo3, zoneInfo0);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string1);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat8.getPattern());
//       assertEquals(true, fastDateFormat8.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat8.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo3.getID());
//       assertFalse(fastDateFormat8.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat8.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat8.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat8.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat8.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat8.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat8.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat8.equals((Object)fastDateFormat7));
//       assertFalse(int5 == int4);
//       assertTrue(int5 == int2);
//       assertTrue(zoneInfo3.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo2));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string1));
//       assertNotNull(fastDateFormat8);
//       
//       Locale locale3 = Locale.US;
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale0);
//       assertNotSame(locale3, locale2);
//       assertEquals("en", locale3.getLanguage());
//       assertEquals("eng", locale3.getISO3Language());
//       assertEquals("US", locale3.getCountry());
//       assertEquals("en_US", locale3.toString());
//       assertEquals("USA", locale3.getISO3Country());
//       assertEquals("", locale3.getVariant());
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(locale3.equals((Object)locale2));
//       assertNotNull(locale3);
//       
//       FastDateFormat fastDateFormat9 = FastDateFormat.getDateInstance(int5, (TimeZone) zoneInfo3, locale3);
//       assertNotSame(zoneInfo3, zoneInfo2);
//       assertNotSame(zoneInfo3, zoneInfo1);
//       assertNotSame(zoneInfo3, zoneInfo0);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string1);
//       assertNotSame(fastDateFormat9, fastDateFormat0);
//       assertNotSame(fastDateFormat9, fastDateFormat4);
//       assertNotSame(fastDateFormat9, fastDateFormat2);
//       assertNotSame(fastDateFormat9, fastDateFormat6);
//       assertNotSame(fastDateFormat9, fastDateFormat5);
//       assertNotSame(fastDateFormat9, fastDateFormat3);
//       assertNotSame(fastDateFormat9, fastDateFormat8);
//       assertNotSame(fastDateFormat9, fastDateFormat7);
//       assertNotSame(fastDateFormat9, fastDateFormat1);
//       assertNotSame(locale3, locale1);
//       assertNotSame(locale3, locale0);
//       assertNotSame(locale3, locale2);
//       assertEquals("GMT", zoneInfo3.getID());
//       assertEquals(true, fastDateFormat9.getTimeZoneOverridesCalendar());
//       assertEquals(31, fastDateFormat9.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat9.getPattern());
//       assertEquals("en", locale3.getLanguage());
//       assertEquals("eng", locale3.getISO3Language());
//       assertEquals("US", locale3.getCountry());
//       assertEquals("en_US", locale3.toString());
//       assertEquals("USA", locale3.getISO3Country());
//       assertEquals("", locale3.getVariant());
//       assertFalse(int5 == int4);
//       assertTrue(int5 == int2);
//       assertTrue(zoneInfo3.equals((Object)zoneInfo0));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo1));
//       assertTrue(zoneInfo3.equals((Object)zoneInfo2));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat6));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat5));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat8));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat7));
//       assertFalse(fastDateFormat9.equals((Object)fastDateFormat1));
//       assertFalse(locale3.equals((Object)locale1));
//       assertFalse(locale3.equals((Object)locale0));
//       assertFalse(locale3.equals((Object)locale2));
//       assertNotNull(fastDateFormat9);
//   }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       String string0 = "~\"";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("~\"", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int0 = 1;
//       String string1 = "k5=9";
//       assertNotSame(string1, string0);
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertNotSame(string0, string1);
//       assertEquals(2, int1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("~\"", fastDateFormat0.getPattern());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int1 == int0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
//       assertNotSame(string1, string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertNotSame(string1, string0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat1.getPattern());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int0 == int1);
//       assertNotNull(fastDateFormat1);
//       
//       String string2 = "";
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getTimeZone(string2);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertNotNull(zoneInfo1);
//       
//       int int2 = 0;
//       assertFalse(int2 == int1);
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string1, string2);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertEquals("k5=9", fastDateFormat2.getPattern());
//       assertEquals(7, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat2);
//       
//       int int3 = 0;
//       assertFalse(int3 == int1);
//       
//       FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(int3);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertEquals(16, fastDateFormat3.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat3.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat3.getPattern());
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int1);
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertNotNull(fastDateFormat3);
//       
//       int int4 = 3;
//       assertFalse(int4 == int1);
//       
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat4 = FastDateFormat.getDateTimeInstance(int2, int4, locale0);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ah:mm", fastDateFormat4.getPattern());
//       assertEquals(27, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat4.getTimeZoneOverridesCalendar());
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int3);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int4);
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertNotNull(fastDateFormat4);
//       
//       Locale locale1 = Locale.SIMPLIFIED_CHINESE;
//       assertEquals("CHN", locale1.getISO3Country());
//       assertEquals("zho", locale1.getISO3Language());
//       assertEquals("CN", locale1.getCountry());
//       assertEquals("zh", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("zh_CN", locale1.toString());
//       assertNotNull(locale1);
//       
//       String string3 = fastDateFormat3.toString();
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string1);
//       assertNotSame(string3, string2);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       assertNotSame(fastDateFormat3, fastDateFormat4);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertEquals("FastDateFormat[ahh'\u65F6'mm'\u5206'ss'\u79D2' z]", string3);
//       assertEquals(16, fastDateFormat3.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat3.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat3.getPattern());
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int4);
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string1));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertNotNull(string3);
//       
//       int int5 = (-1178);
//       assertFalse(int5 == int1);
//       
//       int int6 = (-1930);
//       assertFalse(int6 == int1);
//       
//       boolean boolean0 = fastDateFormat3.equals((Object) fastDateFormat0);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string1);
//       assertNotSame(fastDateFormat3, fastDateFormat1);
//       assertNotSame(fastDateFormat3, fastDateFormat4);
//       assertNotSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(fastDateFormat0, fastDateFormat4);
//       assertNotSame(fastDateFormat0, fastDateFormat3);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertFalse(boolean0);
//       assertEquals(16, fastDateFormat3.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat3.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat3.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("~\"", fastDateFormat0.getPattern());
//       assertFalse(int3 == int0);
//       assertFalse(int3 == int1);
//       assertFalse(int3 == int4);
//       assertFalse(int3 == int6);
//       assertFalse(int3 == int5);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       
//       boolean boolean1 = fastDateFormat0.getTimeZoneOverridesCalendar();
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string1);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(fastDateFormat0, fastDateFormat4);
//       assertNotSame(fastDateFormat0, fastDateFormat3);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertFalse(boolean1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(2, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("~\"", fastDateFormat0.getPattern());
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(boolean1 == boolean0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat5 = FastDateFormat.getDateTimeInstance(int6, int6, (TimeZone) zoneInfo1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal time style -1930
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "jr";
      int int0 = 0;
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "k5=9";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      int int0 = 0;
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      
      GregorianCalendar gregorianCalendar0 = (GregorianCalendar)simpleDateFormat0.getCalendar();
      //  // Unstable assertion: assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106285702077,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=24,SECOND=57,MILLISECOND=923,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertNotNull(gregorianCalendar0);
      
      String string1 = fastDateFormat0.format((Calendar) gregorianCalendar0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals("1934\u5E7412\u670811\u65E5 \u661F\u671F\u4E8C", string1);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(1, gregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, gregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(true, gregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=-1106285702077,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1934,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=345,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=24,SECOND=57,MILLISECOND=923,ZONE_OFFSET=0,DST_OFFSET=0]", gregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(string1);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(7, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("k5=9", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      
      long long0 = 100L;
      String string2 = fastDateFormat1.format(long0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertEquals("245=9", string2);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(7, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("k5=9", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      int int0 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertEquals(569439299, int0);
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      
      String string0 = fastDateFormat0.format((long) int0);
      //  // Unstable assertion: assertEquals("70. 1. 7 \u4E0B\u5348 2:10", string0);
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       int int0 = 0;
//       String string0 = " h:m|:s a";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertEquals(" h:m|:s a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string1 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals(" 12:0|:0 \u4E0A\u5348", string1);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(" h:m|:s a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertNotNull(parsePosition0);
//       
//       Object object0 = fastDateFormat0.parseObject(string1, parsePosition0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(" h:m|:s a", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNull(object0);
//   }

  @Test(timeout = 4000)
  public void test48() {}
//   @Test(timeout = 4000)
//   public void test48()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertEquals("yy. M. d a h:mm", string0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test49() {}
//   @Test(timeout = 4000)
//   public void test49()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       String string0 = "Negative values should not be possible";
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: N
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      String string0 = "r";
      int int1 = 13;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int0, int1, int1);
      assertEquals("r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r,offset=0,dstSavings=13,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=13]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) simpleTimeZone0, locale0);
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r,offset=0,dstSavings=13,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=13]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fastDateFormat0);
      
      Long long0 = new Long((long) int0);
      assertEquals(0L, (long)long0);
      assertFalse(int0 == int1);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals(13, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(13, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("r", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=r,offset=0,dstSavings=13,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=13]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(attributedCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test51() {}
//   @Test(timeout = 4000)
//   public void test51()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//   }
}
