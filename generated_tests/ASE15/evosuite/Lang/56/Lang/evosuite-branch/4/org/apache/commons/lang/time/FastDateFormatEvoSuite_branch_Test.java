/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:03:59 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals(19, int1);
//       
//       String string0 = fastDateFormat0.toString();
//       assertNotNull(string0);
//       assertFalse(int0 == int1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("FastDateFormat[yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE]", string0);
//       
//       int int2 = (-1893);
//       assertFalse(int2 == int1);
//       
//       Locale locale1 = null;
//       Locale locale2 = Locale.GERMAN;
//       assertNotNull(locale2);
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotSame(locale2, locale0);
//       assertEquals("", locale2.getVariant());
//       assertEquals("", locale2.getCountry());
//       assertEquals("", locale2.getISO3Country());
//       assertEquals("de", locale2.getLanguage());
//       assertEquals("deu", locale2.getISO3Language());
//       assertEquals("de", locale2.toString());
//       
//       String string1 = "?KzpSY";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat1.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: p
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      String string0 = "EEEE d MMMM yyyy";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      TimeZone.setDefault(timeZone0);
      int int1 = 0;
      int int2 = 0;
      Object object0 = null;
      int int3 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
      
      boolean boolean0 = mockGregorianCalendar0.isLeapYear(int0);
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertTrue(boolean0);
      
      String string1 = fastDateFormat0.format((long) int1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("gioved\u00EC 1 gennaio 1970 0.00.00 GMT", string1);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int3, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertEquals("H.mm.ss z", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      String string2 = "#9-a#Bd<~c%f1YG1;B";
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      //  // Unstable assertion: assertNotNull(zoneInfo1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string2));
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string0, string2);
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo1);
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string2, (TimeZone) zoneInfo1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      
      int int1 = 4597;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int1, int1, int0);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=4597,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4597,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4597,HOUR_OF_DAY=4597,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertFalse(int0 == int1);
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=4597,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4597,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4597,HOUR_OF_DAY=4597,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("\u4E0B\u534801\u664200\u520600\u79D2 GMT", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      int int1 = 4597;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int1, int1, int0);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=4597,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4597,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4597,HOUR_OF_DAY=4597,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
      assertNotNull(attributedCharacterIterator0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(14, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(14, attributedCharacterIterator0.getRunLimit());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=4597,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4597,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=4597,HOUR_OF_DAY=4597,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       
//       String string0 = "org.apache.commons.lang.time.FastDateFormat";
//       Locale locale0 = Locale.forLanguageTag(string0);
//       assertNotNull(locale0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getISO3Language());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getISO3Language());
//       assertEquals("h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat1.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getISO3Language());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals("h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(18, fastDateFormat1.getMaxLengthEstimate());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       int int0 = 0;
//       TimeZone timeZone0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
//       
//       // Undeclared exception!
//       try {
//         String string0 = fastDateFormat0.format((Object) timeZone0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      String string0 = ":N&Jrr'L6Xn3pK]";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = fastDateFormat0.getPattern();
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", string1);
      
      StringBuffer stringBuffer0 = new StringBuffer(string1);
      assertNotNull(stringBuffer0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(55, stringBuffer0.capacity());
      assertEquals(39, stringBuffer0.length());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", stringBuffer0.toString());
      assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      assertNotNull(fieldPosition0);
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      // Undeclared exception!
      try {
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) string0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
      }
  }

  @Test(timeout = 4000)
  public void test07() {}
//   @Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       
//       long long0 = 2153L;
//       Long long1 = new Long(long0);
//       assertTrue(long1.equals((Object)long0));
//       assertEquals(2153L, (long)long1);
//       
//       String string0 = fastDateFormat0.format((Object) long1);
//       assertNotNull(string0);
//       assertTrue(long1.equals((Object)long0));
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("01/01/70 0.00", string0);
//   }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       int int0 = 0;
//       String string0 = ":N&Jrr'L6Xn3pK]";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.UK;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GBR", locale0.getISO3Country());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
//       assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GBR", locale0.getISO3Country());
//       
//       String string1 = fastDateFormat0.getPattern();
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
//       assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", string1);
//       
//       int int1 = 0;
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int1);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(45, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat1.getPattern());
//       
//       int int2 = 0;
//       int int3 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int2, int1, int2, int2, int2, int3);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       StringBuffer stringBuffer0 = new StringBuffer(string1);
//       assertNotNull(stringBuffer0);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
//       assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals(39, stringBuffer0.length());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", stringBuffer0.toString());
//       assertEquals(55, stringBuffer0.capacity());
//       
//       int int4 = (-1);
//       MockDate mockDate0 = new MockDate(int3, int4, int0);
//       assertNotNull(mockDate0);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int3);
//       assertFalse(int0 == int4);
//       assertFalse(int3 == int4);
//       assertEquals("Thu Nov 30 00:00:00 GMT 1899", mockDate0.toString());
//       
//       StringBuffer stringBuffer1 = fastDateFormat1.format((Date) mockDate0, stringBuffer0);
//       assertNotNull(stringBuffer1);
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int0);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int3);
//       assertFalse(int0 == int4);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int1 == int4);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int3 == int4);
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(string1, string0);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertNotSame(string0, string1);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
//       assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Thu Nov 30 00:00:00 GMT 1899", mockDate0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT", stringBuffer1.toString());
//       assertEquals(112, stringBuffer1.capacity());
//       assertEquals(75, stringBuffer1.length());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals(45, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat1.getPattern());
//       assertEquals(112, stringBuffer0.capacity());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT", stringBuffer0.toString());
//       assertEquals(75, stringBuffer0.length());
//       
//       StringBuffer stringBuffer2 = stringBuffer0.insert(int3, (long) int1);
//       assertNotNull(stringBuffer2);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int0 == int4);
//       assertFalse(int3 == int4);
//       assertFalse(int1 == int4);
//       assertFalse(string0.equals((Object)string1));
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(string1, string0);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertNotSame(string0, string1);
//       assertEquals(76, stringBuffer2.length());
//       assertEquals("0EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT", stringBuffer2.toString());
//       assertEquals(112, stringBuffer2.capacity());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
//       assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals(112, stringBuffer0.capacity());
//       assertEquals("0EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT", stringBuffer0.toString());
//       assertEquals(76, stringBuffer0.length());
//       
//       StringBuffer stringBuffer3 = stringBuffer2.append(stringBuffer0);
//       assertNotNull(stringBuffer3);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int0 == int4);
//       assertFalse(int3 == int4);
//       assertFalse(int1 == int4);
//       assertFalse(string0.equals((Object)string1));
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer3);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(string1, string0);
//       assertSame(stringBuffer0, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertNotSame(string0, string1);
//       assertEquals(152, stringBuffer2.length());
//       assertEquals("0EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT0EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT", stringBuffer2.toString());
//       assertEquals(226, stringBuffer2.capacity());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
//       assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals(152, stringBuffer0.length());
//       assertEquals("0EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT0EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT", stringBuffer0.toString());
//       assertEquals(226, stringBuffer0.capacity());
//       assertEquals(152, stringBuffer3.length());
//       assertEquals(226, stringBuffer3.capacity());
//       assertEquals("0EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT0EEEE, d MMMM yyyy HH:mm:ss 'o''clock' zgioved\u00EC 30 novembre 1899 0.00.00 GMT", stringBuffer3.toString());
//   }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       Locale locale0 = Locale.KOREA;
//       assertNotNull(locale0);
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("ko_KR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("KR", locale0.getCountry());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("KOR", locale0.getISO3Country());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("ko_KR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       
//       DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getIntegerInstance();
//       assertNotNull(decimalFormat0);
//       assertEquals("#,##0", decimalFormat0.toPattern());
//       assertEquals("", decimalFormat0.getPositivePrefix());
//       assertEquals("", decimalFormat0.getNegativeSuffix());
//       assertEquals(0, decimalFormat0.getMinimumFractionDigits());
//       assertEquals(true, decimalFormat0.isGroupingUsed());
//       assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
//       assertEquals("", decimalFormat0.getPositiveSuffix());
//       assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
//       assertEquals("#.##0", decimalFormat0.toLocalizedPattern());
//       assertEquals(1, decimalFormat0.getMultiplier());
//       assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
//       assertEquals("-", decimalFormat0.getNegativePrefix());
//       assertEquals(false, decimalFormat0.isParseBigDecimal());
//       assertEquals(0, decimalFormat0.getMaximumFractionDigits());
//       assertEquals(true, decimalFormat0.isParseIntegerOnly());
//       assertEquals(3, decimalFormat0.getGroupingSize());
//       assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string0 = "WN";
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals("GMT", zoneInfo1.getID());
//       
//       String string1 = "lehE)N]+";
//       assertNotSame(string1, string0);
//       
//       int int0 = 2;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo1);
//       assertNotNull(fastDateFormat0);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals(24, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("d-MMM-yyyy H.mm.ss", fastDateFormat0.getPattern());
//       
//       int int1 = 0;
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: N
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "x63Ag:k|";
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "9ZvG0^4f3y{34J|I%z\\";
      int int0 = 0;
      int int1 = 1;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int1, int0, int0, int0, int0, int1);
      assertNotNull(simpleTimeZone0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("9ZvG0^4f3y{34J|I%z\\", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=9ZvG0^4f3y{34J|I%z\\,offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=1,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "h*.`Z> @[$_uWS}A";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "yrUD+yF6#(:PW2G|I(";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "qw]AG$[";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("qw]AG$[", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        List list0 = fastDateFormat0.parsePattern();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "org.apache.commons.lang.time.FastDateFormat";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "<lmXg";
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "j7b(";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "i2Nnb,=UL?j_|o";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "'r#>'?>gl>OZ<)";
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "f7Lf /A$;y,B'WRR6";
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "a\\e:!";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "-)~cW5 h[7^";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "h*.`Zb> \\@[$WW}A";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "KFWYIi}yi#E";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "XeTPmk301q[N[$";
      int int0 = 60;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=XeTPmk301q[N[$,offset=60,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(60, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("XeTPmk301q[N[$", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "V";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "Unknown class: ";
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string0 = "SD";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("SD", fastDateFormat0.getPattern());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertNotNull(fastDateFormat1);
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat1.getPattern());
      assertEquals(45, fastDateFormat1.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "wd<Q}kfz!o}zAU&kYo";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "8EdPj' k>a<oaqJU";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "?O.0xB=fbgET-/";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "FL5K\"&";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("\u4E0A\u534812\u664200\u520600\u79D2 GMT", string0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = "FastDateFormat[";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test35() {}
//   @Test(timeout = 4000)
//   public void test35()  throws Throwable  {
//       String string0 = "Dn`_TSDX2";
//       SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
//       assertNotNull(simpleDateFormat0);
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("dd/MM/yy H.mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd/MM/yy H.mm", simpleDateFormat0.toPattern());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       assertEquals("dd/MM/yy H.mm", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("dd/MM/yy H.mm", simpleDateFormat0.toPattern());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: n
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "w=C";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = ".k0AKU8i5A;3";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test39() {}
//   @Test(timeout = 4000)
//   public void test39()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("dd/MM/yy H.mm", fastDateFormat0.getPattern());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat1);
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(16, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("dd/MM/yy H.mm", fastDateFormat1.getPattern());
//   }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       int int0 = 0;
//       TimeZone timeZone0 = null;
//       String string0 = "EEEE d MMMM yyyy";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       TimeZone.setDefault(timeZone0);
//       int int1 = 0;
//       int int2 = 0;
//       Object object0 = null;
//       int int3 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       boolean boolean0 = mockGregorianCalendar0.isLeapYear(int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertTrue(boolean0);
//       
//       String string1 = "#9-a#Bd<~c%f1YG1;B";
//       assertNotSame(string1, string0);
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo1);
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string0, string1);
//       assertSame(zoneInfo0, zoneInfo1);
//       assertSame(zoneInfo1, zoneInfo0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("GMT", zoneInfo1.getID());
//       
//       System.setCurrentTimeMillis((long) int1);
//       int int4 = 0;
//       int int5 = 1310;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int1, int0, int0, int3, int2, int0, int4, int4, int5);
//       assertNotNull(simpleTimeZone0);
//       assertFalse(int4 == int5);
//       assertFalse(int3 == int5);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int0);
//       assertFalse(int1 == int5);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int2 == int5);
//       assertFalse(int0 == int5);
//       assertNotSame(string0, string1);
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("EEEE d MMMM yyyy", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy,offset=0,dstSavings=1310,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertFalse(int4 == int5);
//       assertFalse(int3 == int5);
//       assertFalse(int5 == int2);
//       assertFalse(int5 == int4);
//       assertFalse(int5 == int3);
//       assertFalse(int5 == int1);
//       assertFalse(int5 == int0);
//       assertFalse(int1 == int5);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int2 == int5);
//       assertFalse(int0 == int5);
//       assertNotSame(string0, string1);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("EEEE d MMMM yyyy", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy,offset=0,dstSavings=1310,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//   }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.KOREAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.toString());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.getLanguage());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.toString());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.getLanguage());
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.toString());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals(19, int1);
//       
//       String string0 = fastDateFormat0.toString();
//       assertNotNull(string0);
//       assertFalse(int0 == int1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE", fastDateFormat0.getPattern());
//       assertEquals(19, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.toString());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.getLanguage());
//       assertEquals("FastDateFormat[yyyy'\uB144' M'\uC6D4' d'\uC77C' EEEE]", string0);
//       
//       int int2 = (-1893);
//       assertFalse(int2 == int1);
//       
//       Locale locale1 = null;
//       Locale locale2 = Locale.GERMAN;
//       assertNotNull(locale2);
//       assertFalse(locale2.equals((Object)locale0));
//       assertNotSame(locale2, locale0);
//       assertEquals("deu", locale2.getISO3Language());
//       assertEquals("", locale2.getVariant());
//       assertEquals("de", locale2.getLanguage());
//       assertEquals("", locale2.getCountry());
//       assertEquals("", locale2.getISO3Country());
//       assertEquals("de", locale2.toString());
//       
//       String string1 = "?KzpSY";
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat1.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(29, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: p
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z";
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      
      int int0 = 1383;
      int int1 = (-1900);
      boolean boolean0 = fastDateFormat0.equals((Object) string0);
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(boolean0);
      
      int int2 = 0;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat1);
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat1.getPattern());
      assertEquals(30, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0, int0, int2);
      assertNotNull(mockGregorianCalendar0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1383,MONTH=-1900,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1383,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1383,HOUR_OF_DAY=1383,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      StringBuffer stringBuffer0 = null;
      String string1 = "";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        StringBuffer stringBuffer1 = fastDateFormat0.applyRules(mockGregorianCalendar0, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       Locale locale0 = Locale.GERMAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("de", locale0.getLanguage());
//       
//       String string0 = "k~_@(";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("k~_@(", fastDateFormat0.getPattern());
//       
//       String string1 = locale0.toLanguageTag();
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", string1);
//       
//       int int0 = 0;
//       int int1 = 5959;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int1, int1, int1);
//       assertNotNull(mockGregorianCalendar0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=5959,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5959,HOUR_OF_DAY=5959,MINUTE=5959,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       
//       StringBuffer stringBuffer0 = new StringBuffer();
//       assertNotNull(stringBuffer0);
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertNotNull(date0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("Fri Jan 01 10:19:00 GMT 17", date0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61630810860000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=17,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=19,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       FieldPosition fieldPosition0 = new FieldPosition(int1);
//       assertNotNull(fieldPosition0);
//       assertFalse(int1 == int0);
//       assertEquals(5959, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=5959,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       
//       Format.Field format_Field0 = fieldPosition0.getFieldAttribute();
//       assertNull(format_Field0);
//       assertFalse(int1 == int0);
//       assertEquals(5959, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=5959,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       
//       FieldPosition fieldPosition1 = new FieldPosition(format_Field0, int0);
//       assertNotNull(fieldPosition1);
//       assertFalse(fieldPosition0.equals((Object)fieldPosition1));
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(fieldPosition1.equals((Object)fieldPosition0));
//       assertNotSame(fieldPosition0, fieldPosition1);
//       assertNotSame(fieldPosition1, fieldPosition0);
//       assertEquals(5959, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=5959,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(0, fieldPosition1.getEndIndex());
//       assertEquals(0, fieldPosition1.getBeginIndex());
//       assertEquals(0, fieldPosition1.getField());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition1.toString());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Object) date0, stringBuffer0, fieldPosition1);
//       assertNotNull(stringBuffer1);
//       assertFalse(fieldPosition0.equals((Object)fieldPosition1));
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(fieldPosition1.equals((Object)fieldPosition0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(fieldPosition0, fieldPosition1);
//       assertNotSame(fieldPosition1, fieldPosition0);
//       assertNotSame(string0, string1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertEquals(5959, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=5959,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals("Fri Jan 01 10:19:00 GMT 17", date0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61630810860000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=17,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=19,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(0, fieldPosition1.getEndIndex());
//       assertEquals(0, fieldPosition1.getBeginIndex());
//       assertEquals(0, fieldPosition1.getField());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition1.toString());
//       assertEquals(6, stringBuffer1.length());
//       assertEquals("10~_@(", stringBuffer1.toString());
//       assertEquals(16, stringBuffer1.capacity());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("k~_@(", fastDateFormat0.getPattern());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals("10~_@(", stringBuffer0.toString());
//       assertEquals(6, stringBuffer0.length());
//       
//       StringBuffer stringBuffer2 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertNotNull(stringBuffer2);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string0, string1);
//       assertSame(stringBuffer2, stringBuffer0);
//       assertSame(stringBuffer2, stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61630810860000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=17,MONTH=0,WEEK_OF_YEAR=53,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=19,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("k~_@(", fastDateFormat0.getPattern());
//       assertEquals(16, stringBuffer2.capacity());
//       assertEquals("10~_@(10~_@(", stringBuffer2.toString());
//       assertEquals(12, stringBuffer2.length());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals("10~_@(10~_@(", stringBuffer0.toString());
//       assertEquals(12, stringBuffer0.length());
//       
//       String string2 = fastDateFormat0.toString();
//       assertNotNull(string2);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("k~_@(", fastDateFormat0.getPattern());
//       assertEquals("FastDateFormat[k~_@(]", string2);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("k~_@(", fastDateFormat0.getPattern());
//       
//       int int2 = 3673;
//       int int3 = (-1134);
//       boolean boolean0 = mockGregorianCalendar0.equals((Object) format_Field0);
//       assertFalse(fieldPosition0.equals((Object)fieldPosition1));
//       assertFalse(int0 == int1);
//       assertFalse(int0 == int3);
//       assertFalse(int0 == int2);
//       assertFalse(int1 == int3);
//       assertFalse(int1 == int2);
//       assertFalse(int1 == int0);
//       assertNotSame(fieldPosition0, fieldPosition1);
//       assertEquals(5959, fieldPosition0.getField());
//       assertEquals("java.text.FieldPosition[field=5959,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61630810860000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=17,MONTH=0,WEEK_OF_YEAR=53,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=19,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(boolean0);
//       
//       int int4 = 0;
//       boolean boolean1 = fastDateFormat0.equals((Object) string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertTrue(boolean1 == boolean0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("k~_@(", fastDateFormat0.getPattern());
//       assertFalse(boolean1);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int4, int4);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(int4 == int2);
//       assertFalse(int4 == int1);
//       assertFalse(int4 == int3);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertEquals(45, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat1.getPattern());
//       
//       StringBuffer stringBuffer3 = fastDateFormat0.format((long) int2, stringBuffer0);
//       assertNotNull(stringBuffer3);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int4);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int3);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertSame(stringBuffer3, stringBuffer2);
//       assertSame(stringBuffer3, stringBuffer1);
//       assertSame(stringBuffer3, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer2);
//       assertSame(stringBuffer0, stringBuffer3);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("k~_@(", fastDateFormat0.getPattern());
//       assertEquals(18, stringBuffer3.length());
//       assertEquals(34, stringBuffer3.capacity());
//       assertEquals("10~_@(10~_@(24~_@(", stringBuffer3.toString());
//       assertEquals(18, stringBuffer0.length());
//       assertEquals(34, stringBuffer0.capacity());
//       assertEquals("10~_@(10~_@(24~_@(", stringBuffer0.toString());
//       
//       int int5 = (-442);
//       ParsePosition parsePosition0 = null;
//       // Undeclared exception!
//       try {
//         Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = ">wZ<";
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      
      String string1 = locale0.getVariant();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", string1);
      
      int int0 = 2079;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertNotNull(fastDateFormat0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(">wZ<", fastDateFormat0.getPattern());
      
      String string2 = fastDateFormat0.format((long) int0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(">wZ<", fastDateFormat0.getPattern());
      assertEquals(">1+0000<", string2);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(">wZ<", fastDateFormat0.getPattern());
      
      ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(zoneInfo1, zoneInfo0);
      assertEquals("GMT", zoneInfo1.getID());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = ";mm.@-";
      int int0 = 0;
      String string1 = "~Z!u|e,]";
      assertNotSame(string1, string0);
      
      String string2 = "M|N?m?";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string2);
      assertNotNull(zoneInfo0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      
      String string3 = "CelB3xLm}m";
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string0, locale0);
      assertNotNull(simpleDateFormat0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals(";mm.@-", simpleDateFormat0.toPattern());
      assertEquals(";mm.@-", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      
      ZoneInfo zoneInfo1 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertNotNull(zoneInfo1);
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals(";mm.@-", simpleDateFormat0.toPattern());
      assertEquals(";mm.@-", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo1, locale0);
      assertNotNull(fastDateFormat0);
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(";mm.@-", simpleDateFormat0.toPattern());
      assertEquals(";mm.@-", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      
      String string4 = "Illegal pattern component: ";
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string4, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "k~_@(";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("k~_@(", fastDateFormat0.getPattern());
      assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
      
      String string1 = fastDateFormat0.toString();
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("k~_@(", fastDateFormat0.getPattern());
      assertEquals(8, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("FastDateFormat[k~_@(]", string1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "J4M9!8PpiNN]h;mbH";
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test(timeout = 4000)
  public void test48() {}
//   @Test(timeout = 4000)
//   public void test48()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("0002\u5E7412\u670831\u65E5 \u661F\u671F\u4E09", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      
      Locale locale1 = fastDateFormat0.getLocale();
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test51() {}
//   @Test(timeout = 4000)
//   public void test51()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "EEEE d MMMM yyyy";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 0;
      String string0 = ":N&Jrr'L6Xn3pK]";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", fastDateFormat0.getPattern());
      assertEquals(51, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53() {}
//   @Test(timeout = 4000)
//   public void test53()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//   }

  @Test(timeout = 4000)
  public void test54() {}
//   @Test(timeout = 4000)
//   public void test54()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }
}
