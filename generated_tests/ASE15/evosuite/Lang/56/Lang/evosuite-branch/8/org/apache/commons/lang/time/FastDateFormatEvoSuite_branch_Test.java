/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:46:17 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "The validated expression is false";
      int int0 = 0;
      Locale locale0 = Locale.JAPANESE;
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      String string1 = "org.apache.commons.lang.tim .FastDateFormat$TwoDigitMonthField";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      String string2 = "\\#";
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string2, locale0);
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:46:06 GMT 1934", date0.toString());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) string2, int0, int0);
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals("", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals(16, stringBuffer1.capacity());
      //  // Unstable assertion: assertEquals(0, stringBuffer1.length());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(stringBuffer1);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      
      StringBuffer stringBuffer2 = fastDateFormat0.format(date0, stringBuffer1);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(11, stringBuffer2.length());
      //  // Unstable assertion: assertEquals(16, stringBuffer2.capacity());
      //  // Unstable assertion: assertEquals("1934\u5E7412\u670811\u65E5", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals(11, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals("1934\u5E7412\u670811\u65E5", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:46:06 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("1934\u5E7412\u670811\u65E5", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals(11, stringBuffer1.length());
      //  // Unstable assertion: assertEquals(16, stringBuffer1.capacity());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer1);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer2);
      
      ParsePosition parsePosition0 = new ParsePosition(int0);
      //  // Unstable assertion: assertEquals(-1, parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals(0, parsePosition0.getIndex());
      //  // Unstable assertion: assertNotNull(parsePosition0);
      
      Object object0 = fastDateFormat0.parseObject(string1, parsePosition0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals(0, parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals(0, parsePosition0.getIndex());
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string2));
      //  // Unstable assertion: assertNull(object0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string1, string2);
      
      String string3 = fastDateFormat0.toString();
      //  // Unstable assertion: assertEquals("FastDateFormat[yyyy'\u5E74'M'\u6708'd'\u65E5']", string3);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertFalse(string3.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string3.equals((Object)string2));
      //  // Unstable assertion: assertNotNull(string3);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string0);
      //  // Unstable assertion: assertNotSame(string3, string2);
      
      int int1 = 0;
      int int2 = 0;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int2, locale0);
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string2);
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=\\#,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("\\#", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int1, int0, (TimeZone) simpleTimeZone0, locale0);
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals(35, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=\\#,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("\\#", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string3));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string3);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(int0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat3.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat3.getPattern());
      //  // Unstable assertion: assertEquals(13, fastDateFormat3.getMaxLengthEstimate());
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertTrue(fastDateFormat3.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertTrue(fastDateFormat3.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(fastDateFormat3);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat0);
      
      String string4 = "_8D>>bZ:Z";
      //  // Unstable assertion: assertFalse(string4.equals((Object)string3));
      //  // Unstable assertion: assertNotSame(string4, string0);
      //  // Unstable assertion: assertNotSame(string4, string2);
      //  // Unstable assertion: assertNotSame(string4, string3);
      //  // Unstable assertion: assertNotSame(string4, string1);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat4 = FastDateFormat.getInstance(string4, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = ".x:]ON[bQ{,;M-%Lg";
      String string1 = "kM";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
      assertFalse(string0.equals((Object)string1));
      assertNotNull(simpleTimeZone0);
      assertNotSame(string0, string1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone0, locale0);
      assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("kM", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(fastDateFormat0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      long long0 = (-1779L);
      String string2 = fastDateFormat0.format(long0);
      assertEquals("2312", string2);
      assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("kM", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "Unknown class: ";
//       int int1 = 87;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int1, int0, int1, int0, int0, int0, int1, int0, int1);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=Unknown class: ,offset=0,dstSavings=87,useDaylight=false,startYear=0,startMode=0,startMonth=87,startDay=0,startDayOfWeek=87,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=87,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("Unknown class: ", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertNotNull(simpleTimeZone0);
//       
//       int int2 = (-2570);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int2, int2, int0, int2, int0);
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=-2570,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2570,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=-2570,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotNull(mockGregorianCalendar0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=Unknown class: ,offset=0,dstSavings=87,useDaylight=false,startYear=0,startMode=0,startMonth=87,startDay=0,startDayOfWeek=87,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=87,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("Unknown class: ", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(35, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotNull(fastDateFormat0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals("Mon Oct 16 05:10:00 GMT 223", date0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-69148234200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=223,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=10,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotNull(date0);
//       
//       String string1 = fastDateFormat0.format(date0);
//       assertEquals("0223\u5E7410\u670816\u65E5 5\u664210\u520600\u79D2 GMT+00:00", string1);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=Unknown class: ,offset=0,dstSavings=87,useDaylight=false,startYear=0,startMode=0,startMonth=87,startDay=0,startDayOfWeek=87,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=87,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("Unknown class: ", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(35, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("Mon Oct 16 05:10:00 GMT 223", date0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-69148234200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=223,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=10,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(int1 == int0);
//       assertFalse(int1 == int2);
//       assertFalse(int0 == int2);
//       assertFalse(int0 == int1);
//       assertNotNull(string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//   }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = " m01'3N[";
      int int0 = 0;
      int int1 = 9;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int1);
      assertEquals(" m01'3N[", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id= m01'3N[,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(simpleTimeZone0);
      
      String string1 = "HH:mm' Uhr 'z";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0, string1);
      assertEquals(" m01'3n[", locale0.getLanguage());
      assertEquals(" m01'3n[_HH:MM' UHR 'Z", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("HH:MM' UHR 'Z", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
      assertEquals(" m01'3n[", locale0.getLanguage());
      assertEquals(" m01'3n[_HH:MM' UHR 'Z", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("HH:MM' UHR 'Z", locale0.getCountry());
      assertEquals(" m01'3N[", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id= m01'3N[,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(" m01'3N[", fastDateFormat0.getPattern());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(fastDateFormat0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      FastDateFormat fastDateFormat1 = new FastDateFormat(string1, simpleTimeZone0, locale0);
      assertEquals(" m01'3n[", locale0.getLanguage());
      assertEquals(" m01'3n[_HH:MM' UHR 'Z", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("HH:MM' UHR 'Z", locale0.getCountry());
      assertEquals(" m01'3N[", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id= m01'3N[,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat1.getPattern());
      assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(fastDateFormat1);
      assertNotSame(string1, string0);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
      assertFalse(boolean0);
      assertEquals(" m01'3n[", locale0.getLanguage());
      assertEquals(" m01'3n[_HH:MM' UHR 'Z", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("HH:MM' UHR 'Z", locale0.getCountry());
      assertEquals(" m01'3N[", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id= m01'3N[,offset=0,dstSavings=9,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("HH:mm' Uhr 'z", fastDateFormat1.getPattern());
      assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(" m01'3N[", fastDateFormat0.getPattern());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int[] intArray0 = new int[5];
//       boolean boolean0 = fastDateFormat0.equals((Object) intArray0);
//       assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
//       assertFalse(boolean0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//   }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       String string0 = ".x:]ON[bQ{,;M-%Lg";
//       Locale locale0 = null;
//       int int0 = 0;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertNotNull(simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0, locale0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(35, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals("0002\u5E7412\u670831\u65E5 0\u664200\u520600\u79D2 GMT+00:00", string1);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(35, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//   }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       Object object0 = null;
//       // Undeclared exception!
//       try {
//         String string0 = fastDateFormat0.format(object0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.JAPAN;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, timeZone0, locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      Long long0 = new Long((long) int0);
      assertEquals(0L, (long)long0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
      assertEquals(9, attributedCharacterIterator0.getEndIndex());
      assertEquals(9, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      assertNotNull(attributedCharacterIterator0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(fastDateFormat0);
      
      // Undeclared exception!
      try {
        AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) fastDateFormat0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: org.apache.commons.lang.time.FastDateFormat
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE d MMMM yyyy HH' h 'mm z", fastDateFormat0.getPattern());
      assertEquals(41, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = null;
      FieldPosition fieldPosition0 = null;
      // Undeclared exception!
      try {
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "~]~=xx]1SnIG";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: xx
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = ">6vF";
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "uVb>5 a|B+oJXsA^c";
      Locale locale0 = new Locale(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("uvb>5 a|b+ojxsa^c", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("uvb>5 a|b+ojxsa^c", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "E|rMLJf$Z4";
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "q;(tm^*$qQyb";
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "\\\"p~j=#}m>33";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "org.apache.commons.lang.time.FastDateFormat$UnpaddedNumberField";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "n2-v~D_1xOn.mY";
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "l\"{pZ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("l\"{pz", locale0.getLanguage());
      assertEquals("l\"{pz_L\"{PZ_l\"{pZ", locale0.toString());
      assertEquals("l\"{pZ", locale0.getVariant());
      assertEquals("L\"{PZ", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "j$AyXszsO<kjA";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "k@+i_fe.6(/L<yf`=";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "gjEhGOJS~5,NG\\,\\:dV-";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "f-NK+=6PxWbUeAPr";
      int int0 = 8;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=8,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=8,SECOND=8,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=8,MONTH=8,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=8,SECOND=8,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "es,X-.RR=j";
      int int0 = (-809);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(-809, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("es,X-.RR=j", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=es,X-.RR=j,offset=-809,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "c)";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "`YGMDpvqy";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "Unknown class: ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "The validated object is null";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "ZyRA*Uk^'g*1Gjax";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "Q'U8vFnY/nX5bT";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = "W+@P";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 932;
      String string0 = "kO(VI@[!_g";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=kO(VI@[!_g,offset=932,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(932, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("kO(VI@[!_g", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = "7NEZSo*?2XRt=W('|L";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "L5'n>\\'J6-fmn";
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "JMv!1#Sg> @SMN";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=Illegal pattern component: ,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Illegal pattern component: ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "E\"94Cl] n";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "BHL!ta=ybbbHh";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "$Zy}A*Uk^/*GGBx";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
      assertEquals("dd/MM/yy HH:mm", fastDateFormat1.getPattern());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertNotNull(fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "The validated expression is false";
      int int0 = 0;
      Locale locale0 = Locale.JAPANESE;
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertNotNull(locale0);
      
      String string1 = "org.apache.commons.lang.tim .FastDateFormat$TwoDigitMonthField";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      String string2 = "\\#";
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string2, locale0);
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertEquals("Tue Dec 11 18:46:06 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("\\#", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) string2, int0, int0);
      //  // Unstable assertion: assertEquals(0, stringBuffer1.length());
      //  // Unstable assertion: assertEquals(16, stringBuffer1.capacity());
      //  // Unstable assertion: assertEquals("", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals(16, stringBuffer0.capacity());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      
      ParsePosition parsePosition0 = new ParsePosition(int0);
      //  // Unstable assertion: assertEquals(-1, parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals(0, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertNotNull(parsePosition0);
      
      int int1 = 0;
      int int2 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string2);
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=\\#,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("\\#", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int1, int0, (TimeZone) simpleTimeZone0, locale0);
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(35, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("jpn", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("ja", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("ja", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getCountry());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=\\#,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("\\#", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0);
      //  // Unstable assertion: assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      
      String string3 = "_8D>>bZ:Z";
      //  // Unstable assertion: assertNotSame(string3, string0);
      //  // Unstable assertion: assertNotSame(string3, string1);
      //  // Unstable assertion: assertNotSame(string3, string2);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string3, locale0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test42() {}
//   @Test(timeout = 4000)
//   public void test42()  throws Throwable  {
//       String string0 = null;
//       DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
//       assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
//       assertNotNull(dateFormatSymbols0);
//       
//       double double0 = (-1.0);
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       String string0 = ".x:]ON[bQ{,;M-%Lg";
//       Locale locale0 = null;
//       String string1 = "kM";
//       assertNotSame(string1, string0);
//       
//       int int0 = 2;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(simpleTimeZone0);
//       assertNotSame(string0, string1);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0, locale0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy/MM/dd H:mm:ss", fastDateFormat0.getPattern());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(fastDateFormat0);
//       assertNotSame(string0, string1);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0);
//       assertEquals("yyyy/MM/dd H:mm:ss", fastDateFormat1.getPattern());
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(fastDateFormat1);
//       assertSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(string0, string1);
//       
//       int int1 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) simpleTimeZone0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(mockGregorianCalendar0);
//       assertNotSame(string0, string1);
//       
//       SimpleTimeZone simpleTimeZone1 = (SimpleTimeZone)mockGregorianCalendar0.getTimeZone();
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(2, simpleTimeZone1.getRawOffset());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone1.getID());
//       assertEquals(0, simpleTimeZone1.getDSTSavings());
//       assertEquals(false, simpleTimeZone1.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(simpleTimeZone1);
//       assertSame(simpleTimeZone0, simpleTimeZone1);
//       assertNotSame(string0, string1);
//       assertSame(simpleTimeZone1, simpleTimeZone0);
//       
//       Locale locale1 = Locale.FRANCE;
//       assertEquals("FR", locale1.getCountry());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("FRA", locale1.getISO3Country());
//       assertEquals("fr_FR", locale1.toString());
//       assertNotNull(locale1);
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone1, locale1);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(2, simpleTimeZone1.getRawOffset());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone1.getID());
//       assertEquals(0, simpleTimeZone1.getDSTSavings());
//       assertEquals(false, simpleTimeZone1.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("kM", fastDateFormat2.getPattern());
//       assertEquals(6, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("FR", locale1.getCountry());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("FRA", locale1.getISO3Country());
//       assertEquals("fr_FR", locale1.toString());
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(fastDateFormat2);
//       assertSame(simpleTimeZone0, simpleTimeZone1);
//       assertNotSame(string0, string1);
//       assertSame(simpleTimeZone1, simpleTimeZone0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(string1, string0);
//       
//       boolean boolean0 = fastDateFormat2.getTimeZoneOverridesCalendar();
//       assertTrue(boolean0);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(2, simpleTimeZone1.getRawOffset());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone1.getID());
//       assertEquals(0, simpleTimeZone1.getDSTSavings());
//       assertEquals(false, simpleTimeZone1.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("kM", fastDateFormat2.getPattern());
//       assertEquals(6, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("FR", locale1.getCountry());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("FRA", locale1.getISO3Country());
//       assertEquals("fr_FR", locale1.toString());
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(string1.equals((Object)string0));
//       assertSame(simpleTimeZone0, simpleTimeZone1);
//       assertNotSame(string0, string1);
//       assertSame(simpleTimeZone1, simpleTimeZone0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(string1, string0);
//       
//       long long0 = 0L;
//       String string2 = fastDateFormat2.format(long0);
//       assertEquals("241", string2);
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(2, simpleTimeZone1.getRawOffset());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone1.getID());
//       assertEquals(0, simpleTimeZone1.getDSTSavings());
//       assertEquals(false, simpleTimeZone1.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals("kM", fastDateFormat2.getPattern());
//       assertEquals(6, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals("FR", locale1.getCountry());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("FRA", locale1.getISO3Country());
//       assertEquals("fr_FR", locale1.toString());
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(string2.equals((Object)string0));
//       assertFalse(string2.equals((Object)string1));
//       assertNotNull(string2);
//       assertSame(simpleTimeZone0, simpleTimeZone1);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertSame(simpleTimeZone1, simpleTimeZone0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(string1, string0);
//       assertNotSame(string1, string2);
//       assertNotSame(string2, string0);
//       assertNotSame(string2, string1);
//       
//       FastDateFormat fastDateFormat3 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0, locale0);
//       assertEquals("yyyy/MM/dd H:mm:ss", fastDateFormat3.getPattern());
//       assertEquals(21, fastDateFormat3.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat3.getTimeZoneOverridesCalendar());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(fastDateFormat3);
//       assertSame(fastDateFormat3, fastDateFormat1);
//       assertSame(fastDateFormat3, fastDateFormat0);
//       assertNotSame(fastDateFormat3, fastDateFormat2);
//       assertSame(simpleTimeZone0, simpleTimeZone1);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       
//       SimpleTimeZone simpleTimeZone2 = (SimpleTimeZone)mockGregorianCalendar0.getTimeZone();
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone2.toString());
//       assertEquals(false, simpleTimeZone2.useDaylightTime());
//       assertEquals(0, simpleTimeZone2.getDSTSavings());
//       assertEquals(2, simpleTimeZone2.getRawOffset());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone2.getID());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertFalse(int0 == int1);
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(simpleTimeZone2);
//       assertSame(simpleTimeZone0, simpleTimeZone1);
//       assertSame(simpleTimeZone0, simpleTimeZone2);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertSame(simpleTimeZone2, simpleTimeZone1);
//       assertSame(simpleTimeZone2, simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat4 = new FastDateFormat(string0, simpleTimeZone2, locale0);
//       assertEquals(0, fastDateFormat4.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat4.getTimeZoneOverridesCalendar());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", fastDateFormat4.getPattern());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone2.toString());
//       assertEquals(false, simpleTimeZone2.useDaylightTime());
//       assertEquals(0, simpleTimeZone2.getDSTSavings());
//       assertEquals(2, simpleTimeZone2.getRawOffset());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone2.getID());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=322,ZONE_OFFSET=2,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(fastDateFormat4);
//       assertNotSame(fastDateFormat4, fastDateFormat3);
//       assertNotSame(fastDateFormat4, fastDateFormat2);
//       assertNotSame(fastDateFormat4, fastDateFormat1);
//       assertNotSame(fastDateFormat4, fastDateFormat0);
//       assertSame(simpleTimeZone0, simpleTimeZone1);
//       assertSame(simpleTimeZone0, simpleTimeZone2);
//       assertNotSame(string0, string2);
//       assertNotSame(string0, string1);
//       assertSame(simpleTimeZone2, simpleTimeZone1);
//       assertSame(simpleTimeZone2, simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat5 = FastDateFormat.getDateInstance(int0);
//       assertEquals("yyyy/MM/dd", fastDateFormat5.getPattern());
//       assertEquals(10, fastDateFormat5.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat5.getTimeZoneOverridesCalendar());
//       assertFalse(int0 == int1);
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat3));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat4));
//       assertFalse(fastDateFormat5.equals((Object)fastDateFormat0));
//       assertNotNull(fastDateFormat5);
//       assertNotSame(fastDateFormat5, fastDateFormat3);
//       assertNotSame(fastDateFormat5, fastDateFormat1);
//       assertNotSame(fastDateFormat5, fastDateFormat2);
//       assertNotSame(fastDateFormat5, fastDateFormat4);
//       assertNotSame(fastDateFormat5, fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = " >yX? ~V//QB0h>Z9";
      int int0 = 0;
      int int1 = (-3374);
      int int2 = 1;
      int int3 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int1, int2, int3, int3, int2);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-3374,MONTH=-3374,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-3374,MONTH=-3374,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-3374,MONTH=-3374,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(fastDateFormat0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)fastDateFormat0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-3374,MONTH=-3374,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNotNull(zoneInfo1);
      assertSame(zoneInfo0, zoneInfo1);
      assertSame(zoneInfo1, zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "Z";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertEquals("Z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      int int0 = 0;
      int int1 = 0;
      MockDate mockDate0 = new MockDate(int0, int1, int1);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      boolean boolean0 = false;
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = fastDateFormat0.format((Date) mockDate0);
      assertEquals("+0000", string1);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals("Z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = FastDateFormat.getTimeZoneDisplay(zoneInfo0, boolean0, int1, locale0);
      assertEquals("GMT", string2);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      long long0 = 0L;
      StringBuffer stringBuffer0 = null;
      String string3 = " m01'tN[";
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      
      String string4 = "Q#B2^K0ubh&0;=`";
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      
      Locale locale1 = new Locale(string4, string4);
      assertEquals("Q#B2^K0UBH&0;=`", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("q#b2^k0ubh&0;=`", locale1.getLanguage());
      assertEquals("q#b2^k0ubh&0;=`_Q#B2^K0UBH&0;=`", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int1, locale1);
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat1.getPattern());
      assertEquals(31, fastDateFormat1.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("Q#B2^K0UBH&0;=`", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("q#b2^k0ubh&0;=`", locale1.getLanguage());
      assertEquals("q#b2^k0ubh&0;=`_Q#B2^K0UBH&0;=`", locale1.toString());
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(locale1, locale0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      
      int int2 = (-1646);
      int int3 = (-2089);
      int int4 = (-3066);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int2, int3, int4);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1646,MONTH=-2089,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-3066,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertNotNull(mockGregorianCalendar0);
      
      String string5 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
      assertEquals("+0000", string5);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-119869891200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1830,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=9,DAY_OF_YEAR=190,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertNotNull(string5);
      assertNotSame(string5, string3);
      assertNotSame(string5, string2);
      assertNotSame(string5, string1);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      
      String string6 = "";
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotSame(string6, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string2);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      
      Locale locale2 = Locale.KOREAN;
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ko", locale2.toString());
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string1, locale2);
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ko", locale2.toString());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals("+0000", fastDateFormat2.getPattern());
      assertEquals(5, fastDateFormat2.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat2.getTimeZoneOverridesCalendar());
      assertEquals("Z", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string5));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string6));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
      assertNotNull(fastDateFormat2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string6);
      assertNotSame(string1, string5);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(fastDateFormat2, fastDateFormat1);
      assertNotSame(fastDateFormat2, fastDateFormat0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string5);
      assertNotSame(string0, string4);
      assertNotSame(string0, string6);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(fastDateFormat0, fastDateFormat2);
      
      Locale locale3 = Locale.CHINA;
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zh_CN", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("CHN", locale3.getISO3Country());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("CN", locale3.getCountry());
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      
      FastDateFormat fastDateFormat3 = FastDateFormat.getTimeInstance(int1, locale3);
      assertEquals(false, fastDateFormat3.getTimeZoneOverridesCalendar());
      assertEquals(16, fastDateFormat3.getMaxLengthEstimate());
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat3.getPattern());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zh_CN", locale3.toString());
      assertEquals("", locale3.getVariant());
      assertEquals("CHN", locale3.getISO3Country());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("CN", locale3.getCountry());
      assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
      assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
      assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(fastDateFormat3);
      assertNotSame(fastDateFormat3, fastDateFormat2);
      assertNotSame(fastDateFormat3, fastDateFormat0);
      assertNotSame(fastDateFormat3, fastDateFormat1);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      
      Date date0 = null;
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = ".";
      int int0 = 0;
      TimeZone timeZone0 = null;
      int int1 = 0;
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int1, timeZone0, locale0);
      assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
      assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(fastDateFormat0);
      
      String string1 = "-{SV@J\\";
      assertNotSame(string1, string0);
      
      TimeZone timeZone1 = null;
      String string2 = "7K~";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string2, timeZone0, locale0);
      assertEquals(6, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("7K~", fastDateFormat1.getPattern());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(fastDateFormat1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      Locale locale1 = Locale.CHINESE;
      assertEquals("", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      assertSame(locale1, locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string1, timeZone1, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       String string0 = ".x:]ON[bQ{,;M-%Lg";
//       Locale locale0 = null;
//       int int0 = 2;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertNotNull(simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) simpleTimeZone0, locale0);
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("yyyy/MM/dd H:mm:ss", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string1 = fastDateFormat0.format((long) int0);
//       assertEquals("1970/01/01 0:00:00", string1);
//       assertEquals(2, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(".x:]ON[bQ{,;M-%Lg", simpleTimeZone0.getID());
//       assertEquals("java.util.SimpleTimeZone[id=.x:]ON[bQ{,;M-%Lg,offset=2,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("yyyy/MM/dd H:mm:ss", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//   }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int0 = 2298;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style 2298
         //
      }
  }

  @Test(timeout = 4000)
  public void test49() {}
//   @Test(timeout = 4000)
//   public void test49()  throws Throwable  {
//       String string0 = "+`%!t+&~gMHb`\"`>H$";
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertNotNull(parsePosition0);
//       
//       Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals(0, parsePosition0.getIndex());
//       assertNull(object0);
//   }

  @Test(timeout = 4000)
  public void test50() {}
//   @Test(timeout = 4000)
//   public void test50()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", string0);
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "$`w=GF";
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("$`w=GF", fastDateFormat0.getPattern());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test52() {}
//   @Test(timeout = 4000)
//   public void test52()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertEquals(16, int1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test(timeout = 4000)
  public void test53() {}
//   @Test(timeout = 4000)
//   public void test53()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(locale0);
//   }

  @Test(timeout = 4000)
  public void test54() {}
//   @Test(timeout = 4000)
//   public void test54()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "The validated collection contains an element not of type ";
//       int int1 = 374;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int0, int0, int1);
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("The validated collection contains an element not of type ", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=The validated collection contains an element not of type ,offset=0,dstSavings=374,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(simpleTimeZone0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("The validated collection contains an element not of type ", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("java.util.SimpleTimeZone[id=The validated collection contains an element not of type ,offset=0,dstSavings=374,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotNull(fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      String string0 = "The validated collection contains an element not of type ";
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals("The validated collection contains an element not of type ", stringBuffer0.toString());
      assertEquals(57, stringBuffer0.length());
      assertEquals(73, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat0.format((long) int0, stringBuffer0);
      assertEquals(98, stringBuffer0.length());
      assertEquals(148, stringBuffer0.capacity());
      assertEquals("The validated collection contains an element not of type Thursday, January 1, 1970 12:00:00 AM GMT", stringBuffer0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(98, stringBuffer1.length());
      assertEquals("The validated collection contains an element not of type Thursday, January 1, 1970 12:00:00 AM GMT", stringBuffer1.toString());
      assertEquals(148, stringBuffer1.capacity());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(50, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test56() {}
//   @Test(timeout = 4000)
//   public void test56()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(30, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "+`%!t+&~gMHb`\"`>H$";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
      assertEquals(14, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals(14, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("dd/MM/yy HH:mm", fastDateFormat0.getPattern());
      assertNotNull(attributedCharacterIterator0);
  }
}
