/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:43:28 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class StringUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = null;
      String string1 = "!T+!3D< /]c9";
      boolean boolean0 = StringUtils.endsWith(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "uXc=J&Ma^yV#+2k1}ffB7;0<1IR)zp";
      String string1 = null;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "GR0";
      char[] charArray0 = new char[3];
      char char0 = 'u';
      charArray0[0] = char0;
      String string1 = "yuh>=";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.repeat(string1, (int) charArray0[0]);
      assertEquals("yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=yuh>=", string2);
      assertArrayEquals(new char[] {'u', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1, (int) charArray0[1]);
      assertArrayEquals(new char[] {'u', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      boolean boolean0 = StringUtils.startsWithAny(string2, stringArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'u', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "o2";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("o2", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String[] stringArray0 = null;
      boolean boolean0 = StringUtils.startsWithAny(string1, stringArray0);
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "GR0";
      char[] charArray0 = new char[3];
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, (int) charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = ":}";
      int int0 = 8192;
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string1 = null;
      char char0 = '_';
      String string2 = StringUtils.center(string1, int1, char0);
      assertNull(string2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String[] stringArray0 = new String[2];
      boolean boolean0 = StringUtils.startsWithAny(string2, stringArray0);
      assertFalse(boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = null;
      boolean boolean0 = StringUtils.startsWith(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "<HNOJx$x/o7,";
      String string1 = null;
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      boolean boolean0 = StringUtils.startsWith(stringArray0[0], string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.startsWith(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "rg\\";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertEquals("rg\\", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = "rr:?k)m";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance(string2, string1);
      assertEquals(6, int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "Tjn7/*V";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance(stringArray0[0], string1);
      assertEquals(7, int0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "Re&q!9':L}1Nb";
      int int0 = StringUtils.getLevenshteinDistance(string0, string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "7Jnb (PaNIJ9Ia#ZR 3";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = "org.apache.commons.lang.CharUtils";
      assertNotSame(string1, string0);
      
      stringArray0[2] = stringArray0[1];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[0];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string1;
      assertNotNull(stringArray0[6]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "7Jnb (PaNIJ9Ia#ZR 3";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[1];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[1];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = stringArray0[1];
      assertNotNull(stringArray0[6]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("7Jnb (PaNIJ9Ia#ZR 3", string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "@5K{GbzY4-\":u(EEh5-";
      char char0 = 'r';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("@5K{GbzY4-\":u(EEh5-", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "7Jnb (PaNIJ9Ia#ZR 3";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "~1hPBSDo";
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("~1hpbsdo", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.difference(string0, string1);
      assertEquals("pbsdo", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "Z,v`WJ<?Uv>i1";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("Z,V`WJ<?UV>I1", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = "";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.defaultString(string2, string2);
      assertEquals("", string3);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference(string1, string3);
      assertEquals(0, int0);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "";
      String string1 = "2k";
      assertNotSame(string1, string0);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      int int0 = 0;
      char char0 = 'z';
      String string2 = StringUtils.leftPad(string1, int0, char0);
      assertEquals("2k", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.indexOfDifference(stringArray0[7], string2);
      assertEquals(0, int1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[7];
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0[4], stringArray0[2]);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "Z#]!5o3\"%ph!4//";
      Collection<Object> collection0 = null;
      char char0 = 'F';
      String string1 = StringUtils.join(collection0, char0);
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference(string1, string2);
      assertEquals(0, int0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.difference(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "^x+i7)c4x$org";
      String string1 = StringUtils.reverse(string0);
      assertEquals("gro$x4c)7i+x^", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.difference(string1, string1);
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "dMfyCakU1uPbprErEj";
      int int0 = 16;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertEquals("...akU1uPbprErEj", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      char char0 = '\"';
      String string0 = "J=";
      String string1 = StringUtils.abbreviate(string0, (int) char0);
      assertEquals("J=", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "XA;1G;z&\"";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertEquals("XA;1G;z&\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals(0, int0);
      assertNotSame(string0, string1);
      assertTrue(string0.equals((Object)string1));
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.abbreviate(string1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "R0p-sw58<:";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals(0, int0);
      
      String string1 = null;
      String string2 = StringUtils.abbreviate(string1, int0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = ", '";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty(string0, string1);
      assertEquals(", '", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "CM:sz'`*NpUr";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "+8[]c&w";
      String string1 = StringUtils.reverse(string0);
      assertEquals("w&c][8+", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase(string1);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = " is less than 0: ";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "^;^|InnSlc@xi!NJdA2";
      String string1 = StringUtils.stripStart(string0, string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isWhitespace(string1);
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = " vs ";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "4~g&FsJpDtSt";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "3D?:ok$q1A<}Kw@Ha4n";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("Minimumabbreviationwidthwithoffsetis7", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNumeric(string1);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "ggU+'qIJk[";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "!T+!3D< /]c9";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "6";
      int int0 = (-873);
      String string1 = StringUtils.leftPad(string0, int0);
      assertEquals("6", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string1);
      assertTrue(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "8";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "gJh*y+*$jEP";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = " vs ";
      int int0 = (-1483);
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals(" vs ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int1 = StringUtils.countMatches(string1, string2);
      assertEquals(0, int1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "(*+bKz>dd6[=&]@QBm";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("(*+BkZ>DD6[=&]@qbM", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.swapCase(string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "-+j9:|LBIJt)3s";
      String string1 = StringUtils.uncapitalize(string0);
      assertEquals("-+j9:|LBIJt)3s", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.capitalize(string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      String string1 = StringUtils.capitalize(string0);
      assertEquals(",0C>#@tFm\"=!h,0C>#@tFm\"=!h", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      char char0 = 'J';
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      
      String string0 = locale0.getExtension(char0);
      assertNull(string0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNull(string1);
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = null;
      Locale locale0 = null;
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "ZR4zw\"Ecx";
      int int0 = 2;
      String string1 = StringUtils.center(string0, int0, string0);
      assertEquals("ZR4zw\"Ecx", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "...";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.lastIndexOf(stringArray0[3], stringArray0[3]);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center(stringArray0[0], int0, stringArray0[0]);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "bBXgS*P9t^Mn`m\\p^";
      String string1 = null;
      int int0 = 0;
      String string2 = StringUtils.center(string1, int0, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^i^";
      int int0 = 2308;
      String string1 = StringUtils.center(string0, int0);
      assertEquals("7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^7;ci<[+{<eh--Zi^i^", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      char char0 = 'E';
      int int0 = StringUtils.indexOf(string1, char0);
      assertEquals((-1), int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.center(string0, int0);
      assertEquals("Cannot get the toString of a null identity", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "";
      int int0 = 2127;
      String string1 = StringUtils.center(string0, int0, string0);
      assertEqualsstring1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[7];
      String string2 = StringUtils.leftPad(string0, (int) charArray0[6], string1);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = null;
      char char0 = 'o';
      String string1 = StringUtils.leftPad(string0, (int) char0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "uXc=J&Ma^yV#+2k1}ffB7;0<1IR)zp";
      String string1 = null;
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[10];
      String string2 = StringUtils.leftPad(string1, int0, charArray0[1]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "*=5\"u5z>fb\"5";
      int int0 = 16;
      String string1 = StringUtils.center(string0, int0, string0);
      assertEquals("*=*=5\"u5z>fb\"5*=", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = ">+]iS";
      String string1 = "i'wla^s,Wj";
      assertNotSame(string1, string0);
      
      int int0 = 20;
      String string2 = StringUtils.center(string1, int0, string0);
      assertEquals(">+]iSi'wla^s,Wj>+]iS", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = ", '";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      char char0 = 'S';
      int int0 = StringUtils.indexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad(string0, int0, string1);
      assertEquals(", '", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = null;
      int int0 = 597;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "@5K{GbzY4-\":u(EEh5-";
      char char0 = 'r';
      int int0 = StringUtils.length(string0);
      assertEquals(19, int0);
      
      String string1 = null;
      String string2 = StringUtils.rightPad(string1, int0, char0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 2957;
      String string0 = "zn";
      String string1 = StringUtils.repeat(string0, int0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "";
      char char0 = 'f';
      String string1 = StringUtils.repeat(string0, (int) char0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "E5nw3x";
      int int0 = 1;
      String string1 = StringUtils.repeat(string0, int0);
      assertEquals("E5nw3x", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "q";
      String string1 = StringUtils.chop(string0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "-+j9:|LBIJt)3s";
      String string1 = StringUtils.chop(string0);
      assertEquals("-+j9:|LBIJt)3", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "%M'n<*:CGg?6NN&Y";
      String string1 = "Minimum abbreviation width is 4";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      String string2 = StringUtils.chomp(stringArray0[3], stringArray0[4]);
      assertEquals("%M'n<*:CGg?6NN&Y", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = null;
      char char0 = '~';
      String string1 = "'!z~<6RoXir33()";
      String string2 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string2);
      
      String string3 = StringUtils.chomp(string1, string2);
      assertEquals("'!z~<6RoXir33()", string3);
      assertSame(string3, string1);
      assertSame(string1, string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      
      String string0 = "%M'n<*:CGg?6NN&Y";
      String string1 = locale0.getScript();
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chomp(string0, string1);
      assertEquals("%M'n<*:CGg?6NN&Y", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = " vs ";
      int int0 = (-1483);
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals(" vs ", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.chomp(string2, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "8";
      String string1 = StringUtils.chomp(string0);
      assertEquals("8", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "Re&q!9':L}1Nb";
      String string1 = StringUtils.chomp(string0);
      assertEquals("Re&q!9':L}1Nb", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = ">+]iS";
      int int0 = 1241;
      int int1 = (-88);
      String string1 = StringUtils.overlay(string0, string0, int0, int1);
      assertEquals(">+]iS", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = null;
      String string1 = "E5nw3x";
      int int0 = StringUtils.indexOfAnyBut(string0, string1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.overlay(string1, string0, int0, int0);
      assertEquals("E5nw3x", string2);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "tlh^Wf7H";
      String string1 = "sMVGUA0k-=";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceChars(string0, string1, string0);
      assertEquals("tlh^Wf7H", string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      String string1 = StringUtils.stripToNull(string0);
      assertEquals(",0C>#@tFm\"=!h,0C>#@tFm\"=!h", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = "}vw>{";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.trim(string2);
      assertEquals("}vw>{", string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string4 = StringUtils.replaceChars(string3, string1, string0);
      assertEquals("}vw>{", string4);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string0, string4);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string4);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string4);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "<HNOJx$x/o7,";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string0, string0, string1);
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "";
      int int0 = 945;
      String string1 = StringUtils.leftPad(string0, int0);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.replaceChars(string1, string0, string1);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "8";
      int int0 = 2957;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.replaceChars(string1, string0, string0);
      assertEquals("", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = null;
      char char0 = '~';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars(string1, char0, char0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "*=5\"u5z>fb\"5";
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("*=5\"u5z>fb\"5", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      char char0 = '/';
      String string2 = StringUtils.replaceChars(string1, char0, char0);
      assertEquals("*=5\"u5z>fb\"5", string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "K1ZUN{7=:(Tc";
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("k1zun{7=:(tc", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertEquals("k1zun{7=:(tc", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = "%M'n<*:CGg?6NN&Y";
      String string1 = locale0.getScript();
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[2];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: %M'n<*:CGg?6NN&Y
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "%M'n<*:CGg?6NN&Y";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      String string0 = "%M'n<*:CGg?6NN&Y";
      String string1 = locale0.getScript();
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[7];
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertEquals("%M'n<*:CGg?6NN&Y", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "zI\\kUdosp'Q";
      boolean boolean0 = linkedList0.add(string0);
      assertTrue(boolean0);
      assertEquals("[zI\\kUdosp'Q]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("zI\\kUdosp'Q", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("[zI\\kUdosp'Q]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[1];
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 188
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "zI\\kUdosp'Q";
      boolean boolean0 = linkedList0.add(string0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[zI\\kUdosp'Q]", linkedList0.toString());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("zI\\kUdosp'Q", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals(1, linkedList0.size());
      assertEquals("[zI\\kUdosp'Q]", linkedList0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: zI\\kUdosp'Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = " y";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string1, string0);
      assertNull(string2);
      
      char char0 = ':';
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string2, string2, (int) char0);
      assertNull(stringArray0);
      
      String string3 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = " vs ";
      int int0 = (-1483);
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals(" vs ", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertEquals(" vs ", string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = "A9y)%<GKM";
      char char0 = 'l';
      String string1 = StringUtils.replace(string0, string0, string0, (int) char0);
      assertEquals("A9y)%<GKM", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      String string1 = StringUtils.stripToNull(string0);
      assertEquals(",0C>#@tFm\"=!h,0C>#@tFm\"=!h", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = " ";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replace(string2, string1, string1);
      assertEquals(" ", string3);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "@5K{GbzY4-\":u(EEh5-";
      char char0 = 'r';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("@5K{GbzY4-\":u(EEh5-", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      
      String string2 = null;
      String string3 = StringUtils.replace(string1, string1, string2);
      assertEquals("@5K{GbzY4-\":u(EEh5-", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotNull(string3);
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "o2";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("o2", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.replaceOnce(string1, string2, string2);
      assertEquals("o2", string3);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce(string0, string1, string1);
      assertEquals("", string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "gJh*y+*$jEP";
      char char0 = '=';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("gJh*y+*$jEP", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = ".|'=,#_Mt{C?=p5FB>";
      char char0 = '=';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals(".|',#_Mt{C?p5FB>", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "";
      char char0 = '{';
      String string1 = StringUtils.remove(string0, char0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "9";
      String string1 = null;
      String string2 = StringUtils.remove(string0, string1);
      assertEquals("9", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "9";
      String string1 = StringUtils.remove(string0, string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "";
      String string1 = StringUtils.remove(string0, stringArray0[0]);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = ":}";
      String string1 = "9hfykuysuzn]hyx";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertEquals(":}", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "zc";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("zc", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      
      String string2 = "BB%5yl.r>8=J8Z|R!H";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEnd(string2, string1);
      assertEquals("BB%5yl.r>8=J8Z|R!H", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotNull(string3);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = "m{B`";
      int int0 = 0;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.right(string0, int1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.removeEnd(string0, string1);
      assertEquals("m{B`", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "K1ZUN{7=:(Tc";
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("k1zun{7=:(tc", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      String string2 = StringUtils.repeat(string0, string1, int0);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "*=5\"u5z>fb\"5";
      String string1 = "W|d|";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string1, string0);
      assertEquals("W|d|", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "\\i@\"";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("\\I@\"", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertEquals("\\I@\"", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "m{B`";
      int int0 = 0;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.right(string0, int1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertEquals("m{B`", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeStart(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("org.apache.commons.lang.StringUtils", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = ">+]iS";
      int int0 = 1241;
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertEquals(">+]iS>+]iS", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      Collection<Object> collection0 = null;
      String string2 = StringUtils.join(collection0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "Z#]!5o3\"%ph!4//";
      Collection<Object> collection0 = null;
      char char0 = 'F';
      String string1 = StringUtils.join(collection0, char0);
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = linkedList0.add((Object) string0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[Z#]!5o3\"%ph!4//]", linkedList0.toString());
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("Z#]!5o3\"%ph!4//", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotNull(string2);
      assertEquals(1, linkedList0.size());
      assertEquals("[Z#]!5o3\"%ph!4//]", linkedList0.toString());
      
      boolean boolean1 = linkedList0.add((Object) string2);
      assertTrue(boolean1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals(2, linkedList0.size());
      assertEquals("[Z#]!5o3\"%ph!4//, Z#]!5o3\"%ph!4//]", linkedList0.toString());
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertEquals("Z#]!5o3\"%ph!4//Z#]!5o3\"%ph!4//", string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotNull(string3);
      assertEquals(2, linkedList0.size());
      assertEquals("[Z#]!5o3\"%ph!4//, Z#]!5o3\"%ph!4//]", linkedList0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "Z#]!5o3\"%ph!4//";
      Collection<Object> collection0 = null;
      char char0 = 'F';
      String string1 = StringUtils.join(collection0, char0);
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = linkedList0.add((Object) string0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[Z#]!5o3\"%ph!4//]", linkedList0.toString());
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("Z#]!5o3\"%ph!4//", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertEquals(1, linkedList0.size());
      assertEquals("[Z#]!5o3\"%ph!4//]", linkedList0.toString());
      
      boolean boolean1 = linkedList0.add((Object) string1);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      assertEquals("[Z#]!5o3\"%ph!4//, null]", linkedList0.toString());
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Collection<?>) linkedList0, string2);
      assertEquals("Z#]!5o3\"%ph!4//Z#]!5o3\"%ph!4//", string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string0, string3);
      assertSame(string0, string2);
      assertNotNull(string3);
      assertEquals(2, linkedList0.size());
      assertEquals("[Z#]!5o3\"%ph!4//, null]", linkedList0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "~1hPBSDo";
      Iterator<String> iterator0 = null;
      String string1 = StringUtils.join(iterator0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char char0 = '_';
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ListIterator<Object> listIterator0 = null;
      boolean boolean0 = linkedList0.add((Object) listIterator0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[null]", linkedList0.toString());
      
      linkedList0.addFirst(object0);
      assertEquals(2, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(2, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char char0 = '_';
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add((Object) listIterator0);
      assertTrue(boolean0);
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(true, listIterator0.hasNext());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(1, linkedList0.size());
      
      linkedList0.addFirst(object0);
      assertEquals(2, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(2, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertTrue(boolean0);
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      char[] charArray0 = new char[4];
      String string0 = StringUtils.join((Collection<?>) linkedList0, charArray0[2]);
      assertEquals("[(this Collection)]", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      char char0 = 'g';
      Iterator<String> iterator0 = null;
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = StringUtils.join(objectArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String[] stringArray0 = new String[5];
      int int0 = 64;
      String string1 = StringUtils.join((Object[]) stringArray0, string0, int0, int0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String[] stringArray0 = new String[5];
      char char0 = '>';
      String string0 = StringUtils.join((Object[]) stringArray0, char0);
      assertEquals(">>>>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = null;
      int int0 = 1628;
      String[] stringArray0 = StringUtils.split(string0, string0, int0);
      assertNull(stringArray0);
      
      char char0 = '|';
      String string1 = StringUtils.join((Object[]) stringArray0, char0, int0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "?_xA@uEdq[ZxP.s";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "@5K{GbzY4-\":u(EEh5-";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "aWZi2";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "^mn`m";
      char char0 = 'J';
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertEquals("^MN`M", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat(string0, string0, (int) char0);
      assertEquals("^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m^mn`m", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string2, string1, (int) char0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(stringArray0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "4~g&FsJpDtSt";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "\\i@\"";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("\\I@\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.split(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "^x+i7)c4x$org";
      char[] charArray0 = new char[2];
      String string1 = "$";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string0, string1, (int) charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "79G^UB@_sgooost";
      char char0 = 't';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      char char0 = 'y';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "4~g&FsJpDtSt";
      char char0 = '4';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("~g&FsJpDtSt", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "";
      char char0 = 'O';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String[] stringArray0 = new String[3];
      char char0 = 'o';
      String[] stringArray1 = StringUtils.split(stringArray0[0], char0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "Array element ";
      char char0 = ' ';
      String string1 = " ";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      String string1 = StringUtils.stripToNull(string0);
      assertEquals(",0C>#@tFm\"=!h,0C>#@tFm\"=!h", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd(string1, string1);
      assertEquals("", string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(stringArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[3];
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator(stringArray0[0], stringArray0[1], int0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = " vs ";
      int int0 = (-1483);
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals(" vs ", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = "n\"8|zr&{:8~O`ZE_#";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween(string2, string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNull(stringArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      String string1 = " ";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "...";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      String string2 = "w";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      stringArray0[0] = string2;
      assertNotNull(stringArray0[0]);
      
      String[] stringArray1 = StringUtils.substringsBetween(string1, stringArray0[0], stringArray0[0]);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = null;
      String string1 = "MLrBr-=l~1oQj{dJ";
      int int0 = (-1704);
      String string2 = StringUtils.repeat(string0, string1, int0);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string2);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = null;
      String string1 = "MLrBr-=l~1oQj{dJ";
      int int0 = (-1704);
      String string2 = StringUtils.repeat(string0, string1, int0);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string2);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "{}";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string1);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = " vs ";
      int int0 = (-1483);
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertEquals(" vs ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = "n\"8|zr&{:8~O`ZE_#";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween(string2, string1, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = ", length: ";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string0, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "o2";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "{}";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string1, string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = " ";
      String string1 = "Cannot get the toString of a null identity";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = null;
      String string1 = "!T+!3D< /]c9";
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "!T+!3D< /]c9";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = " ";
      String string1 = "Minimum abbreviation width with offset is 7";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertEquals(" ", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = null;
      String string1 = "sJMl>2SS\\xI%^ce";
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertEquals("sJMl>2SS\\xI%^ce", string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "A9y)%<GKM";
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("A9y)%<GKM", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = "Cannot get the toString of a null ilentity";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter(string1, string2);
      assertEquals("", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "zc";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("zc", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      String string2 = StringUtils.substringBetween(string0, string0);
      assertSame(string0, string1);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter(string1, string2);
      assertEquals("", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotNull(string3);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = "zc";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("zc", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      String string2 = StringUtils.substringAfter(string1, string1);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = ">+]iS";
      String string1 = "P3-(gTe5uao+WmI!";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertEquals(">+]iS", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "";
      String string1 = "2k";
      assertNotSame(string1, string0);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      int int0 = 0;
      char char0 = 'z';
      String string2 = StringUtils.leftPad(string1, int0, char0);
      assertEquals("2k", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      stringArray0[2] = string2;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[2];
      assertNotNull(stringArray0[3]);
      
      String string3 = StringUtils.substringBefore(stringArray0[3], stringArray0[7]);
      assertEquals("", string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "?_xA@uEdq[ZxP.s";
      String string1 = null;
      String string2 = StringUtils.substringBefore(string0, string1);
      assertEquals("?_xA@uEdq[ZxP.s", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertEquals("", string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = "^ic%v";
      int int0 = 256;
      String string1 = StringUtils.center(string0, int0, string0);
      assertEquals("^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int1 = (-1079);
      String string2 = StringUtils.mid(string1, int1, int0);
      assertEquals("^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^ic%v^", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "Z,v`WJ<?Uv>i1";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "!T+!3D< /]c9";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = null;
      int int0 = 4;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "~1hPBSDo";
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("~1hpbsdo", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.countMatches(string1, string1);
      assertEquals(1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.right(string0, int0);
      assertEquals("o", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = null;
      char char0 = '9';
      String string1 = StringUtils.right(string0, (int) char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = "";
      char char0 = '{';
      String string1 = StringUtils.right(string0, (int) char0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = "7Jnb (PaNIJ9Ia#ZR 3";
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "";
      int int0 = (-505);
      String string1 = StringUtils.left(string0, int0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = null;
      char char0 = '~';
      String string1 = StringUtils.left(string0, (int) char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "The character must not be null";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("THE CHARACTER MUST NOT BE NULL", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      String string2 = StringUtils.substring(string1, int0, int0);
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = ".|'=,#_Mt{C?=p5FB>";
      char char0 = '=';
      String string1 = StringUtils.substring(string0, (int) char0, (int) char0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = 221;
      String string0 = null;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = " vs ";
      int int0 = (-1483);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "-+j9:|LBIJt)3s";
      int int0 = 221;
      String string1 = StringUtils.substring(string0, int0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = " y";
      int int0 = (-1830);
      String string1 = StringUtils.substring(string0, int0);
      assertEquals(" y", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = null;
      char char0 = ']';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.lastIndexOfAny(stringArray0[1], stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.lastIndexOfAny(string1, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "<HNOJx$x/o7,";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "<HNOJx$x/o7,";
      String string1 = "pb/vN40o-`*36.YmrU$";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "Cannot get the toString of a null identity";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      String[] stringArray0 = StringUtils.splitByCharacterType(string2);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertEquals((-1), int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "<HNOJx$x/o7,";
      String string1 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "zc";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("zc", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      String string2 = "BB%5yl.r>8=J8Z|R!H";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsNone(string2, string1);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "zc";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("zc", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      
      boolean boolean0 = StringUtils.containsNone(string0, string1);
      assertFalse(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "The character must not be null";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("THE CHARACTER MUST NOT BE NULL", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      boolean boolean0 = StringUtils.containsOnly(string2, string1);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[8];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      String string1 = " ";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAnyBut(string1, string0);
      assertEquals(0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = null;
      String string1 = "org.apache.commons.lang.CharUtils";
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertEquals("org.apache.commons.lang.CharUtils", string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut(string2, string0);
      assertEquals((-1), int0);
      assertSame(string2, string1);
      assertSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut(string1, string1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      String string1 = StringUtils.stripToNull(string0);
      assertEquals(",0C>#@tFm\"=!h,0C>#@tFm\"=!h", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = " ";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsOnly(string2, string1);
      assertFalse(boolean0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      String string1 = StringUtils.stripToNull(string0);
      assertEquals(",0C>#@tFm\"=!h,0C>#@tFm\"=!h", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertTrue(boolean0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAnyBut(string0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = "...";
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "zc";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("zc", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.lastIndexOfAny(string1, stringArray0);
      assertEquals(0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      
      String string2 = StringUtils.repeat(stringArray0[0], int0);
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotNull(string2);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsAny(string0, string2);
      assertFalse(boolean0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "zc";
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = "8";
      int int0 = 2957;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int1 = StringUtils.indexOfAny(string0, string1);
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "GR0";
      String string1 = "yuh>=";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAny(string0, string1);
      assertEquals((-1), int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "GR0";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "rg\\";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertEquals("rg\\", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      
      String string2 = "...";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string2);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = "4~g&FsJpDtSt";
      int int0 = 5;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertEquals("4~...", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      String string3 = StringUtils.overlay(string2, string1, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string3);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = "The Array must not be null";
      String string1 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "@5K{GbzY4-\":u(EEh5-";
      char char0 = 'r';
      String string1 = "CM:sz'`*NpUr";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("@5K{GbzY4-\":u(EEh5-", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains(string2, string1);
      assertFalse(boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "[65k";
      String string1 = null;
      boolean boolean0 = StringUtils.contains(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "JK95s*M^.V:@c4_H";
      char char0 = ':';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = null;
      char char0 = '%';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      char char0 = '\"';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Collection<Object> collection0 = null;
      char char0 = '+';
      String string0 = StringUtils.join(collection0, char0);
      assertNull(string0);
      
      String string1 = "7QO-|SFE~&S%<fx";
      int int0 = StringUtils.lastIndexOf(string1, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "Index: ";
      int int0 = (-3611);
      int int1 = StringUtils.lastIndexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = null;
      char char0 = '|';
      int int0 = StringUtils.lastIndexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "i";
      String string1 = null;
      int int0 = StringUtils.lastIndexOf(string0, string1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      char char0 = 'y';
      int int1 = StringUtils.lastIndexOf(string0, char0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = ":}";
      int int0 = 8192;
      char char0 = '_';
      int int1 = StringUtils.lastIndexOf(string0, char0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = null;
      char char0 = '1';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "";
      String string1 = "j0fykuysuzn]9hx";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string1, string0);
      assertEquals("j0fykuysuzn]9hx", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      char char0 = 'o';
      int int0 = StringUtils.lastIndexOf(string2, char0);
      assertEquals((-1), int0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      String string0 = "%M'n<*:CGg?6NN&Y";
      String string1 = locale0.getScript();
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      int int1 = StringUtils.indexOf(string0, string1, int0);
      assertEquals(0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int0 == int1);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      String string0 = locale0.getScript();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      int int0 = 0;
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertEquals(0, int1);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = null;
      int int0 = 1628;
      String string1 = "Array element ";
      int int1 = StringUtils.indexOf(string1, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.length(string0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      char char0 = '/';
      String string0 = StringUtils.join((Collection<?>) set0, char0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      int int0 = StringUtils.ordinalIndexOf(string0, string0, (int) char0);
      assertEquals(0, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = ", '";
      char char0 = 'S';
      int int0 = StringUtils.ordinalIndexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = ", '";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      char char0 = 'S';
      int int0 = StringUtils.ordinalIndexOf(string0, string1, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = "4~g&FsJpDtSt";
      int int0 = 5;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertEquals("4~...", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = null;
      String string3 = StringUtils.overlay(string2, string1, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.ordinalIndexOf(string3, string3, int0);
      assertEquals((-1), int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "*=5\"u5z>fb\"5";
      String string1 = StringUtils.lowerCase(string0);
      assertEquals("*=5\"u5z>fb\"5", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf(string0, string1);
      assertEquals(0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOf(string0, string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = null;
      char char0 = '~';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "*=5\"u5z>fb\"5";
      char char0 = '/';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "9";
      char char0 = '%';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = "o2";
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("o2", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string2, string1);
      assertFalse(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "BTng";
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String string1 = null;
      boolean boolean0 = StringUtils.equals(string1, stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = "9";
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "!T+!3D< /]c9";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = ", Length: ";
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "zI\\kUdosp'Q";
      boolean boolean0 = linkedList0.add(string0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals("[zI\\kUdosp'Q]", linkedList0.toString());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("zI\\kUdosp'Q", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals(1, linkedList0.size());
      assertEquals("[zI\\kUdosp'Q]", linkedList0.toString());
      
      String string2 = "[8K}B.F*?\"_%P\"tSf";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.strip(string2, string1);
      assertEquals("[8K}B.F*?\"_%P\"tSf", string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotNull(string3);
      assertEquals(1, linkedList0.size());
      assertEquals("[zI\\kUdosp'Q]", linkedList0.toString());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "";
      String string1 = "', has a length less than 2";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[7];
      String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertEquals("", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.strip(string1, string2);
      assertEquals("', has a length less than 2", string3);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = " y";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string1, string0);
      assertNull(string2);
      
      String string3 = StringUtils.stripStart(string2, string2);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.defaultString(string0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.trimToNull(string0);
      assertEquals("Minimum abbreviation width with offset is 7", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Collection<Object> collection0 = null;
      char char0 = 'F';
      String string0 = StringUtils.join(collection0, char0);
      assertNull(string0);
      
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "@5K{GbzY4-\":u(EEh5-";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = " ";
      String string1 = null;
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertEquals(" ", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string2);
      assertFalse(boolean0);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string1);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = "@5K{GbzY4-\":u(EEh5-";
      char char0 = 'r';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertEquals("@5K{GbzY4-\":u(EEh5-", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) stringArray0[3]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = ",0C>#@tFm\"=!h,0C>#@tFm\"=!h";
      int int0 = 2308;
      String string1 = StringUtils.center(string0, int0);
      assertEqualstFm\"=!h,0C>#@tFm\"=!hstring1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "9";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "&2ozon";
      String string1 = StringUtils.strip(string0);
      assertEquals("&2ozon", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.endsWith(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = " ";
      int int0 = StringUtils.indexOfAnyBut(string0, string0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = "zI\\kUdosp'Q";
      String string1 = StringUtils.removeStart(string0, string0);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      boolean boolean0 = StringUtils.startsWith(string0, string1);
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.split(string0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.upperCase(string0);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }
}
