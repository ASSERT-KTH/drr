/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:59:59 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class StringUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = "^\\H&/";
      String string1 = null;
      boolean boolean0 = StringUtils.endsWith(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "|.Sn,?)Ok%!~xoM>";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat(string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.endsWith(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = " 4";
      String[] stringArray0 = new String[4];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = null;
      String string1 = "minimum abbr4jq(9#+l*p~9 is 4";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny(string1, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = "5[FYV4b6+";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("5[FYV4b6+", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      char char0 = 'Q';
      String string0 = null;
      String string1 = StringUtils.substring(string0, (int) char0);
      assertNull(string1);
      
      String string2 = "*Gv*";
      boolean boolean0 = StringUtils.startsWith(string1, string2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "q";
      String string1 = "*!}k*-";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.stripToNull(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("is less than 0:", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.swapCase(string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals(15, int0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.stripToNull(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("is less than 0:", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "V0hob";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "U-c@|oGsl@&i\\U-c@|oGsl@&i\\";
      assertNotSame(string1, string0);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = stringArray0[1];
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      char char0 = '\"';
      String string1 = StringUtils.join(objectArray0, char0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"\"\"\"\"\"\"\"", string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "";
      Object[] objectArray0 = new Object[9];
      char char0 = '\"';
      String string1 = StringUtils.join(objectArray0, char0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\"\"\"\"\"\"\"\"", string1);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfDifference(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "d ";
      String string1 = StringUtils.uncapitalize(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("d ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = StringUtils.indexOfDifference(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "EH>GP6{a).u3";
      String string1 = null;
      int int0 = StringUtils.indexOfDifference(string0, string1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = null;
      String string1 = "$t/P'_&+B|wxV'4\"S!r";
      String string2 = StringUtils.deleteWhitespace(string1);
      assertNotNull(string2);
      assertEquals("$t/P'_&+B|wxV'4\"S!r", string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      
      int int0 = StringUtils.indexOfDifference(string0, string2);
      assertEquals(0, int0);
      assertSame(string2, string1);
      assertSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "minimum abb";
      String string1 = "&1FN<k7,t!D%bV83:";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("&1FN<k7,t!D%bV83:", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String string1 = null;
      String string2 = StringUtils.difference(string0, string1);
      assertNotNull(string2);
      assertEquals("Minimum abbreviation width is 4", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = "RJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSap3E=wX'lwHSap";
      String string1 = null;
      String string2 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string2);
      assertEquals("RJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSap3E=wX'lwHSap", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      
      String string3 = StringUtils.difference(string1, string2);
      assertNotNull(string3);
      assertEquals("RJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSap3E=wX'lwHSap", string3);
      assertSame(string0, string3);
      assertSame(string0, string2);
      assertSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String string1 = StringUtils.difference(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "*Gv*";
      int int0 = (-3628);
      char char0 = 'h';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNotNull(string1);
      assertEquals("*Gv*", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = "Search and Replace array lengths don't match: ";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      int int1 = StringUtils.length(string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      
      String string3 = StringUtils.abbreviate(string2, int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("S...", string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "V0hob";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[2] = stringArray0[0];
      assertNotNull(stringArray0[2]);
      
      int int0 = 2169;
      String string1 = StringUtils.abbreviate(stringArray0[2], int0);
      assertNotNull(string1);
      assertEquals("V0hob", string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "The character must not be nullEfo^Q@6/Z$%!|";
      int int0 = (-1020);
      String string1 = StringUtils.right(string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = null;
      int int1 = StringUtils.indexOfAny(string1, string2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string3 = StringUtils.abbreviate(string2, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNull(string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = null;
      char char0 = 'N';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = "minimum abb";
      String string1 = StringUtils.reverse(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("bba muminim", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = "^\\H&/";
      String string1 = null;
      String string2 = StringUtils.defaultString(string1, string0);
      assertNotNull(string2);
      assertEquals("^\\H&/", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "minimum abb";
      String string1 = StringUtils.swapCase(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("MINIMUM ABB", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.defaultString(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("MINIMUM ABB", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "w%dKOv]nO=~;+)";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "=-d";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isWhitespace(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = " 4";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "9Ktu,d~j";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = "0F\\#_2$Br^";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = " ";
      char char0 = 'c';
      String string1 = StringUtils.leftPad(string0, (int) char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("                                                                                                   ", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isNumeric(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = " ";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isNumeric(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = ">";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "_Tr|kZ2Z@>j68pTB^";
      int int0 = StringUtils.length(string0);
      assertEquals(17, int0);
      
      String string1 = "gNGMv##;n";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.repeat(string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("gNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;ngNGMv##;n", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "_Tr|kZ2Z@>j68pTB^";
      String string1 = StringUtils.capitalize(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("_Tr|kZ2Z@>j68pTB^", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "The Character muTimeToLive of ";
      String string1 = StringUtils.lowerCase(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("the character mutimetolive of ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      char char0 = '?';
      String string0 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = "sUg\\";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "Bz10 qo]TEU\\0F98cq]3aracter must not be null*Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**";
      Collection<Object> collection0 = null;
      String string1 = StringUtils.join(collection0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = " 4";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Bz10 qo]TEU\\0F98cq]3aracter must not be null*Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "*Gv*";
      int int0 = (-3628);
      char char0 = 'h';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNotNull(string1);
      assertEquals("*Gv*", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int1 = StringUtils.countMatches(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = ":?DNcQd,PuoaqMw09$|";
      String string1 = StringUtils.swapCase(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(":?dnCqD,pUOAQmW09$|", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "";
      String string1 = "Strings must not be null";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("Strings must not be null", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.uncapitalize(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("strings must not be null", string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeStart(string0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.uncapitalize(string1);
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "The character must not be nullEfo^Q@6/Z$%!|";
      int int0 = (-1020);
      String string1 = StringUtils.right(string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.capitalize(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "V0hob";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.lowerCase(stringArray0[1], locale0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("v0hob", string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.lowerCase(stringArray0[0]);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      char char0 = 'v';
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNull(string1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
      
      String string2 = StringUtils.upperCase(string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "LIa";
      int int0 = 2;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotNull(string1);
      assertEquals("LIa", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "";
      int int0 = 12;
      String string1 = StringUtils.center(string0, int0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("            ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      char char0 = 'X';
      String string0 = null;
      String string1 = StringUtils.center(string0, (int) char0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "azk!";
      int int0 = 2;
      char char0 = 'X';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotNull(string1);
      assertEquals("azk!", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
      
      int int0 = StringUtils.length(string1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "";
      int int0 = 12;
      String string1 = "N5e2U)/ #~I2";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.leftPad(string0, int0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("N5e2U)/ #~I2", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = null;
      int int0 = (-2249);
      String string1 = "minimum abbr4jq(9#+l*p~9 is 4";
      char char0 = 'I';
      String string2 = StringUtils.leftPad(string0, int0, char0);
      assertNull(string2);
      
      String string3 = StringUtils.leftPad(string1, (int) char0, string2);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("                                          minimum abbr4jq(9#+l*p~9 is 4", string3);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      String string1 = StringUtils.leftPad(string0, (int) charArray0[0], string0);
      assertNull(string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = "b} Tc(:8.'HhLlQ+";
      String string1 = "or.apache.cmmogs.lang.ObjectUtils$Null";
      assertNotSame(string1, string0);
      
      char[] charArray0 = new char[6];
      char char0 = '>';
      charArray0[0] = char0;
      String string2 = StringUtils.center(string0, (int) charArray0[0], string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'>', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("or.apache.cmmogs.lang.b} Tc(:8.'HhLlQ+or.apache.cmmogs.lang.O", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "5*_i{A(asg#KM";
      char[] charArray0 = new char[10];
      Collection<Object> collection0 = null;
      String string1 = StringUtils.join(collection0, charArray0[1]);
      assertNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = 0;
      String string2 = StringUtils.rightPad(string0, int0, string1);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("5*_i{A(asg#KM", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "ezwGO~$1B,m-p}p{";
      int int0 = 4096;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.rightPad(string1, int0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEqualsstring2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "zgk,)0'VudlR";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      int int0 = 256;
      String string2 = StringUtils.rightPad(string1, int0, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
      
      int int0 = 2336;
      String string2 = StringUtils.rightPad(string1, int0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "Jvs ";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      char char0 = '6';
      String string2 = StringUtils.repeat(string0, string1, (int) char0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs Jvs ", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      char[] charArray0 = new char[3];
      char char0 = 'Q';
      charArray0[1] = char0;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = linkedList0.toString();
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("[]", string0);
      
      String string1 = StringUtils.repeat(string0, (int) charArray0[1]);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertArrayEquals(new char[] {'\u0000', 'Q', '\u0000'}, charArray0);
      assertEquals("[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "L";
      int int0 = 256;
      String string1 = StringUtils.repeat(string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = ";4{:|yV0^";
      String string1 = StringUtils.lowerCase(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(";4{:|yv0^", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int0 = 1;
      String string2 = StringUtils.repeat(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(";4{:|yv0^", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "";
      String string1 = "_Tr|kZ2Z@>j68pTB^";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.length(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(17, int0);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.repeat(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = ":?DNcQd,PuoaqMw09$|";
      String string1 = null;
      int int0 = 7;
      String string2 = StringUtils.repeat(string1, string0, int0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "jSEO#HU>zY,k?";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.swapCase(string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "The character ";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.chomp(string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.swapCase(string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.chomp(string1, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
      
      String string2 = StringUtils.swapCase(string0);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.chomp(string2, string1);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(" ", string3);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "fj`snjnp)";
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertEquals("fj`snjnp)", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "V0hob";
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      int int0 = (-597);
      int int1 = 2169;
      String string1 = StringUtils.overlay(stringArray0[3], stringArray0[1], int0, int1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = "H9It=r[aM_aR#D";
      String string1 = "33of@<Z";
      assertNotSame(string1, string0);
      
      int int0 = 12;
      char[] charArray0 = new char[14];
      char char0 = 'o';
      String string2 = StringUtils.center(string0, (int) char0, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("H9It=r[aM_aR#DH9It=r[aM_aR#DH9It=r[aM_aR#DH9It=rH9It=r[aM_aR#DH9It=r[aM_aR#DH9It=r[aM_aR#DH9It=r[aM_aR#DH9It=r[", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      String string3 = StringUtils.overlay(string1, string2, int0, (int) charArray0[0]);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("H9It=r[aM_aR#DH9It=r[aM_aR#DH9It=r[aM_aR#DH9It=rH9It=r[aM_aR#DH9It=r[aM_aR#DH9It=r[aM_aR#DH9It=r[aM_aR#DH9It=r[", string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "V0hob";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = null;
      int int0 = (-597);
      String string2 = StringUtils.overlay(stringArray0[0], string1, int0, int0);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("V0hob", string2);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "|.Sn,?)Ok%!~xoM>";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
      
      String string1 = null;
      String string2 = StringUtils.capitalize(string1);
      assertNull(string2);
      
      String string3 = StringUtils.overlay(string2, string0, int0, int0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      char char0 = '\"';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      assertEquals("\"\"\"\"\"\"\"\"", string0);
      
      String string1 = "BzF{6W8Q'>}\\d_>d";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceChars(string1, string0, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("BzF{6W8Q'>}\\d_>d", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "zgk,)0'VudlR";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase(string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("zgk,)0'vudlr", string2);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.replaceChars(string2, string2, string1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = "H9It=r[aM_aR#D";
      char[] charArray0 = new char[14];
      char char0 = 'o';
      String string1 = StringUtils.center(string0, (int) charArray0[4], string0);
      assertNotNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("H9It=r[aM_aR#D", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.replaceChars(string1, string2, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("H9It=r[aM_aR#D", string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      char char0 = '\"';
      String string0 = StringUtils.join(objectArray0, char0);
      assertNotNull(string0);
      assertEquals("\"\"\"\"\"\"\"\"", string0);
      
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("\"\"\"\"\"\"\"\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string1, string0, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = null;
      char char0 = 'I';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "8RZ(";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      String string2 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("8RZ(", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "MznH/7KX\"Lr:u[%&E6_";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      String string1 = ",kHJDn}xE`uo>m;";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(",kHJDn}xE`uo>m;", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = ">";
      int int0 = 16;
      String string1 = StringUtils.center(string0, int0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(">>>>>>>>>>>>>>>>", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(">", string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = "_LS;";
      String[] stringArray0 = StringUtils.split(string0, charArray0[0]);
      assertNotNull(stringArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = "2dYb";
      assertNotSame(string1, string0);
      
      char char0 = 'Y';
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(string1, char0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(string1, string0);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEach(string0, stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 2
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = ">";
      int int0 = 16;
      String string1 = StringUtils.center(string0, int0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals(">>>>>>>>>>>>>>>>", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: >>>>>>>>>>>>>>>>
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(" ", string2);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = null;
      char char0 = '?';
      String string1 = "snYr,x}YsqWrTwU`-j";
      String string2 = StringUtils.lowerCase(string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("snyr,x}ysqwrtwu`-j", string2);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNull(stringArray0);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotNull(string3);
      assertEquals("snyr,x}ysqwrtwu`-j", string3);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "d ";
      int int0 = 2089;
      String string1 = StringUtils.right(string0, int0);
      assertNotNull(string1);
      assertEquals("d ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = new String[1];
      String string2 = StringUtils.join((Object[]) stringArray0, string1, int0, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "b} Tc(:8.'HhLlQ+";
      char[] charArray0 = new char[6];
      char char0 = '[';
      charArray0[1] = char0;
      String string1 = StringUtils.center(string0, (int) char0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("b} Tc(:8.'HhLlQ+b} Tc(:8.'HhLlQ+b}b} Tc(:8.'HhLlQ+b} Tc(:8.'HhLlQ+b} Tc(:8.'HhLlQ+b}", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replace(string1, string1, string0, (int) charArray0[1]);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '[', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("b} Tc(:8.'HhLlQ+", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "&N%\\nPTLR-%UUzC'";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string1);
      assertEquals("&N%\\nPTLR-%UUzC'", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = " vs ', has a length less than 2";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = null;
      String string2 = StringUtils.replace(stringArray0[0], stringArray0[0], string1);
      assertNotNull(string2);
      assertEquals(" vs ', has a length less than 2", string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "']_<6";
      String string1 = null;
      String string2 = StringUtils.replace(string0, string1, string0);
      assertNotNull(string2);
      assertEquals("']_<6", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "LIa";
      int int0 = 2;
      String string1 = StringUtils.substring(string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("a", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char char0 = 'a';
      String string2 = ", Length: ";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.replace(string2, string1, string0, (int) char0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(", Length: ", string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string4 = StringUtils.remove(string3, char0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(", Length: ", string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertSame(string4, string2);
      assertNotSame(string4, string0);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string4);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "&N9\\cWf`";
      char char0 = 'W';
      String string1 = StringUtils.remove(string0, char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("&N9\\cf`", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = ":?DNcQd,PuoaqMw09$|";
      String[] stringArray0 = new String[3];
      String string1 = StringUtils.remove(string0, stringArray0[0]);
      assertNotNull(string1);
      assertEquals(":?DNcQd,PuoaqMw09$|", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = "']_<6";
      String string1 = StringUtils.remove(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.remove(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = "9Ktu,d~j";
      String string1 = "eviatio";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("eviatio", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "#(b";
      String string1 = null;
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertNotNull(string2);
      assertEquals("#(b", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = " 4";
      String string1 = "Strings must not be null";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertEquals(" 4", string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = "ezwGO~$1B,m-p}p{";
      String string1 = null;
      String string2 = StringUtils.removeEnd(string0, string1);
      assertNotNull(string2);
      assertEquals("ezwGO~$1B,m-p}p{", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "6>!/";
      int int0 = 0;
      String string1 = null;
      String string2 = StringUtils.substring(string1, int0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase(string0, string2);
      assertNotNull(string3);
      assertEquals("6>!/", string3);
      assertSame(string0, string3);
      assertSame(string3, string0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "TimeToLive of ";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "jSEO#HU>zY,k?";
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JSEO#HU>ZY,K?", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JSEO#HU>ZY,K?", string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("islessthan0:", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "[!Z4K`{t>QKZ^?h/ ";
      char[] charArray0 = new char[3];
      char char0 = 'Q';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer((int) charArray0[1]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals("[0]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      Integer integer1 = null;
      boolean boolean1 = linkedList0.add(integer1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertEquals("[0, null]", linkedList0.toString());
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, linkedList0.size());
      assertEquals("[0, null]", linkedList0.toString());
      assertEquals("0", string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = null;
      char char0 = 'h';
      String string1 = StringUtils.remove(string0, char0);
      assertNull(string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Integer integer0 = new Integer((int) char0);
      assertEquals(104, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals("[104]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(boolean1 == boolean0);
      assertEquals("[104, 104]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertNotNull(string2);
      assertEquals("[104, 104]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertEquals("104104", string2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "[!Z4K`{t>QKZ^?h/ ";
      char[] charArray0 = new char[3];
      char char0 = 'Q';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Integer integer0 = new Integer((int) charArray0[1]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = linkedList0.add(integer0);
      assertEquals(1, linkedList0.size());
      assertEquals("[0]", linkedList0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, linkedList0.size());
      assertEquals("[0]", linkedList0.toString());
      assertEquals("0", string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      String string0 = "The Character must not be null";
      String string1 = StringUtils.join(iterator0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.add(object0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      
      char char0 = 'S';
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(2, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      char char0 = '3';
      String string0 = "@uz:";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[@uz:]", linkedList0.toString());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string1);
      assertEquals(1, linkedList0.size());
      assertEquals("[@uz:]", linkedList0.toString());
      assertEquals("@uz:", string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = " ";
      String string1 = "Z%R6y3N0y60.@`p_";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("Z%R6y3N0y60.@`p_", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = "\\u0";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("\\u0", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String string2 = StringUtils.join(objectArray0, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("\\u0\\u0\\u0\\u0\\u0\\u0\\u0", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "iYIZV 0@+o`\">N";
      int int0 = 3213;
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, string0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "&N%\\nPTLR-%UUzC'";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      char char0 = 'X';
      String string1 = StringUtils.join((Object[]) stringArray0, char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "NVvD6ZT[B";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "org.apache.commons.lang.ArrayUtils";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "minimum abb";
      String string1 = StringUtils.swapCase(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("MINIMUM ABB", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000B\f\r\u000E\u000F\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001A\u001B\u001C\u001D\u001E\u001F !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      
      String[] stringArray0 = StringUtils.split(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(stringArray0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = "org.apache.commons.lang.ArrayUtils";
      assertNotSame(string1, string0);
      
      int int0 = (-891);
      String string2 = StringUtils.rightPad(string1, int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang.ArrayUtils", string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      
      String string3 = StringUtils.center(string0, int0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("Index: ", string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      
      String[] stringArray0 = StringUtils.split(string3, string2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "q";
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = "ring of a null ";
      String string1 = null;
      int int0 = 2;
      String[] stringArray0 = StringUtils.split(string0, string1, int0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'minimum abbreviation wi'q*p~9 4";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "";
      int int0 = (-891);
      String string1 = null;
      String[] stringArray0 = StringUtils.split(string1, string0, int0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char char0 = 'T';
      String string0 = "The Array must not be null*Gv*";
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("he Array must not be null*Gv*", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = "p,Ee";
      char char0 = 'p';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = ">";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = 'a';
      Iterator<Integer> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join(iterator0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = ":";
      String string1 = "Cannot pad a negative amount: ";
      assertNotSame(string1, string0);
      
      int int0 = (-2239);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = "Mu%;E-[WPyz0";
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = "LIa";
      int int0 = 2;
      String string1 = StringUtils.substring(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("a", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "=SaP*dR}_amUCcO";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.replace(string0, string1, string0, int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertNotNull(string3);
      assertEquals("LILIa", string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      
      String[] stringArray0 = StringUtils.substringsBetween(string3, string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertNull(stringArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      char char0 = 'E';
      String string1 = StringUtils.center(string0, (int) char0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("                   Minimum abbreviation width is 4                   ", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string0);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = "8RZ(";
      String[] stringArray0 = new String[6];
      String string1 = "";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      String string2 = StringUtils.substringBetween(string0, stringArray0[2]);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "Jvs ";
      String string1 = "P2?j4=fyQ~`J";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBetween(string1, string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "WS#DB39>E<;NcI We\":";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string1, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = " ";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string1, string0, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "1`,i/0`1np~";
      String string1 = ",wpw8(v!*s9@ozu{90";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "iW<-@\\5M[#5fltj";
      String string1 = null;
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = "5*_i{A(asg#KM";
      String string1 = null;
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "[!Z4K`{t>QKZ^?h/ ";
      String string1 = ";%$k:$Px`U";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("[!Z4K`{t>QKZ^?h/ ", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = " vs ', has a length less than 2";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[4] = stringArray0[0];
      assertNotNull(stringArray0[4]);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(stringArray0[4], string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      assertEquals(" vs ', has a length less than 2", string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "&N%\\nPTLR-%UUzC'";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "n@";
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = "lt!.ul9W6GQneT;";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.trim(string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("is less than 0:", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      
      String string3 = StringUtils.substringAfter(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("", string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "MC_  uJpOCqzM";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string0, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "@uz:";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "The Character must not be null";
      String string1 = "IG;b}}p4%(Uj/lA6R";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("IG;b}}p4%(Uj/lA6R", string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Iterator<Object> iterator0 = null;
      char char0 = 'v';
      String string0 = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.join(iterator0, char0);
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "The Character must not be null";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = " is less than 0: ";
      String[] stringArray0 = new String[7];
      int int0 = 71;
      int int1 = StringUtils.indexOfAny(string0, stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.mid(string0, int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(string1);
      assertEquals(" is less than 0: ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = " is less than 0: ";
      String[] stringArray0 = new String[7];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals(0, int0);
      
      int int1 = (-446);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.mid(string0, int1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = '3';
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), int0);
      
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotNull(string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      char[] charArray0 = new char[10];
      char char0 = 'x';
      Collection<Object> collection0 = null;
      String string0 = StringUtils.join(collection0, charArray0[1]);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      String string1 = StringUtils.mid(string0, (int) charArray0[2], (int) char0);
      assertNull(string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = "MznH/7KX\"Lr:u[%&E6_";
      int int0 = 0;
      String string1 = StringUtils.right(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      char char0 = '3';
      String string0 = null;
      String string1 = StringUtils.right(string0, (int) char0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "WS#DB39>E<;NcI We\":";
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "ring of a null ";
      int int0 = (-1723);
      String string1 = StringUtils.left(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOfAnyBut(string0, string0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left(string0, int0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = " is less than 0: ";
      char char0 = '-';
      String string1 = StringUtils.left(string0, (int) char0);
      assertNotNull(string1);
      assertEquals(" is less than 0: ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = "4oBS";
      char[] charArray0 = new char[1];
      char char0 = 'B';
      String string1 = StringUtils.chop(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("4oB", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      charArray0[0] = char0;
      String string2 = StringUtils.substring(string1, (int) charArray0[0], (int) charArray0[0]);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'B'}, charArray0);
      assertEquals("", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "The Character must not be null";
      int int0 = (-2593);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = "WS#DB39>E<;NcI We\":";
      String string1 = null;
      int int0 = StringUtils.lastIndexOf(string0, string1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = "4oBS";
      char[] charArray0 = new char[1];
      String string1 = StringUtils.chop(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("4oB", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substring(string1, (int) charArray0[0], (int) charArray0[0]);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals("", string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = " is less than 0: ";
      int int0 = (-745);
      String string1 = StringUtils.substring(string0, int0);
      assertNotNull(string1);
      assertEquals(" is less than 0: ", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = ":?DNcQd,PuoaqMw09$|";
      String[] stringArray0 = new String[3];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "1`,i/0`1np~";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      int int0 = StringUtils.lastIndexOfAny(string1, stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = " is less than 0: ";
      String[] stringArray0 = new String[7];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = "lt!.ul9W6GQneT;";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[5];
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = " ";
      String string1 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      char[] charArray0 = new char[3];
      char char0 = 't';
      charArray0[0] = char0;
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'t', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = "...";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsOnly(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "V0hob";
      String string1 = "U-c@|oGsl@&i\\U-c@|oGsl@&i\\";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAnyBut(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "^\\H&/";
      String string1 = null;
      int int0 = StringUtils.indexOfAnyBut(string0, string1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "V0hob";
      int int0 = StringUtils.indexOfAnyBut(string0, string0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = "org.apache.commons.lang.ArrayUtils";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = "Index: ";
      boolean boolean0 = StringUtils.containsOnly(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = " ";
      String string1 = "Z%R6y3N0y60.@`p_";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = " ";
      char char0 = 'c';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNotNull(string1);
      assertEquals(" ", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsAny(string1, string0);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = " ";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.containsAny(string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String string1 = null;
      boolean boolean0 = StringUtils.containsAny(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "The character must not be nullEfo^Q@6/Z$%!|";
      int int0 = (-1020);
      String string1 = StringUtils.right(string0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      int int1 = StringUtils.indexOfAny(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = "jSEO#HU>zY,k?";
      String string1 = "Minimum abbreviation width with offset is 7";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAny(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[14];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = "...";
      String string1 = "p,Ee";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = " 4";
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = "4jQ(9#+L";
      String string1 = "Minimum abbreviation width with offset is 7";
      assertNotSame(string1, string0);
      
      int int0 = 3237;
      String string2 = StringUtils.leftPad(string1, int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertEqualsinimum abbreviation width with offset is 7", string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      String string3 = StringUtils.defaultString(string0, string0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("4jQ(9#+L", string3);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      
      boolean boolean0 = StringUtils.contains(string2, string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = "The Character must not be null";
      String string1 = null;
      boolean boolean0 = StringUtils.contains(string0, string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "@uz:";
      String string1 = null;
      boolean boolean0 = StringUtils.contains(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      char char0 = 'X';
      String string0 = "`QFTKi{Xf_7-n>G4nU";
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = null;
      char char0 = ')';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = ">";
      int int0 = 16;
      String string1 = StringUtils.center(string0, int0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(">>>>>>>>>>>>>>>>", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      char char0 = 'a';
      boolean boolean0 = StringUtils.contains(string1, char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "jSEO#HU>zY,k?";
      int int0 = 0;
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("JSEO#HU>ZY,K?", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int1 = StringUtils.lastIndexOf(string0, string1, int0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals((-1), int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "RJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSapRJAc<H{ZMtG=/{_J3E=wX'lwHSap3E=wX'lwHSap";
      String string1 = null;
      int int0 = (-5531);
      int int1 = StringUtils.lastIndexOf(string0, string1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf(string1, string1, int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf(string1, string1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = null;
      char char0 = 'K';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = ">";
      int int0 = 16;
      char char0 = 'a';
      int int1 = StringUtils.lastIndexOf(string0, char0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = "-Y~Yon=G\"LQg7D ";
      char char0 = 'T';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.indexOfDifference(string0, string0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      String string0 = "";
      int int0 = 1;
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = "rjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsap3e=wx'lwhsap";
      String string1 = null;
      char char0 = '8';
      String string2 = StringUtils.substringBefore(string1, string1);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf(string2, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = "MC_  uJpOCqzM";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = 477;
      int int1 = StringUtils.ordinalIndexOf(string0, string1, int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "1`,i/0`1np~";
      int int0 = (-3379);
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "rjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsaprjac<h{zmtg=/{_j3e=wx'lwhsap3e=wx'lwhsap";
      int int0 = StringUtils.indexOfDifference(string0, string0);
      assertEquals((-1), int0);
      
      String string1 = null;
      int int1 = StringUtils.ordinalIndexOf(string0, string1, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "&rHRs%Q|@TgnZqd";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("&rHRs%Q|@TgnZqd", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = 2147483617;
      int int1 = StringUtils.ordinalIndexOf(string1, string1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      int int0 = (-22);
      String string0 = null;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = "n@";
      String string1 = null;
      int int0 = StringUtils.indexOf(string0, string1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.removeStart(string0, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      int int0 = StringUtils.indexOf(string1, string0);
      assertEquals(0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[10];
      Collection<Object> collection0 = null;
      String string0 = StringUtils.join(collection0, charArray0[7]);
      assertNull(string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      int int0 = StringUtils.indexOf(string0, charArray0[5], (int) charArray0[9]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "";
      String string1 = "Index: ";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.countMatches(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char char0 = 'z';
      int int1 = StringUtils.indexOf(string1, char0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = "Mu%;E-[WPyz0";
      String string1 = null;
      char[] charArray0 = new char[10];
      String string2 = StringUtils.leftPad(string0, (int) charArray0[7], string0);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("Mu%;E-[WPyz0", string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      
      String string3 = StringUtils.replace(string1, string0, string2, (int) charArray0[9]);
      assertNull(string3);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(string2, string0);
      assertSame(string0, string2);
      
      int int0 = StringUtils.indexOf(string3, charArray0[6]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals((-1), int0);
      assertSame(string2, string0);
      assertSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = "Bz10 qo]TEU\\0F98cq]3aracter must not be null*Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**Gv**";
      char char0 = '%';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "The Character must not be null";
      String string1 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "The character must not be nullEfo^Q@6/Z$%!|";
      int int0 = (-1020);
      String string1 = StringUtils.right(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String string1 = null;
      boolean boolean0 = StringUtils.equals(string1, string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = " ";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.equals(string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string1);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "The Character must not be null";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.stripEnd(string0, string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = "8RZ(";
      String string1 = "[>R&";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultIfEmpty(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("[>R&", string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      String string3 = StringUtils.strip(string0, string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("8RZ(", string3);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "k~$4dqT[Pod";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[1]);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = "8RZ(";
      String string1 = StringUtils.strip(string0, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = "The character must not be nullEfo^Q@6/Z$%!|";
      int int0 = (-1020);
      String string1 = StringUtils.right(string0, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.trimToEmpty(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("", string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = "&N%\\nPTLR-%UUzC'";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertEquals("&N%\\nPTLR-%UUzC'", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "@uz:";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("@uz:", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = "V0hob";
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String string1 = StringUtils.removeStart(stringArray0[3], stringArray0[3]);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "WS#DB39>E<;NcI We\":";
      String string1 = null;
      int int0 = StringUtils.lastIndexOf(string0, string1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center(string1, int0);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) string2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "8RZ(";
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertNotNull(string1);
      assertEquals("8RZ(", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertTrue(boolean0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = "[!Z4K`{t>QKZ^?h/ ";
      char char0 = 'Q';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = ">";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "']_<6";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string1);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "9Ktu,d~j";
      int int0 = (-840);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "9Ktu,d~j";
      String string1 = StringUtils.strip(string0);
      assertNotNull(string1);
      assertEquals("9Ktu,d~j", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = "minimum abb";
      String string1 = StringUtils.swapCase(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("MINIMUM ABB", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.abbreviate(string1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = "1`,i/0`1np~";
      int int0 = 10;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      int int0 = 13;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = " 4";
      String[] stringArray0 = new String[4];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      int int0 = (-891);
      String[] stringArray0 = StringUtils.split(string1, string1, int0);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.upperCase(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1);
      assertNotNull(stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }
}
