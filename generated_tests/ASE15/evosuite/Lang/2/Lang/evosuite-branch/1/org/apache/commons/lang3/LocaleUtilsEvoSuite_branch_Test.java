/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:38 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class LocaleUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = locale0.toString();
      assertNotNull(string0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", string0);
      
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "BH";
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      
      Locale locale1 = Locale.GERMAN;
      assertNotNull(locale1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertNotNull(list0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertNotNull(list0);
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "6O' \"!t|6";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("6O' \"!T|6", locale0.getCountry());
      assertEquals("6o' \"!t|6", locale0.getLanguage());
      assertEquals("6O' \"!t|6", locale0.getVariant());
      assertEquals("6o' \"!t|6_6O' \"!T|6_6O' \"!t|6", locale0.toString());
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("6O' \"!T|6", locale0.getCountry());
      assertEquals("6o' \"!t|6", locale0.getLanguage());
      assertEquals("6O' \"!t|6", locale0.getVariant());
      assertEquals("6o' \"!t|6_6O' \"!T|6_6O' \"!t|6", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "mm_QCd.uQ8#nCZ+!";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: mm_QCd.uQ8#nCZ+!
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "mm_Yafr$EuQi]+=!";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: mm_Yafr$EuQi]+=!
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "mg_Y4&mR] ";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: mg_Y4&mR] 
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "mm_aCdr@uQ8!ni]+=!";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: mm_aCdr@uQ8!ni]+=!
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "kg_,R=<`[P;iDf,@7";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: kg_,R=<`[P;iDf,@7
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "org.apach.commons.lang3.L\\caleUtil";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apach.commons.lang3.L\\caleUtil
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "d{K%bK#z^Wc,&<";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: d{K%bK#z^Wc,&<
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "~r6m";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: ~r6m
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "BH";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: BH
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "\\6\\#}'";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: \\6\\#}'
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "b+fRN]mshlP@d|D$\\:X7";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: b+fRN]mshlP@d|D$\\:X7
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "hi";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("hin", locale0.getISO3Language());
      assertEquals("hi", locale0.toString());
      assertEquals("hi", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      String string0 = locale0.toString();
      assertNotNull(string0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertNotNull(locale1);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it_IT", locale1.toString());
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      assertNotNull(set0);
      assertEquals(false, set0.isEmpty());
      assertEquals(156, set0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = null;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      assertNotNull(localeUtils_SyncAvoid0);
  }
}
