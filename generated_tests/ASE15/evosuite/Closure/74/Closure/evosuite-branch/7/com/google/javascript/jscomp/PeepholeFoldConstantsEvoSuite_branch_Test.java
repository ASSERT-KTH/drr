/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:48:58 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.AbstractPeepholeOptimization;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.jscomp.PeepholeOptimizationsPass;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

 
public class PeepholeFoldConstantsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 37;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(37, node0.getCharno());
      assertEquals(37, node0.getType());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(151589, node1.getSourcePosition());
      assertEquals(37, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(37, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(37, node1.getLineno());
      assertEquals(37, node0.getCharno());
      assertEquals(37, node0.getType());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 28;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(28, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(28, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(114716, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(28, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(28, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(28, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(114716, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 94;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(94, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(94, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(385118, node0.getSourcePosition());
      assertNotNull(node0);
      
      node0.setType(int0);
      assertEquals(94, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(94, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(94, node0.getType());
      assertEquals(385118, node0.getSourcePosition());
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(94, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(94, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(94, node0.getType());
      assertEquals(385118, node0.getSourcePosition());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(94, node1.getType());
      assertEquals(-1, node1.getSourcePosition());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(94, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(-1, node2.getLineno());
      assertEquals(94, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(94, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(94, node0.getType());
      assertEquals(385118, node0.getSourcePosition());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(94, node1.getType());
      assertEquals(-1, node1.getSourcePosition());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 95;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(389215, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(95, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(95, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(95, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 87;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(356439, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(87, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(87, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(87, node0.getCharno());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 86;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(86, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(352342, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(86, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(86, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(352342, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(86, node1.getType());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(86, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(352342, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(86, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(-1, node2.getSourcePosition());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 77;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(77, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(77, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(77, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(315469, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(77, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(77, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(77, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(77, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(315469, node1.getSourcePosition());
      assertEquals(77, node1.getLineno());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 74;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(74, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(303178, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(74, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      node0.setType(int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(74, node0.getCharno());
      assertEquals(74, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(303178, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(74, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(74, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(303178, node1.getSourcePosition());
      assertEquals(74, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(74, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(74, node0.getCharno());
      assertEquals(74, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(303178, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(74, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 71;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(290887, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(71, node0.getCharno());
      assertEquals(71, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(290887, node1.getSourcePosition());
      assertEquals(71, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(71, node1.getCharno());
      assertEquals(71, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(71, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(290887, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(71, node0.getCharno());
      assertEquals(71, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 65;
      String string0 = "\")>6AkuJq$wzk||+B";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(266305, node0.getSourcePosition());
      assertEquals(65, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(65, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(65, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(65, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(266305, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(65, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(65, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(266305, node0.getSourcePosition());
      assertEquals(65, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(65, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(65, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 63;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(39, node0.getType());
      assertEquals(258111, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(63, node0.getLineno());
      assertEquals(63, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(39, node0.getType());
      assertEquals(258111, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(63, node0.getLineno());
      assertEquals(63, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(63, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(63, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasOneChild());
      assertEquals(1, node2.getChildCount());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertEquals(258111, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(63, node0.getLineno());
      assertEquals(63, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(63, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 62;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(254014, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(62, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(62, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(62, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(254014, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(62, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(62, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(62, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(62, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(62, node1.getLineno());
      assertEquals(62, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(254014, node1.getSourcePosition());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 59;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(59, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(59, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(241723, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(59, node0.getType());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(59, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(59, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(241723, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(59, node0.getType());
      assertEquals(241723, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(59, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(59, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(59, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 56;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getCharno());
      assertEquals(56, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(229432, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(56, node1.getType());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getCharno());
      assertEquals(56, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(229432, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(56, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(56, node1.getType());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getCharno());
      assertEquals(56, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(229432, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 51;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(208947, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(51, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(51, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(208947, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(51, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(51, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(51, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(208947, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(51, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(51, node0.getCharno());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(51, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(51, node2.getType());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 49;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(49, node0.getCharno());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(49, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(49, node0.getCharno());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(49, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(49, node0.getCharno());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(200753, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(49, node2.getType());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 46;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(188462, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(46, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(46, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(188462, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(46, node1.getCharno());
      assertEquals(46, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(46, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(188462, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(46, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(46, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 43;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(176171, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(43, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(43, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(176171, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(43, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(43, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQuotedString());
      assertEquals(43, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(176171, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(43, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(43, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQuotedString());
      assertEquals(43, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.isVarArgs());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(43, node2.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      String string0 = "n6@L6=";
      Node node0 = Node.newString(string0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(40, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 36;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(36, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(36, node0.getType());
      assertEquals(147492, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(36, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(36, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(36, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(36, node1.getCharno());
      assertEquals(147492, node1.getSourcePosition());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(36, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(36, node0.getType());
      assertEquals(147492, node0.getSourcePosition());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(36, node0.getLineno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 23;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(94231, node0.getSourcePosition());
      assertEquals(23, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(94231, node0.getSourcePosition());
      assertEquals(23, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(23, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(1, node2.getChildCount());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasOneChild());
      assertEquals(23, node2.getType());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(94231, node0.getSourcePosition());
      assertEquals(23, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(23, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 21;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(21, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(21, node0.getType());
      assertEquals(86037, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(21, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 19;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(19, node0.getLineno());
      assertEquals(19, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(19, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(77843, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(19, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(19, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(19, node1.getLineno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(77843, node1.getSourcePosition());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(19, node0.getLineno());
      assertEquals(19, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(19, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(77843, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 17;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(17, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(17, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(69649, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(17, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(17, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(17, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(69649, node1.getSourcePosition());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(17, node1.getLineno());
      assertEquals(17, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(17, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(69649, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(17, node0.getCharno());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 15;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(15, node0.getType());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(15, node1.getType());
      assertEquals(61455, node1.getSourcePosition());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(15, node1.getCharno());
      assertEquals(15, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(15, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(15, node0.getType());
      assertEquals(15, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(61455, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 12;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(12, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(12, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(12, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(12, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(12, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(12, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(12, node2.getType());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(1, node2.getChildCount());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(12, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(49164, node0.getSourcePosition());
      assertEquals(39, node0.getType());
      assertEquals(12, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 11;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(11, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(45067, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(11, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(11, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(11, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(45067, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(11, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(11, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(true, node2.hasOneChild());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(11, node2.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(11, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(45067, node0.getSourcePosition());
      assertEquals(false, node0.hasOneChild());
      assertEquals(11, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 122;
      String string0 = "C`6";
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      Compiler compiler0 = new Compiler((PrintStream) mockPrintStream0);
      assertNotNull(compiler0);
      
      AbstractPeepholeOptimization[] abstractPeepholeOptimizationArray0 = new AbstractPeepholeOptimization[7];
      PeepholeOptimizationsPass peepholeOptimizationsPass0 = new PeepholeOptimizationsPass(compiler0, abstractPeepholeOptimizationArray0);
      assertNotNull(peepholeOptimizationsPass0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) peepholeOptimizationsPass0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      assertNotNull(nodeTraversal0);
      
      peepholeFoldConstants0.beginTraversal(nodeTraversal0);
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals("", nodeTraversal0.getSourceName());
      
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(499834, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasOneChild());
      assertEquals(122, node1.getType());
      assertEquals(-1, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(499834, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasOneChild());
      assertEquals(122, node1.getType());
      assertEquals(-1, node1.getLineno());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasChildren());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(122, node2.getType());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(122, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(499834, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(122, node0.getCharno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "MRrF7J;Zh|Acl*Z";
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(2, node0.getChildCount());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(2, node0.getChildCount());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(132, node0.getType());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptEcmaScript5());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(132, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(1, node1.getLineno());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(4096, node1.getSourcePosition());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(2, node1.getChildCount());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 37;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertEquals(37, node2.getType());
      assertEquals(0, node2.getSideEffectFlags());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node2.getSourcePosition());
      assertEquals(false, node2.isOnlyModifiesThisCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isLocalResultCall());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(151589, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 32;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(32, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(131104, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(32, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(131104, node0.getSourcePosition());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(32, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(-1, node1.getLineno());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 30;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(30, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(30, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(122910, node0.getSourcePosition());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(30, node0.getType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 29;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(29, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(29, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(118813, node0.getSourcePosition());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(29, node1.getType());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(29, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(29, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(39, node0.getType());
      assertEquals(118813, node0.getSourcePosition());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 27;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(27, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(27, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(110619, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(27, node1.getType());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(27, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(27, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(110619, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 27;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(27, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(110619, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(27, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(27, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(39, node0.getType());
      assertEquals(110619, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(27, node0.getCharno());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(27, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(110619, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(27, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 26;
      Node node0 = Node.newNumber((double) int0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(106522, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(26, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(26, node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(106522, node0.getSourcePosition());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(26, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(26, node0.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isOnlyModifiesThisCall());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasOneChild());
      assertEquals(26, node1.getType());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isLocalResultCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(-1, node1.getSourcePosition());
      assertEquals(true, node1.hasChildren());
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
