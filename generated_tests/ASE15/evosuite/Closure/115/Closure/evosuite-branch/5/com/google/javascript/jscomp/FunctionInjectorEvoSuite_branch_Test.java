/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 20:11:01 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.common.base.Supplier;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.FunctionInjector;
import com.google.javascript.jscomp.FunctionToBlockMutator;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.NameAnalyzer;
import com.google.javascript.jscomp.NodeUtil;
import com.google.javascript.rhino.Node;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class FunctionInjectorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      Set<String> set0 = NameAnalyzer.DEFAULT_GLOBAL_NAMES;
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertNotNull(set0);
      
      functionInjector0.setKnownConstants(set0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      // Undeclared exception!
      try {
        functionInjector0.setKnownConstants(set0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.RAW;
      assertEquals("RAW", abstractCompiler_LifeCycleStage0.name());
      assertEquals("RAW", abstractCompiler_LifeCycleStage0.toString());
      assertEquals(0, abstractCompiler_LifeCycleStage0.ordinal());
      
      boolean boolean0 = abstractCompiler_LifeCycleStage0.isNormalizedObfuscated();
      assertEquals("RAW", abstractCompiler_LifeCycleStage0.name());
      assertEquals("RAW", abstractCompiler_LifeCycleStage0.toString());
      assertEquals(0, abstractCompiler_LifeCycleStage0.ordinal());
      assertFalse(boolean0);
      
      String string0 = "VAR_DECL_SIMPL_ASSI^NMqNT";
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionToBlockMutator.LabelNameSupplier functionToBlockMutator_LabelNameSupplier0 = new FunctionToBlockMutator.LabelNameSupplier(supplier0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionToBlockMutator_LabelNameSupplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, (Supplier<String>) functionToBlockMutator_LabelNameSupplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals("RAW", abstractCompiler_LifeCycleStage0.name());
      assertEquals("RAW", abstractCompiler_LifeCycleStage0.toString());
      assertEquals(0, abstractCompiler_LifeCycleStage0.ordinal());
      assertNotNull(functionInjector0);
      
      JSModule jSModule0 = new JSModule(string0);
      assertEquals(-1, jSModule0.getDepth());
      assertEquals("VAR_DECL_SIMPL_ASSI^NMqNT", jSModule0.toString());
      assertEquals("VAR_DECL_SIMPL_ASSI^NMqNT", jSModule0.getName());
      assertNotNull(jSModule0);
      
      Node node0 = compiler0.getRoot();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNull(node0);
      
      TreeSet<FunctionInjector.Reference> treeSet0 = new TreeSet<FunctionInjector.Reference>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      Set<String> set0 = null;
      boolean boolean1 = functionInjector0.inliningLowersCost(jSModule0, node0, treeSet0, set0, boolean0, boolean0);
      assertEquals(-1, jSModule0.getDepth());
      assertEquals("VAR_DECL_SIMPL_ASSI^NMqNT", jSModule0.toString());
      assertEquals("VAR_DECL_SIMPL_ASSI^NMqNT", jSModule0.getName());
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertEquals("RAW", abstractCompiler_LifeCycleStage0.name());
      assertEquals("RAW", abstractCompiler_LifeCycleStage0.toString());
      assertEquals(0, abstractCompiler_LifeCycleStage0.ordinal());
      assertEquals("[]", treeSet0.toString());
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      boolean boolean0 = true;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      Node node0 = null;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.DIRECT;
      String string0 = "OV,{8_c?\\hKPpq'-";
      // Undeclared exception!
      try {
        Node node1 = functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      AbstractCompiler.LifeCycleStage abstractCompiler_LifeCycleStage0 = AbstractCompiler.LifeCycleStage.NORMALIZED_OBFUSCATED;
      compiler0.setLifeCycleStage(abstractCompiler_LifeCycleStage0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      boolean boolean0 = false;
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      Node node0 = null;
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      String string0 = "OV,{8_c?\\hKPpqv.";
      // Undeclared exception!
      try {
        Node node1 = functionInjector0.inline(node0, string0, node0, functionInjector_InliningMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NodeUtil.MatchDeclaration nodeUtil_MatchDeclaration0 = new NodeUtil.MatchDeclaration();
      assertNotNull(nodeUtil_MatchDeclaration0);
      
      boolean boolean0 = nodeUtil_MatchDeclaration0.equals((Object) nodeUtil_MatchDeclaration0);
      assertTrue(boolean0);
      
      Compiler compiler0 = new Compiler();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(compiler0);
      
      Supplier<String> supplier0 = compiler0.getUniqueNameIdSupplier();
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(supplier0);
      
      FunctionInjector functionInjector0 = new FunctionInjector((AbstractCompiler) compiler0, supplier0, boolean0, boolean0, boolean0);
      assertEquals(0.0, compiler0.getProgress(), 0.01D);
      assertNotNull(functionInjector0);
      
      Node node0 = null;
      // Undeclared exception!
      try {
        functionInjector0.maybePrepareCall(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Node node0 = null;
      String string0 = "com.google.javascript.jscomp.FunctionInjector$CanInlineResult";
      JSModule jSModule0 = new JSModule(string0);
      assertEquals("com.google.javascript.jscomp.FunctionInjector$CanInlineResult", jSModule0.toString());
      assertEquals(-1, jSModule0.getDepth());
      assertEquals("com.google.javascript.jscomp.FunctionInjector$CanInlineResult", jSModule0.getName());
      assertNotNull(jSModule0);
      
      FunctionInjector.InliningMode functionInjector_InliningMode0 = FunctionInjector.InliningMode.BLOCK;
      FunctionInjector.Reference functionInjector_Reference0 = new FunctionInjector.Reference(node0, jSModule0, functionInjector_InliningMode0);
      assertEquals("com.google.javascript.jscomp.FunctionInjector$CanInlineResult", jSModule0.toString());
      assertEquals(-1, jSModule0.getDepth());
      assertEquals("com.google.javascript.jscomp.FunctionInjector$CanInlineResult", jSModule0.getName());
      assertNotNull(functionInjector_Reference0);
  }
}
