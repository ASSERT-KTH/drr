/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:47:28 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Node;
import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;
import com.google.javascript.jscomp.mozilla.rhino.ast.ContinueStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ExpressionStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.Name;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.NumberLiteral;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.IRFactory;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class IRFactoryEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = 0;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      
      String string0 = "destructuring as1ignment Iorbidden";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      ContinueStatement continueStatement0 = new ContinueStatement(int0, int0);
      assertNotNull(continueStatement0);
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, continueStatement0.hasChildren());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.getAbsolutePosition());
      assertEquals(0, continueStatement0.getLength());
      
      astRoot0.addChildToBack((Node) continueStatement0);
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(false, continueStatement0.hasChildren());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(121, continueStatement0.getType());
      assertEquals(0, continueStatement0.depth());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.getAbsolutePosition());
      assertEquals(0, continueStatement0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorReporter errorReporter0 = null;
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(132, node0.getType());
      assertEquals(-1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasChildren());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNull(astRoot0.getEncodedSource());
      assertEquals("136", astRoot0.toString());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getEndLineno());
      assertNull(astRoot0.getJsDoc());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals("[]", treeSet0.toString());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = 1440;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1440, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(1440, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      
      ExpressionStatement expressionStatement0 = new ExpressionStatement(int0, int0);
      assertNotNull(expressionStatement0);
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(1440, expressionStatement0.getLength());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(1440, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1440, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      
      astRoot0.addChildrenToBack((Node) expressionStatement0);
      assertEquals("136", astRoot0.toString());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(1440, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getSourceName());
      assertEquals(1440, astRoot0.getAbsolutePosition());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, expressionStatement0.getLineno());
      assertEquals(0, expressionStatement0.depth());
      assertEquals(1440, expressionStatement0.getLength());
      assertEquals("133", expressionStatement0.toString());
      assertEquals(1440, expressionStatement0.getAbsolutePosition());
      assertEquals(false, expressionStatement0.hasChildren());
      assertEquals(1440, expressionStatement0.getPosition());
      assertNull(expressionStatement0.getJsDoc());
      assertEquals(133, expressionStatement0.getType());
      
      String string0 = "destructuring assignment forbidden";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorReporter errorReporter0 = null;
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 0;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      
      String string0 = "destructuring as1ignment Iorbidden";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorReporter errorReporter0 = null;
      NumberLiteral numberLiteral0 = (NumberLiteral)Node.newNumber((double) int0);
      assertNotNull(numberLiteral0);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals("40", numberLiteral0.toString());
      assertNull(numberLiteral0.getValue());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      
      astRoot0.addChildToFront((Node) numberLiteral0);
      assertEquals(-1, numberLiteral0.getLineno());
      assertEquals(-1, numberLiteral0.getPosition());
      assertEquals(-1, numberLiteral0.getAbsolutePosition());
      assertEquals("40", numberLiteral0.toString());
      assertNull(numberLiteral0.getValue());
      assertEquals(1, numberLiteral0.getLength());
      assertEquals(40, numberLiteral0.getType());
      assertNull(numberLiteral0.getJsDoc());
      assertEquals(false, numberLiteral0.hasChildren());
      assertEquals(0.0, numberLiteral0.getNumber(), 0.01D);
      assertEquals(0.0, numberLiteral0.getDouble(), 0.01D);
      assertEquals(0, numberLiteral0.depth());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      
      com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
      assertNotNull(node0);
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      assertNull(astRoot0.getSourceName());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getParamCount());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(false, astRoot0.isInStrictMode());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals("136", astRoot0.toString());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = 0;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      
      String string0 = "destructuring as1ignment Iorbidden";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      ContinueStatement continueStatement0 = new ContinueStatement(int0, int0);
      assertNotNull(continueStatement0);
      assertEquals(121, continueStatement0.getType());
      assertEquals(false, continueStatement0.hasChildren());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.getAbsolutePosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(0, continueStatement0.getLength());
      
      astRoot0.addChildToBack((Node) continueStatement0);
      assertEquals(121, continueStatement0.getType());
      assertEquals(false, continueStatement0.hasChildren());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.getAbsolutePosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(0, continueStatement0.getLength());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals("136", astRoot0.toString());
      assertNull(astRoot0.getJsDoc());
      assertEquals(136, astRoot0.getType());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(1, astRoot0.getLength());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(0, astRoot0.getPosition());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getAbsolutePosition());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorReporter errorReporter0 = null;
      Name name0 = new Name(int0, int0);
      assertNotNull(name0);
      assertEquals(39, name0.getType());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.depth());
      assertNull(name0.getIdentifier());
      assertEquals(false, name0.hasChildren());
      assertEquals(0, name0.getAbsolutePosition());
      assertEquals(0, name0.getPosition());
      assertEquals("39", name0.toString());
      assertNull(name0.getString());
      assertEquals(0, name0.getLength());
      assertEquals(-1, name0.getLineno());
      assertEquals(0, name0.length());
      
      continueStatement0.setLabel(name0);
      assertEquals(121, continueStatement0.getType());
      assertEquals(false, continueStatement0.hasChildren());
      assertNull(continueStatement0.getJsDoc());
      assertEquals(-1, continueStatement0.getLineno());
      assertEquals(0, continueStatement0.getPosition());
      assertEquals(0, continueStatement0.getAbsolutePosition());
      assertEquals("121", continueStatement0.toString());
      assertEquals(0, continueStatement0.depth());
      assertEquals(0, continueStatement0.getLength());
      assertEquals(39, name0.getType());
      assertNull(name0.getJsDoc());
      assertNull(name0.getIdentifier());
      assertEquals(false, name0.hasChildren());
      assertEquals(0, name0.getAbsolutePosition());
      assertEquals(0, name0.getPosition());
      assertEquals("39", name0.toString());
      assertNull(name0.getString());
      assertEquals(0, name0.getLength());
      assertEquals(-1, name0.getLineno());
      assertEquals(1, name0.depth());
      assertEquals(0, name0.length());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // StringNode: str is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = 31;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals(31, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(31, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertEquals(false, astRoot0.hasChildren());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      
      NewExpression newExpression0 = new NewExpression(int0);
      assertNotNull(newExpression0);
      assertEquals(31, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(30, newExpression0.getType());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getRp());
      assertEquals("30", newExpression0.toString());
      assertEquals(1, newExpression0.getLength());
      assertNull(newExpression0.getJsDoc());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(31, newExpression0.getPosition());
      
      String string0 = "l*wgvZ8:JTE4PJbDX";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      astRoot0.addChildToFront((Node) newExpression0);
      assertEquals(31, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertEquals(30, newExpression0.getType());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getRp());
      assertEquals("30", newExpression0.toString());
      assertEquals(1, newExpression0.getLength());
      assertNull(newExpression0.getJsDoc());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals(31, newExpression0.getPosition());
      assertEquals(31, astRoot0.getPosition());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(true, astRoot0.hasChildren());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertEquals(31, astRoot0.getAbsolutePosition());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals("136", astRoot0.toString());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(136, astRoot0.getType());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getEncodedSource());
      assertNull(astRoot0.getJsDoc());
      
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, (ErrorReporter) errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int int0 = 1448;
      AstRoot astRoot0 = new AstRoot(int0);
      assertNotNull(astRoot0);
      assertEquals("136", astRoot0.toString());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(136, astRoot0.getType());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1448, astRoot0.getAbsolutePosition());
      assertEquals(1448, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      
      AstRoot astRoot1 = (AstRoot)astRoot0.setType(int0);
      assertSame(astRoot0, astRoot1);
      assertSame(astRoot1, astRoot0);
      assertNotNull(astRoot1);
      assertEquals(1448, astRoot0.getType());
      assertEquals(false, astRoot0.isInStrictMode());
      assertEquals(1, astRoot0.getLength());
      assertNull(astRoot0.getJsDoc());
      assertEquals(0, astRoot0.getFunctionCount());
      assertEquals(false, astRoot0.hasChildren());
      assertEquals(-1, astRoot0.getLineno());
      assertEquals(-1, astRoot0.getEncodedSourceEnd());
      assertEquals(-1, astRoot0.getEncodedSourceStart());
      assertNull(astRoot0.getEncodedSource());
      assertEquals(-1, astRoot0.getBaseLineno());
      assertNull(astRoot0.getSourceName());
      assertEquals(1448, astRoot0.getAbsolutePosition());
      assertEquals(1448, astRoot0.getPosition());
      assertEquals(0, astRoot0.getParamCount());
      assertEquals("1448", astRoot0.toString());
      assertEquals(0, astRoot0.depth());
      assertEquals(-1, astRoot0.getEndLineno());
      assertEquals(0, astRoot0.getRegexpCount());
      assertEquals(1448, astRoot1.getType());
      assertEquals(0, astRoot1.getFunctionCount());
      assertEquals(1448, astRoot1.getPosition());
      assertEquals(-1, astRoot1.getEndLineno());
      assertNull(astRoot1.getJsDoc());
      assertEquals(0, astRoot1.getRegexpCount());
      assertEquals("1448", astRoot1.toString());
      assertEquals(-1, astRoot1.getLineno());
      assertEquals(-1, astRoot1.getEncodedSourceEnd());
      assertEquals(false, astRoot1.hasChildren());
      assertEquals(0, astRoot1.depth());
      assertEquals(1, astRoot1.getLength());
      assertEquals(-1, astRoot1.getBaseLineno());
      assertEquals(false, astRoot1.isInStrictMode());
      assertEquals(1448, astRoot1.getAbsolutePosition());
      assertEquals(-1, astRoot1.getEncodedSourceStart());
      assertNull(astRoot1.getEncodedSource());
      assertEquals(0, astRoot1.getParamCount());
      assertNull(astRoot1.getSourceName());
      
      String string0 = "l|*wLvZ8:JTE4PJbDX";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = false;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, boolean0);
      assertNotNull(config0);
      assertEquals("[]", treeSet0.toString());
      
      ErrorReporter errorReporter0 = null;
      // Undeclared exception!
      try {
        com.google.javascript.rhino.Node node0 = IRFactory.transformTree(astRoot0, string0, config0, errorReporter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // 1448
         //
      }
  }
}
