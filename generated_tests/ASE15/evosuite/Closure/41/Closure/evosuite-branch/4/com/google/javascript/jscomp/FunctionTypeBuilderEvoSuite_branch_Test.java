/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:38:59 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.FunctionTypeBuilder;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class FunctionTypeBuilderEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = null;
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      String string0 = "";
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(string0);
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Node node0 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node0);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = null;
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      String string0 = "{0} @extends non-object type {1}";
      functionTypeBuilder_AstFunctionContents0.recordEscapedVarName(string0);
      Iterable<String> iterable0 = functionTypeBuilder_AstFunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      
      boolean boolean0 = FunctionTypeBuilder.isFunctionTypeDeclaration(jSDocInfo0);
      assertFalse(boolean0);
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "f";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      
      FunctionType functionType1 = functionTypeBuilder0.buildAndRegister();
      assertNotNull(functionType1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertNotSame(functionType1, functionType0);
      assertFalse(functionType1.equals((Object)functionType0));
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDo());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCatch());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(1, functionType1.getMaxArguments());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isInterface());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNominalConstructor());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isAllType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "f";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getTemplateTypeName());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isAdd());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isName());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isComma());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isRegExp());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isTrue());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getTemplateTypeName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "f";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
      
      JSDocInfo jSDocInfo0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferTemplateTypeName(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLabelName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isCall());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isDelProp());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "6";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasChildren());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getCharno());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasChildren());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getCharno());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isNumber());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(0, node0.getLength());
      assertEquals(true, node0.hasChildren());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isOr());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFunction());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getCharno());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      
      // Undeclared exception!
      try {
        FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node0, jSDocInfo0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 1 [source_file:  [testcode] ] is not a string node
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "f";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDelProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isEmpty());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDelProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isEmpty());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDelProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isEmpty());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.isNominalConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isDefine());
      
      FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder0.inferParameterTypes(jSDocInfo0);
      assertNotNull(functionTypeBuilder2);
      assertSame(functionTypeBuilder2, functionTypeBuilder1);
      assertSame(functionTypeBuilder2, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder2);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDelProp());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isEmpty());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isTry());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTrue());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isComma());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isDefine());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "26";
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isRegExp());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.isScript());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNot());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isRegExp());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.isScript());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNot());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      
      Node node1 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node1);
      
      JSDocInfo jSDocInfo0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOr());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isContinue());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isRegExp());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.isScript());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isNot());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "26";
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      Node node1 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node1);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasReturnType());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      assertNotNull(functionType0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      JSDocInfo jSDocInfo1 = functionType0.getOwnPropertyJSDocInfo(string0);
      assertNull(jSDocInfo1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      
      FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder0.inferThisType(jSDocInfo1, functionType0);
      assertNotNull(functionTypeBuilder2);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder2);
      assertSame(functionTypeBuilder2, functionTypeBuilder1);
      assertSame(functionTypeBuilder2, functionTypeBuilder0);
      assertEquals(false, node0.isCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVoid());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isThis());
      assertEquals(1, node0.getChildCount());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isTypeOf());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "*O:";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNE());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNE());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      JSDocInfo jSDocInfo0 = null;
      JSType jSType0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferThisType(jSDocInfo0, jSType0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNE());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isInc());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "26";
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      
      Node node1 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node1);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      assertNotNull(functionType0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      
      FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder0.inferThisType(jSDocInfo0, functionType0);
      assertNotNull(functionTypeBuilder2);
      assertSame(functionTypeBuilder2, functionTypeBuilder0);
      assertSame(functionTypeBuilder2, functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder2);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
      
      FunctionTypeBuilder functionTypeBuilder3 = functionTypeBuilder0.inferThisType(jSDocInfo0, functionType0);
      assertNotNull(functionTypeBuilder3);
      assertSame(functionTypeBuilder3, functionTypeBuilder0);
      assertSame(functionTypeBuilder3, functionTypeBuilder1);
      assertSame(functionTypeBuilder3, functionTypeBuilder2);
      assertSame(functionTypeBuilder0, functionTypeBuilder2);
      assertSame(functionTypeBuilder0, functionTypeBuilder3);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isGetProp());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isIf());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isCall());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isExprResult());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isWhile());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isGetterDef());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isNew());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "26";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoShadow());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isAdd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isDebugger());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNot());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isEmpty());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isInc());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isWith());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isComma());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoShadow());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "26";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      JSDocInfo jSDocInfo0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferInheritance(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDelProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isNull());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isComma());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "26";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isDefine());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNull());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFalse());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isNew());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isGetElem());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isIf());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "6";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      
      JSDocInfo jSDocInfo0 = node0.getJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferReturnType(jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isHook());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isCatch());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isNot());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isSetterDef());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDelProp());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "26";
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      
      Node node1 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node1);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      assertNotNull(functionType0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
      
      FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      assertNotNull(functionTypeBuilder2);
      assertSame(functionTypeBuilder2, functionTypeBuilder0);
      assertSame(functionTypeBuilder2, functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder2);
      assertEquals(false, node0.isThrow());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isCase());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetElem());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isRegExp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isFalse());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isNot());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isSwitch());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isThis());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.isIdeMode());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "s";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      
      FunctionType functionType0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isCatch());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isParamList());
      assertEquals(true, node0.hasChildren());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isAnd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isContinue());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isArrayLit());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isExprResult());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isFor());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isLabel());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "26";
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      
      Node node1 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node1);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isExport());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.inferParameterTypes(node1, jSDocInfo0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstant());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.hasType());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isExport());
      
      FunctionType functionType0 = functionTypeBuilder0.buildAndRegister();
      assertNotNull(functionType0);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      
      FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder0.inferFromOverriddenFunction(functionType0, node1);
      assertNotNull(functionTypeBuilder2);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder2);
      assertSame(functionTypeBuilder2, functionTypeBuilder0);
      assertSame(functionTypeBuilder2, functionTypeBuilder1);
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isRegExp());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isWith());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isGetElem());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isBreak());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isCase());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "s";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = null;
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents(functionTypeBuilder_AstFunctionContents0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isString());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isCase());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isThis());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isGetProp());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isNot());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isThrow());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.acceptConstKeyword());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "6";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAnd());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
      
      Scope scope0 = null;
      String string1 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string1, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isAnd());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isNumber());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isBreak());
      assertEquals(true, node0.isScript());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isReturn());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isTry());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isIn());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isLabel());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isCatch());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isObjectLit());
      assertEquals(4096, node0.getSourcePosition());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Node node0 = functionTypeBuilder_UnknownFunctionContents0.getSourceNode();
      assertNull(node0);
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      
      functionTypeBuilder_AstFunctionContents0.recordNonEmptyReturn();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "*O:";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents(functionTypeBuilder_AstFunctionContents0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      
      FunctionTypeBuilder functionTypeBuilder2 = functionTypeBuilder1.inferParameterTypes(jSDocInfo0);
      assertNotNull(functionTypeBuilder2);
      assertSame(functionTypeBuilder0, functionTypeBuilder2);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder2, functionTypeBuilder1);
      assertSame(functionTypeBuilder2, functionTypeBuilder0);
      assertSame(functionTypeBuilder1, functionTypeBuilder2);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.acceptConstKeyword());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isDebugger());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isSetterDef());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isVar());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isTry());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isDec());
      assertEquals(true, node0.isScript());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isInc());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isThrow());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOr());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isTrue());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isLabelName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.isNumber());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isIdGenerator());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isInterface());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isExport());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertEquals(false, jSDocInfo0.isDefine());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(false, jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = functionTypeBuilder2.buildAndRegister();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "*O:";
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, string0, string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isScript());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      Scope scope0 = null;
      FunctionTypeBuilder functionTypeBuilder0 = new FunctionTypeBuilder(string0, compiler0, node0, string0, scope0);
      assertNotNull(functionTypeBuilder0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isScript());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      FunctionTypeBuilder.AstFunctionContents functionTypeBuilder_AstFunctionContents0 = new FunctionTypeBuilder.AstFunctionContents(node0);
      assertNotNull(functionTypeBuilder_AstFunctionContents0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isScript());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      FunctionTypeBuilder functionTypeBuilder1 = functionTypeBuilder0.setContents(functionTypeBuilder_AstFunctionContents0);
      assertNotNull(functionTypeBuilder1);
      assertSame(functionTypeBuilder0, functionTypeBuilder1);
      assertSame(functionTypeBuilder1, functionTypeBuilder0);
      assertEquals(false, node0.isVoid());
      assertEquals(false, node0.isEmpty());
      assertEquals(false, node0.isAdd());
      assertEquals(false, node0.isAssign());
      assertEquals(false, node0.isComma());
      assertEquals(false, node0.isLabel());
      assertEquals(false, node0.isDelProp());
      assertEquals(false, node0.isGetProp());
      assertEquals(false, node0.isCall());
      assertEquals(false, node0.isContinue());
      assertEquals(false, node0.isFor());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isIn());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(" [testcode] ", node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isCatch());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isFunction());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isName());
      assertEquals(false, node0.isWith());
      assertEquals(false, node0.isBreak());
      assertEquals(false, node0.isDebugger());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isDefaultCase());
      assertEquals(false, node0.isOr());
      assertEquals(false, node0.isInstanceOf());
      assertEquals(false, node0.isIf());
      assertEquals(false, node0.isLabelName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isWhile());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isGetterDef());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isGetElem());
      assertEquals(false, node0.isRegExp());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isString());
      assertEquals(false, node0.isInc());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isNot());
      assertEquals(false, node0.isObjectLit());
      assertEquals(false, node0.isDo());
      assertEquals(false, node0.isSetterDef());
      assertEquals(false, node0.isThis());
      assertEquals(false, node0.isHook());
      assertEquals(false, node0.isThrow());
      assertEquals(true, node0.isScript());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isAnd());
      assertEquals(false, node0.isNE());
      assertEquals(false, node0.isAssignAdd());
      assertEquals(false, node0.isParamList());
      assertEquals(false, node0.isArrayLit());
      assertEquals(false, node0.isFalse());
      assertEquals(false, node0.isReturn());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isTypeOf());
      assertEquals(false, node0.isSwitch());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isCase());
      assertEquals(false, node0.isExprResult());
      assertEquals(false, node0.isVar());
      assertEquals(false, node0.isNew());
      assertEquals(false, node0.isDec());
      assertEquals(false, node0.isNull());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isBlock());
      assertEquals(false, node0.isTrue());
      assertEquals(CompilerOptions.LanguageMode.ECMASCRIPT3, compiler0.languageMode());
      assertEquals(1, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.acceptConstKeyword());
      
      // Undeclared exception!
      try {
        FunctionType functionType0 = functionTypeBuilder1.buildAndRegister();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // All Function types must have params and a return type
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      boolean boolean0 = functionTypeBuilder_UnknownFunctionContents0.mayBeFromExterns();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FunctionTypeBuilder.UnknownFunctionContents functionTypeBuilder_UnknownFunctionContents0 = new FunctionTypeBuilder.UnknownFunctionContents();
      assertNotNull(functionTypeBuilder_UnknownFunctionContents0);
      
      Iterable<String> iterable0 = functionTypeBuilder_UnknownFunctionContents0.getEscapedVarNames();
      assertNotNull(iterable0);
  }
}
