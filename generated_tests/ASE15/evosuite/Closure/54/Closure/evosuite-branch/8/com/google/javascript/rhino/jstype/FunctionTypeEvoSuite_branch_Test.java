/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 03:12:17 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.ArrowType;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoResolvedType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.StaticSlot;
import com.google.javascript.rhino.jstype.TemplateType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.jstype.UnresolvedTypeExpression;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class FunctionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       Vector<JSType> vector0 = new Vector<JSType>();
//       assertNotNull(vector0);
//       assertEquals(10, vector0.capacity());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals("[]", vector0.toString());
//       
//       Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
//       assertNotNull(node0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(10, vector0.capacity());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals("[]", vector0.toString());
//       assertEquals(0, node0.getChildCount());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(0, node0.getLength());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.hasOneChild());
//       
//       String string0 = "ivffDXHPl(IAoZ (^";
//       UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
//       assertNotNull(unresolvedTypeExpression0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, unresolvedTypeExpression0.isEnumType());
//       assertEquals(false, unresolvedTypeExpression0.isUnionType());
//       assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
//       assertEquals(true, unresolvedTypeExpression0.canBeCalled());
//       assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
//       assertEquals(false, unresolvedTypeExpression0.isStringValueType());
//       assertEquals("?", unresolvedTypeExpression0.toString());
//       assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
//       assertEquals(false, unresolvedTypeExpression0.isNoType());
//       assertEquals(true, unresolvedTypeExpression0.isUnknownType());
//       assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
//       assertEquals(false, unresolvedTypeExpression0.isAllType());
//       assertEquals(false, unresolvedTypeExpression0.isVoidType());
//       assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
//       assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
//       assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
//       assertEquals(false, unresolvedTypeExpression0.isNullType());
//       assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
//       assertEquals(false, unresolvedTypeExpression0.isInterface());
//       assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
//       assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
//       assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
//       assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
//       assertEquals(false, unresolvedTypeExpression0.isNominalType());
//       assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
//       assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
//       assertEquals(false, unresolvedTypeExpression0.isConstructor());
//       assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
//       assertEquals(false, unresolvedTypeExpression0.isFunctionType());
//       assertEquals(false, unresolvedTypeExpression0.isResolved());
//       assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
//       assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
//       assertEquals("?", unresolvedTypeExpression0.getReferenceName());
//       assertEquals(false, unresolvedTypeExpression0.isRecordType());
//       assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
//       assertEquals(false, unresolvedTypeExpression0.isTemplateType());
//       assertEquals(true, unresolvedTypeExpression0.isNullable());
//       assertEquals(10, vector0.capacity());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals("[]", vector0.toString());
//       assertEquals(0, node0.getChildCount());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(0, node0.getLength());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.hasOneChild());
//       
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertNotNull(errorFunctionType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       
//       errorFunctionType0.setPrototypeBasedOn((ObjectType) unresolvedTypeExpression0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, unresolvedTypeExpression0.isEnumType());
//       assertEquals(false, unresolvedTypeExpression0.isUnionType());
//       assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
//       assertEquals(true, unresolvedTypeExpression0.canBeCalled());
//       assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
//       assertEquals(false, unresolvedTypeExpression0.isStringValueType());
//       assertEquals("?", unresolvedTypeExpression0.toString());
//       assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
//       assertEquals(false, unresolvedTypeExpression0.isNoType());
//       assertEquals(true, unresolvedTypeExpression0.isUnknownType());
//       assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
//       assertEquals(false, unresolvedTypeExpression0.isAllType());
//       assertEquals(false, unresolvedTypeExpression0.isVoidType());
//       assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
//       assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
//       assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
//       assertEquals(false, unresolvedTypeExpression0.isNullType());
//       assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
//       assertEquals(false, unresolvedTypeExpression0.isInterface());
//       assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
//       assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
//       assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
//       assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
//       assertEquals(false, unresolvedTypeExpression0.isNominalType());
//       assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
//       assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
//       assertEquals(false, unresolvedTypeExpression0.isConstructor());
//       assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
//       assertEquals(false, unresolvedTypeExpression0.isFunctionType());
//       assertEquals(false, unresolvedTypeExpression0.isResolved());
//       assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
//       assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
//       assertEquals("?", unresolvedTypeExpression0.getReferenceName());
//       assertEquals(false, unresolvedTypeExpression0.isRecordType());
//       assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
//       assertEquals(false, unresolvedTypeExpression0.isTemplateType());
//       assertEquals(true, unresolvedTypeExpression0.isNullable());
//       assertEquals(10, vector0.capacity());
//       assertEquals(true, vector0.isEmpty());
//       assertEquals(0, vector0.size());
//       assertEquals("[]", vector0.toString());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(0, node0.getChildCount());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(false, node0.isOptionalArg());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(0, node0.getLength());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.hasOneChild());
//       
//       String string1 = errorFunctionType0.toDebugHashCodeString();
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotNull(string1);
//       assertEquals("function ({12}, {12}, {12}): {1690076718}", string1);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(true, errorFunctionType0.hasCachedValues());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.isNoType());
//   }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      
      FunctionType functionType1 = (FunctionType)functionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noResolvedType0);
      assertSame(functionType1, functionType0);
      assertSame(functionType0, functionType1);
      assertNotNull(functionType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(1, functionType1.getMaxArguments());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(true, functionType1.isResolved());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " IcXE~mX\"G ";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((ObjectType) noResolvedType0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(1, linkedList0.size());
      assertEquals("[NoResolvedType]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      errorFunctionType0.setImplementedInterfaces((List<ObjectType>) linkedList0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(1, linkedList0.size());
      assertEquals("[NoResolvedType]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.resolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) noResolvedType0);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertFalse(boolean0 == boolean1);
      assertNotNull(errorFunctionType1);
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(true, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.isConstructor());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isStringValueType());
      
      // Undeclared exception!
      try {
        noResolvedType0.setImplicitPrototype(functionType0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       String string0 = "]";
//       ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
//       assertNotNull(errorFunctionType0);
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       Node node0 = errorFunctionType0.getSource();
//       assertNull(node0);
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
//       assertNotNull(functionType0);
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.hasCachedValues());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNominalType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNumberValueType());
//       
//       String string1 = functionType0.toDebugHashCodeString();
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals("function (this:{93}): {9}", string1);
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNominalType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNumberValueType());
//       
//       functionType0.clearCachedValues();
//       assertNotSame(string0, string1);
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(false, errorFunctionType0.isCheckedUnknownType());
//       assertEquals(true, errorFunctionType0.hasInstanceType());
//       assertEquals(false, errorFunctionType0.isInterface());
//       assertEquals(false, errorFunctionType0.isBooleanValueType());
//       assertEquals(false, errorFunctionType0.isEnumElementType());
//       assertEquals(false, errorFunctionType0.isNominalType());
//       assertEquals(false, errorFunctionType0.isOrdinaryFunction());
//       assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
//       assertEquals(true, errorFunctionType0.isConstructor());
//       assertEquals(false, errorFunctionType0.isVoidType());
//       assertNull(errorFunctionType0.getTemplateTypeName());
//       assertEquals(false, errorFunctionType0.isRecordType());
//       assertEquals(true, errorFunctionType0.canBeCalled());
//       assertEquals(false, errorFunctionType0.isTemplateType());
//       assertEquals(3, errorFunctionType0.getMaxArguments());
//       assertEquals(false, errorFunctionType0.isNoObjectType());
//       assertEquals(false, errorFunctionType0.isNullType());
//       assertEquals(false, errorFunctionType0.hasCachedValues());
//       assertEquals(false, errorFunctionType0.isAllType());
//       assertEquals(false, errorFunctionType0.isNoResolvedType());
//       assertEquals(true, errorFunctionType0.isFunctionType());
//       assertEquals(false, errorFunctionType0.isUnionType());
//       assertEquals(false, errorFunctionType0.isResolved());
//       assertEquals(false, errorFunctionType0.isStringValueType());
//       assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
//       assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
//       assertEquals(false, errorFunctionType0.isEnumType());
//       assertEquals(false, errorFunctionType0.isNumberValueType());
//       assertEquals(false, errorFunctionType0.isNoType());
//       assertEquals(false, errorFunctionType0.isReturnTypeInferred());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(false, functionType0.isNoObjectType());
//       assertEquals(false, functionType0.isOrdinaryFunction());
//       assertEquals(false, functionType0.isAllType());
//       assertEquals(false, functionType0.isStringValueType());
//       assertEquals(false, functionType0.isNullType());
//       assertEquals(true, functionType0.isFunctionType());
//       assertEquals(false, functionType0.isCheckedUnknownType());
//       assertEquals(false, functionType0.isVoidType());
//       assertEquals(false, functionType0.isTemplateType());
//       assertEquals(false, functionType0.isEnumType());
//       assertEquals(true, functionType0.isInterface());
//       assertEquals(false, functionType0.isNoType());
//       assertEquals(false, functionType0.isNoResolvedType());
//       assertEquals(0, functionType0.getExtendedInterfacesCount());
//       assertEquals(false, functionType0.isFunctionPrototypeType());
//       assertEquals(false, functionType0.isConstructor());
//       assertEquals(true, functionType0.hasCachedValues());
//       assertEquals(true, functionType0.hasInstanceType());
//       assertEquals(true, functionType0.canBeCalled());
//       assertEquals(false, functionType0.isNominalType());
//       assertNull(functionType0.getTemplateTypeName());
//       assertEquals(false, functionType0.isReturnTypeInferred());
//       assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, functionType0.isResolved());
//       assertEquals(false, functionType0.isUnionType());
//       assertEquals(0, functionType0.getMaxArguments());
//       assertEquals(false, functionType0.isEnumElementType());
//       assertEquals(false, functionType0.isRecordType());
//       assertEquals(false, functionType0.isBooleanValueType());
//       assertEquals(false, functionType0.isNumberValueType());
//   }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      
      InstanceObjectType instanceObjectType0 = (InstanceObjectType)noObjectType0.getTypeOfThis();
      assertNotNull(instanceObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isOrdinaryFunction());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isCheckedUnknownType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isFunctionPrototypeType());
      assertEquals(false, instanceObjectType0.isEnumElementType());
      assertEquals(false, instanceObjectType0.isNoResolvedType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEnumType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isInterface());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isNominalType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(true, noObjectType0.matchesNumberContext());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(83, node0.getType());
      
      String string0 = "ivffDXHPl(IAoZ (^";
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(83, node0.getType());
      
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unresolvedTypeExpression0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(83, node0.getType());
      
      boolean boolean1 = functionType0.hasInstanceType();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(true, vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(83, node0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      
      functionType0.clearCachedValues();
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      
      boolean boolean1 = functionType0.canTestForShallowEqualityWith((JSType) errorFunctionType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "+WFJ";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("+WFJ", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("+WFJ", templateType0.toString());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean0 = true;
      JSType[] jSTypeArray0 = new JSType[1];
      jSTypeArray0[0] = (JSType) templateType0;
      assertNotNull(jSTypeArray0[0]);
      assertEquals(false, jSTypeArray0[0].isVoidType());
      assertEquals(false, jSTypeArray0[0].isNoResolvedType());
      assertEquals(false, jSTypeArray0[0].isCheckedUnknownType());
      assertEquals(false, jSTypeArray0[0].isAllType());
      assertEquals(false, jSTypeArray0[0].isNumberValueType());
      assertEquals(false, jSTypeArray0[0].isRecordType());
      assertEquals(false, jSTypeArray0[0].isEnumType());
      assertEquals(false, jSTypeArray0[0].isResolved());
      assertEquals(false, jSTypeArray0[0].isFunctionType());
      assertEquals(false, jSTypeArray0[0].isUnionType());
      assertEquals(false, jSTypeArray0[0].isFunctionPrototypeType());
      assertEquals(false, jSTypeArray0[0].isOrdinaryFunction());
      assertEquals(false, jSTypeArray0[0].isConstructor());
      assertEquals(false, jSTypeArray0[0].isInterface());
      assertEquals(false, jSTypeArray0[0].isNominalType());
      assertEquals(false, jSTypeArray0[0].isEnumElementType());
      assertEquals(false, jSTypeArray0[0].isNoObjectType());
      assertEquals(false, jSTypeArray0[0].isStringValueType());
      assertEquals(false, jSTypeArray0[0].isNoType());
      assertEquals(true, jSTypeArray0[0].isTemplateType());
      assertEquals(false, jSTypeArray0[0].isNullType());
      assertEquals(false, jSTypeArray0[0].isBooleanValueType());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("+WFJ", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("+WFJ", templateType0.toString());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) templateType0, boolean0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("+WFJ", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("+WFJ", templateType0.toString());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      
      String string1 = functionType0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("function (...[+WFJ]): +WFJ", string1);
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals("+WFJ", templateType0.getReferenceName());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.hasCachedValues());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals("+WFJ", templateType0.toString());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string1 = errorFunctionType0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("function (new:], *, *, *): ]", string1);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "+WFJ";
      TemplateType templateType0 = new TemplateType(jSTypeRegistry0, string0);
      assertNotNull(templateType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("+WFJ", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("+WFJ", templateType0.toString());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      
      Node node0 = null;
      FunctionType functionType0 = jSTypeRegistry0.createConstructorType(string0, node0, node0, (JSType) templateType0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("+WFJ", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("+WFJ", templateType0.toString());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      
      String string1 = "prototype";
      assertNotSame(string1, string0);
      
      boolean boolean0 = functionType0.defineDeclaredProperty(string1, (JSType) templateType0, node0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("+WFJ", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("+WFJ", templateType0.toString());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
      
      String string2 = functionType0.toString();
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("function (...[?]): +WFJ", string2);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, templateType0.isRecordType());
      assertEquals(false, templateType0.isVoidType());
      assertEquals(false, templateType0.isNumberValueType());
      assertEquals(false, templateType0.isAllType());
      assertEquals(false, templateType0.isNullType());
      assertEquals(false, templateType0.isFunctionType());
      assertEquals(false, templateType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, templateType0.getPossibleToBooleanOutcomes());
      assertEquals(false, templateType0.isResolved());
      assertEquals(false, templateType0.isBooleanValueType());
      assertEquals(true, templateType0.isTemplateType());
      assertEquals("+WFJ", templateType0.getReferenceName());
      assertEquals(false, templateType0.isUnionType());
      assertEquals(false, templateType0.isFunctionPrototypeType());
      assertEquals("+WFJ", templateType0.toString());
      assertEquals(false, templateType0.isEnumElementType());
      assertEquals(false, templateType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
      
      int int0 = functionType0.hashCode();
      assertEquals(93, int0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isInterface());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSTypeNative[] jSTypeNativeArray0 = new JSTypeNative[9];
      JSTypeNative jSTypeNative0 = JSTypeNative.GREATEST_FUNCTION_TYPE;
      jSTypeNativeArray0[0] = jSTypeNative0;
      assertEquals(50, jSTypeNativeArray0[0].ordinal());
      assertEquals("GREATEST_FUNCTION_TYPE", jSTypeNativeArray0[0].name());
      assertEquals("GREATEST_FUNCTION_TYPE", jSTypeNativeArray0[0].toString());
      
      jSTypeNativeArray0[1] = jSTypeNative0;
      assertEquals(50, jSTypeNativeArray0[1].ordinal());
      assertEquals("GREATEST_FUNCTION_TYPE", jSTypeNativeArray0[1].name());
      assertEquals("GREATEST_FUNCTION_TYPE", jSTypeNativeArray0[1].toString());
      
      jSTypeNativeArray0[2] = jSTypeNative0;
      assertEquals(50, jSTypeNativeArray0[2].ordinal());
      assertEquals("GREATEST_FUNCTION_TYPE", jSTypeNativeArray0[2].toString());
      assertEquals("GREATEST_FUNCTION_TYPE", jSTypeNativeArray0[2].name());
      
      JSTypeNative jSTypeNative1 = JSTypeNative.U2U_FUNCTION_TYPE;
      assertNotSame(jSTypeNative1, jSTypeNative0);
      
      jSTypeNativeArray0[3] = jSTypeNative1;
      assertEquals(48, jSTypeNativeArray0[3].ordinal());
      assertEquals("U2U_FUNCTION_TYPE", jSTypeNativeArray0[3].name());
      assertEquals("U2U_FUNCTION_TYPE", jSTypeNativeArray0[3].toString());
      
      // Undeclared exception!
      try {
        JSType jSType0 = jSTypeRegistry0.createUnionType(jSTypeNativeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "[";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = JSType.isEquivalent((JSType) functionType0, (JSType) functionType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isInterface());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "ivffDXHPl(IAoZ (^";
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unresolvedTypeExpression0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      
      FunctionType functionType1 = (FunctionType)JSType.getGreatestSubtype(errorFunctionType0, functionType0);
      assertSame(functionType0, functionType1);
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getSourcePosition());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasChildren());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getChildCount());
      assertEquals(-1, node0.getLineno());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(10, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(2, functionType1.getMaxArguments());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isVoidType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "The existing child node of th arnt should not be null.";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isAllType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        ObjectType objectType0 = functionType0.getTopMostDefiningType(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ">";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      // Undeclared exception!
      try {
        ObjectType objectType0 = errorFunctionType0.getTopMostDefiningType(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "The existing child node of th arnt should not be null.";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType1 = (NoResolvedType)FunctionType.getTopDefiningInterface((ObjectType) noResolvedType0, string0);
      assertSame(noResolvedType1, noResolvedType0);
      assertSame(noResolvedType0, noResolvedType1);
      assertNotNull(noResolvedType1);
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(false, noResolvedType1.hasCachedValues());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(false, noResolvedType1.isInterface());
      assertNull(noResolvedType1.getTemplateTypeName());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(false, noResolvedType1.isResolved());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType1.isNullType());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ":";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ObjectType objectType0 = FunctionType.getTopDefiningInterface((ObjectType) errorFunctionType0, string0);
      assertNull(objectType0);
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      
      FunctionType functionType1 = (FunctionType)functionType0.getGreatestSubtype((JSType) errorFunctionType0);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType1));
      assertNotNull(functionType1);
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      
      JSType.TypePair jSType_TypePair0 = functionType0.getTypesUnderShallowEquality((JSType) noResolvedType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      
      NoResolvedType noResolvedType1 = (NoResolvedType)noResolvedType0.getLeastSupertype((JSType) noResolvedType0);
      assertSame(noResolvedType1, noResolvedType0);
      assertSame(noResolvedType0, noResolvedType1);
      assertNotNull(noResolvedType1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(false, noResolvedType1.isNullType());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(false, noResolvedType1.hasCachedValues());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(false, noResolvedType1.isResolved());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType1.isRecordType());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertNull(noResolvedType1.getTemplateTypeName());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "The existing child node of the arnt should not be null.";
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(1, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = noResolvedType0.getParametersNode();
      assertNotNull(node0);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionType0.defineProperty(string0, noResolvedType0, boolean0, node0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(true, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isVarArgs());
      assertNull(node0.getSourceFileName());
      assertEquals(83, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(1, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType1 = (NoResolvedType)functionType0.getPropertyType(string0);
      assertSame(noResolvedType1, noResolvedType0);
      assertSame(noResolvedType0, noResolvedType1);
      assertTrue(boolean0 == boolean1);
      assertNotNull(noResolvedType1);
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(1, functionType0.getMaxArguments());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, noResolvedType1.isConstructor());
      assertEquals(2147483647, noResolvedType1.getPropertiesCount());
      assertEquals(false, noResolvedType1.isReturnTypeInferred());
      assertEquals(false, noResolvedType1.isInterface());
      assertEquals(false, noResolvedType1.isFunctionType());
      assertEquals(false, noResolvedType1.isTemplateType());
      assertEquals(false, noResolvedType1.isResolved());
      assertEquals(true, noResolvedType1.hasInstanceType());
      assertEquals(true, noResolvedType1.matchesStringContext());
      assertEquals(false, noResolvedType1.isNullType());
      assertEquals(false, noResolvedType1.isNumberValueType());
      assertEquals(true, noResolvedType1.hasCachedValues());
      assertEquals(false, noResolvedType1.isUnionType());
      assertEquals(true, noResolvedType1.isNullable());
      assertEquals(false, noResolvedType1.isAllType());
      assertEquals(false, noResolvedType1.isEnumElementType());
      assertEquals(2147483647, noResolvedType1.getMaxArguments());
      assertEquals(false, noResolvedType1.isRecordType());
      assertNull(noResolvedType1.getReferenceName());
      assertEquals(false, noResolvedType1.isNominalType());
      assertEquals(false, noResolvedType1.isBooleanValueType());
      assertEquals(false, noResolvedType1.isCheckedUnknownType());
      assertEquals(false, noResolvedType1.isVoidType());
      assertEquals(true, noResolvedType1.matchesObjectContext());
      assertEquals(false, noResolvedType1.isEnumType());
      assertEquals(true, noResolvedType1.matchesNumberContext());
      assertEquals(false, noResolvedType1.isOrdinaryFunction());
      assertEquals(false, noResolvedType1.isStringValueType());
      assertNull(noResolvedType1.getTemplateTypeName());
      assertEquals(false, noResolvedType1.isNoObjectType());
      assertEquals(0, noResolvedType1.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType1.canBeCalled());
      assertEquals(false, noResolvedType1.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType1.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      functionType0.setExtendedInterfaces((List<ObjectType>) linkedList0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      
      Vector<ObjectType> vector0 = new Vector<ObjectType>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      
      try {
        noResolvedType0.setExtendedInterfaces((List<ObjectType>) vector0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getAllExtendedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "[";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
      
      Iterable<ObjectType> iterable0 = functionType0.getAllImplementedInterfaces();
      assertNotNull(iterable0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNominalType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean1 = linkedList0.add((ObjectType) noResolvedType0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(1, linkedList0.size());
      assertEquals("[NoResolvedType]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      noResolvedType0.setImplementedInterfaces((List<ObjectType>) linkedList0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(1, linkedList0.size());
      assertEquals("[NoResolvedType]", linkedList0.toString());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Iterable<ObjectType> iterable0 = noResolvedType0.getAllImplementedInterfaces();
      assertFalse(boolean0 == boolean1);
      assertNotNull(iterable0);
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      
      String string0 = "ivffDXHPl(IAoZ (^";
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unresolvedTypeExpression0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)functionType0.getPrototype();
      assertNotNull(prototypeObjectType0);
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isCheckedUnknownType());
      assertEquals(false, prototypeObjectType0.isNoResolvedType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, prototypeObjectType0.isFunctionPrototypeType());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEnumType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isInterface());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isConstructor());
      assertEquals(false, prototypeObjectType0.isNominalType());
      assertEquals(false, prototypeObjectType0.isOrdinaryFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isEnumElementType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
      
      functionType0.setPrototypeBasedOn((ObjectType) noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isStringValueType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      
      FunctionType functionType0 = JSType.toMaybeFunctionType((JSType) noResolvedType0);
      assertNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      
      boolean boolean1 = noResolvedType0.setPrototype((PrototypeObjectType) functionType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      String string0 = "`ZxbD>yopX";
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      
      Set<String> set0 = errorFunctionType0.getOwnPropertyNames();
      assertNotNull(set0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNullType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "[";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.forceResolve((ErrorReporter) simpleErrorReporter0, (StaticScope<JSType>) errorFunctionType0);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertNotNull(errorFunctionType1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(true, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(true, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      
      Set<String> set0 = errorFunctionType0.getOwnPropertyNames();
      assertSame(errorFunctionType0, errorFunctionType1);
      assertNotNull(set0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isResolved());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(1, set0.size());
      assertEquals(false, set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "prototype";
      StaticSlot<JSType> staticSlot0 = noResolvedType0.getSlot(string0);
      assertNotNull(staticSlot0);
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isAllType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals("prototype", staticSlot0.getName());
      assertEquals(true, staticSlot0.isTypeInferred());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = ":";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      UnknownType unknownType0 = (UnknownType)errorFunctionType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isOrdinaryFunction());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isFunctionPrototypeType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isEnumElementType());
      assertEquals(false, unknownType0.isEnumType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isInterface());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNominalType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNoResolvedType());
      assertEquals("Unknown", unknownType0.getDisplayName());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isConstructor());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.hasDisplayName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals("NoObject", noObjectType0.toString());
      
      int int0 = noObjectType0.getMaxArguments();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoResolvedType());
      assertEquals(false, noObjectType0.isFunctionPrototypeType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isCheckedUnknownType());
      assertEquals(false, noObjectType0.isNominalType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isReturnTypeInferred());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isEnumElementType());
      assertEquals(false, noObjectType0.isRecordType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isEnumType());
      assertEquals(0, noObjectType0.getExtendedInterfacesCount());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals("NoObject", noObjectType0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      
      int int0 = functionType0.getMaxArguments();
      assertEquals(0, int0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " IcXE~mX\"G ";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = errorFunctionType0.getMaxArguments();
      assertEquals(3, int0);
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = noResolvedType0.getSuperClassConstructor();
      assertNotNull(functionType0);
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
      
      int int0 = functionType0.getMinArguments();
      assertEquals(0, int0);
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isResolved());
      assertEquals(1, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isEnumElementType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      
      int int0 = noResolvedType0.getMinArguments();
      assertEquals(0, int0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = jSTypeRegistry0.createFunctionTypeWithVarArgs((JSType) noResolvedType0, (List<JSType>) linkedList0);
      assertNotNull(functionType0);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = functionType0.hasImplementedInterfaces();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNoResolvedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " IcXE~mX\"G ";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = errorFunctionType0.hasImplementedInterfaces();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " IcXE~mX\"G ";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      LinkedList<ObjectType> linkedList0 = new LinkedList<ObjectType>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      boolean boolean1 = linkedList0.add((ObjectType) errorFunctionType0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[function (new: IcXE~mX\"G , *, *, *):  IcXE~mX\"G ]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      
      noResolvedType0.setImplementedInterfaces((List<ObjectType>) linkedList0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals("[function (new: IcXE~mX\"G , *, *, *):  IcXE~mX\"G ]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean2 = noResolvedType0.hasImplementedInterfaces();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean2);
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Vector<JSType> vector0 = new Vector<JSType>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) vector0);
      assertNotNull(node0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      String string0 = "ivffDXHPl(IAoZ (^";
      UnresolvedTypeExpression unresolvedTypeExpression0 = new UnresolvedTypeExpression(jSTypeRegistry0, node0, string0);
      assertNotNull(unresolvedTypeExpression0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      JSType[] jSTypeArray0 = new JSType[2];
      FunctionType functionType0 = jSTypeRegistry0.createFunctionType((JSType) unresolvedTypeExpression0, jSTypeArray0);
      assertNotNull(functionType0);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      boolean boolean1 = functionType0.isOrdinaryFunction();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(83, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.isFromExterns());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, unresolvedTypeExpression0.isEnumType());
      assertEquals(BooleanLiteralSet.BOTH, unresolvedTypeExpression0.getPossibleToBooleanOutcomes());
      assertEquals(false, unresolvedTypeExpression0.isUnionType());
      assertEquals("?", unresolvedTypeExpression0.toString());
      assertEquals(false, unresolvedTypeExpression0.isConstructor());
      assertEquals(false, unresolvedTypeExpression0.isNominalType());
      assertEquals(true, unresolvedTypeExpression0.canBeCalled());
      assertEquals(false, unresolvedTypeExpression0.isStringValueType());
      assertEquals(false, unresolvedTypeExpression0.isNoType());
      assertEquals(true, unresolvedTypeExpression0.matchesNumberContext());
      assertEquals(false, unresolvedTypeExpression0.isNativeObjectType());
      assertEquals(false, unresolvedTypeExpression0.isOrdinaryFunction());
      assertEquals(true, unresolvedTypeExpression0.isUnknownType());
      assertEquals(false, unresolvedTypeExpression0.isNumberValueType());
      assertEquals("?", unresolvedTypeExpression0.getReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isNoResolvedType());
      assertEquals(false, unresolvedTypeExpression0.isVoidType());
      assertEquals(true, unresolvedTypeExpression0.isNullable());
      assertEquals(true, unresolvedTypeExpression0.matchesObjectContext());
      assertEquals(false, unresolvedTypeExpression0.isRecordType());
      assertEquals(2147483647, unresolvedTypeExpression0.getPropertiesCount());
      assertEquals(false, unresolvedTypeExpression0.isNullType());
      assertEquals(false, unresolvedTypeExpression0.isTemplateType());
      assertEquals(false, unresolvedTypeExpression0.isCheckedUnknownType());
      assertEquals(true, unresolvedTypeExpression0.hasDisplayName());
      assertEquals(false, unresolvedTypeExpression0.isFunctionType());
      assertEquals(false, unresolvedTypeExpression0.hasReferenceName());
      assertEquals(false, unresolvedTypeExpression0.isEnumElementType());
      assertEquals(false, unresolvedTypeExpression0.isNoObjectType());
      assertEquals(false, unresolvedTypeExpression0.isAllType());
      assertEquals(false, unresolvedTypeExpression0.isInterface());
      assertEquals(false, unresolvedTypeExpression0.hasCachedValues());
      assertEquals(false, unresolvedTypeExpression0.isResolved());
      assertEquals(true, unresolvedTypeExpression0.matchesStringContext());
      assertEquals(false, unresolvedTypeExpression0.isBooleanValueType());
      assertEquals(false, unresolvedTypeExpression0.isFunctionPrototypeType());
      assertEquals("Unknown", unresolvedTypeExpression0.getDisplayName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.hasInstanceType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(2, functionType0.getMaxArguments());
      assertEquals(true, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isNominalType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isResolved());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      JSType jSType0 = functionType0.getLeastSupertype((JSType) errorFunctionType0);
      assertNotNull(jSType0);
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isUnionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isResolved());
      assertEquals(true, jSType0.isConstructor());
      assertEquals(false, jSType0.isEnumElementType());
      assertEquals(false, jSType0.isVoidType());
      assertEquals(false, jSType0.isAllType());
      assertEquals(false, jSType0.isUnionType());
      assertEquals(false, jSType0.isNominalType());
      assertEquals(false, jSType0.isOrdinaryFunction());
      assertEquals(true, jSType0.isFunctionType());
      assertEquals(false, jSType0.isNoResolvedType());
      assertEquals(false, jSType0.isFunctionPrototypeType());
      assertEquals(false, jSType0.isNumberValueType());
      assertEquals(false, jSType0.isInterface());
      assertEquals(false, jSType0.isNoType());
      assertEquals(false, jSType0.isNoObjectType());
      assertEquals(false, jSType0.isNullType());
      assertEquals(false, jSType0.isEnumType());
      assertEquals(false, jSType0.isCheckedUnknownType());
      assertEquals(false, jSType0.isRecordType());
      assertEquals(false, jSType0.isStringValueType());
      assertEquals(false, jSType0.isBooleanValueType());
      assertEquals(false, jSType0.isTemplateType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "[";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Node node0 = errorFunctionType0.getSource();
      assertNull(node0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      FunctionType functionType0 = FunctionType.forInterface(jSTypeRegistry0, string0, node0);
      assertNotNull(functionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
      
      FunctionType functionType1 = jSTypeRegistry0.createFunctionTypeWithNewThisType(functionType0, (ObjectType) functionType0);
      assertNotSame(functionType1, functionType0);
      assertNotSame(functionType0, functionType1);
      assertFalse(functionType1.equals((Object)functionType0));
      assertFalse(functionType0.equals((Object)functionType1));
      assertNotNull(functionType1);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(0, functionType1.getExtendedInterfacesCount());
      assertEquals(false, functionType1.isFunctionPrototypeType());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(false, functionType1.isEnumType());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isConstructor());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertEquals(false, functionType1.isNoType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(false, functionType1.isCheckedUnknownType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(false, functionType1.isNoResolvedType());
      assertEquals(0, functionType1.getMaxArguments());
      assertEquals(false, functionType1.hasInstanceType());
      assertEquals(false, functionType1.hasCachedValues());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isNominalType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isReturnTypeInferred());
      assertEquals(false, functionType1.isEnumElementType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(true, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isEnumType());
      assertEquals(false, functionType0.isFunctionPrototypeType());
      assertEquals(true, functionType0.hasInstanceType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isInterface());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(0, functionType0.getExtendedInterfacesCount());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isCheckedUnknownType());
      assertEquals(false, functionType0.isEnumElementType());
      assertEquals(false, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(0, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNoResolvedType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(false, functionType0.isNominalType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isReturnTypeInferred());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "|g#-$sGO4Cz@";
      boolean boolean0 = true;
      int int0 = 112;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertNull(node0.getSourceFileName());
      assertEquals(0, node0.getChildCount());
      assertEquals(112, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(false, node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      
      ArrowType arrowType0 = noResolvedType0.getInternalArrowType();
      assertNotNull(arrowType0);
      assertEquals(false, arrowType0.isCheckedUnknownType());
      assertEquals(false, arrowType0.isResolved());
      assertEquals(false, arrowType0.isOrdinaryFunction());
      assertEquals(false, arrowType0.isNominalType());
      assertEquals(false, arrowType0.isNoType());
      assertEquals(false, arrowType0.isNoObjectType());
      assertEquals(false, arrowType0.isStringValueType());
      assertEquals(false, arrowType0.isNullType());
      assertEquals(false, arrowType0.isFunctionPrototypeType());
      assertEquals(false, arrowType0.isEnumElementType());
      assertEquals(false, arrowType0.isTemplateType());
      assertEquals(false, arrowType0.isRecordType());
      assertEquals(false, arrowType0.isConstructor());
      assertEquals(false, arrowType0.isFunctionType());
      assertEquals(false, arrowType0.isUnionType());
      assertEquals(false, arrowType0.isInterface());
      assertEquals(false, arrowType0.isVoidType());
      assertEquals(false, arrowType0.isAllType());
      assertEquals(false, arrowType0.isBooleanValueType());
      assertEquals(false, arrowType0.isNumberValueType());
      assertEquals(false, arrowType0.isNoResolvedType());
      assertEquals(false, arrowType0.isEnumType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertNull(noResolvedType0.getReferenceName());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      
      FunctionType functionType0 = null;
      try {
        functionType0 = new FunctionType(jSTypeRegistry0, string0, node0, arrowType0, noResolvedType0, string0, boolean0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      
      boolean boolean1 = errorFunctionType0.isInstanceType();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      
      boolean boolean1 = noResolvedType0.hasEqualCallType((FunctionType) noResolvedType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = "]";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = errorFunctionType0.getExtendedInterfacesCount();
      assertEquals(0, int0);
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
      
      boolean boolean1 = noResolvedType0.isReturnTypeInferred();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isInterface());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isResolved());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.hasInstanceType());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " IcXE~mX\"G ";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      ErrorFunctionType errorFunctionType1 = (ErrorFunctionType)errorFunctionType0.getGreatestSubtype((JSType) errorFunctionType0);
      assertSame(errorFunctionType1, errorFunctionType0);
      assertSame(errorFunctionType0, errorFunctionType1);
      assertNotNull(errorFunctionType1);
      assertEquals(3, errorFunctionType1.getMaxArguments());
      assertEquals(false, errorFunctionType1.isInterface());
      assertEquals(true, errorFunctionType1.hasInstanceType());
      assertEquals(true, errorFunctionType1.isConstructor());
      assertEquals(false, errorFunctionType1.isNoType());
      assertEquals(false, errorFunctionType1.isResolved());
      assertEquals(false, errorFunctionType1.isEnumType());
      assertEquals(false, errorFunctionType1.isStringValueType());
      assertEquals(false, errorFunctionType1.isNullType());
      assertEquals(true, errorFunctionType1.isFunctionType());
      assertEquals(false, errorFunctionType1.isNoResolvedType());
      assertEquals(true, errorFunctionType1.canBeCalled());
      assertEquals(false, errorFunctionType1.isAllType());
      assertEquals(false, errorFunctionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType1.isCheckedUnknownType());
      assertEquals(false, errorFunctionType1.isUnionType());
      assertEquals(false, errorFunctionType1.isNominalType());
      assertEquals(0, errorFunctionType1.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType1.isVoidType());
      assertEquals(false, errorFunctionType1.isBooleanValueType());
      assertEquals(false, errorFunctionType1.isOrdinaryFunction());
      assertEquals(false, errorFunctionType1.hasCachedValues());
      assertEquals(false, errorFunctionType1.isRecordType());
      assertEquals(false, errorFunctionType1.isNoObjectType());
      assertNull(errorFunctionType1.getTemplateTypeName());
      assertEquals(false, errorFunctionType1.isReturnTypeInferred());
      assertEquals(false, errorFunctionType1.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType1.isEnumElementType());
      assertEquals(false, errorFunctionType1.isNumberValueType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      boolean boolean1 = noResolvedType0.canBeCalled();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(true, noResolvedType0.isNullable());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isRecordType());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(false, noResolvedType0.isNullType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = true;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      NoResolvedType noResolvedType0 = new NoResolvedType(jSTypeRegistry0);
      assertNotNull(noResolvedType0);
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      int int0 = 2553;
      Node node0 = new Node(int0);
      assertNotNull(node0);
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(2553, node0.getType());
      assertEquals(false, node0.hasChildren());
      
      noResolvedType0.setSource(node0);
      assertEquals(2147483647, node0.getSourceOffset());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertNull(node0.getSourceFileName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertEquals(-1, node0.getCharno());
      assertEquals(-1, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isFromExterns());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(2553, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, noResolvedType0.isCheckedUnknownType());
      assertEquals(false, noResolvedType0.isReturnTypeInferred());
      assertEquals(false, noResolvedType0.isResolved());
      assertEquals(true, noResolvedType0.matchesNumberContext());
      assertEquals(true, noResolvedType0.isConstructor());
      assertEquals(false, noResolvedType0.isRecordType());
      assertNull(noResolvedType0.getTemplateTypeName());
      assertEquals(false, noResolvedType0.isNoObjectType());
      assertEquals(false, noResolvedType0.isInterface());
      assertEquals(false, noResolvedType0.isEnumElementType());
      assertEquals(false, noResolvedType0.isStringValueType());
      assertEquals(false, noResolvedType0.isEnumType());
      assertEquals(false, noResolvedType0.hasCachedValues());
      assertEquals(false, noResolvedType0.isOrdinaryFunction());
      assertEquals(2147483647, noResolvedType0.getMaxArguments());
      assertEquals(false, noResolvedType0.isTemplateType());
      assertNull(noResolvedType0.getReferenceName());
      assertEquals(true, noResolvedType0.matchesStringContext());
      assertEquals(false, noResolvedType0.isFunctionPrototypeType());
      assertEquals(BooleanLiteralSet.EMPTY, noResolvedType0.getPossibleToBooleanOutcomes());
      assertEquals(0, noResolvedType0.getExtendedInterfacesCount());
      assertEquals(2147483647, noResolvedType0.getPropertiesCount());
      assertEquals(true, noResolvedType0.hasInstanceType());
      assertEquals(true, noResolvedType0.matchesObjectContext());
      assertEquals(true, noResolvedType0.isNullable());
      assertEquals(false, noResolvedType0.isVoidType());
      assertEquals(true, noResolvedType0.canBeCalled());
      assertEquals(false, noResolvedType0.isNullType());
      assertEquals(false, noResolvedType0.isUnionType());
      assertEquals(false, noResolvedType0.isAllType());
      assertEquals(false, noResolvedType0.isBooleanValueType());
      assertEquals(false, noResolvedType0.isNumberValueType());
      assertEquals(false, noResolvedType0.isNominalType());
      assertEquals(false, noResolvedType0.isFunctionType());
      assertEquals(true, jSTypeRegistry0.shouldTolerateUndefinedValues());
  }

  @Test(timeout = 4000)
  public void test55() {}
//   @Test(timeout = 4000)
//   public void test55()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       boolean boolean0 = false;
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
//       assertNotNull(jSTypeRegistry0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       
//       LinkedList<JSType> linkedList0 = new LinkedList<JSType>();
//       assertNotNull(linkedList0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       
//       Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) linkedList0);
//       assertNotNull(node0);
//       assertEquals("[]", linkedList0.toString());
//       assertEquals(0, linkedList0.size());
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(83, node0.getType());
//       assertEquals(false, node0.isQualifiedName());
//       assertEquals(false, node0.isSyntheticBlock());
//       assertEquals(false, node0.isOnlyModifiesThisCall());
//       assertEquals(2147483647, node0.getSourceOffset());
//       assertNull(node0.getSourceFileName());
//       assertEquals(false, node0.isNoSideEffectsCall());
//       assertEquals(false, node0.wasEmptyNode());
//       assertEquals(false, node0.hasChildren());
//       assertEquals(false, node0.hasOneChild());
//       assertEquals(0, node0.getLength());
//       assertEquals(-1, node0.getLineno());
//       assertEquals(false, node0.isQuotedString());
//       assertEquals(false, node0.isLocalResultCall());
//       assertEquals(-1, node0.getCharno());
//       assertEquals(0, node0.getChildCount());
//       assertEquals(false, node0.hasMoreThanOneChild());
//       assertEquals(false, node0.isFromExterns());
//       assertEquals(false, node0.isUnscopedQualifiedName());
//       assertEquals(0, node0.getSideEffectFlags());
//       assertEquals(false, node0.isVarArgs());
//       assertEquals(-1, node0.getSourcePosition());
//       assertEquals(false, node0.isOptionalArg());
//       
//       NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
//       assertNotNull(noObjectType0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, noObjectType0.matchesNumberContext());
//       assertEquals(false, noObjectType0.isNoResolvedType());
//       assertEquals(2147483647, noObjectType0.getMaxArguments());
//       assertEquals(true, noObjectType0.matchesObjectContext());
//       assertEquals(false, noObjectType0.isFunctionPrototypeType());
//       assertEquals(false, noObjectType0.isInterface());
//       assertEquals(false, noObjectType0.isNominalType());
//       assertEquals(0, noObjectType0.getExtendedInterfacesCount());
//       assertNull(noObjectType0.getReferenceName());
//       assertEquals(false, noObjectType0.isBooleanValueType());
//       assertEquals(false, noObjectType0.isNumberValueType());
//       assertEquals(false, noObjectType0.isRecordType());
//       assertEquals(false, noObjectType0.isEnumElementType());
//       assertNull(noObjectType0.getTemplateTypeName());
//       assertEquals(false, noObjectType0.isVoidType());
//       assertEquals(false, noObjectType0.isFunctionType());
//       assertEquals(true, noObjectType0.matchesStringContext());
//       assertEquals(true, noObjectType0.hasInstanceType());
//       assertEquals("NoObject", noObjectType0.toString());
//       assertEquals(2147483647, noObjectType0.getPropertiesCount());
//       assertEquals(false, noObjectType0.isCheckedUnknownType());
//       assertEquals(true, noObjectType0.canBeCalled());
//       assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noObjectType0.isOrdinaryFunction());
//       assertEquals(false, noObjectType0.isNullType());
//       assertEquals(false, noObjectType0.isResolved());
//       assertEquals(false, noObjectType0.isUnionType());
//       assertEquals(false, noObjectType0.isEnumType());
//       assertEquals(false, noObjectType0.isNoType());
//       assertEquals(true, noObjectType0.isNoObjectType());
//       assertEquals(false, noObjectType0.isStringValueType());
//       assertEquals(false, noObjectType0.isAllType());
//       assertEquals(false, noObjectType0.hasCachedValues());
//       assertEquals(false, noObjectType0.isReturnTypeInferred());
//       assertEquals(false, noObjectType0.isTemplateType());
//       assertEquals(true, noObjectType0.isConstructor());
//       
//       String string0 = noObjectType0.toDebugHashCodeString();
//       assertNotNull(string0);
//       assertEquals("function (this:me, {9}): me", string0);
//       assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
//       assertEquals(true, noObjectType0.matchesNumberContext());
//       assertEquals(false, noObjectType0.isNoResolvedType());
//       assertEquals(2147483647, noObjectType0.getMaxArguments());
//       assertEquals(true, noObjectType0.matchesObjectContext());
//       assertEquals(false, noObjectType0.isFunctionPrototypeType());
//       assertEquals(true, noObjectType0.hasCachedValues());
//       assertEquals(false, noObjectType0.isInterface());
//       assertEquals(false, noObjectType0.isNominalType());
//       assertEquals(0, noObjectType0.getExtendedInterfacesCount());
//       assertNull(noObjectType0.getReferenceName());
//       assertEquals(false, noObjectType0.isBooleanValueType());
//       assertEquals(false, noObjectType0.isNumberValueType());
//       assertEquals(false, noObjectType0.isRecordType());
//       assertEquals(false, noObjectType0.isEnumElementType());
//       assertNull(noObjectType0.getTemplateTypeName());
//       assertEquals(false, noObjectType0.isVoidType());
//       assertEquals(false, noObjectType0.isFunctionType());
//       assertEquals(true, noObjectType0.matchesStringContext());
//       assertEquals(true, noObjectType0.hasInstanceType());
//       assertEquals("NoObject", noObjectType0.toString());
//       assertEquals(2147483647, noObjectType0.getPropertiesCount());
//       assertEquals(false, noObjectType0.isCheckedUnknownType());
//       assertEquals(true, noObjectType0.canBeCalled());
//       assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, noObjectType0.isOrdinaryFunction());
//       assertEquals(false, noObjectType0.isNullType());
//       assertEquals(false, noObjectType0.isResolved());
//       assertEquals(false, noObjectType0.isUnionType());
//       assertEquals(false, noObjectType0.isEnumType());
//       assertEquals(false, noObjectType0.isNoType());
//       assertEquals(true, noObjectType0.isNoObjectType());
//       assertEquals(false, noObjectType0.isStringValueType());
//       assertEquals(false, noObjectType0.isAllType());
//       assertEquals(false, noObjectType0.isReturnTypeInferred());
//       assertEquals(false, noObjectType0.isTemplateType());
//       assertEquals(true, noObjectType0.isConstructor());
//       
//       // Undeclared exception!
//       try {
//         FunctionType functionType0 = jSTypeRegistry0.createInterfaceType(string0, node0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      boolean boolean0 = false;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0, boolean0);
      assertNotNull(jSTypeRegistry0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      String string0 = " IcXE~mX\"G ";
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      
      List<FunctionType> list0 = errorFunctionType0.getSubTypes();
      assertNull(list0);
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNoResolvedType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isEnumType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isReturnTypeInferred());
      assertEquals(false, errorFunctionType0.isCheckedUnknownType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNominalType());
      assertEquals(false, errorFunctionType0.isEnumElementType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(0, errorFunctionType0.getExtendedInterfacesCount());
      assertEquals(false, errorFunctionType0.isFunctionPrototypeType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
  }
}
