/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:57:25 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.Block;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.DoLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.NewExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.RegExpLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.StringLiteral;
import com.google.javascript.jscomp.mozilla.rhino.ast.SwitchCase;
import com.google.javascript.jscomp.mozilla.rhino.ast.VariableInitializer;
import com.google.javascript.jscomp.mozilla.rhino.ast.WithStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlElemRef;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "[";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      int int0 = 193;
      NewExpression newExpression0 = new NewExpression(int0);
      assertNotNull(newExpression0);
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1, newExpression0.getLength());
      assertEquals(193, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(193, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertNull(newExpression0.getJsDoc());
      
      Comment comment0 = newExpression0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1, newExpression0.getLength());
      assertEquals(193, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(193, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertNull(newExpression0.getJsDoc());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      int int1 = 10;
      jsDocTokenStream0.ungetChar(int1);
      assertFalse(int1 == int0);
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0, (PrintStream) mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1, newExpression0.getLength());
      assertEquals(193, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(193, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertNull(newExpression0.getJsDoc());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(int0 == int1);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(-1, newExpression0.getRp());
      assertEquals(0, newExpression0.depth());
      assertEquals(-1, newExpression0.getLineno());
      assertEquals("30", newExpression0.toString());
      assertEquals(false, newExpression0.hasChildren());
      assertEquals(1, newExpression0.getLength());
      assertEquals(193, newExpression0.getPosition());
      assertEquals(30, newExpression0.getType());
      assertEquals(193, newExpression0.getAbsolutePosition());
      assertEquals(-1, newExpression0.getLp());
      assertNull(newExpression0.getJsDoc());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "Q1CyK-H,";
      int int0 = 0;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "{VY,! ej{3Xd=?";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "([1O3";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "(4|3O,gJ=7";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "[ugQR2.Mm,*iN";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "it;;!$-`F*+7hy[XA*5";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(306, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(4, node0.getSourcePosition());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(4, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "W?n:p#*<(4kPQX{q`Y";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(1, node0.getCharno());
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "!{pEn/";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "\"QwWkC.<Dg,J^Yg@y<";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "?|3h";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(2, node0.getSourcePosition());
      assertEquals(2, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(2, node0.getCharno());
      assertEquals(301, node0.getType());
      assertEquals(true, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
  }

  @Test(timeout = 4000)
  public void test14() {}
//   @Test(timeout = 4000)
//   public void test14()  throws Throwable  {
//       String string0 = ".0-tI.OQY=\\=K ";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       int int0 = 1311;
//       SwitchCase switchCase0 = new SwitchCase(int0);
//       //  // Unstable assertion: assertNotNull(switchCase0);
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(1311, switchCase0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(1311, switchCase0.getPosition());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       
//       Comment comment0 = switchCase0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(1311, switchCase0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(1311, switchCase0.getPosition());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       //  // Unstable assertion: assertNotNull(linkedHashSet0);
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       
//       Context context0 = contextFactory0.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(1311, switchCase0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(1311, switchCase0.getPosition());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean1 = jsDocInfoParser0.parse();
//        //  fail("Expecting exception: UnsupportedOperationException");
//        // Unstable assertion
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "Ai,xex#t Ky";
      String string1 = "=z6K%1<LNm8F*C<u";
      assertNotSame(string1, string0);
      
      int int0 = 1160;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0, int0);
      assertNotSame(string1, string0);
      assertNotNull(jsDocTokenStream0);
      assertFalse(string1.equals((Object)string0));
      
      Comment comment0 = null;
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "$}?a%$";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      assertEquals(4, jsDocToken0.ordinal());
      assertEquals("STRING", jsDocToken0.toString());
      assertEquals("STRING", jsDocToken0.name());
      
      WithStatement withStatement0 = new WithStatement();
      assertNotNull(withStatement0);
      assertEquals(-1, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(-1, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals(-1, withStatement0.getAbsolutePosition());
      assertEquals(0, withStatement0.depth());
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getLp());
      assertEquals(-1, withStatement0.getRp());
      assertEquals("123", withStatement0.toString());
      assertEquals(false, withStatement0.hasChildren());
      assertNull(withStatement0.getJsDoc());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "|u";
      int int0 = (-1);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      XmlElemRef xmlElemRef0 = new XmlElemRef(int0);
      assertNotNull(xmlElemRef0);
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getPosition());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1, xmlElemRef0.getAbsolutePosition());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(-1, xmlElemRef0.getRb());
      
      Comment comment0 = xmlElemRef0.getJsDocNode();
      assertNull(comment0);
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getPosition());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1, xmlElemRef0.getAbsolutePosition());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(-1, xmlElemRef0.getRb());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getPosition());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1, xmlElemRef0.getAbsolutePosition());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNull(xmlElemRef0.getJsDoc());
      assertEquals(1, xmlElemRef0.getLength());
      assertEquals(-1, xmlElemRef0.getPosition());
      assertEquals(77, xmlElemRef0.getType());
      assertEquals(-1, xmlElemRef0.getLb());
      assertEquals(false, xmlElemRef0.isAttributeAccess());
      assertEquals(-1, xmlElemRef0.getAbsolutePosition());
      assertEquals("77", xmlElemRef0.toString());
      assertEquals(0, xmlElemRef0.depth());
      assertEquals(false, xmlElemRef0.hasChildren());
      assertEquals(-1, xmlElemRef0.getAtPos());
      assertEquals(-1, xmlElemRef0.getColonPos());
      assertEquals(-1, xmlElemRef0.getLineno());
      assertEquals(-1, xmlElemRef0.getRb());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "?p3h";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      boolean boolean1 = true;
      assertFalse(boolean1 == boolean0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Block block0 = new Block();
      assertNotNull(block0);
      assertEquals("129", block0.toString());
      assertEquals(-1, block0.getPosition());
      assertNull(block0.getJsDoc());
      assertEquals(129, block0.getType());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(-1, block0.getLineno());
      assertEquals(false, block0.hasChildren());
      assertEquals(1, block0.getLength());
      assertEquals(0, block0.depth());
      
      Comment comment0 = block0.getJsDocNode();
      assertNull(comment0);
      assertEquals("129", block0.toString());
      assertEquals(-1, block0.getPosition());
      assertNull(block0.getJsDoc());
      assertEquals(129, block0.getType());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(-1, block0.getLineno());
      assertEquals(false, block0.hasChildren());
      assertEquals(1, block0.getLength());
      assertEquals(0, block0.depth());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVisibility());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNotNull(set0);
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean1, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean1);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertFalse(boolean1 == boolean0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("129", block0.toString());
      assertEquals(-1, block0.getPosition());
      assertNull(block0.getJsDoc());
      assertEquals(129, block0.getType());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(-1, block0.getLineno());
      assertEquals(false, block0.hasChildren());
      assertEquals(1, block0.getLength());
      assertEquals(0, block0.depth());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = jsDocInfoParser0.parse();
      assertEquals("129", block0.toString());
      assertEquals(-1, block0.getPosition());
      assertNull(block0.getJsDoc());
      assertEquals(129, block0.getType());
      assertEquals(-1, block0.getAbsolutePosition());
      assertEquals(-1, block0.getLineno());
      assertEquals(false, block0.hasChildren());
      assertEquals(1, block0.getLength());
      assertEquals(0, block0.depth());
      assertNull(jSDocInfo0.getTemplateTypeName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(false, jSDocInfo0.hasReturnType());
      assertEquals(false, jSDocInfo0.hasFileOverview());
      assertEquals(false, jSDocInfo0.isImplicitCast());
      assertEquals(false, jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(false, jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(false, jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(false, jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(false, jSDocInfo0.isNoSideEffects());
      assertEquals(false, jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(false, jSDocInfo0.hasModifies());
      assertEquals(false, jSDocInfo0.isExterns());
      assertEquals(false, jSDocInfo0.shouldPreserveTry());
      assertEquals(false, jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(false, jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(false, jSDocInfo0.hasThisType());
      assertEquals(false, jSDocInfo0.isHidden());
      assertEquals(false, jSDocInfo0.isJavaDispatch());
      assertEquals(false, jSDocInfo0.isNoTypeCheck());
      assertEquals(false, jSDocInfo0.hasEnumParameterType());
      assertEquals(false, jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getSourceName());
      assertEquals(false, jSDocInfo0.isConstructor());
      assertEquals(false, jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(false, jSDocInfo0.isNoCompile());
      assertEquals(false, jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(false, jSDocInfo0.isOverride());
      assertEquals(false, jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "( A]uL0";
      int int0 = 41;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WithStatement withStatement0 = new WithStatement(int0);
      assertNotNull(withStatement0);
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(0, withStatement0.depth());
      assertEquals(41, withStatement0.getAbsolutePosition());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(-1, withStatement0.getLp());
      assertNull(withStatement0.getJsDoc());
      assertEquals(41, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      
      Comment comment0 = withStatement0.getJsDocNode();
      assertNull(comment0);
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(0, withStatement0.depth());
      assertEquals(41, withStatement0.getAbsolutePosition());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(-1, withStatement0.getLp());
      assertNull(withStatement0.getJsDoc());
      assertEquals(41, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(123, withStatement0.getType());
      assertEquals(-1, withStatement0.getLineno());
      assertEquals(-1, withStatement0.getRp());
      assertEquals(0, withStatement0.depth());
      assertEquals(41, withStatement0.getAbsolutePosition());
      assertEquals(false, withStatement0.hasChildren());
      assertEquals(-1, withStatement0.getLp());
      assertNull(withStatement0.getJsDoc());
      assertEquals(41, withStatement0.getPosition());
      assertEquals(1, withStatement0.getLength());
      assertEquals("123", withStatement0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "{VY,! ej{3Xd=?";
      int int0 = 607;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      byte byte0 = (byte)0;
      ForInLoop forInLoop0 = new ForInLoop(int0, (int) byte0);
      assertNotNull(forInLoop0);
      assertEquals(607, forInLoop0.getAbsolutePosition());
      assertEquals(0, forInLoop0.depth());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(0, forInLoop0.getLength());
      assertEquals(607, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getRp());
      
      Comment comment0 = forInLoop0.getJsDocNode();
      assertNull(comment0);
      assertEquals(607, forInLoop0.getAbsolutePosition());
      assertEquals(0, forInLoop0.depth());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(0, forInLoop0.getLength());
      assertEquals(607, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getRp());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(607, forInLoop0.getAbsolutePosition());
      assertEquals(0, forInLoop0.depth());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(0, forInLoop0.getLength());
      assertEquals(607, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getRp());
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertEquals(false, set0.isEmpty());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(607, forInLoop0.getAbsolutePosition());
      assertEquals(0, forInLoop0.depth());
      assertEquals(false, forInLoop0.hasChildren());
      assertEquals(119, forInLoop0.getType());
      assertEquals(-1, forInLoop0.getLineno());
      assertEquals("119", forInLoop0.toString());
      assertEquals(-1, forInLoop0.getEachPosition());
      assertEquals(false, forInLoop0.isForEach());
      assertNull(forInLoop0.getJsDoc());
      assertEquals(0, forInLoop0.getLength());
      assertEquals(607, forInLoop0.getPosition());
      assertEquals(-1, forInLoop0.getLp());
      assertEquals(-1, forInLoop0.getInPosition());
      assertEquals(-1, forInLoop0.getRp());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = ">";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      int int0 = 0;
      StringLiteral stringLiteral0 = new StringLiteral(int0);
      assertNotNull(stringLiteral0);
      assertEquals(0, stringLiteral0.getAbsolutePosition());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(41, stringLiteral0.getType());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(0, stringLiteral0.getPosition());
      assertNull(stringLiteral0.getValue());
      assertEquals(-1, stringLiteral0.getLineno());
      
      Comment comment0 = stringLiteral0.getJsDocNode();
      assertNull(comment0);
      assertEquals(0, stringLiteral0.getAbsolutePosition());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(41, stringLiteral0.getType());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(0, stringLiteral0.getPosition());
      assertNull(stringLiteral0.getValue());
      assertEquals(-1, stringLiteral0.getLineno());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, stringLiteral0.getAbsolutePosition());
      assertEquals(1, stringLiteral0.getLength());
      assertEquals('\u0000', stringLiteral0.getQuoteCharacter());
      assertEquals(41, stringLiteral0.getType());
      assertEquals("41", stringLiteral0.toString());
      assertNull(stringLiteral0.getJsDoc());
      assertEquals(false, stringLiteral0.hasChildren());
      assertEquals(0, stringLiteral0.depth());
      assertEquals(0, stringLiteral0.getPosition());
      assertNull(stringLiteral0.getValue());
      assertEquals(-1, stringLiteral0.getLineno());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = ":AWf*71~909N;C";
      int int0 = 1266;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      VariableInitializer variableInitializer0 = new VariableInitializer(int0, int0);
      assertNotNull(variableInitializer0);
      assertEquals(1266, variableInitializer0.getAbsolutePosition());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(122, variableInitializer0.getType());
      assertEquals(0, variableInitializer0.depth());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals(1266, variableInitializer0.getLength());
      assertEquals(1266, variableInitializer0.getPosition());
      
      Comment comment0 = variableInitializer0.getJsDocNode();
      assertNull(comment0);
      assertEquals(1266, variableInitializer0.getAbsolutePosition());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(122, variableInitializer0.getType());
      assertEquals(0, variableInitializer0.depth());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals(1266, variableInitializer0.getLength());
      assertEquals(1266, variableInitializer0.getPosition());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(1266, variableInitializer0.getAbsolutePosition());
      assertEquals(false, variableInitializer0.hasChildren());
      assertEquals(122, variableInitializer0.getType());
      assertEquals(0, variableInitializer0.depth());
      assertNull(variableInitializer0.getJsDoc());
      assertEquals("122", variableInitializer0.toString());
      assertEquals(-1, variableInitializer0.getLineno());
      assertEquals(true, variableInitializer0.isDestructuring());
      assertEquals(1266, variableInitializer0.getLength());
      assertEquals(1266, variableInitializer0.getPosition());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "g!'3fT\"z2,!h";
      int int0 = 46;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      DoLoop doLoop0 = new DoLoop();
      assertNotNull(doLoop0);
      assertEquals(1, doLoop0.getLength());
      assertEquals(-1, doLoop0.getPosition());
      assertEquals(-1, doLoop0.getAbsolutePosition());
      assertEquals(0, doLoop0.depth());
      assertEquals(118, doLoop0.getType());
      assertEquals(-1, doLoop0.getLp());
      assertEquals("118", doLoop0.toString());
      assertNull(doLoop0.getJsDoc());
      assertEquals(-1, doLoop0.getRp());
      assertEquals(-1, doLoop0.getWhilePosition());
      assertEquals(-1, doLoop0.getLineno());
      assertEquals(false, doLoop0.hasChildren());
      
      Comment comment0 = doLoop0.getJsDocNode();
      assertNull(comment0);
      assertEquals(1, doLoop0.getLength());
      assertEquals(-1, doLoop0.getPosition());
      assertEquals(-1, doLoop0.getAbsolutePosition());
      assertEquals(0, doLoop0.depth());
      assertEquals(118, doLoop0.getType());
      assertEquals(-1, doLoop0.getLp());
      assertEquals("118", doLoop0.toString());
      assertNull(doLoop0.getJsDoc());
      assertEquals(-1, doLoop0.getRp());
      assertEquals(-1, doLoop0.getWhilePosition());
      assertEquals(-1, doLoop0.getLineno());
      assertEquals(false, doLoop0.hasChildren());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      int int1 = jsDocTokenStream0.getChar();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(103, int1);
      
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(1, doLoop0.getLength());
      assertEquals(-1, doLoop0.getPosition());
      assertEquals(-1, doLoop0.getAbsolutePosition());
      assertEquals(0, doLoop0.depth());
      assertEquals(118, doLoop0.getType());
      assertEquals(-1, doLoop0.getLp());
      assertEquals("118", doLoop0.toString());
      assertNull(doLoop0.getJsDoc());
      assertEquals(-1, doLoop0.getRp());
      assertEquals(-1, doLoop0.getWhilePosition());
      assertEquals(-1, doLoop0.getLineno());
      assertEquals(false, doLoop0.hasChildren());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "@1dcN5<zV6$P9z\"W";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = null;
      int int0 = 0;
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK;
      String string0 = "end index (%s) must not be less than start index (%s)";
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertNotNull(comment0);
      assertEquals("end index (%s) must not be less than start index (%s)", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertEquals(0, comment0.getPosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.isParsed());
      assertEquals(161, comment0.getType());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.getLength());
      assertEquals(0, comment0.depth());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertNotNull(toolErrorReporter0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertEquals(false, toolErrorReporter0.isReportingWarnings());
      assertEquals("end index (%s) must not be less than start index (%s)", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK, comment0.getCommentType());
      assertEquals(0, comment0.getPosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals(false, comment0.isParsed());
      assertEquals(161, comment0.getType());
      assertEquals(false, comment0.hasChildren());
      assertEquals(0, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(false, set0.isEmpty());
      assertEquals(2, set0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "msg.cyclic.value";
      int int0 = (-21);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      assertNotNull(regExpLiteral0);
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getValue());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      
      Comment comment0 = regExpLiteral0.getJsDocNode();
      assertNull(comment0);
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getValue());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getValue());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getValue());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getValue());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertNull(regExpLiteral0.getJsDoc());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "(Lorg/mozilla/javascript/Context;Aorg/mozilla/jayascript/Scriptable;ILjava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(301, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(0, node0.getLineno());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test28() {}
//   @Test(timeout = 4000)
//   public void test28()  throws Throwable  {
//       String string0 = "*/";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       int int0 = 1305;
//       SwitchCase switchCase0 = new SwitchCase(int0);
//       //  // Unstable assertion: assertNotNull(switchCase0);
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(1305, switchCase0.getPosition());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(1305, switchCase0.getAbsolutePosition());
//       
//       Comment comment0 = switchCase0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(1305, switchCase0.getPosition());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(1305, switchCase0.getAbsolutePosition());
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       //  // Unstable assertion: assertNotNull(linkedHashSet0);
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       
//       boolean boolean0 = false;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       
//       Context context0 = contextFactory0.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(1305, switchCase0.getPosition());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(1305, switchCase0.getAbsolutePosition());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(1305, switchCase0.getPosition());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(1305, switchCase0.getAbsolutePosition());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       //  // Unstable assertion: assertFalse(boolean0 == boolean1);
//       //  // Unstable assertion: assertFalse(boolean1 == boolean0);
//       //  // Unstable assertion: assertTrue(boolean1);
//   }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "?p3h";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNotNull(node0);
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(3, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(3, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "msg.cyclic.value";
      int int0 = (-21);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      assertNotNull(regExpLiteral0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      
      Comment comment0 = regExpLiteral0.getJsDocNode();
      assertNull(comment0);
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getValue());
      assertEquals("48", regExpLiteral0.toString());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(48, regExpLiteral0.getType());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "msg.cyclic.value";
      int int0 = (-21);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      RegExpLiteral regExpLiteral0 = new RegExpLiteral();
      assertNotNull(regExpLiteral0);
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(48, regExpLiteral0.getType());
      
      Comment comment0 = regExpLiteral0.getJsDocNode();
      assertNull(comment0);
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(48, regExpLiteral0.getType());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(48, regExpLiteral0.getType());
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals(true, set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(-1, regExpLiteral0.getLineno());
      assertNull(regExpLiteral0.getFlags());
      assertEquals(-1, regExpLiteral0.getAbsolutePosition());
      assertNull(regExpLiteral0.getValue());
      assertNull(regExpLiteral0.getJsDoc());
      assertEquals(-1, regExpLiteral0.getPosition());
      assertEquals(false, regExpLiteral0.hasChildren());
      assertEquals(1, regExpLiteral0.getLength());
      assertEquals(0, regExpLiteral0.depth());
      assertEquals("48", regExpLiteral0.toString());
      assertEquals(48, regExpLiteral0.getType());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "@1dcN5<zV6$P9z\"W";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertNotNull(config0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "[";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test34() {}
//   @Test(timeout = 4000)
//   public void test34()  throws Throwable  {
//       String string0 = "*&/s";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       int int0 = 1300;
//       SwitchCase switchCase0 = new SwitchCase(int0);
//       //  // Unstable assertion: assertNotNull(switchCase0);
//       //  // Unstable assertion: assertEquals(1300, switchCase0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(1300, switchCase0.getPosition());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       
//       Comment comment0 = switchCase0.getJsDocNode();
//       //  // Unstable assertion: assertNull(comment0);
//       //  // Unstable assertion: assertEquals(1300, switchCase0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(1300, switchCase0.getPosition());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       //  // Unstable assertion: assertNotNull(linkedHashSet0);
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       
//       boolean boolean0 = false;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertNotNull(config0);
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       
//       Context context0 = contextFactory0.enter();
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       ErrorCollector errorCollector0 = (ErrorCollector)context0.getErrorReporter();
//       //  // Unstable assertion: assertNotNull(errorCollector0);
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(4251, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(false, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
//       //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
//       //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
//       //  // Unstable assertion: assertEquals(1300, switchCase0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals("115", switchCase0.toString());
//       //  // Unstable assertion: assertEquals(1300, switchCase0.getPosition());
//       //  // Unstable assertion: assertNull(switchCase0.getJsDoc());
//       //  // Unstable assertion: assertEquals(-1, switchCase0.getLineno());
//       //  // Unstable assertion: assertEquals(1, switchCase0.getLength());
//       //  // Unstable assertion: assertEquals(115, switchCase0.getType());
//       //  // Unstable assertion: assertEquals(0, switchCase0.depth());
//       //  // Unstable assertion: assertEquals(false, switchCase0.hasChildren());
//       //  // Unstable assertion: assertEquals(true, switchCase0.isDefault());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertTrue(context0.generateObserverCount);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean1 = jsDocInfoParser0.parse();
//        //  fail("Expecting exception: UnsupportedOperationException");
//        // Unstable assertion
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }
}
