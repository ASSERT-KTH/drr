/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 21:36:12 GMT 2014
 */

package com.google.javascript.jscomp.parsing;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.mozilla.rhino.Context;
import com.google.javascript.jscomp.mozilla.rhino.ContextFactory;
import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
import com.google.javascript.jscomp.mozilla.rhino.Token;
import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
import com.google.javascript.jscomp.mozilla.rhino.ast.ErrorCollector;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForInLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.ForLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.IfStatement;
import com.google.javascript.jscomp.mozilla.rhino.ast.ParenthesizedExpression;
import com.google.javascript.jscomp.mozilla.rhino.ast.WhileLoop;
import com.google.javascript.jscomp.mozilla.rhino.ast.XmlPropRef;
import com.google.javascript.jscomp.mozilla.rhino.tools.ToolErrorReporter;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.Node;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

 
public class JsDocInfoParserEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "Lq7>X'+h^H#Po";
      int int0 = 999;
      String string1 = "\n";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      Comment comment0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "[{";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "[{fh},`#L)|^^c";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "(zkaUc-O|QX(";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "undefined";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "null";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "function";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "*e|.\\X)O";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(302, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "x2<E|x!,";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "[pKf'M\"Ey]?E&U&^Cys";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getLineno());
      assertEquals(10, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(304, node0.getType());
      assertEquals(10, node0.getSourcePosition());
      assertEquals(false, node0.isLocalResultCall());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "{fgv#L)|^Ac";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "?'1gsc?XMNW#l<_";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertEquals(6, node0.getSourcePosition());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(304, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isLocalResultCall());
      assertEquals(false, node0.isOnlyModifiesThisCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(6, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       String string0 = "-=hs";
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
//       assertNotNull(jsDocTokenStream0);
//       
//       ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression();
//       assertEquals(-1, parenthesizedExpression0.getPosition());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(1, parenthesizedExpression0.getLength());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(-1, parenthesizedExpression0.getAbsolutePosition());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertNotNull(parenthesizedExpression0);
//       
//       Comment comment0 = parenthesizedExpression0.getJsDocNode();
//       assertEquals(-1, parenthesizedExpression0.getPosition());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(1, parenthesizedExpression0.getLength());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(-1, parenthesizedExpression0.getAbsolutePosition());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertNull(comment0);
//       
//       Context context0 = Context.enter();
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isSealed());
//       assertNotNull(context0);
//       assertFalse(context0.generateObserverCount);
//       
//       Locale locale0 = context0.getLocale();
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isSealed());
//       assertNotNull(locale0);
//       assertFalse(context0.generateObserverCount);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleKeys();
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isSealed());
//       assertNotNull(set0);
//       assertFalse(context0.generateObserverCount);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
//       assertEquals("STRING", jsDocToken0.toString());
//       assertEquals(4, jsDocToken0.ordinal());
//       assertEquals("STRING", jsDocToken0.name());
//       
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isSealed());
//       assertNotNull(config0);
//       assertFalse(context0.generateObserverCount);
//       
//       ErrorCollector errorCollector0 = new ErrorCollector();
//       assertNotNull(errorCollector0);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals(0, set0.size());
//       assertEquals(true, set0.isEmpty());
//       assertEquals(-1, parenthesizedExpression0.getPosition());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(1, parenthesizedExpression0.getLength());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(-1, parenthesizedExpression0.getAbsolutePosition());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(true, context0.isSealed());
//       assertNotNull(jsDocInfoParser0);
//       assertFalse(context0.generateObserverCount);
//       
//       // Undeclared exception!
//       try {
//         boolean boolean1 = jsDocInfoParser0.parse();
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ")n;b>'&MZx'MU";
      int int0 = (-10);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      IfStatement ifStatement0 = new IfStatement();
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getPosition());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(false, ifStatement0.hasChildren());
      //  // Unstable assertion: assertEquals(0, ifStatement0.depth());
      //  // Unstable assertion: assertNull(ifStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(1, ifStatement0.getLength());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getLineno());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getLp());
      //  // Unstable assertion: assertEquals("112", ifStatement0.toString());
      //  // Unstable assertion: assertEquals(112, ifStatement0.getType());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getRp());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getElsePosition());
      //  // Unstable assertion: assertNotNull(ifStatement0);
      
      Comment comment0 = ifStatement0.getJsDocNode();
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getPosition());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(false, ifStatement0.hasChildren());
      //  // Unstable assertion: assertEquals(0, ifStatement0.depth());
      //  // Unstable assertion: assertNull(ifStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(1, ifStatement0.getLength());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getLineno());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getLp());
      //  // Unstable assertion: assertEquals("112", ifStatement0.toString());
      //  // Unstable assertion: assertEquals(112, ifStatement0.getType());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getRp());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getElsePosition());
      //  // Unstable assertion: assertNull(comment0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertNull(jSDocInfo0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertNull(jSDocInfo0.getSourceName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isOverride());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExterns());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDefine());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstant());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isHidden());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasType());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isInterface());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertNull(jSDocInfo0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertNull(jSDocInfo0.getSourceName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isOverride());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExterns());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDefine());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstant());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isHidden());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasType());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isInterface());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertNull(jSDocInfo0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertNull(jSDocInfo0.getSourceName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isOverride());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExterns());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDefine());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstant());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isHidden());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasType());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isInterface());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      //  // Unstable assertion: assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getPosition());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(false, ifStatement0.hasChildren());
      //  // Unstable assertion: assertEquals(0, ifStatement0.depth());
      //  // Unstable assertion: assertNull(ifStatement0.getJsDoc());
      //  // Unstable assertion: assertEquals(1, ifStatement0.getLength());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getLineno());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getLp());
      //  // Unstable assertion: assertEquals("112", ifStatement0.toString());
      //  // Unstable assertion: assertEquals(112, ifStatement0.getType());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getRp());
      //  // Unstable assertion: assertEquals(-1, ifStatement0.getElsePosition());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.shouldPreserveTry());
      //  // Unstable assertion: assertNull(jSDocInfo0.getTemplateTypeName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasModifies());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDescription());
      //  // Unstable assertion: assertNull(jSDocInfo0.getReturnDescription());
      //  // Unstable assertion: assertNull(jSDocInfo0.getMeaning());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExport());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isJavaDispatch());
      //  // Unstable assertion: assertNull(jSDocInfo0.getOriginalCommentString());
      //  // Unstable assertion: assertNull(jSDocInfo0.getFileOverview());
      //  // Unstable assertion: assertNull(jSDocInfo0.getSourceName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasBaseType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isOverride());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getParameterCount());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isExterns());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLendsName());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDefine());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.containsDeclaration());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstant());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isImplicitCast());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoSideEffects());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoCompile());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isHidden());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasType());
      //  // Unstable assertion: assertEquals("JSDocInfo", jSDocInfo0.toString());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasFileOverview());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoAlias());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasReturnType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasEnumParameterType());
      //  // Unstable assertion: assertNull(jSDocInfo0.getLicense());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isDeprecated());
      //  // Unstable assertion: assertNull(jSDocInfo0.getBlockDescription());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isConstructor());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoTypeCheck());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVersion());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isInterface());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.isNoShadow());
      //  // Unstable assertion: assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      //  // Unstable assertion: assertNull(jSDocInfo0.getVisibility());
      //  // Unstable assertion: assertNull(jSDocInfo0.getDeprecationReason());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasTypedefType());
      //  // Unstable assertion: assertEquals(false, jSDocInfo0.hasThisType());
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14() {}
//   @Test(timeout = 4000)
//   public void test14()  throws Throwable  {
//       String string0 = "})qxa91";
//       int int0 = 6;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(int0, int0);
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertNotNull(parenthesizedExpression0);
//       
//       Comment comment0 = parenthesizedExpression0.getJsDocNode();
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertNull(comment0);
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertNotNull(linkedHashSet0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertNotNull(config0);
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enterContext();
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isSealed());
//       assertNotNull(context0);
//       assertFalse(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isSealed());
//       assertNotNull(toolErrorReporter0);
//       assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isSealed());
//       assertNotNull(jsDocInfoParser0);
//       assertFalse(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       assertFalse(boolean1);
//       assertFalse(boolean1 == boolean0);
//       assertFalse(boolean0 == boolean1);
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isSealed());
//       assertFalse(context0.generateObserverCount);
//   }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "Lq7>X'+h^H#Po";
      int int0 = (-9);
      String string1 = "]\n";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0, int0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      Comment comment0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      //  // Unstable assertion: assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
       //  fail("Expecting exception: UnsupportedOperationException");
       // Unstable assertion
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = "(=.T1racDXzS>y>S\\Y";
      int int0 = 3705;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(int0, int0, token_CommentType0, string0);
      assertEquals("(=.T1racDXzS>y>S\\Y", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.isParsed());
      assertEquals(3705, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(3705, comment0.getPosition());
      assertEquals(3705, comment0.getAbsolutePosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNotNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertEquals("[]", treeSet0.toString());
      assertNotNull(treeSet0);
      
      boolean boolean1 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, boolean1, config_LanguageMode0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("[]", treeSet0.toString());
      assertNotNull(config0);
      
      ErrorReporter errorReporter0 = null;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("(=.T1racDXzS>y>S\\Y", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(false, comment0.isParsed());
      assertEquals(3705, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(false, comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(3705, comment0.getPosition());
      assertEquals(3705, comment0.getAbsolutePosition());
      assertEquals(-1, comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("[]", treeSet0.toString());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean2 = jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "[YNAb[]su!pI%#pV(";
      int int0 = (-2289);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
      assertNotNull(jsDocTokenStream0);
      
      ForLoop forLoop0 = new ForLoop(int0);
      assertEquals(0, forLoop0.depth());
      assertEquals("119", forLoop0.toString());
      assertEquals(-1, forLoop0.getLp());
      assertEquals(-1, forLoop0.getRp());
      assertNull(forLoop0.getJsDoc());
      assertEquals(-2289, forLoop0.getPosition());
      assertEquals(119, forLoop0.getType());
      assertEquals(false, forLoop0.hasChildren());
      assertEquals(-2289, forLoop0.getAbsolutePosition());
      assertEquals(-1, forLoop0.getLineno());
      assertEquals(1, forLoop0.getLength());
      assertNotNull(forLoop0);
      
      Comment comment0 = forLoop0.getJsDocNode();
      assertEquals(0, forLoop0.depth());
      assertEquals("119", forLoop0.toString());
      assertEquals(-1, forLoop0.getLp());
      assertEquals(-1, forLoop0.getRp());
      assertNull(forLoop0.getJsDoc());
      assertEquals(-2289, forLoop0.getPosition());
      assertEquals(119, forLoop0.getType());
      assertEquals(false, forLoop0.hasChildren());
      assertEquals(-2289, forLoop0.getAbsolutePosition());
      assertEquals(-1, forLoop0.getLineno());
      assertEquals(1, forLoop0.getLength());
      assertNull(comment0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorReporter0);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, forLoop0.depth());
      assertEquals("119", forLoop0.toString());
      assertEquals(-1, forLoop0.getLp());
      assertEquals(-1, forLoop0.getRp());
      assertNull(forLoop0.getJsDoc());
      assertEquals(-2289, forLoop0.getPosition());
      assertEquals(119, forLoop0.getType());
      assertEquals(false, forLoop0.hasChildren());
      assertEquals(-2289, forLoop0.getAbsolutePosition());
      assertEquals(-1, forLoop0.getLineno());
      assertEquals(1, forLoop0.getLength());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      assertFalse(context0.generateObserverCount);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, context0.isGeneratingDebug());
      assertEquals(true, context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(false, context0.isGeneratingDebugChanged());
      assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(false, context0.isSealed());
      assertEquals(false, context0.hasCompileFunctionsWithDynamicScope());
      assertEquals(0, forLoop0.depth());
      assertEquals("119", forLoop0.toString());
      assertEquals(-1, forLoop0.getLp());
      assertEquals(-1, forLoop0.getRp());
      assertNull(forLoop0.getJsDoc());
      assertEquals(-2289, forLoop0.getPosition());
      assertEquals(119, forLoop0.getType());
      assertEquals(false, forLoop0.hasChildren());
      assertEquals(-2289, forLoop0.getAbsolutePosition());
      assertEquals(-1, forLoop0.getLineno());
      assertEquals(1, forLoop0.getLength());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertFalse(context0.generateObserverCount);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "*>|^jw7c<ju>:wp5*";
      int int0 = 1459;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      assertNotNull(jsDocTokenStream0);
      
      WhileLoop whileLoop0 = new WhileLoop(int0, int0);
      assertEquals(1459, whileLoop0.getPosition());
      assertEquals(-1, whileLoop0.getLineno());
      assertEquals(1459, whileLoop0.getAbsolutePosition());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(1459, whileLoop0.getLength());
      assertEquals(117, whileLoop0.getType());
      assertNull(whileLoop0.getJsDoc());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(0, whileLoop0.depth());
      assertEquals("117", whileLoop0.toString());
      assertNotNull(whileLoop0);
      
      Comment comment0 = whileLoop0.getJsDocNode();
      assertEquals(1459, whileLoop0.getPosition());
      assertEquals(-1, whileLoop0.getLineno());
      assertEquals(1459, whileLoop0.getAbsolutePosition());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(1459, whileLoop0.getLength());
      assertEquals(117, whileLoop0.getType());
      assertNull(whileLoop0.getJsDoc());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(0, whileLoop0.depth());
      assertEquals("117", whileLoop0.toString());
      assertNull(comment0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(set0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(1459, whileLoop0.getPosition());
      assertEquals(-1, whileLoop0.getLineno());
      assertEquals(1459, whileLoop0.getAbsolutePosition());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(1459, whileLoop0.getLength());
      assertEquals(117, whileLoop0.getType());
      assertNull(whileLoop0.getJsDoc());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(0, whileLoop0.depth());
      assertEquals("117", whileLoop0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertEquals(true, set0.isEmpty());
      assertEquals(1459, whileLoop0.getPosition());
      assertEquals(-1, whileLoop0.getLineno());
      assertEquals(1459, whileLoop0.getAbsolutePosition());
      assertEquals(false, whileLoop0.hasChildren());
      assertEquals(-1, whileLoop0.getRp());
      assertEquals(1459, whileLoop0.getLength());
      assertEquals(117, whileLoop0.getType());
      assertNull(whileLoop0.getJsDoc());
      assertEquals(-1, whileLoop0.getLp());
      assertEquals(0, whileLoop0.depth());
      assertEquals("117", whileLoop0.toString());
      assertEquals(true, toolErrorReporter0.isReportingWarnings());
      assertEquals(false, toolErrorReporter0.hasReportedError());
  }

  //@Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string0 = ",p<\\J&i%(>T";
      IfStatement ifStatement0 = new IfStatement((int) byte0);
      assertEquals(-1, ifStatement0.getRp());
      assertEquals("112", ifStatement0.toString());
      assertEquals(-1, ifStatement0.getLp());
      assertNull(ifStatement0.getJsDoc());
      assertEquals(1, ifStatement0.getLength());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(112, ifStatement0.getType());
      assertEquals(0, ifStatement0.getPosition());
      assertEquals(0, ifStatement0.getAbsolutePosition());
      assertEquals(0, ifStatement0.depth());
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertNotNull(ifStatement0);
      
      Comment comment0 = ifStatement0.getJsDocNode();
      assertEquals(-1, ifStatement0.getRp());
      assertEquals("112", ifStatement0.toString());
      assertEquals(-1, ifStatement0.getLp());
      assertNull(ifStatement0.getJsDoc());
      assertEquals(1, ifStatement0.getLength());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(112, ifStatement0.getType());
      assertEquals(0, ifStatement0.getPosition());
      assertEquals(0, ifStatement0.getAbsolutePosition());
      assertEquals(0, ifStatement0.depth());
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertNull(comment0);
      
      boolean boolean1 = true;
      assertFalse(boolean1 == boolean0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean1, config_LanguageMode0, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(-1, ifStatement0.getRp());
      assertEquals("112", ifStatement0.toString());
      assertEquals(-1, ifStatement0.getLp());
      assertNull(ifStatement0.getJsDoc());
      assertEquals(1, ifStatement0.getLength());
      assertEquals(-1, ifStatement0.getLineno());
      assertEquals(112, ifStatement0.getType());
      assertEquals(0, ifStatement0.getPosition());
      assertEquals(0, ifStatement0.getAbsolutePosition());
      assertEquals(0, ifStatement0.depth());
      assertEquals(false, ifStatement0.hasChildren());
      assertEquals(-1, ifStatement0.getElsePosition());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try {
        boolean boolean2 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "Lq7>X'+h^H#Po";
      int int0 = 0;
      String string1 = "]\n";
      assertNotSame(string1, string0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string1, int0, int0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(jsDocTokenStream0);
      assertNotSame(string1, string0);
      
      Comment comment0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, errorCollector0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        boolean boolean1 = jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-1579);
      String string0 = "!} =jKPcYZ;c2m)Uq";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      ForInLoop forInLoop0 = new ForInLoop(int0, int0);
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLineno());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getLength());
      //  // Unstable assertion: assertEquals(119, forInLoop0.getType());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLp());
      //  // Unstable assertion: assertNull(forInLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(0, forInLoop0.depth());
      //  // Unstable assertion: assertEquals("119", forInLoop0.toString());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getEachPosition());
      //  // Unstable assertion: assertEquals(false, forInLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getInPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, forInLoop0.isForEach());
      //  // Unstable assertion: assertNotNull(forInLoop0);
      
      Comment comment0 = forInLoop0.getJsDocNode();
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLineno());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getLength());
      //  // Unstable assertion: assertEquals(119, forInLoop0.getType());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLp());
      //  // Unstable assertion: assertNull(forInLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(0, forInLoop0.depth());
      //  // Unstable assertion: assertEquals("119", forInLoop0.toString());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getEachPosition());
      //  // Unstable assertion: assertEquals(false, forInLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getInPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, forInLoop0.isForEach());
      //  // Unstable assertion: assertNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertNotNull(treeSet0);
      
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLineno());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getLength());
      //  // Unstable assertion: assertEquals(119, forInLoop0.getType());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLp());
      //  // Unstable assertion: assertNull(forInLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(0, forInLoop0.depth());
      //  // Unstable assertion: assertEquals("119", forInLoop0.toString());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getEachPosition());
      //  // Unstable assertion: assertEquals(false, forInLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getInPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, forInLoop0.isForEach());
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLineno());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getLength());
      //  // Unstable assertion: assertEquals(119, forInLoop0.getType());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLp());
      //  // Unstable assertion: assertNull(forInLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(0, forInLoop0.depth());
      //  // Unstable assertion: assertEquals("119", forInLoop0.toString());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getEachPosition());
      //  // Unstable assertion: assertEquals(false, forInLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getInPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, forInLoop0.isForEach());
      
      boolean boolean2 = jsDocInfoParser0.parse();
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(boolean0 == boolean2);
      //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals("[]", treeSet0.toString());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLineno());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getLength());
      //  // Unstable assertion: assertEquals(119, forInLoop0.getType());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getLp());
      //  // Unstable assertion: assertNull(forInLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(0, forInLoop0.depth());
      //  // Unstable assertion: assertEquals("119", forInLoop0.toString());
      //  // Unstable assertion: assertEquals(-1579, forInLoop0.getPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getEachPosition());
      //  // Unstable assertion: assertEquals(false, forInLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getInPosition());
      //  // Unstable assertion: assertEquals(-1, forInLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, forInLoop0.isForEach());
  }

  @Test(timeout = 4000)
  public void test22() {}
//   @Test(timeout = 4000)
//   public void test22()  throws Throwable  {
//       String string0 = "})qxa91";
//       int int0 = 6;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(int0, int0);
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertNotNull(parenthesizedExpression0);
//       
//       Comment comment0 = parenthesizedExpression0.getJsDocNode();
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertNull(comment0);
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertNotNull(linkedHashSet0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertNotNull(config0);
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enterContext();
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertNotNull(context0);
//       assertFalse(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertNotNull(toolErrorReporter0);
//       assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertNotNull(jsDocInfoParser0);
//       assertFalse(context0.generateObserverCount);
//       
//       JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertNull(jSDocInfo0);
//       assertFalse(context0.generateObserverCount);
//       
//       jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertFalse(context0.generateObserverCount);
//   }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "(Lorg/mozilla/javascript/Scriptable;Lorg/mozilla/javascript/Context;I)V";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      //  // Unstable assertion: assertEquals(1, node0.getCharno());
      //  // Unstable assertion: assertEquals(false, node0.isLocalResultCall());
      //  // Unstable assertion: assertEquals(false, node0.wasEmptyNode());
      //  // Unstable assertion: assertEquals(false, node0.isQuotedString());
      //  // Unstable assertion: assertEquals(1, node0.getChildCount());
      //  // Unstable assertion: assertEquals(0, node0.getLineno());
      //  // Unstable assertion: assertEquals(false, node0.isQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOnlyModifiesThisCall());
      //  // Unstable assertion: assertEquals(false, node0.isSyntheticBlock());
      //  // Unstable assertion: assertEquals(true, node0.hasOneChild());
      //  // Unstable assertion: assertEquals(0, node0.getSideEffectFlags());
      //  // Unstable assertion: assertEquals(false, node0.isUnscopedQualifiedName());
      //  // Unstable assertion: assertEquals(false, node0.isOptionalArg());
      //  // Unstable assertion: assertEquals(false, node0.hasMoreThanOneChild());
      //  // Unstable assertion: assertEquals(1, node0.getSourcePosition());
      //  // Unstable assertion: assertEquals(false, node0.isNoSideEffectsCall());
      //  // Unstable assertion: assertEquals(301, node0.getType());
      //  // Unstable assertion: assertEquals(true, node0.hasChildren());
      //  // Unstable assertion: assertEquals(false, node0.isVarArgs());
      //  // Unstable assertion: assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "*>|^jw7c<ju>:wp5*";
      int int0 = 1434;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      WhileLoop whileLoop0 = new WhileLoop(int0, int0);
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getLp());
      //  // Unstable assertion: assertEquals("117", whileLoop0.toString());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, whileLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getLength());
      //  // Unstable assertion: assertEquals(0, whileLoop0.depth());
      //  // Unstable assertion: assertEquals(117, whileLoop0.getType());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertNull(whileLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getLineno());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getPosition());
      //  // Unstable assertion: assertNotNull(whileLoop0);
      
      Comment comment0 = whileLoop0.getJsDocNode();
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getLp());
      //  // Unstable assertion: assertEquals("117", whileLoop0.toString());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, whileLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getLength());
      //  // Unstable assertion: assertEquals(0, whileLoop0.depth());
      //  // Unstable assertion: assertEquals(117, whileLoop0.getType());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertNull(whileLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getLineno());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getPosition());
      //  // Unstable assertion: assertNull(comment0);
      
      Locale locale0 = Locale.TAIWAN;
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertNotNull(set0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getLp());
      //  // Unstable assertion: assertEquals("117", whileLoop0.toString());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, whileLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getLength());
      //  // Unstable assertion: assertEquals(0, whileLoop0.depth());
      //  // Unstable assertion: assertEquals(117, whileLoop0.getType());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertNull(whileLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getLineno());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getPosition());
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertEquals(0, set0.size());
      //  // Unstable assertion: assertEquals(true, set0.isEmpty());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("zh_TW", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("TWN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("TW", locale0.getCountry());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getLp());
      //  // Unstable assertion: assertEquals("117", whileLoop0.toString());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getRp());
      //  // Unstable assertion: assertEquals(false, whileLoop0.hasChildren());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getLength());
      //  // Unstable assertion: assertEquals(0, whileLoop0.depth());
      //  // Unstable assertion: assertEquals(117, whileLoop0.getType());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getAbsolutePosition());
      //  // Unstable assertion: assertNull(whileLoop0.getJsDoc());
      //  // Unstable assertion: assertEquals(-1, whileLoop0.getLineno());
      //  // Unstable assertion: assertEquals(1434, whileLoop0.getPosition());
  }

  @Test(timeout = 4000)
  public void test25() {}
//   @Test(timeout = 4000)
//   public void test25()  throws Throwable  {
//       String string0 = "})qxa91";
//       int int0 = 6;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
//       assertNotNull(jsDocTokenStream0);
//       
//       ParenthesizedExpression parenthesizedExpression0 = new ParenthesizedExpression(int0, int0);
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertNotNull(parenthesizedExpression0);
//       
//       Comment comment0 = parenthesizedExpression0.getJsDocNode();
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertNull(comment0);
//       
//       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertNotNull(linkedHashSet0);
//       
//       boolean boolean0 = true;
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertNotNull(config0);
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enterContext();
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertNotNull(context0);
//       assertFalse(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertNotNull(toolErrorReporter0);
//       assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertNotNull(jsDocInfoParser0);
//       assertFalse(context0.generateObserverCount);
//       
//       JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
//       assertEquals(true, linkedHashSet0.isEmpty());
//       assertEquals(0, linkedHashSet0.size());
//       assertEquals("[]", linkedHashSet0.toString());
//       assertEquals(6, parenthesizedExpression0.getPosition());
//       assertNull(parenthesizedExpression0.getJsDoc());
//       assertEquals(6, parenthesizedExpression0.getLength());
//       assertEquals(6, parenthesizedExpression0.getAbsolutePosition());
//       assertEquals(87, parenthesizedExpression0.getType());
//       assertEquals(0, parenthesizedExpression0.depth());
//       assertEquals(false, parenthesizedExpression0.hasChildren());
//       assertEquals(-1, parenthesizedExpression0.getLineno());
//       assertEquals("87", parenthesizedExpression0.toString());
//       assertEquals(true, toolErrorReporter0.hasReportedError());
//       assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       assertEquals(true, context0.isGeneratingDebug());
//       assertEquals(true, context0.isGeneratingSource());
//       assertEquals(0, context0.getLanguageVersion());
//       assertEquals(0, context0.getOptimizationLevel());
//       assertEquals(true, context0.isSealed());
//       assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       assertEquals(true, context0.isGeneratingDebugChanged());
//       assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       assertEquals(0, context0.getInstructionObserverThreshold());
//       assertEquals(false, contextFactory0.isSealed());
//       assertEquals(false, contextFactory0.hasExplicitGlobal());
//       assertNull(jSDocInfo0);
//       assertFalse(context0.generateObserverCount);
//   }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "AUTHOR";
      int int0 = (-1346);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0);
      //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = null;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(linkedHashSet0);
      
      boolean boolean0 = false;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, boolean0, config_LanguageMode0, boolean0);
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(boolean0);
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
      //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean0 == boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals("[]", linkedHashSet0.toString());
      //  // Unstable assertion: assertEquals(0, linkedHashSet0.size());
      //  // Unstable assertion: assertEquals(true, linkedHashSet0.isEmpty());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.hasReportedError());
      //  // Unstable assertion: assertEquals(false, toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "!} =jKPcYZ;c2m)Uq";
      Node node0 = JsDocInfoParser.parseTypeString(string0);
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test28() {}
//   @Test(timeout = 4000)
//   public void test28()  throws Throwable  {
//       boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
//       //  // Unstable assertion: assertTrue(boolean0);
//       
//       String string0 = "|svEo";
//       int int0 = 0;
//       JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(string0, int0, int0);
//       //  // Unstable assertion: assertNotNull(jsDocTokenStream0);
//       
//       XmlPropRef xmlPropRef0 = new XmlPropRef();
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getColonPos());
//       //  // Unstable assertion: assertEquals(false, xmlPropRef0.isAttributeAccess());
//       //  // Unstable assertion: assertEquals("79", xmlPropRef0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, xmlPropRef0.depth());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getAtPos());
//       //  // Unstable assertion: assertEquals(false, xmlPropRef0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getLineno());
//       //  // Unstable assertion: assertEquals(79, xmlPropRef0.getType());
//       //  // Unstable assertion: assertNull(xmlPropRef0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, xmlPropRef0.getLength());
//       //  // Unstable assertion: assertNotNull(xmlPropRef0);
//       
//       Comment comment0 = xmlPropRef0.getJsDocNode();
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getColonPos());
//       //  // Unstable assertion: assertEquals(false, xmlPropRef0.isAttributeAccess());
//       //  // Unstable assertion: assertEquals("79", xmlPropRef0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, xmlPropRef0.depth());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getAtPos());
//       //  // Unstable assertion: assertEquals(false, xmlPropRef0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getLineno());
//       //  // Unstable assertion: assertEquals(79, xmlPropRef0.getType());
//       //  // Unstable assertion: assertNull(xmlPropRef0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, xmlPropRef0.getLength());
//       //  // Unstable assertion: assertNull(comment0);
//       
//       Locale locale0 = Locale.CHINA;
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertNotNull(locale0);
//       
//       Set<String> set0 = locale0.getUnicodeLocaleAttributes();
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertNotNull(set0);
//       
//       Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
//       Config config0 = new Config(set0, set0, boolean0, config_LanguageMode0, boolean0);
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertNotNull(config0);
//       
//       ContextFactory contextFactory0 = new ContextFactory();
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertNotNull(contextFactory0);
//       
//       Context context0 = contextFactory0.enter();
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertNotNull(context0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertNotNull(toolErrorReporter0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, string0, config0, toolErrorReporter0);
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getColonPos());
//       //  // Unstable assertion: assertEquals(false, xmlPropRef0.isAttributeAccess());
//       //  // Unstable assertion: assertEquals("79", xmlPropRef0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, xmlPropRef0.depth());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getAtPos());
//       //  // Unstable assertion: assertEquals(false, xmlPropRef0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getLineno());
//       //  // Unstable assertion: assertEquals(79, xmlPropRef0.getType());
//       //  // Unstable assertion: assertNull(xmlPropRef0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, xmlPropRef0.getLength());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertNotNull(jsDocInfoParser0);
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//       
//       boolean boolean1 = jsDocInfoParser0.parse();
//       //  // Unstable assertion: assertFalse(boolean1);
//       //  // Unstable assertion: assertFalse(boolean0 == boolean1);
//       //  // Unstable assertion: assertFalse(boolean1 == boolean0);
//       //  // Unstable assertion: assertEquals(true, context0.hasCompileFunctionsWithDynamicScope());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebug());
//       //  // Unstable assertion: assertEquals(0, context0.getInstructionObserverThreshold());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingSource());
//       //  // Unstable assertion: assertEquals(true, context0.isSealed());
//       //  // Unstable assertion: assertEquals(0, context0.getOptimizationLevel());
//       //  // Unstable assertion: assertEquals(true, context0.isGeneratingDebugChanged());
//       //  // Unstable assertion: assertEquals(2147483647, context0.getMaximumInterpreterStackDepth());
//       //  // Unstable assertion: assertEquals(0, context0.getLanguageVersion());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.isSealed());
//       //  // Unstable assertion: assertEquals(false, contextFactory0.hasExplicitGlobal());
//       //  // Unstable assertion: assertEquals(0, set0.size());
//       //  // Unstable assertion: assertEquals(true, set0.isEmpty());
//       //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
//       //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
//       //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
//       //  // Unstable assertion: assertEquals("", locale0.getVariant());
//       //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
//       //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getColonPos());
//       //  // Unstable assertion: assertEquals(false, xmlPropRef0.isAttributeAccess());
//       //  // Unstable assertion: assertEquals("79", xmlPropRef0.toString());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getPosition());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getAbsolutePosition());
//       //  // Unstable assertion: assertEquals(0, xmlPropRef0.depth());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getAtPos());
//       //  // Unstable assertion: assertEquals(false, xmlPropRef0.hasChildren());
//       //  // Unstable assertion: assertEquals(-1, xmlPropRef0.getLineno());
//       //  // Unstable assertion: assertEquals(79, xmlPropRef0.getType());
//       //  // Unstable assertion: assertNull(xmlPropRef0.getJsDoc());
//       //  // Unstable assertion: assertEquals(1, xmlPropRef0.getLength());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.isReportingWarnings());
//       //  // Unstable assertion: assertEquals(true, toolErrorReporter0.hasReportedError());
//       //  // Unstable assertion: assertFalse(context0.generateObserverCount);
//   }
}
