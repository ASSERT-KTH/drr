/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 12 16:27:04 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.AbstractCompiler;
import com.google.javascript.jscomp.CheckLevel;
import com.google.javascript.jscomp.ClosureReverseAbstractInterpreter;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DefaultPassConfig;
import com.google.javascript.jscomp.GoogleCodingConvention;
import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.ReverseAbstractInterpreter;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypeCheck;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class TypeCheckEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_INTERFACE_METHOD_OVERRIDE";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_BAD_DELETE_OPERAND";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(node0);
      
      int int0 = 21;
      node0.setType(int0);
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(21, node0.getType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(21, node0.getType());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      
      double double0 = typeCheck0.getTypedPercent();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_BAD_DELETE_OPERAND";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(node0);
      
      int int0 = 21;
      node0.setType(int0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(21, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      node0.addSuppression(string0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(21, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      
      NodeTraversal nodeTraversal0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(21, node0.getType());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.tightenTypes);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "r%d@r#^DG/;";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention)compiler0.getCodingConvention();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertNotNull(googleCodingConvention0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(closureReverseAbstractInterpreter0);
      
      int int0 = 0;
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) closureReverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(typeCheck0);
      
      NodeTraversal nodeTraversal0 = new NodeTraversal((AbstractCompiler) compiler0, (NodeTraversal.Callback) typeCheck0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertNotNull(nodeTraversal0);
      
      typeCheck0.visit(nodeTraversal0, node1, node1);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(5, compiler0.getErrorCount());
      assertEquals(1, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals("", nodeTraversal0.getSourceName());
      assertEquals(0, nodeTraversal0.getLineNumber());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node1.hasChildren());
      assertEquals(0, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_INTERFACE_METHOD_OVERRIDE";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertNotNull(node0);
      
      int int0 = 95;
      node0.setType(int0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(95, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      
      NodeTraversal nodeTraversal0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.decomposeExpressions);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.decomposeExpressions);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.decomposeExpressions);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(95, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.decomposeExpressions);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_ITEFAE_NCTION_NOT_EMPTY";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertNotNull(node0);
      
      int int0 = 0;
      Node node1 = new Node(int0, node0, int0, int0);
      assertEquals(0, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertNotNull(node1);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      
      Scope scope0 = typeCheck0.processForTesting(node0, node0);
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(scope0);
      assertNotSame(node0, node1);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(node0.equals((Object)node1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_BAD_DELETE_OPERAND";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(0, node0.getCharno());
      assertNotNull(node0);
      
      int int0 = 33;
      node0.setType(int0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(1, node0.getChildCount());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(33, node0.getType());
      assertEquals(0, node0.getCharno());
      
      NodeTraversal nodeTraversal0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      
      // Undeclared exception!
      try {
        typeCheck0.visit(nodeTraversal0, node0, node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // EXPR_RESULT 1 [sourcename:  [testcode] ] is not a string node
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_BAD_DELETE_OPERAND";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      int int0 = 11;
      node0.setType(int0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(11, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      
      NodeTraversal nodeTraversal0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(1, node0.getChildCount());
      assertEquals(11, node0.getType());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_INTERFACE_METHOD_OVERRIDE";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(node0);
      
      node0.addSuppression(string0);
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      
      NodeTraversal nodeTraversal0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeConstantExpressions);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeConstantExpressions);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeConstantExpressions);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(1, node0.getLineno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.aliasKeywords);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.removeConstantExpressions);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "%d@r#^DG/;";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention)compiler0.getCodingConvention();
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(googleCodingConvention0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(jSTypeRegistry0);
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(closureReverseAbstractInterpreter0);
      
      int int0 = 0;
      Node node1 = new Node(int0, node0, node0, node0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(1, node1.getChildCount());
      assertEquals(0, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(node1);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      
      CheckLevel checkLevel0 = CheckLevel.WARNING;
      TypeCheck typeCheck0 = new TypeCheck((AbstractCompiler) compiler0, (ReverseAbstractInterpreter) closureReverseAbstractInterpreter0, jSTypeRegistry0, checkLevel0, checkLevel0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(typeCheck0);
      
      Scope scope0 = typeCheck0.processForTesting(node0, node0);
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, scope0.isLocal());
      assertEquals(true, scope0.isGlobal());
      assertEquals(33, scope0.getVarCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertNotNull(scope0);
      assertNotSame(node0, node1);
      assertFalse(node0.equals((Object)node1));
      
      // Undeclared exception!
      try {
        typeCheck0.process(node1, node1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "JSC_INTERFACE_METHOD_OVERRIDE";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(node0);
      
      int int0 = 52;
      node0.setType(int0);
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(52, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      
      NodeTraversal nodeTraversal0 = null;
      CompilerOptions compilerOptions0 = new CompilerOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      
      DefaultPassConfig defaultPassConfig0 = new DefaultPassConfig(compilerOptions0);
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(defaultPassConfig0);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      
      TypeCheck typeCheck0 = defaultPassConfig0.makeTypeCheck(compiler0);
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertNotNull(typeCheck0);
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      
      typeCheck0.visit(nodeTraversal0, node0, node0);
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(52, node0.getType());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(1, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getCharno());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertFalse(compilerOptions0.reserveRawExports);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertFalse(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.aliasExternals);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.checkSymbols);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.coalesceVariableNames);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.removeConstantExpressions);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.markAsCompiled);
      assertFalse(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.labelRenaming);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.removeUnusedVarsInGlobalScope);
      assertFalse(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.ideMode);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertFalse(compilerOptions0.generateExports);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.ambiguateProperties);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertFalse(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.ignoreCajaProperties);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "r%d@r#^DG/;";
      Node node0 = compiler0.parseTestCode(string0);
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(125, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(-1, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      GoogleCodingConvention googleCodingConvention0 = (GoogleCodingConvention)compiler0.getCodingConvention();
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertNotNull(googleCodingConvention0);
      
      JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(jSTypeRegistry0);
      
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(closureReverseAbstractInterpreter0);
      
      TypeCheck typeCheck0 = new TypeCheck(compiler0, closureReverseAbstractInterpreter0, jSTypeRegistry0);
      assertEquals("goog.global", googleCodingConvention0.getGlobalObject());
      assertNull(googleCodingConvention0.getDelegateSuperclassName());
      assertEquals("goog.exportSymbol", googleCodingConvention0.getExportSymbolFunction());
      assertEquals("goog.abstractMethod", googleCodingConvention0.getAbstractMethodName());
      assertEquals("goog.exportProperty", googleCodingConvention0.getExportPropertyFunction());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(4, compiler0.getErrorCount());
      assertEquals(true, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertNotNull(typeCheck0);
  }
}
