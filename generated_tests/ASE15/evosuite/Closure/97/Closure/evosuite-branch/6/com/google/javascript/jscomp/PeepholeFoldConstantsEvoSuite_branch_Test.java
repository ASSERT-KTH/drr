/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:45:45 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.DefinitionsRemover;
import com.google.javascript.jscomp.PeepholeFoldConstants;
import com.google.javascript.rhino.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class PeepholeFoldConstantsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 37;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(37, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(37, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(37, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(37, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(37, node2.getType());
      assertEquals(-1, node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(37, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(37, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(37, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(37, node2.getType());
      assertEquals(-1, node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(-1, node3.getCharno());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(37, node3.getType());
      assertEquals(-1, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 37;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(37, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(37, node2.getType());
      assertEquals(true, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(37, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node0);
      assertSame(node1, node2);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 45;
      int int1 = 44;
      Node node0 = new Node(int1, int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(44, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(45, node0.getCharno());
      assertEquals(45, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(int1 == int0);
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(45, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(44, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(45, node1.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(44, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(45, node0.getCharno());
      assertEquals(45, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(int1 == int0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(45, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(44, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(45, node1.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(44, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(45, node0.getCharno());
      assertEquals(45, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(45, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 46;
      int int1 = 43;
      Node node0 = new Node(int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(43, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(int1 == int0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(int0 == int1);
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(43, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(46, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(43, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(int1 == int0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(int0 == int1);
      assertEquals(false, node2.isVarArgs());
      assertEquals(46, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(43, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(46, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(43, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 46;
      int int1 = 40;
      Node node0 = new Node(int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(int1 == int0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(int0 == int1);
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(46, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(int1 == int0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(int0 == int1);
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(40, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(46, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(46, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String node not created with Node.newString
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 45;
      int int1 = 39;
      Node node0 = new Node(int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(45, node0.getLineno());
      assertEquals(45, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(45, node1.getCharno());
      assertEquals(45, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(45, node0.getLineno());
      assertEquals(45, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(int1 == int0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(int0 == int1);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(-1, node2.getLineno());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(45, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(45, node1.getCharno());
      assertEquals(45, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(39, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(45, node0.getLineno());
      assertEquals(45, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Number node not created with Node.newNumber
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 46;
      int int1 = 41;
      Node node0 = new Node(int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, node0.hasOneChild());
      assertEquals(41, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(int1 == int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      assertEquals(false, node0.hasOneChild());
      assertEquals(41, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(41, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(46, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(int1 == int0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      assertEquals(false, node0.hasOneChild());
      assertEquals(41, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(46, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasChildren());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(41, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(46, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 86;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(86, node0.getLineno());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.hasOneChild());
      assertEquals(86, node0.getLineno());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(86, node1.getType());
      assertEquals(86, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(86, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = node0.cloneTree();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node0.hasOneChild());
      assertEquals(86, node0.getLineno());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(86, node2.getCharno());
      assertEquals(86, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(86, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasChildren());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      node0.addChildrenToFront(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(86, node0.getLineno());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(86, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(86, node2.getCharno());
      assertEquals(86, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(86, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasChildren());
      assertEquals(0, node2.getChildCount());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      
      Node node3 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(86, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(86, node0.getLineno());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(86, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(86, node1.getType());
      assertEquals(86, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(86, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotNull(node3);
      
      Node node4 = peepholeFoldConstants0.optimizeSubtree(node3);
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.equals((Object)node4));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node4));
      assertFalse(node1.equals((Object)node3));
      assertEquals(false, node4.isVarArgs());
      assertEquals(false, node4.isOptionalArg());
      assertEquals(true, node4.hasMoreThanOneChild());
      assertEquals(2, node4.getChildCount());
      assertEquals(false, node4.isNoSideEffectsCall());
      assertEquals(true, node4.hasChildren());
      assertEquals(-1, node4.getLineno());
      assertEquals(false, node4.isUnscopedQualifiedName());
      assertEquals(false, node4.isQualifiedName());
      assertEquals(false, node4.isQuotedString());
      assertEquals(-1, node4.getCharno());
      assertEquals(false, node4.hasOneChild());
      assertEquals(false, node4.wasEmptyNode());
      assertEquals(false, node4.isSyntheticBlock());
      assertEquals(86, node4.getType());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(86, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(86, node0.getLineno());
      assertEquals(86, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(86, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasChildren());
      assertEquals(86, node1.getType());
      assertEquals(86, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(86, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertNotSame(node4, node0);
      assertSame(node4, node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node1);
      assertNotSame(node3, node2);
      assertSame(node3, node4);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node0, node4);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node4);
      assertNotSame(node1, node3);
      assertNotNull(node4);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 52;
      int int1 = 40;
      Node node0 = new Node(int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(52, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(52, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(52, node1.getCharno());
      assertEquals(52, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(40, node1.getType());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(52, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isVarArgs());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(40, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(52, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(52, node1.getCharno());
      assertEquals(52, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(40, node1.getType());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node2);
      
      // Undeclared exception!
      try {
        Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 27;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(27, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(27, node0.getType());
      assertEquals(27, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      node0.addChildToFront(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(27, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(27, node0.getType());
      assertEquals(27, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(27, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(27, node0.getType());
      assertEquals(27, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(27, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(27, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(27, node1.getCharno());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 26;
      String string0 = "";
      Node node0 = Node.newString(int0, string0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(26, node0.getLineno());
      assertEquals(26, node0.getCharno());
      assertEquals(26, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(26, node1.getType());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(1, node1.getChildCount());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(26, node0.getLineno());
      assertEquals(26, node0.getCharno());
      assertEquals(26, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 32;
      int int1 = 43;
      Node node0 = new Node(int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(43, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(32, node0.getCharno());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(int1 == int0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(43, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(32, node0.getCharno());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(32, node1.getType());
      assertEquals(-1, node1.getLineno());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 32;
      int int1 = 41;
      Node node0 = new Node(int1, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(41, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(32, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0, node0);
      assertFalse(int1 == int0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(int0 == int1);
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(41, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(32, node0.getCharno());
      assertEquals(-1, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(32, node1.getType());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasOneChild());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      // Undeclared exception!
      try {
        Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 32;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(32, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = new Node(int0, node0, node0, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(32, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(32, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(true, node2.hasChildren());
      assertEquals(1, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(32, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(32, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(32, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(32, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(1, node1.getChildCount());
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = (-2);
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2, node0.getType());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2, node0.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(-2, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(-1, node1.getLineno());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2, node0.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(-2, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-2, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isVarArgs());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasChildren());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(-1, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(-1, node0.getCharno());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(-2, node0.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(-2, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-2, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isVarArgs());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasChildren());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(2, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-2, node3.getType());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isOptionalArg());
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 101;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(101, node0.getCharno());
      assertEquals(101, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(101, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(101, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(101, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(101, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(101, node0.getCharno());
      assertEquals(101, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(101, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(101, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(101, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(101, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(101, node0.getCharno());
      assertEquals(101, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(101, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasOneChild());
      assertEquals(101, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(101, node3.getType());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(2, node3.getChildCount());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(101, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(101, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(101, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(101, node0.getCharno());
      assertEquals(101, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(101, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasOneChild());
      assertEquals(101, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 98;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(98, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(98, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(98, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(98, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(98, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(98, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(98, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(98, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(98, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(98, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(98, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(98, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(98, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(98, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(98, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(98, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(98, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(98, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(98, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(98, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(98, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(98, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(98, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node3.isQuotedString());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasChildren());
      assertEquals(98, node3.getType());
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 95;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(95, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(95, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(95, node0.getType());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(95, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(95, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(95, node0.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(95, node1.getCharno());
      assertEquals(95, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(95, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(95, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(95, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(95, node0.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(95, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(95, node1.getCharno());
      assertEquals(95, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(95, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(95, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(95, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(95, node0.getType());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(95, node3.getType());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isQuotedString());
      assertEquals(95, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(95, node1.getCharno());
      assertEquals(95, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(95, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 92;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(92, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(92, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(92, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(92, node1.getCharno());
      assertEquals(92, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(92, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(92, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(92, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(92, node0.getCharno());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(92, node1.getCharno());
      assertEquals(92, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(92, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(92, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(92, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(92, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(92, node0.getCharno());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertEquals(92, node1.getCharno());
      assertEquals(92, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(92, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(true, node3.hasChildren());
      assertEquals(92, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.hasOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(92, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(92, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(92, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(92, node0.getCharno());
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 91;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(91, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(91, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(91, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(91, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(91, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(91, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(91, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(91, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(91, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(91, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(91, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(91, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(91, node2.getType());
      assertEquals(true, node2.hasChildren());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(91, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(91, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(91, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(91, node3.getType());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.hasOneChild());
      assertEquals(-1, node3.getCharno());
      assertEquals(91, node0.getLineno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(91, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(91, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(91, node2.getType());
      assertEquals(true, node2.hasChildren());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(91, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(91, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(91, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 88;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(88, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(88, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(88, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(88, node1.getLineno());
      assertEquals(88, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(88, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(88, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(88, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(88, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(88, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(88, node1.getLineno());
      assertEquals(88, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(88, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(88, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(88, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(88, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(88, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(88, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(88, node1.getLineno());
      assertEquals(88, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(88, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(88, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(88, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(88, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 86;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(86, node0.getType());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(86, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(86, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(86, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(86, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(86, node0.getType());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(86, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(86, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(86, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(86, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(86, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(86, node0.getType());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(86, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(86, node3.getType());
      assertEquals(2, node3.getChildCount());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(86, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(86, node1.getLineno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(86, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(86, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(86, node0.getType());
      assertEquals(86, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(86, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 84;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(84, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(84, node0.getCharno());
      assertEquals(84, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(84, node1.getType());
      assertEquals(84, node1.getCharno());
      assertEquals(84, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(84, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(84, node0.getCharno());
      assertEquals(84, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(84, node1.getType());
      assertEquals(84, node1.getCharno());
      assertEquals(84, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(84, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(84, node0.getCharno());
      assertEquals(84, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(84, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.hasOneChild());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(84, node3.getType());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQuotedString());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(84, node1.getType());
      assertEquals(84, node1.getCharno());
      assertEquals(84, node1.getLineno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(84, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(84, node0.getCharno());
      assertEquals(84, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(84, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isOptionalArg());
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 80;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(80, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(80, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(80, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(80, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(80, node1.getType());
      assertEquals(80, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(80, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(80, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(80, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(80, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(80, node1.getType());
      assertEquals(80, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(80, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(80, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(80, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(80, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(80, node3.getType());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(-1, node3.getCharno());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(80, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(80, node1.getType());
      assertEquals(80, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(80, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(80, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(80, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(80, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 79;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(79, node0.getType());
      assertEquals(79, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(79, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(79, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(79, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(79, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(79, node0.getType());
      assertEquals(79, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(79, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(79, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(79, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(79, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(79, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(79, node0.getType());
      assertEquals(79, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(79, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(79, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(79, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(79, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(79, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(79, node1.getCharno());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(79, node0.getType());
      assertEquals(79, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(79, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 76;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(76, node0.getLineno());
      assertEquals(76, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(76, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(76, node0.getLineno());
      assertEquals(76, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(76, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(76, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(76, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(76, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(76, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(76, node0.getLineno());
      assertEquals(76, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(76, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(76, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(76, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(76, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(76, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(76, node3.getType());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(2, node3.getChildCount());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(76, node0.getLineno());
      assertEquals(76, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(76, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(76, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(76, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(76, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 73;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(73, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(73, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(73, node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(73, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(73, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(73, node0.getLineno());
      assertEquals(73, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(73, node1.getCharno());
      assertEquals(73, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(73, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(73, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(73, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(73, node0.getLineno());
      assertEquals(73, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(73, node1.getCharno());
      assertEquals(73, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node3.hasOneChild());
      assertEquals(73, node3.getType());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(-1, node3.getLineno());
      assertEquals(73, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(73, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(73, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(73, node0.getLineno());
      assertEquals(73, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(73, node1.getCharno());
      assertEquals(73, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 70;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(70, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(70, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(70, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(70, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(70, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(70, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(70, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(70, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(70, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(70, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(70, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(70, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(70, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(70, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(70, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(70, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertEquals(-1, node3.getLineno());
      assertEquals(70, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(2, node3.getChildCount());
      assertEquals(70, node1.getType());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(70, node1.getLineno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(70, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(70, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(70, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(70, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(70, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 67;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(67, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(67, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(67, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(67, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(67, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(67, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(67, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(67, node1.getLineno());
      assertEquals(67, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(67, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(67, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(67, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(67, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(67, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(67, node1.getLineno());
      assertEquals(67, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertEquals(67, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(67, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(67, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(67, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node3.hasChildren());
      assertEquals(67, node3.getType());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(67, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(67, node1.getLineno());
      assertEquals(67, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 65;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(65, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(65, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(65, node0.getLineno());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(65, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(65, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(65, node0.getLineno());
      assertEquals(65, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(65, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(65, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(65, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(65, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(65, node0.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(65, node2.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(65, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(65, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(65, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertEquals(true, node3.hasChildren());
      assertEquals(65, node3.getType());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.hasOneChild());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(65, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(65, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(65, node0.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(65, node2.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.hasOneChild());
      assertEquals(65, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(65, node1.getLineno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(65, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 62;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(62, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(62, node0.getType());
      assertEquals(62, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(62, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(62, node1.getType());
      assertEquals(62, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(62, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(62, node0.getType());
      assertEquals(62, node0.getCharno());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(62, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(62, node1.getType());
      assertEquals(62, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(62, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(62, node0.getType());
      assertEquals(62, node0.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasOneChild());
      assertEquals(62, node2.getType());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(62, node3.getType());
      assertEquals(false, node3.hasOneChild());
      assertEquals(true, node3.hasChildren());
      assertEquals(-1, node3.getLineno());
      assertEquals(2, node3.getChildCount());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(62, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(62, node1.getType());
      assertEquals(62, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(62, node0.getLineno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(62, node0.getType());
      assertEquals(62, node0.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.hasOneChild());
      assertEquals(62, node2.getType());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 58;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(58, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(58, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(58, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.hasOneChild());
      assertEquals(58, node1.getCharno());
      assertEquals(58, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(58, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(58, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(58, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(58, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(58, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(58, node1.getCharno());
      assertEquals(58, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(58, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(58, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(58, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(58, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node3.hasOneChild());
      assertEquals(58, node3.getType());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isVarArgs());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(58, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(58, node1.getCharno());
      assertEquals(58, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(58, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(58, node0.getType());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(58, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(58, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 56;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(56, node0.getType());
      assertEquals(56, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(56, node0.getType());
      assertEquals(56, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(56, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(56, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(56, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(56, node0.getType());
      assertEquals(56, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(56, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(56, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(56, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(56, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(56, node3.getType());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(true, node3.hasChildren());
      assertEquals(-1, node3.getLineno());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(56, node0.getType());
      assertEquals(56, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(56, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(56, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(56, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(56, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(56, node1.getLineno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 52;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(52, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(52, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(52, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(52, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(52, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(52, node1.getCharno());
      assertEquals(52, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(52, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(52, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(52, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(52, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(52, node1.getCharno());
      assertEquals(52, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(52, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getCharno());
      assertEquals(52, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node3.hasChildren());
      assertEquals(2, node3.getChildCount());
      assertEquals(52, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(52, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(52, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(52, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(52, node1.getCharno());
      assertEquals(52, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 51;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(51, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(51, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(51, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(51, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(51, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(51, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(51, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(51, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(51, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(51, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(51, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(51, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(51, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(51, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(51, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(51, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(51, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(51, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(51, node1.getType());
      assertEquals(false, node1.hasChildren());
      assertEquals(51, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(51, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasChildren());
      assertEquals(51, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(51, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(51, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 49;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(49, node0.getType());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(49, node0.getCharno());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(49, node0.getType());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(49, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(49, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(49, node1.getCharno());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(49, node0.getType());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(49, node0.getCharno());
      assertEquals(49, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(49, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(49, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(49, node1.getCharno());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(49, node0.getType());
      assertEquals(49, node0.getLineno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(49, node0.getCharno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.hasOneChild());
      assertEquals(49, node3.getType());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getLineno());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(49, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(49, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(49, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(49, node1.getCharno());
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 46;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(46, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(46, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(46, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(46, node1.getLineno());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(46, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(46, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(46, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(46, node1.getLineno());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(46, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(46, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(46, node0.getType());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(46, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(46, node3.getType());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(46, node1.getCharno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(46, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(46, node1.getLineno());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 42;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(42, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(42, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(42, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(42, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(42, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(42, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(42, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(42, node1.getLineno());
      assertEquals(42, node1.getType());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(42, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(42, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(42, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(42, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(42, node1.getLineno());
      assertEquals(42, node1.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(42, node2.getType());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasChildren());
      assertEquals(true, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(42, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(42, node0.getLineno());
      assertEquals(true, node0.isQualifiedName());
      assertEquals(42, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(42, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(42, node1.getLineno());
      assertEquals(42, node1.getType());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(42, node2.getType());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(true, node2.hasChildren());
      assertEquals(true, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.isQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasChildren());
      assertEquals(42, node3.getType());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isVarArgs());
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 39;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(39, node1.getCharno());
      assertEquals(39, node1.getType());
      assertEquals(39, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(39, node1.getCharno());
      assertEquals(39, node1.getType());
      assertEquals(39, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(39, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(39, node0.getCharno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(39, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasChildren());
      assertEquals(39, node1.getCharno());
      assertEquals(39, node1.getType());
      assertEquals(39, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(39, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isVarArgs());
      assertEquals(-1, node3.getLineno());
      assertEquals(39, node3.getType());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isQuotedString());
      assertEquals(2, node3.getChildCount());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isQualifiedName());
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "START";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotNull(node0);
      
      int int0 = 38;
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isVarArgs());
      assertEquals(1, node1.getLineno());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(132, node1.getType());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node1.isVarArgs());
      assertEquals(1, node1.getLineno());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(132, node1.getType());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(38, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.isQualifiedName());
      assertEquals(true, node2.isUnscopedQualifiedName());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(false, node1.isVarArgs());
      assertEquals(1, node1.getLineno());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(132, node1.getType());
      assertEquals(0, node1.getCharno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(true, node0.hasChildren());
      assertEquals(1, node0.getLineno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(132, node0.getType());
      assertEquals(1, node0.getChildCount());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(38, node2.getType());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(true, node2.isQualifiedName());
      assertEquals(true, node2.isUnscopedQualifiedName());
      assertEquals(38, node3.getType());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(true, node3.isQualifiedName());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 36;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(36, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(36, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(36, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.hasOneChild());
      assertEquals(36, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(36, node1.getType());
      assertEquals(36, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(36, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(36, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(36, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node1.hasOneChild());
      assertEquals(36, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(36, node1.getType());
      assertEquals(36, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(36, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(36, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(36, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(36, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(36, node3.getType());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isVarArgs());
      assertEquals(true, node3.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(36, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(36, node1.getType());
      assertEquals(36, node1.getLineno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(36, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(36, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(36, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(36, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 35;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(35, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(35, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(35, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(35, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(35, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(35, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(35, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(35, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(35, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(35, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(35, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(35, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(35, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(35, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(35, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(35, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasChildren());
      assertEquals(35, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(35, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(35, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(35, node3.getType());
      assertEquals(2, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(35, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(35, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(35, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(35, node2.getType());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 34;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(34, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(34, node0.getLineno());
      assertEquals(34, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(34, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(34, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(34, node1.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(34, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(34, node0.getLineno());
      assertEquals(34, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(34, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(34, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(34, node1.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertEquals(34, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(34, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(34, node0.getLineno());
      assertEquals(34, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertEquals(34, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(34, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(34, node1.getCharno());
      assertEquals(2, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(34, node3.getType());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertEquals(34, node2.getType());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(34, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(34, node0.getLineno());
      assertEquals(34, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 31;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(31, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(31, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(31, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(31, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(31, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(31, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(31, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(31, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(31, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(31, node2.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(31, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(31, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(31, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(31, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(31, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(31, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(31, node2.getType());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isQuotedString());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.hasOneChild());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(31, node3.getType());
      assertEquals(false, node3.isVarArgs());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(31, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(31, node0.getCharno());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(31, node0.getType());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(31, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(31, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(31, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.hasOneChild());
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 30;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(30, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(30, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(30, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(30, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(30, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(30, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(30, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(30, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(30, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(30, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(30, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(30, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(30, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(30, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(30, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(30, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(30, node2.getType());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isVarArgs());
      assertEquals(30, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(30, node0.getLineno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(30, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
      assertEquals(30, node3.getType());
      assertEquals(2, node3.getChildCount());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(30, node1.getCharno());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(30, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(30, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 28;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(28, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(28, node0.getType());
      assertEquals(28, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(28, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(28, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(28, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(28, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(28, node0.getType());
      assertEquals(28, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node2.hasOneChild());
      assertEquals(28, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(28, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(28, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(28, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(28, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(28, node0.getType());
      assertEquals(28, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node2.hasOneChild());
      assertEquals(28, node2.getType());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getCharno());
      assertEquals(28, node3.getType());
      assertEquals(-1, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(28, node1.getLineno());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(28, node1.getCharno());
      assertEquals(false, node1.hasOneChild());
      assertEquals(28, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(28, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(28, node0.getType());
      assertEquals(28, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertNotSame(node2, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 23;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(23, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(23, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(23, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(23, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(23, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(23, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(23, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(23, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(23, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(23, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(23, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(23, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(23, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isVarArgs());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(23, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(23, node3.getType());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(23, node1.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(23, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(23, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(23, node0.getCharno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(23, node0.getType());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasOneChild());
      assertEquals(23, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 21;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(21, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(21, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(21, node0.getType());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(21, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(21, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(21, node0.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(21, node1.getLineno());
      assertEquals(21, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(21, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(21, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(21, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(21, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(21, node0.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(21, node1.getLineno());
      assertEquals(21, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(21, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node2.hasChildren());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(21, node2.getType());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node3.getCharno());
      assertEquals(-1, node3.getLineno());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isQuotedString());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.hasOneChild());
      assertEquals(2, node3.getChildCount());
      assertEquals(21, node3.getType());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(21, node0.getCharno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(21, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(21, node0.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(21, node1.getLineno());
      assertEquals(21, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(21, node1.getCharno());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node3, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 20;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(20, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(20, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(20, node0.getType());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(20, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(20, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(20, node0.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(20, node1.getLineno());
      assertEquals(20, node1.getType());
      assertEquals(20, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(20, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(20, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(20, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(20, node0.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(20, node1.getLineno());
      assertEquals(20, node1.getType());
      assertEquals(20, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(-1, node3.getCharno());
      assertEquals(2, node3.getChildCount());
      assertEquals(20, node3.getType());
      assertEquals(false, node3.isVarArgs());
      assertEquals(true, node3.hasChildren());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(20, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(20, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(20, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(20, node0.getType());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(20, node1.getLineno());
      assertEquals(20, node1.getType());
      assertEquals(20, node1.getCharno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasChildren());
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 17;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(0, node0.getChildCount());
      assertEquals(17, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(17, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(17, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(17, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(17, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(17, node1.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(17, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(17, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(17, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(2, node2.getChildCount());
      assertEquals(17, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(17, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(17, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(17, node1.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(17, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(17, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(17, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(-1, node3.getLineno());
      assertEquals(false, node3.isQuotedString());
      assertEquals(17, node3.getType());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(2, node3.getChildCount());
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(2, node2.getChildCount());
      assertEquals(17, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(17, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(17, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isVarArgs());
      assertEquals(17, node1.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(17, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(17, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isVarArgs());
      assertEquals(17, node0.getCharno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 16;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(16, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(16, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(16, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(16, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(16, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(16, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(16, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(16, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(16, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(16, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(16, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(16, node0.getLineno());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(16, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertEquals(16, node2.getType());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(16, node1.getCharno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(16, node1.getType());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(16, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.hasChildren());
      assertEquals(-1, node3.getCharno());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(16, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isQuotedString());
      assertEquals(-1, node3.getLineno());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertNotSame(node0, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 14;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(14, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(14, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(14, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.isOptionalArg());
      assertEquals(14, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(14, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(14, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(14, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(14, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(14, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(false, node1.isOptionalArg());
      assertEquals(14, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(14, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(14, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(14, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(14, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(14, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(14, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertEquals(false, node1.isOptionalArg());
      assertEquals(14, node1.getType());
      assertEquals(false, node1.hasOneChild());
      assertEquals(14, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(14, node1.getLineno());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isVarArgs());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.isQuotedString());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(14, node2.getType());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertEquals(14, node0.getCharno());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(14, node0.getLineno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(14, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(-1, node3.getCharno());
      assertEquals(-1, node3.getLineno());
      assertEquals(14, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isVarArgs());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(false, node3.isQuotedString());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertSame(node2, node3);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertNotSame(node3, node1);
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 11;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(11, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(11, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotNull(node0);
      
      Node node1 = node0.cloneNode();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(11, node1.getLineno());
      assertEquals(11, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(11, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(11, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(11, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(11, node1.getLineno());
      assertEquals(11, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(11, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(11, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(11, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(11, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(-1, node3.getCharno());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(-1, node3.getLineno());
      assertEquals(2, node3.getChildCount());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(11, node3.getType());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(true, node3.hasChildren());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(11, node1.getLineno());
      assertEquals(11, node1.getType());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(11, node1.getCharno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(11, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(11, node0.getType());
      assertEquals(false, node0.isQuotedString());
      assertEquals(11, node0.getLineno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(11, node2.getType());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(2, node2.getChildCount());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node1, node3);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 9;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(9, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      DefinitionsRemover.ObjectLiteralPropertyDefinition definitionsRemover_ObjectLiteralPropertyDefinition0 = new DefinitionsRemover.ObjectLiteralPropertyDefinition(node0, node0, node0);
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(9, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(definitionsRemover_ObjectLiteralPropertyDefinition0);
      
      Node node1 = definitionsRemover_ObjectLiteralPropertyDefinition0.getLValue();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(9, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = new Node(int0, node1, node0, node0, node0);
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(9, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(9, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node2);
      
      Node node3 = peepholeFoldConstants0.optimizeSubtree(node2);
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertEquals(2, node3.getChildCount());
      assertEquals(true, node3.hasMoreThanOneChild());
      assertEquals(false, node3.isUnscopedQualifiedName());
      assertEquals(false, node3.isQualifiedName());
      assertEquals(false, node3.hasOneChild());
      assertEquals(false, node3.isVarArgs());
      assertEquals(false, node3.isOptionalArg());
      assertEquals(false, node3.isSyntheticBlock());
      assertEquals(-1, node3.getCharno());
      assertEquals(true, node3.hasChildren());
      assertEquals(-1, node3.getLineno());
      assertEquals(9, node3.getType());
      assertEquals(false, node3.isQuotedString());
      assertEquals(false, node3.wasEmptyNode());
      assertEquals(false, node3.isNoSideEffectsCall());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(-1, node1.getCharno());
      assertEquals(2, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(9, node0.getLineno());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.hasOneChild());
      assertEquals(-1, node2.getLineno());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(9, node2.getType());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasChildren());
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node0, node3);
      assertSame(node2, node3);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertNotNull(node3);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      Compiler compiler0 = new Compiler();
      assertNotNull(compiler0);
      
      String string0 = "START";
      Node node0 = compiler0.parseSyntheticCode(string0, string0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(132, node0.getType());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(true, node0.hasChildren());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(true, node0.hasOneChild());
      assertEquals(1, node0.getLineno());
      assertEquals(0, node0.getCharno());
      assertEquals(true, node0.isSyntheticBlock());
      assertEquals(false, compiler0.hasErrors());
      assertEquals(false, compiler0.isTypeCheckingEnabled());
      assertEquals(0, compiler0.getErrorCount());
      assertEquals(0, compiler0.getWarningCount());
      assertEquals(false, compiler0.isIdeMode());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isVarArgs());
      assertEquals(0, node1.getCharno());
      assertEquals(1, node1.getChildCount());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.isQuotedString());
      assertEquals(1, node1.getLineno());
      assertEquals(true, node1.isSyntheticBlock());
      assertEquals(true, node1.hasChildren());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(true, node1.hasOneChild());
      assertEquals(132, node1.getType());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 37;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.hasChildren());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.hasChildren());
      assertEquals(37, node0.getLineno());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(37, node0.getCharno());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(37, node0.getType());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(37, node1.getCharno());
      assertEquals(37, node1.getType());
      assertEquals(37, node1.getLineno());
      assertEquals(false, node1.isQuotedString());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 36;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(36, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(36, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(36, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(36, node0.getLineno());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(36, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasChildren());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(36, node0.getType());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(36, node1.getType());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(36, node1.getCharno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isVarArgs());
      assertEquals(36, node1.getLineno());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertSame(node0, node1);
      assertSame(node1, node0);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 9;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(9, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(node0);
      
      DefinitionsRemover.ObjectLiteralPropertyDefinition definitionsRemover_ObjectLiteralPropertyDefinition0 = new DefinitionsRemover.ObjectLiteralPropertyDefinition(node0, node0, node0);
      assertEquals(false, node0.isOptionalArg());
      assertEquals(9, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNotNull(definitionsRemover_ObjectLiteralPropertyDefinition0);
      
      Node node1 = definitionsRemover_ObjectLiteralPropertyDefinition0.getLValue();
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertEquals(true, node1.hasChildren());
      assertEquals(2, node1.getChildCount());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(9, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotNull(node1);
      
      Node node2 = peepholeFoldConstants0.optimizeSubtree(node1);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertEquals(2, node2.getChildCount());
      assertEquals(false, node2.hasOneChild());
      assertEquals(false, node2.isUnscopedQualifiedName());
      assertEquals(false, node2.isVarArgs());
      assertEquals(false, node2.isOptionalArg());
      assertEquals(true, node2.hasMoreThanOneChild());
      assertEquals(false, node2.isNoSideEffectsCall());
      assertEquals(false, node2.isQuotedString());
      assertEquals(false, node2.isQualifiedName());
      assertEquals(-1, node2.getCharno());
      assertEquals(false, node2.isSyntheticBlock());
      assertEquals(33, node2.getType());
      assertEquals(-1, node2.getLineno());
      assertEquals(true, node2.hasChildren());
      assertEquals(false, node2.wasEmptyNode());
      assertEquals(true, node1.hasChildren());
      assertEquals(2, node1.getChildCount());
      assertEquals(-1, node1.getLineno());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(-1, node1.getCharno());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.hasOneChild());
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(true, node1.hasMoreThanOneChild());
      assertEquals(33, node1.getType());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(9, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(9, node0.getType());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(9, node0.getCharno());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.isVarArgs());
      assertNotSame(node2, node0);
      assertSame(node2, node1);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 32;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(32, node0.getLineno());
      assertEquals(32, node0.getType());
      assertNotNull(node0);
      
      Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
      assertEquals(false, node1.wasEmptyNode());
      assertEquals(false, node1.isVarArgs());
      assertEquals(false, node1.hasChildren());
      assertEquals(false, node1.isOptionalArg());
      assertEquals(32, node1.getType());
      assertEquals(false, node1.isQuotedString());
      assertEquals(false, node1.isUnscopedQualifiedName());
      assertEquals(false, node1.hasMoreThanOneChild());
      assertEquals(false, node1.hasOneChild());
      assertEquals(32, node1.getLineno());
      assertEquals(false, node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertEquals(false, node1.isNoSideEffectsCall());
      assertEquals(32, node1.getCharno());
      assertEquals(false, node1.isQualifiedName());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertEquals(false, node0.isVarArgs());
      assertEquals(32, node0.getCharno());
      assertEquals(false, node0.isQuotedString());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(32, node0.getLineno());
      assertEquals(32, node0.getType());
      assertSame(node1, node0);
      assertSame(node0, node1);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PeepholeFoldConstants peepholeFoldConstants0 = new PeepholeFoldConstants();
      assertNotNull(peepholeFoldConstants0);
      
      int int0 = 29;
      Node node0 = new Node(int0, int0, int0);
      assertEquals(false, node0.isVarArgs());
      assertEquals(29, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertEquals(29, node0.getType());
      assertEquals(false, node0.isSyntheticBlock());
      assertEquals(false, node0.hasChildren());
      assertEquals(false, node0.hasOneChild());
      assertEquals(false, node0.isQualifiedName());
      assertEquals(29, node0.getCharno());
      assertEquals(false, node0.isOptionalArg());
      assertEquals(false, node0.isNoSideEffectsCall());
      assertEquals(false, node0.wasEmptyNode());
      assertEquals(false, node0.hasMoreThanOneChild());
      assertEquals(false, node0.isUnscopedQualifiedName());
      assertEquals(false, node0.isQuotedString());
      assertNotNull(node0);
      
      // Undeclared exception!
      try {
        Node node1 = peepholeFoldConstants0.optimizeSubtree(node0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
