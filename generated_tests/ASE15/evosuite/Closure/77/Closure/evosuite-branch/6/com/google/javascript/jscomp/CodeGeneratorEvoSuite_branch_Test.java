/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:38:47 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "!--\u2028x\u205FX :";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("!--\\u2028x\\u205fX :", string1);
      
      String string2 = CodeGenerator.identifierEscape(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("!--\\u2028x\\u205fX :", string2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "h,Y<!-->t.,fav/";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("/h,Y<\\!--\\>t.,fav//", string1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "^\"zESjFv<!->{";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/^\"zESjFv<!->{/", string1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "_>]]>(%).<_";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"_>]]\\>(%).<_\"", string1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "C}/m{a\"</scripta~ac";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"C}/m{a\\\"<\\/scripta~ac\"", string1);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "\t\n@\fe\r \u0085M\u2028\u2029\u205F:";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("/\\t\\n@\\u000ce\\r \\u0085M\\u2028\\u2029\\u205f:/", string1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = "+J'I:[~^yyfk";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotNull(charset0);
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"+J'I:[~^yyfk\"", string1);
      
      String string2 = CodeGenerator.jsString(string1, charsetEncoder0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("'\"+J\\'I:[~^yyfk\"'", string2);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "9G!Z]>j,f/+_";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"9G!Z]>j,f/+_\"", string1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = "!--\u2028x\u205FX :";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("!--\\u2028x\\u205fX :", string1);
      
      String string2 = CodeGenerator.regexpEscape(string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("/!--\\u2028x\\u205fX :/", string2);
  }
}
