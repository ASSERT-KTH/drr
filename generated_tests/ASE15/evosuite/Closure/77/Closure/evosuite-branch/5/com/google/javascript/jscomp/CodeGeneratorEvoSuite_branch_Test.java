/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 22:28:10 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "<-}[<!--V->";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"<-}[<\\!--V->\"", string1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "j</scriptes";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/j<\\/scriptes/", string1);
      
      String string2 = ">#,:6CC})czhaCxo,p";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      char char0 = '9';
      CharsetEncoder charsetEncoder0 = null;
      String string3 = CodeGenerator.strEscape(string2, char0, string2, string1, string0, charsetEncoder0);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("9>#,:6CC})czhaCxo,p9", string3);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      
      String string0 = "l,$kAcSW,\\]>";
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      String string1 = CodeGenerator.regexpEscape(string0, charsetEncoder0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("UTF-8", charset0.name());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.canEncode());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals("/l,$kAcSW,\\]>/", string1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = "\u0001 \u0001(\t\u0012\u0012\n\ninpu_type\u0018\u0002 \u0001(\t\u0012\u0013\n\u000Boutput_type\u0018\u0003 \u0001(\t\u0012/\n\u0007opios\u0018\u0004 \u0001(\u000B2\u001E.google.proto4uf.MetodOptions\"\u00A4\u0003\n\u000BFileOptions\u0012\u0014\n\fjava_package\u0018\u0001 \u0001(\t\u0012\u001C\n\u0014javaQouter_classname\u0018\b \u0001(\t\u0012\"\n\u0013java_multi*le_files\u0018\n \u0001(\b:\u0005}alse\u0012\n\foptimi[e_for\u0018\t \u0001(\u000E2).google.protobuf.Fieptions.OptimioeMode:\u0005SPEED\u0012!\n\u0013cc_generic_services\u0018\u0010 \u0001(\b<\u0004true\u0012#\n\u0015java_generic_service\u0018\u0011 \u0001(\b:\u0004true\u0012!\n\u0013py_gensric_servi4es\u0018\u0012 \u0001(\b:\u0004true\u0012C\n\u0014uninterpreted_opti";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"\\u0001 \\u0001(\\t\\u0012\\u0012\\n\\ninpu_type\\u0018\\u0002 \\u0001(\\t\\u0012\\u0013\\n\\u000boutput_type\\u0018\\u0003 \\u0001(\\t\\u0012/\\n\\u0007opios\\u0018\\u0004 \\u0001(\\u000b2\\u001e.google.proto4uf.MetodOptions\\\"\\u00a4\\u0003\\n\\u000bFileOptions\\u0012\\u0014\\n\\u000cjava_package\\u0018\\u0001 \\u0001(\\t\\u0012\\u001c\\n\\u0014javaQouter_classname\\u0018\\u0008 \\u0001(\\t\\u0012\\\"\\n\\u0013java_multi*le_files\\u0018\\n \\u0001(\\u0008:\\u0005}alse\\u0012\\n\\u000coptimi[e_for\\u0018\\t \\u0001(\\u000e2).google.protobuf.Fieptions.OptimioeMode:\\u0005SPEED\\u0012!\\n\\u0013cc_generic_services\\u0018\\u0010 \\u0001(\\u0008<\\u0004true\\u0012#\\n\\u0015java_generic_service\\u0018\\u0011 \\u0001(\\u0008:\\u0004true\\u0012!\\n\\u0013py_gensric_servi4es\\u0018\\u0012 \\u0001(\\u0008:\\u0004true\\u0012C\\n\\u0014uninterpreted_opti\"", string1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = ")e3>&\"N;0PwG";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(")e3>&\"N;0PwG", string1);
      
      String string2 = CodeGenerator.jsString(string1, charsetEncoder0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("')e3>&\"N;0PwG'", string2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "'y{/CL3f+'tHN]#v";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("\"'y{/CL3f+'tHN]#v\"", string1);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = "!D--N-->";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"!D--N--\\>\"", string1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "Upa\u000B\f\rq-hwD*=\u2029\u3000c\u00A0h]>";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("/Upa\\u000b\\u000c\\rq-hwD*=\\u2029\\u3000c\\u00a0h]>/", string1);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = "Upa\u000B\f\rq-hwD*=\u2029\u3000c\u00A0h]>";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Upa\\u000b\\u000c\\u000dq-hwD*=\\u2029\\u3000c\\u00a0h]>", string1);
  }
}
