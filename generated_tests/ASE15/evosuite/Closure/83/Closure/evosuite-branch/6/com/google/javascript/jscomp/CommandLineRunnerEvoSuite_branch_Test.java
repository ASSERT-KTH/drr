/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:14:00 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

 
public class CommandLineRunnerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      // Undeclared exception!
      try {
        List<JSSourceFile> list0 = commandLineRunner0.createExterns();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // in is null
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "q\\zQ&`y*2~h:#ax&I";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      CompilerOptions compilerOptions0 = commandLineRunner0.createOptions();
      assertEquals(false, compilerOptions0.isExternExportsEnabled());
      assertEquals(false, compilerOptions0.shouldColorizeErrorOutput());
      assertEquals(CompilerOptions.TweakProcessing.OFF, compilerOptions0.getTweakProcessing());
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compilerOptions0);
      assertFalse(compilerOptions0.smartNameRemoval);
      assertFalse(compilerOptions0.gatherCssNames);
      assertFalse(compilerOptions0.strictMessageReplacement);
      assertFalse(compilerOptions0.decomposeExpressions);
      assertFalse(compilerOptions0.optimizeReturns);
      assertFalse(compilerOptions0.crossModuleCodeMotion);
      assertFalse(compilerOptions0.instrumentForCoverage);
      assertFalse(compilerOptions0.optimizeParameters);
      assertFalse(compilerOptions0.rewriteFunctionExpressions);
      assertTrue(compilerOptions0.inlineLocalVariables);
      assertFalse(compilerOptions0.generateExports);
      assertTrue(compilerOptions0.optimizeArgumentsArray);
      assertFalse(compilerOptions0.checkEs5Strict);
      assertFalse(compilerOptions0.tightenTypes);
      assertFalse(compilerOptions0.devirtualizePrototypeMethods);
      assertTrue(compilerOptions0.flowSensitiveInlineVariables);
      assertFalse(compilerOptions0.checkTypes);
      assertFalse(compilerOptions0.inlineAnonymousFunctionExpressions);
      assertFalse(compilerOptions0.removeUnusedVars);
      assertFalse(compilerOptions0.prettyPrint);
      assertFalse(compilerOptions0.checkTypedPropertyCalls);
      assertFalse(compilerOptions0.removeEmptyFunctions);
      assertFalse(compilerOptions0.removeUnusedPrototypeProperties);
      assertFalse(compilerOptions0.checkCaja);
      assertFalse(compilerOptions0.collapseAnonymousFunctions);
      assertFalse(compilerOptions0.ideMode);
      assertTrue(compilerOptions0.collapseVariableDeclarations);
      assertFalse(compilerOptions0.ignoreCajaProperties);
      assertFalse(compilerOptions0.allowLegacyJsMessages);
      assertFalse(compilerOptions0.inlineFunctions);
      assertFalse(compilerOptions0.specializeInitialModule);
      assertFalse(compilerOptions0.optimizeCalls);
      assertFalse(compilerOptions0.aliasExternals);
      assertTrue(compilerOptions0.closurePass);
      assertFalse(compilerOptions0.printInputDelimiter);
      assertFalse(compilerOptions0.reserveRawExports);
      assertTrue(compilerOptions0.coalesceVariableNames);
      assertTrue(compilerOptions0.convertToDottedProperties);
      assertFalse(compilerOptions0.inferTypesInGlobalScope);
      assertFalse(compilerOptions0.disambiguateProperties);
      assertFalse(compilerOptions0.computeFunctionSideEffects);
      assertFalse(compilerOptions0.markAsCompiled);
      assertTrue(compilerOptions0.checkControlStructures);
      assertFalse(compilerOptions0.groupVariableDeclarations);
      assertTrue(compilerOptions0.removeUnusedLocalVars);
      assertTrue(compilerOptions0.removeDeadCode);
      assertFalse(compilerOptions0.instrumentForCoverageOnly);
      assertTrue(compilerOptions0.checkSuspiciousCode);
      assertFalse(compilerOptions0.exportTestFunctions);
      assertFalse(compilerOptions0.removeTryCatchFinally);
      assertFalse(compilerOptions0.aliasAllStrings);
      assertFalse(compilerOptions0.checkUnusedPropertiesEarly);
      assertFalse(compilerOptions0.inlineGetters);
      assertFalse(compilerOptions0.recordFunctionInformation);
      assertFalse(compilerOptions0.inlineConstantVars);
      assertFalse(compilerOptions0.extractPrototypeMemberDeclarations);
      assertTrue(compilerOptions0.inlineLocalFunctions);
      assertFalse(compilerOptions0.inlineVariables);
      assertFalse(compilerOptions0.lineBreak);
      assertFalse(compilerOptions0.generatePseudoNames);
      assertFalse(compilerOptions0.markNoSideEffectCalls);
      assertFalse(compilerOptions0.removeUnusedPrototypePropertiesInExterns);
      assertFalse(compilerOptions0.checkSymbols);
      assertTrue(compilerOptions0.deadAssignmentElimination);
      assertFalse(compilerOptions0.aliasKeywords);
      assertFalse(compilerOptions0.moveFunctionDeclarations);
      assertFalse(compilerOptions0.collapseProperties);
      assertFalse(compilerOptions0.crossModuleMethodMotion);
      assertFalse(compilerOptions0.checkDuplicateMessages);
      assertTrue(compilerOptions0.labelRenaming);
      assertTrue(compilerOptions0.foldConstants);
      assertFalse(compilerOptions0.ambiguateProperties);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "--A=";
      stringArray0[0] = string0;
      //  // Unstable assertion: assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = null;
      try {
        commandLineRunner0 = new CommandLineRunner(stringArray0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match found
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "ihne.js";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      Compiler compiler0 = commandLineRunner0.createCompiler();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(compiler0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "com.google.javascript.jscomp.DeadAssignmentsElimination$VariableLiveness";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[5];
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = stringArray0[5];
      assertNotNull(stringArray0[9]);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(stringArray0[7]);
      assertNotNull(mockPrintStream0);
      
      CommandLineRunner commandLineRunner0 = new CommandLineRunner(stringArray0, mockPrintStream0, mockPrintStream0);
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertNotNull(commandLineRunner0);
      
      boolean boolean0 = commandLineRunner0.shouldRunCompiler();
      assertEquals(false, commandLineRunner0.shouldRunCompiler());
      assertFalse(boolean0);
  }
}
