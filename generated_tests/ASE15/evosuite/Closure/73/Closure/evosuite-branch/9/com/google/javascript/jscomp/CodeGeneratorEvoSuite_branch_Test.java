/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 23:06:30 GMT 2014
 */

package com.google.javascript.jscomp;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CodeGenerator;
import com.google.javascript.jscomp.SourceFile;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;

 
public class CodeGeneratorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "\n6 \u1680\u2028,d<!-";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("\\u000a6 \\u1680\\u2028,d<!-", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = "\"A<<!\"-> ";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("/\"A<<!\"-> /", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String string0 = "<T!--><!--/-G!Z]>3";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("/<T!--\\><\\!--/-G!Z]>3/", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String string0 = ">g'~--@{gDtZ:=sF";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      SourceFile.OnDisk sourceFile_OnDisk0 = new SourceFile.OnDisk(mockFile0);
      assertNotNull(sourceFile_OnDisk0);
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.getName());
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.toString());
      
      Charset charset0 = sourceFile_OnDisk0.getCharset();
      assertNotNull(charset0);
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.getName());
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      assertNotNull(charsetEncoder0);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.getName());
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      
      String string1 = CodeGenerator.jsString(string0, charsetEncoder0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("\">g'~--@{gDtZ:=sF\"", string1);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.getOriginalPath());
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.getName());
      assertEquals(">g'~--@{gDtZ:=sF", sourceFile_OnDisk0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "</script]h-nz]]>3";
      String string1 = CodeGenerator.escapeToDoubleQuotedJsString(string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("\"<\\/script]h-nz]]\\>3\"", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      CharsetEncoder charsetEncoder0 = null;
      String string2 = CodeGenerator.jsString(string1, charsetEncoder0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      assertEquals("'\"<\\\\/script]h-nz]]\\\\>3\"'", string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String string0 = "</script]h-nz]]>3";
      String string1 = CodeGenerator.identifierEscape(string0);
      assertNotNull(string1);
      assertEquals("</script]h-nz]]>3", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      double double0 = CodeGenerator.getSimpleNumber(string1);
      assertEquals(Double.NaN, double0, 0.01D);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String string0 = "\n6 \u1680\u2028,d<!-";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String string0 = "3";
      double double0 = CodeGenerator.getSimpleNumber(string0);
      assertEquals(3.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = CodeGenerator.isSimpleNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String string0 = "7\t\n\f\r\u0085nbi5";
      String string1 = CodeGenerator.regexpEscape(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("/7\\t\\n\\u000c\\r\\u0085nbi5/", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }
}
