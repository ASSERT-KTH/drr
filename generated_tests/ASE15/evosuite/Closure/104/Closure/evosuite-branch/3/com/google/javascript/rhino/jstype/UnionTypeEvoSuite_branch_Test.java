/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:45:26 GMT 2014
 */

package com.google.javascript.rhino.jstype;

import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.BooleanType;
import com.google.javascript.rhino.jstype.ErrorFunctionType;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.InstanceObjectType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NamedType;
import com.google.javascript.rhino.jstype.NoObjectType;
import com.google.javascript.rhino.jstype.NoType;
import com.google.javascript.rhino.jstype.NumberType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.ParameterizedType;
import com.google.javascript.rhino.jstype.PrototypeObjectType;
import com.google.javascript.rhino.jstype.ProxyObjectType;
import com.google.javascript.rhino.jstype.StaticScope;
import com.google.javascript.rhino.jstype.TernaryValue;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.UnknownType;
import com.google.javascript.rhino.testing.EmptyScope;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class UnionTypeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      int int0 = (-9);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.getType((StaticScope<JSType>) emptyScope0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNoType());
      assertEquals("", namedType0.getReferenceName());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals("", namedType0.toString());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNativeObjectType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) namedType0);
      assertTrue(boolean0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals(false, namedType0.isNoType());
      assertEquals("", namedType0.getReferenceName());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals("", namedType0.toString());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isNativeObjectType());
      
      UnionType unionType1 = (UnionType)unionType0.resolveInternal(simpleErrorReporter0, emptyScope0);
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isEmptyType());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.getReferenceName());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      UnionType unionType1 = (UnionType)JSType.safeResolve(unionType0, simpleErrorReporter0, emptyScope0);
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isResolved());
      assertEquals(false, unionType1.isNullType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertTrue(boolean0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoObjectType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderShallowInequality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = unionType0.matchesUint32Context();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals("[]", treeSet0.toString());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals("[]", treeSet0.toString());
      
      JSType.TypePair jSType_TypePair0 = instanceObjectType0.getTypesUnderShallowInequality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals("[]", treeSet0.toString());
  }

  //@Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      assertNotNull(noObjectType0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      
      boolean boolean0 = hashSet0.add((JSType) noObjectType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isNullType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[NoObject]", hashSet0.toString());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[NoObject]", hashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoObjectType());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      JSType.TypePair jSType_TypePair0 = unionType0.getTypesUnderInequality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((JSType) instanceObjectType0);
      assertTrue(boolean0);
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      
      JSType.TypePair jSType_TypePair0 = errorFunctionType0.getTypesUnderEquality((JSType) unionType0);
      assertNotNull(jSType_TypePair0);
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[null]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNullType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertTrue(boolean0);
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isNullType());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      
      BooleanLiteralSet booleanLiteralSet0 = unionType0.getPossibleToBooleanOutcomes();
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet0);
      assertEquals(3, booleanLiteralSet0.ordinal());
      assertEquals("BOTH", booleanLiteralSet0.name());
      assertEquals("BOTH", booleanLiteralSet0.toString());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", treeSet0.toString());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isResolved());
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals("[]", treeSet0.toString());
      
      BooleanLiteralSet booleanLiteralSet0 = unionType1.getPossibleToBooleanOutcomes();
      assertFalse(unionType1.equals((Object)unionType0));
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals("EMPTY", booleanLiteralSet0.toString());
      assertEquals("EMPTY", booleanLiteralSet0.name());
      assertEquals(0, booleanLiteralSet0.ordinal());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isResolved());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = true;
      NoType noType0 = (NoType)unionType0.getRestrictedTypeGivenToBooleanOutcome(boolean0);
      assertNotNull(noType0);
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isResolved());
      assertEquals(false, noType0.hasCachedValues());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isVoidType());
      assertEquals("None", noType0.toString());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals("[]", treeSet0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isTemplateType());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNullable());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[number]", hashSet0.toString());
      
      boolean boolean1 = unionType0.isNumber();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals("[number]", hashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, treeSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean0 = hashSet0.add((JSType) unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
      
      boolean boolean1 = unionType0.isSubtype((JSType) unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean1 == boolean0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[()]", hashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry1.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry1, prototypeObjectType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) functionType0);
      assertTrue(boolean0);
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isResolved());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      boolean boolean1 = linkedHashSet0.add((JSType) proxyObjectType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:Function, ...[*]): ?, {...}]", linkedHashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:Function, ...[*]): ?, {...}]", linkedHashSet0.toString());
      
      LinkedHashSet<JSType> linkedHashSet1 = new LinkedHashSet<JSType>();
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertEquals(true, linkedHashSet1.isEmpty());
      assertEquals("[]", linkedHashSet1.toString());
      
      boolean boolean2 = linkedHashSet1.add((JSType) unionType0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet1));
      assertTrue(boolean2);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertEquals(false, linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertEquals("[(function (this:Function, ...[*]): ?|{...})]", linkedHashSet1.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(2, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:Function, ...[*]): ?, {...}]", linkedHashSet0.toString());
      
      String string0 = linkedHashSet1.toString();
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertEquals("[(function (this:Function, ...[*]): ?|{...})]", string0);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotNull(string0);
      assertEquals(false, linkedHashSet1.isEmpty());
      assertEquals(1, linkedHashSet1.size());
      assertEquals("[(function (this:Function, ...[*]): ?|{...})]", linkedHashSet1.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((JSType) instanceObjectType0);
      assertTrue(boolean0);
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isResolved());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(true, noType0.isObject());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isNoType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.hasInstanceType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals("None", noType0.toString());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[null]", linkedHashSet0.toString());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isObject());
      
      InstanceObjectType instanceObjectType1 = (InstanceObjectType)unionType0.getRestrictedUnion((JSType) errorFunctionType0);
      assertSame(instanceObjectType1, instanceObjectType0);
      assertNotNull(instanceObjectType1);
      assertEquals(false, instanceObjectType1.isNominalType());
      assertEquals(false, instanceObjectType1.isTemplateType());
      assertEquals(true, instanceObjectType1.isInstanceType());
      assertEquals(false, instanceObjectType1.isEmptyType());
      assertEquals(false, instanceObjectType1.isNamedType());
      assertEquals(false, instanceObjectType1.isUnionType());
      assertEquals(false, instanceObjectType1.isAllType());
      assertEquals(false, instanceObjectType1.isVoidType());
      assertEquals(false, instanceObjectType1.isNoObjectType());
      assertEquals(true, instanceObjectType1.isObject());
      assertEquals(false, instanceObjectType1.isResolved());
      assertEquals(false, instanceObjectType1.isRecordType());
      assertEquals(false, instanceObjectType1.isBooleanValueType());
      assertEquals(false, instanceObjectType1.isNumberValueType());
      assertEquals(false, instanceObjectType1.hasReferenceName());
      assertEquals(false, instanceObjectType1.isNullType());
      assertEquals(false, instanceObjectType1.isFunctionType());
      assertEquals(false, instanceObjectType1.isStringValueType());
      assertEquals(false, instanceObjectType1.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[null]", linkedHashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      int int0 = (-9);
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.getType((StaticScope<JSType>) emptyScope0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals("", namedType0.getReferenceName());
      assertEquals("", namedType0.toString());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isStringValueType());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) namedType0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isAllType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals("", namedType0.getReferenceName());
      assertEquals("", namedType0.toString());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNumberValueType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(false, namedType0.isStringValueType());
      
      NamedType namedType1 = (NamedType)unionType0.getRestrictedUnion((JSType) errorFunctionType0);
      assertSame(namedType1, namedType0);
      assertNotNull(namedType1);
      assertEquals(false, namedType1.isEmptyType());
      assertEquals(true, namedType1.isNominalType());
      assertEquals(false, namedType1.isVoidType());
      assertEquals(false, namedType1.isAllType());
      assertEquals(true, namedType1.isObject());
      assertEquals(true, namedType1.hasReferenceName());
      assertEquals(false, namedType1.isNoType());
      assertEquals("", namedType1.toString());
      assertEquals(false, namedType1.isStringValueType());
      assertEquals(true, namedType1.isNamedType());
      assertEquals(false, namedType1.isNumberValueType());
      assertEquals(false, namedType1.isNullType());
      assertEquals(false, namedType1.isUnionType());
      assertEquals(false, namedType1.isRecordType());
      assertEquals(false, namedType1.isBooleanValueType());
      assertEquals(false, namedType1.hasCachedValues());
      assertEquals("", namedType1.getReferenceName());
      assertEquals(false, namedType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, namedType1.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType1.isTemplateType());
      assertEquals(false, namedType1.isFunctionType());
      assertEquals(false, namedType1.isResolved());
      assertEquals(false, namedType1.isNativeObjectType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[]", treeSet0.toString());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals("[]", treeSet0.toString());
      
      NoType noType0 = (NoType)unionType1.getRestrictedUnion((JSType) errorFunctionType0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isInterface());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.isNullable());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isResolved());
      assertEquals("None", noType0.toString());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoObjectType());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      
      boolean boolean2 = unionType0.contains((JSType) unknownType0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean2);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.toString());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
      
      boolean boolean0 = unionType0.contains((JSType) unionType0);
      assertFalse(boolean0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      
      boolean boolean0 = unionType0.equals((Object) unionType0);
      assertTrue(boolean0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullable());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
      
      boolean boolean0 = unionType0.differsFrom((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(false, numberType0.isUnionType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNamedType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      int int0 = 0;
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals("number", numberType0.toString());
      assertEquals(true, numberType0.matchesNumberContext());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>(int0);
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, hashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isNoType());
      assertEquals("number", numberType0.toString());
      assertEquals(true, numberType0.matchesNumberContext());
      
      NoType noType0 = (NoType)unionType1.meet(unionType0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertNotNull(noType0);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      
      NoType noType1 = (NoType)unionType0.meet(noType0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType1, unionType0);
      assertSame(noType1, noType0);
      assertNotSame(unionType0, unionType1);
      assertSame(noType0, noType1);
      assertNotNull(noType1);
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, noType1.isInterface());
      assertEquals(false, noType1.isNumberValueType());
      assertEquals(false, noType1.isFunctionType());
      assertEquals(false, noType1.isVoidType());
      assertEquals(true, noType1.hasCachedValues());
      assertEquals(false, noType1.isNullType());
      assertEquals(false, noType1.isUnionType());
      assertEquals(false, noType1.isResolved());
      assertNull(noType1.getTemplateTypeName());
      assertEquals(2147483647, noType1.getPropertiesCount());
      assertEquals(BooleanLiteralSet.EMPTY, noType1.getPossibleToBooleanOutcomes());
      assertEquals(false, noType1.isStringValueType());
      assertEquals(false, noType1.isNamedType());
      assertEquals(true, noType1.isEmptyType());
      assertEquals(false, noType1.isNoObjectType());
      assertEquals(false, noType1.isRecordType());
      assertEquals(true, noType1.isObject());
      assertEquals(true, noType1.matchesObjectContext());
      assertEquals(true, noType1.isNoType());
      assertEquals(2147483647, noType1.getMaxArguments());
      assertEquals(false, noType1.isTemplateType());
      assertEquals(true, noType1.hasInstanceType());
      assertEquals(true, noType1.matchesStringContext());
      assertEquals(true, noType1.canBeCalled());
      assertEquals(false, noType1.isOrdinaryFunction());
      assertEquals(false, noType1.isBooleanValueType());
      assertEquals(true, noType1.isConstructor());
      assertEquals(false, noType1.isAllType());
      assertEquals("None", noType1.toString());
      assertEquals(true, noType1.matchesNumberContext());
      assertNull(noType1.getReferenceName());
      assertEquals(true, noType1.isNullable());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isInterface());
      assertEquals(true, noType0.isNoType());
      assertNull(noType0.getTemplateTypeName());
      assertNull(noType0.getReferenceName());
      assertEquals(true, noType0.isConstructor());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.hasCachedValues());
      assertEquals(false, noType0.isAllType());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isRecordType());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noType0.isObject());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
  }

  //@Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      
      NoObjectType noObjectType0 = (NoObjectType)unionType1.meet(unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(noObjectType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isStringValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.hasCachedValues());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry1.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry1, prototypeObjectType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isUnionType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) proxyObjectType0);
      assertTrue(boolean0);
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{...}]", linkedHashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{...}]", linkedHashSet0.toString());
      
      ProxyObjectType proxyObjectType1 = (ProxyObjectType)unionType0.meet(prototypeObjectType0);
      assertSame(proxyObjectType1, proxyObjectType0);
      assertNotNull(proxyObjectType1);
      assertEquals(false, proxyObjectType1.isTemplateType());
      assertEquals(false, proxyObjectType1.isRecordType());
      assertEquals(false, proxyObjectType1.isNumberValueType());
      assertEquals(false, proxyObjectType1.isNoType());
      assertEquals(false, proxyObjectType1.isResolved());
      assertEquals(false, proxyObjectType1.isNoObjectType());
      assertEquals(false, proxyObjectType1.isFunctionType());
      assertEquals(false, proxyObjectType1.isUnionType());
      assertEquals(false, proxyObjectType1.isNullType());
      assertEquals(false, proxyObjectType1.isBooleanValueType());
      assertEquals(false, proxyObjectType1.hasCachedValues());
      assertEquals(false, proxyObjectType1.isEmptyType());
      assertEquals(false, proxyObjectType1.isStringValueType());
      assertEquals(true, proxyObjectType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType1.isNativeObjectType());
      assertEquals(false, proxyObjectType1.isVoidType());
      assertEquals(false, proxyObjectType1.isAllType());
      assertEquals(false, proxyObjectType1.isNamedType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[{...}]", linkedHashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry1.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isNoType());
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isObject());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) functionType0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(true, functionType0.isObject());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isBooleanValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isTemplateType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.meet(prototypeObjectType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertTrue(boolean0);
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      
      UnionType unionType1 = (UnionType)unionType0.getLeastSupertype((JSType) booleanType0);
      assertSame(unionType0, unionType1);
      assertSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isObject());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isTemplateType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      // Undeclared exception!
      try {
        JSType jSType0 = unionType0.getLeastSupertype((JSType) booleanType0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNullType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertTrue(boolean0);
      assertNotSame(unionType0, unionType1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals("[]", treeSet0.toString());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      
      ParameterizedType parameterizedType0 = new ParameterizedType(jSTypeRegistry0, errorFunctionType0, unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertNotSame(unionType0, unionType1);
      assertNotNull(parameterizedType0);
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNamedType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      
      ParameterizedType parameterizedType1 = (ParameterizedType)parameterizedType0.getLeastSupertype((JSType) unionType1);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(unionType0.equals((Object)unionType1));
      assertSame(parameterizedType1, parameterizedType0);
      assertSame(parameterizedType0, parameterizedType1);
      assertNotSame(unionType1, unionType0);
      assertNotSame(unionType0, unionType1);
      assertNotNull(parameterizedType1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, parameterizedType1.isNativeObjectType());
      assertEquals(false, parameterizedType1.hasCachedValues());
      assertEquals(false, parameterizedType1.isNoType());
      assertEquals(false, parameterizedType1.isUnionType());
      assertEquals(false, parameterizedType1.isNoObjectType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType1.getPossibleToBooleanOutcomes());
      assertEquals(true, parameterizedType1.isObject());
      assertEquals(false, parameterizedType1.isVoidType());
      assertEquals(false, parameterizedType1.isFunctionType());
      assertEquals(false, parameterizedType1.isNamedType());
      assertEquals(false, parameterizedType1.isAllType());
      assertEquals(false, parameterizedType1.isRecordType());
      assertEquals(false, parameterizedType1.isEmptyType());
      assertEquals(false, parameterizedType1.isNullType());
      assertEquals(false, parameterizedType1.isBooleanValueType());
      assertEquals(false, parameterizedType1.isTemplateType());
      assertEquals(false, parameterizedType1.isResolved());
      assertEquals(false, parameterizedType1.isNumberValueType());
      assertEquals(false, parameterizedType1.isStringValueType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(true, errorFunctionType0.hasCachedValues());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(false, parameterizedType0.isNamedType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("[]", treeSet0.toString());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      
      boolean boolean0 = true;
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isObject());
      
      ParameterizedType parameterizedType0 = jSTypeRegistry0.createParameterizedType((ObjectType) errorFunctionType0, (JSType) instanceObjectType0);
      assertNotNull(parameterizedType0);
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNamedType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isObject());
      
      UnknownType unknownType0 = (UnknownType)parameterizedType0.getPropertyType(string0);
      assertNotNull(unknownType0);
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNamedType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isObject());
      
      UnknownType unknownType1 = (UnknownType)unionType0.getLeastSupertype((JSType) unknownType0);
      assertSame(unknownType1, unknownType0);
      assertSame(unknownType0, unknownType1);
      assertNotNull(unknownType1);
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isNumberValueType());
      assertEquals(false, parameterizedType0.isAllType());
      assertEquals(false, parameterizedType0.isNativeObjectType());
      assertEquals(false, parameterizedType0.isNoType());
      assertEquals(false, parameterizedType0.isNullType());
      assertEquals(false, parameterizedType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, parameterizedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, parameterizedType0.isResolved());
      assertEquals(false, parameterizedType0.isEmptyType());
      assertEquals(false, parameterizedType0.isUnionType());
      assertEquals(false, parameterizedType0.isFunctionType());
      assertEquals(false, parameterizedType0.isStringValueType());
      assertEquals(true, parameterizedType0.isObject());
      assertEquals(false, parameterizedType0.isNoObjectType());
      assertEquals(false, parameterizedType0.isTemplateType());
      assertEquals(false, parameterizedType0.isNamedType());
      assertEquals(false, parameterizedType0.hasCachedValues());
      assertEquals(false, parameterizedType0.isVoidType());
      assertEquals(false, parameterizedType0.isRecordType());
      assertEquals(false, unknownType1.isTemplateType());
      assertEquals(false, unknownType1.isNoType());
      assertEquals(false, unknownType1.isNativeObjectType());
      assertEquals(false, unknownType1.hasCachedValues());
      assertEquals(false, unknownType1.isNumberValueType());
      assertEquals(false, unknownType1.isUnionType());
      assertEquals(false, unknownType1.isStringValueType());
      assertEquals(true, unknownType1.canBeCalled());
      assertEquals(true, unknownType1.isObject());
      assertEquals(true, unknownType1.matchesStringContext());
      assertEquals(false, unknownType1.hasReferenceName());
      assertEquals(2147483647, unknownType1.getPropertiesCount());
      assertEquals(BooleanLiteralSet.BOTH, unknownType1.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType1.isBooleanValueType());
      assertEquals(true, unknownType1.isUnknownType());
      assertEquals(false, unknownType1.isFunctionType());
      assertEquals(true, unknownType1.matchesNumberContext());
      assertEquals(true, unknownType1.matchesObjectContext());
      assertEquals(false, unknownType1.isNamedType());
      assertEquals(true, unknownType1.isNullable());
      assertEquals(false, unknownType1.isCheckedUnknownType());
      assertEquals(false, unknownType1.isAllType());
      assertEquals("?", unknownType1.toString());
      assertEquals(false, unknownType1.isNoObjectType());
      assertEquals(false, unknownType1.isVoidType());
      assertEquals(false, unknownType1.isEmptyType());
      assertEquals(false, unknownType1.isNullType());
      assertEquals(false, unknownType1.isResolved());
      assertEquals("?", unknownType1.getReferenceName());
      assertEquals(false, unknownType1.isRecordType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("?", unknownType0.toString());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals("?", unknownType0.getReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals("[]", treeSet0.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isBooleanValueType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals(false, unknownType0.isAllType());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(true, unknownType0.isObject());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionType());
      
      boolean boolean2 = linkedHashSet0.add((JSType) booleanType0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??, boolean]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??, boolean]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
      
      TernaryValue ternaryValue0 = unionType0.testForEquality((JSType) unionType0);
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("unknown", ternaryValue0.toString());
      assertEquals("UNKNOWN", ternaryValue0.name());
      assertEquals(2, ternaryValue0.ordinal());
      assertEquals(TernaryValue.UNKNOWN, ternaryValue0.not());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[??, boolean]", linkedHashSet0.toString());
      assertEquals(2, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      boolean boolean0 = true;
      UnknownType unknownType0 = new UnknownType(jSTypeRegistry0, boolean0);
      assertNotNull(unknownType0);
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isObject());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unknownType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1);
      assertEquals(false, unknownType0.isAllType());
      assertEquals(false, unknownType0.isEmptyType());
      assertEquals(true, unknownType0.canBeCalled());
      assertEquals(false, unknownType0.isResolved());
      assertEquals(false, unknownType0.isFunctionType());
      assertEquals(BooleanLiteralSet.BOTH, unknownType0.getPossibleToBooleanOutcomes());
      assertEquals(true, unknownType0.matchesObjectContext());
      assertEquals(true, unknownType0.isUnknownType());
      assertEquals(false, unknownType0.isStringValueType());
      assertEquals(false, unknownType0.isBooleanValueType());
      assertEquals(2147483647, unknownType0.getPropertiesCount());
      assertEquals(false, unknownType0.hasCachedValues());
      assertEquals(false, unknownType0.isUnionType());
      assertEquals(true, unknownType0.isNullable());
      assertEquals(false, unknownType0.isRecordType());
      assertEquals("??", unknownType0.toString());
      assertEquals(true, unknownType0.matchesNumberContext());
      assertEquals(false, unknownType0.hasReferenceName());
      assertEquals("??", unknownType0.getReferenceName());
      assertEquals(true, unknownType0.matchesStringContext());
      assertEquals(false, unknownType0.isTemplateType());
      assertEquals(false, unknownType0.isNamedType());
      assertEquals(false, unknownType0.isNoObjectType());
      assertEquals(false, unknownType0.isNullType());
      assertEquals(false, unknownType0.isNumberValueType());
      assertEquals(true, unknownType0.isCheckedUnknownType());
      assertEquals(false, unknownType0.isNativeObjectType());
      assertEquals(false, unknownType0.isNoType());
      assertEquals(false, unknownType0.isVoidType());
      assertEquals(true, unknownType0.isObject());
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
      
      boolean boolean2 = unionType0.isNullable();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals("[??]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNumberValueType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertTrue(boolean0);
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(true, booleanType0.isBooleanValueType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
      
      boolean boolean1 = unionType0.isNullable();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[boolean]", linkedHashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test32() {}
//   @Test(timeout = 4000)
//   public void test32()  throws Throwable  {
//       SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
//       assertNotNull(simpleErrorReporter0);
//       
//       JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
//       assertNotNull(jSTypeRegistry0);
//       
//       NumberType numberType0 = new NumberType(jSTypeRegistry0);
//       assertNotNull(numberType0);
//       assertEquals(true, numberType0.isNumberValueType());
//       assertEquals(false, numberType0.isTemplateType());
//       assertEquals(false, numberType0.isObject());
//       assertEquals(false, numberType0.isUnionType());
//       assertEquals(false, numberType0.isBooleanValueType());
//       assertEquals(false, numberType0.isRecordType());
//       assertEquals("number", numberType0.toString());
//       assertEquals(false, numberType0.isEmptyType());
//       assertEquals(false, numberType0.isResolved());
//       assertEquals(false, numberType0.isNoObjectType());
//       assertEquals(true, numberType0.matchesNumberContext());
//       assertEquals(false, numberType0.isNamedType());
//       assertEquals(false, numberType0.isVoidType());
//       assertEquals(false, numberType0.isFunctionType());
//       assertEquals(false, numberType0.isStringValueType());
//       assertEquals(true, numberType0.matchesObjectContext());
//       assertEquals(true, numberType0.matchesStringContext());
//       assertEquals(false, numberType0.isNullable());
//       assertEquals(false, numberType0.isAllType());
//       assertEquals(false, numberType0.isNoType());
//       assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, numberType0.isNullType());
//       
//       HashSet<JSType> hashSet0 = new HashSet<JSType>();
//       assertNotNull(hashSet0);
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       
//       UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
//       assertNotNull(unionType0);
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       
//       NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
//       assertNotNull(noObjectType0);
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(true, hashSet0.isEmpty());
//       assertEquals("[]", hashSet0.toString());
//       assertEquals(0, hashSet0.size());
//       assertEquals(false, noObjectType0.isRecordType());
//       assertEquals(false, noObjectType0.isBooleanValueType());
//       assertEquals(true, noObjectType0.isEmptyType());
//       assertEquals(false, noObjectType0.isNullType());
//       assertEquals(2147483647, noObjectType0.getMaxArguments());
//       assertEquals(false, noObjectType0.isNoType());
//       assertEquals(true, noObjectType0.matchesNumberContext());
//       assertEquals(false, noObjectType0.isAllType());
//       assertEquals(false, noObjectType0.isTemplateType());
//       assertNull(noObjectType0.getReferenceName());
//       assertEquals(false, noObjectType0.isInterface());
//       assertEquals(false, noObjectType0.isFunctionType());
//       assertEquals(false, noObjectType0.hasCachedValues());
//       assertEquals(true, noObjectType0.matchesObjectContext());
//       assertEquals(true, noObjectType0.canBeCalled());
//       assertEquals(false, noObjectType0.isResolved());
//       assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
//       assertNull(noObjectType0.getTemplateTypeName());
//       assertEquals(false, noObjectType0.isUnionType());
//       assertEquals(false, noObjectType0.isStringValueType());
//       assertEquals("NoObject", noObjectType0.toString());
//       assertEquals(false, noObjectType0.isOrdinaryFunction());
//       assertEquals(false, noObjectType0.isNumberValueType());
//       assertEquals(true, noObjectType0.matchesStringContext());
//       assertEquals(true, noObjectType0.isObject());
//       assertEquals(true, noObjectType0.isNoObjectType());
//       assertEquals(false, noObjectType0.isNamedType());
//       assertEquals(true, noObjectType0.isConstructor());
//       assertEquals(2147483647, noObjectType0.getPropertiesCount());
//       assertEquals(false, noObjectType0.isVoidType());
//       assertEquals(true, noObjectType0.hasInstanceType());
//       
//       boolean boolean0 = hashSet0.add((JSType) numberType0);
//       assertTrue(boolean0);
//       assertEquals(1, hashSet0.size());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals("[number]", hashSet0.toString());
//       assertEquals(true, numberType0.isNumberValueType());
//       assertEquals(false, numberType0.isTemplateType());
//       assertEquals(false, numberType0.isObject());
//       assertEquals(false, numberType0.isUnionType());
//       assertEquals(false, numberType0.isBooleanValueType());
//       assertEquals(false, numberType0.isRecordType());
//       assertEquals("number", numberType0.toString());
//       assertEquals(false, numberType0.isEmptyType());
//       assertEquals(false, numberType0.isResolved());
//       assertEquals(false, numberType0.isNoObjectType());
//       assertEquals(true, numberType0.matchesNumberContext());
//       assertEquals(false, numberType0.isNamedType());
//       assertEquals(false, numberType0.isVoidType());
//       assertEquals(false, numberType0.isFunctionType());
//       assertEquals(false, numberType0.isStringValueType());
//       assertEquals(true, numberType0.matchesObjectContext());
//       assertEquals(true, numberType0.matchesStringContext());
//       assertEquals(false, numberType0.isNullable());
//       assertEquals(false, numberType0.isAllType());
//       assertEquals(false, numberType0.isNoType());
//       assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
//       assertEquals(false, numberType0.isNullType());
//       
//       boolean boolean1 = hashSet0.add((JSType) noObjectType0);
//       assertTrue(boolean1 == boolean0);
//       assertTrue(boolean1);
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[number, NoObject]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(false, noObjectType0.isRecordType());
//       assertEquals(false, noObjectType0.isBooleanValueType());
//       assertEquals(true, noObjectType0.isEmptyType());
//       assertEquals(false, noObjectType0.isNullType());
//       assertEquals(2147483647, noObjectType0.getMaxArguments());
//       assertEquals(false, noObjectType0.isNoType());
//       assertEquals(true, noObjectType0.matchesNumberContext());
//       assertEquals(false, noObjectType0.isAllType());
//       assertEquals(false, noObjectType0.isTemplateType());
//       assertNull(noObjectType0.getReferenceName());
//       assertEquals(false, noObjectType0.isInterface());
//       assertEquals(false, noObjectType0.isFunctionType());
//       assertEquals(false, noObjectType0.hasCachedValues());
//       assertEquals(true, noObjectType0.matchesObjectContext());
//       assertEquals(true, noObjectType0.canBeCalled());
//       assertEquals(false, noObjectType0.isResolved());
//       assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
//       assertNull(noObjectType0.getTemplateTypeName());
//       assertEquals(false, noObjectType0.isUnionType());
//       assertEquals(false, noObjectType0.isStringValueType());
//       assertEquals("NoObject", noObjectType0.toString());
//       assertEquals(false, noObjectType0.isOrdinaryFunction());
//       assertEquals(false, noObjectType0.isNumberValueType());
//       assertEquals(true, noObjectType0.matchesStringContext());
//       assertEquals(true, noObjectType0.isObject());
//       assertEquals(true, noObjectType0.isNoObjectType());
//       assertEquals(false, noObjectType0.isNamedType());
//       assertEquals(true, noObjectType0.isConstructor());
//       assertEquals(2147483647, noObjectType0.getPropertiesCount());
//       assertEquals(false, noObjectType0.isVoidType());
//       assertEquals(true, noObjectType0.hasInstanceType());
//       
//       boolean boolean2 = unionType0.canTestForEqualityWith((JSType) noObjectType0);
//       assertTrue(boolean2 == boolean0);
//       assertTrue(boolean2 == boolean1);
//       assertTrue(boolean2);
//       assertEquals(false, unionType0.isAllType());
//       assertEquals(false, unionType0.isNoObjectType());
//       assertEquals(false, unionType0.isTemplateType());
//       assertEquals(false, unionType0.isEmptyType());
//       assertEquals(true, unionType0.isUnionType());
//       assertEquals(false, unionType0.isStringValueType());
//       assertEquals(false, unionType0.isFunctionType());
//       assertEquals(false, unionType0.isRecordType());
//       assertEquals(false, unionType0.isNumberValueType());
//       assertEquals(false, unionType0.isNoType());
//       assertEquals(false, unionType0.isNullType());
//       assertEquals(false, unionType0.isVoidType());
//       assertEquals(false, unionType0.isBooleanValueType());
//       assertEquals(false, unionType0.isNamedType());
//       assertEquals(false, unionType0.isResolved());
//       assertEquals(2, hashSet0.size());
//       assertEquals("[number, NoObject]", hashSet0.toString());
//       assertEquals(false, hashSet0.isEmpty());
//       assertEquals(false, noObjectType0.isRecordType());
//       assertEquals(false, noObjectType0.isBooleanValueType());
//       assertEquals(true, noObjectType0.isEmptyType());
//       assertEquals(false, noObjectType0.isNullType());
//       assertEquals(2147483647, noObjectType0.getMaxArguments());
//       assertEquals(false, noObjectType0.isNoType());
//       assertEquals(true, noObjectType0.matchesNumberContext());
//       assertEquals(false, noObjectType0.isAllType());
//       assertEquals(false, noObjectType0.isTemplateType());
//       assertEquals(true, noObjectType0.hasCachedValues());
//       assertNull(noObjectType0.getReferenceName());
//       assertEquals(false, noObjectType0.isInterface());
//       assertEquals(false, noObjectType0.isFunctionType());
//       assertEquals(true, noObjectType0.matchesObjectContext());
//       assertEquals(true, noObjectType0.canBeCalled());
//       assertEquals(false, noObjectType0.isResolved());
//       assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
//       assertNull(noObjectType0.getTemplateTypeName());
//       assertEquals(false, noObjectType0.isUnionType());
//       assertEquals(false, noObjectType0.isStringValueType());
//       assertEquals("NoObject", noObjectType0.toString());
//       assertEquals(false, noObjectType0.isOrdinaryFunction());
//       assertEquals(false, noObjectType0.isNumberValueType());
//       assertEquals(true, noObjectType0.matchesStringContext());
//       assertEquals(true, noObjectType0.isObject());
//       assertEquals(true, noObjectType0.isNoObjectType());
//       assertEquals(false, noObjectType0.isNamedType());
//       assertEquals(true, noObjectType0.isConstructor());
//       assertEquals(2147483647, noObjectType0.getPropertiesCount());
//       assertEquals(false, noObjectType0.isVoidType());
//       assertEquals(true, noObjectType0.hasInstanceType());
//   }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNamedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) functionType0);
      assertTrue(boolean0);
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNamedType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      
      FunctionType functionType1 = (FunctionType)unionType0.restrictByNotNullOrUndefined();
      assertSame(functionType1, functionType0);
      assertNotNull(functionType1);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, functionType1.hasInstanceType());
      assertEquals(false, functionType1.isNamedType());
      assertEquals(false, functionType1.isOrdinaryFunction());
      assertEquals(false, functionType1.isNoType());
      assertEquals(false, functionType1.isAllType());
      assertEquals(false, functionType1.isEmptyType());
      assertEquals(true, functionType1.isFunctionType());
      assertEquals(true, functionType1.isObject());
      assertEquals(false, functionType1.isNoObjectType());
      assertEquals(false, functionType1.isUnionType());
      assertEquals(false, functionType1.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, functionType1.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType1.isRecordType());
      assertEquals(false, functionType1.isNumberValueType());
      assertEquals(false, functionType1.isResolved());
      assertEquals(2147483647, functionType1.getMaxArguments());
      assertEquals(true, functionType1.canBeCalled());
      assertEquals(true, functionType1.hasCachedValues());
      assertEquals(true, functionType1.isConstructor());
      assertEquals(false, functionType1.isVoidType());
      assertEquals(false, functionType1.isInterface());
      assertEquals(false, functionType1.isNullType());
      assertEquals(false, functionType1.isStringValueType());
      assertEquals(false, functionType1.isBooleanValueType());
      assertNull(functionType1.getTemplateTypeName());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      
      PrototypeObjectType prototypeObjectType0 = (PrototypeObjectType)jSTypeRegistry1.createAnonymousObjectType();
      assertNotNull(prototypeObjectType0);
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      
      ProxyObjectType proxyObjectType0 = new ProxyObjectType(jSTypeRegistry1, prototypeObjectType0);
      assertNotNull(proxyObjectType0);
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      
      boolean boolean0 = linkedHashSet0.add((JSType) proxyObjectType0);
      assertTrue(boolean0);
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, proxyObjectType0.isUnionType());
      assertEquals(false, proxyObjectType0.isResolved());
      assertEquals(false, proxyObjectType0.isVoidType());
      assertEquals(false, proxyObjectType0.isBooleanValueType());
      assertEquals(false, proxyObjectType0.isNullType());
      assertEquals(false, proxyObjectType0.isTemplateType());
      assertEquals(false, proxyObjectType0.isAllType());
      assertEquals(false, proxyObjectType0.isNumberValueType());
      assertEquals(false, proxyObjectType0.isNoType());
      assertEquals(false, proxyObjectType0.isNoObjectType());
      assertEquals(false, proxyObjectType0.isStringValueType());
      assertEquals(false, proxyObjectType0.isNamedType());
      assertEquals(false, proxyObjectType0.isNativeObjectType());
      assertEquals(false, proxyObjectType0.isFunctionType());
      assertEquals(false, proxyObjectType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, proxyObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, proxyObjectType0.isEmptyType());
      assertEquals(true, proxyObjectType0.isObject());
      assertEquals(false, proxyObjectType0.hasCachedValues());
      assertEquals(false, prototypeObjectType0.isNoType());
      assertEquals(false, prototypeObjectType0.isNoObjectType());
      assertEquals(false, prototypeObjectType0.isNumberValueType());
      assertEquals(true, prototypeObjectType0.isObject());
      assertEquals(false, prototypeObjectType0.isVoidType());
      assertEquals(false, prototypeObjectType0.isTemplateType());
      assertEquals(false, prototypeObjectType0.isEmptyType());
      assertEquals(false, prototypeObjectType0.isStringValueType());
      assertEquals(false, prototypeObjectType0.isAllType());
      assertEquals(false, prototypeObjectType0.isBooleanValueType());
      assertEquals(false, prototypeObjectType0.isRecordType());
      assertEquals(false, prototypeObjectType0.isNullType());
      assertEquals(false, prototypeObjectType0.isResolved());
      assertEquals(false, prototypeObjectType0.isUnionType());
      assertEquals(false, prototypeObjectType0.isFunctionType());
      assertEquals(false, prototypeObjectType0.isNamedType());
      assertEquals(BooleanLiteralSet.TRUE, prototypeObjectType0.getPossibleToBooleanOutcomes());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
      
      boolean boolean1 = unionType0.canBeCalled();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("[{...}]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNullType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      
      boolean boolean0 = linkedHashSet0.add((JSType) functionType0);
      assertTrue(boolean0);
      assertEquals(false, functionType0.isAllType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, functionType0.isNullType());
      assertEquals(true, functionType0.isFunctionType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      
      boolean boolean1 = unionType0.canBeCalled();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      EmptyScope emptyScope0 = new EmptyScope();
      assertNotNull(emptyScope0);
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      int int0 = (-9);
      NoType noType0 = new NoType(jSTypeRegistry0);
      assertNotNull(noType0);
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, noType0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      NamedType namedType0 = (NamedType)jSTypeRegistry0.getType((StaticScope<JSType>) emptyScope0, string0, string0, int0, int0);
      assertNotNull(namedType0);
      assertEquals(false, namedType0.isAllType());
      assertEquals("", namedType0.toString());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals("", namedType0.getReferenceName());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) namedType0);
      assertTrue(boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, namedType0.isAllType());
      assertEquals("", namedType0.toString());
      assertEquals(false, namedType0.isResolved());
      assertEquals(true, namedType0.isNominalType());
      assertEquals(false, namedType0.isNullType());
      assertEquals(false, namedType0.isNoType());
      assertEquals(BooleanLiteralSet.TRUE, namedType0.getPossibleToBooleanOutcomes());
      assertEquals(false, namedType0.isTemplateType());
      assertEquals(true, namedType0.hasReferenceName());
      assertEquals(false, namedType0.isBooleanValueType());
      assertEquals(true, namedType0.isObject());
      assertEquals(false, namedType0.isFunctionType());
      assertEquals(false, namedType0.isUnionType());
      assertEquals(false, namedType0.isEmptyType());
      assertEquals(true, namedType0.isNamedType());
      assertEquals(false, namedType0.isNativeObjectType());
      assertEquals(false, namedType0.isNoObjectType());
      assertEquals(false, namedType0.isVoidType());
      assertEquals(false, namedType0.isRecordType());
      assertEquals(false, namedType0.isStringValueType());
      assertEquals("", namedType0.getReferenceName());
      assertEquals(false, namedType0.hasCachedValues());
      assertEquals(false, namedType0.isNumberValueType());
      
      boolean boolean1 = unionType0.canAssignTo((JSType) instanceObjectType0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isFunctionType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(false, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isConstructor());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isNullType());
      assertEquals(true, noType0.matchesObjectContext());
      assertNull(noType0.getReferenceName());
      assertEquals(false, noType0.isVoidType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(false, noType0.isBooleanValueType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isNullable());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isRecordType());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals("None", noType0.toString());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noType0.isAllType());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "";
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>();
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("[]", treeSet0.toString());
      
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = unionType0.matchesUint32Context();
      assertFalse(boolean0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals("[]", treeSet0.toString());
      
      ErrorFunctionType errorFunctionType0 = new ErrorFunctionType(jSTypeRegistry0, string0);
      assertNotNull(errorFunctionType0);
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      
      InstanceObjectType instanceObjectType0 = new InstanceObjectType(jSTypeRegistry0, errorFunctionType0, boolean0);
      assertNotNull(instanceObjectType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isFunctionType());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertTrue(unionType1.equals((Object)unionType0));
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoObjectType());
      
      boolean boolean1 = linkedHashSet0.add((JSType) unionType0);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(unionType0, unionType1);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals("[]", treeSet0.toString());
      
      boolean boolean2 = unionType1.canAssignTo((JSType) instanceObjectType0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(unionType0.equals((Object)unionType1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(unionType1.equals((Object)unionType0));
      assertTrue(boolean2);
      assertNotSame(unionType0, unionType1);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[()]", linkedHashSet0.toString());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isNoType());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(true, errorFunctionType0.isConstructor());
      assertEquals(false, errorFunctionType0.isRecordType());
      assertEquals(false, errorFunctionType0.isNoType());
      assertEquals(false, errorFunctionType0.isUnionType());
      assertEquals(false, errorFunctionType0.isTemplateType());
      assertEquals(BooleanLiteralSet.TRUE, errorFunctionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, errorFunctionType0.isNoObjectType());
      assertEquals(false, errorFunctionType0.isNumberValueType());
      assertEquals(true, errorFunctionType0.isFunctionType());
      assertEquals(true, errorFunctionType0.canBeCalled());
      assertEquals(true, errorFunctionType0.isObject());
      assertEquals(false, errorFunctionType0.isBooleanValueType());
      assertEquals(3, errorFunctionType0.getMaxArguments());
      assertEquals(false, errorFunctionType0.isNamedType());
      assertEquals(false, errorFunctionType0.hasCachedValues());
      assertEquals(false, errorFunctionType0.isStringValueType());
      assertEquals(false, errorFunctionType0.isOrdinaryFunction());
      assertNull(errorFunctionType0.getTemplateTypeName());
      assertEquals(false, errorFunctionType0.isInterface());
      assertEquals(true, errorFunctionType0.hasInstanceType());
      assertEquals(false, errorFunctionType0.isAllType());
      assertEquals(false, errorFunctionType0.isNullType());
      assertEquals(false, errorFunctionType0.isResolved());
      assertEquals(false, errorFunctionType0.isVoidType());
      assertEquals(false, errorFunctionType0.isEmptyType());
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, instanceObjectType0.isEmptyType());
      assertEquals(true, instanceObjectType0.isNominalType());
      assertEquals(false, instanceObjectType0.isAllType());
      assertEquals(false, instanceObjectType0.isTemplateType());
      assertEquals(false, instanceObjectType0.isNoType());
      assertEquals(false, instanceObjectType0.isNullType());
      assertEquals(false, instanceObjectType0.isResolved());
      assertEquals(false, instanceObjectType0.isVoidType());
      assertEquals(false, instanceObjectType0.isStringValueType());
      assertEquals(true, instanceObjectType0.hasReferenceName());
      assertEquals(false, instanceObjectType0.isNoObjectType());
      assertEquals(false, instanceObjectType0.isRecordType());
      assertEquals(false, instanceObjectType0.isBooleanValueType());
      assertEquals(BooleanLiteralSet.TRUE, instanceObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(true, instanceObjectType0.isInstanceType());
      assertEquals(false, instanceObjectType0.isUnionType());
      assertEquals(false, instanceObjectType0.isNamedType());
      assertEquals(false, instanceObjectType0.isNumberValueType());
      assertEquals(true, instanceObjectType0.isObject());
      assertEquals(false, instanceObjectType0.isFunctionType());
  }

  //@Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      String string0 = "piu 83!YoLmIm1XUn7";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      NoObjectType noObjectType0 = (NoObjectType)unionType0.meet(unionType0);
      assertNotNull(noObjectType0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isObject());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = hashSet0.add((JSType) noObjectType0);
      assertTrue(boolean0);
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(false, noObjectType0.isVoidType());
      assertNull(noObjectType0.getReferenceName());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(true, noObjectType0.isObject());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[NoObject]", hashSet0.toString());
      
      NoType noType0 = (NoType)unionType0.findPropertyType(string0);
      assertNotNull(noType0);
      assertEquals(false, noType0.isResolved());
      assertEquals(true, noType0.isConstructor());
      assertEquals(true, noType0.isNoType());
      assertEquals(false, noType0.isUnionType());
      assertEquals(false, noType0.hasCachedValues());
      assertEquals(false, noType0.isInterface());
      assertEquals(false, noType0.isNumberValueType());
      assertEquals(true, noType0.isEmptyType());
      assertEquals(false, noType0.isOrdinaryFunction());
      assertEquals(true, noType0.matchesObjectContext());
      assertEquals(false, noType0.isTemplateType());
      assertEquals(true, noType0.isNullable());
      assertNull(noType0.getTemplateTypeName());
      assertEquals(true, noType0.hasInstanceType());
      assertEquals(false, noType0.isVoidType());
      assertEquals(2147483647, noType0.getPropertiesCount());
      assertEquals(false, noType0.isAllType());
      assertEquals(true, noType0.canBeCalled());
      assertEquals(false, noType0.isRecordType());
      assertEquals(true, noType0.matchesStringContext());
      assertEquals(false, noType0.isNoObjectType());
      assertEquals(false, noType0.isFunctionType());
      assertEquals(true, noType0.isObject());
      assertEquals(true, noType0.matchesNumberContext());
      assertEquals(false, noType0.isNamedType());
      assertEquals(false, noType0.isStringValueType());
      assertEquals(BooleanLiteralSet.EMPTY, noType0.getPossibleToBooleanOutcomes());
      assertEquals("None", noType0.toString());
      assertEquals(2147483647, noType0.getMaxArguments());
      assertEquals(false, noType0.isNullType());
      assertEquals(false, noType0.isBooleanValueType());
      assertNull(noType0.getReferenceName());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[NoObject]", hashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isObject());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      
      String string0 = "piu 83!YoLmIm1XUn7";
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("[]", hashSet0.toString());
      
      boolean boolean0 = hashSet0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isObject());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[number]", hashSet0.toString());
      
      JSType jSType0 = unionType0.findPropertyType(string0);
      assertNull(jSType0);
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("[number]", hashSet0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      
      LinkedHashSet<JSType> linkedHashSet1 = new LinkedHashSet<JSType>();
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotNull(linkedHashSet1);
      assertEquals(0, linkedHashSet1.size());
      assertEquals("[]", linkedHashSet1.toString());
      assertEquals(true, linkedHashSet1.isEmpty());
      
      boolean boolean0 = linkedHashSet1.add((JSType) unionType0);
      assertFalse(linkedHashSet0.equals((Object)linkedHashSet1));
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(boolean0);
      assertNotSame(linkedHashSet0, linkedHashSet1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, linkedHashSet1.isEmpty());
      assertEquals("[()]", linkedHashSet1.toString());
      assertEquals(1, linkedHashSet1.size());
      
      UnionType unionType1 = new UnionType(jSTypeRegistry0, linkedHashSet1);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(unionType1.equals((Object)unionType0));
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotSame(unionType1, unionType0);
      assertNotNull(unionType1);
      assertEquals(false, linkedHashSet1.isEmpty());
      assertEquals("[()]", linkedHashSet1.toString());
      assertEquals(1, linkedHashSet1.size());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
      
      boolean boolean1 = unionType1.matchesObjectContext();
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertFalse(boolean1 == boolean0);
      assertFalse(unionType1.equals((Object)unionType0));
      assertFalse(boolean1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertNotSame(unionType1, unionType0);
      assertEquals(false, linkedHashSet1.isEmpty());
      assertEquals("[()]", linkedHashSet1.toString());
      assertEquals(1, linkedHashSet1.size());
      assertEquals(false, unionType1.isRecordType());
      assertEquals(false, unionType1.isNullType());
      assertEquals(false, unionType1.isFunctionType());
      assertEquals(false, unionType1.isEmptyType());
      assertEquals(false, unionType1.isResolved());
      assertEquals(false, unionType1.isNoObjectType());
      assertEquals(false, unionType1.isAllType());
      assertEquals(false, unionType1.isNamedType());
      assertEquals(false, unionType1.isTemplateType());
      assertEquals(false, unionType1.isBooleanValueType());
      assertEquals(false, unionType1.isStringValueType());
      assertEquals(false, unionType1.isNumberValueType());
      assertEquals(false, unionType1.isVoidType());
      assertEquals(true, unionType1.isUnionType());
      assertEquals(false, unionType1.isNoType());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      BooleanType booleanType0 = new BooleanType(jSTypeRegistry0);
      assertNotNull(booleanType0);
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) booleanType0);
      assertTrue(boolean0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, booleanType0.isNoType());
      assertEquals(false, booleanType0.isNullType());
      assertEquals(false, booleanType0.isNamedType());
      assertEquals(false, booleanType0.isVoidType());
      assertEquals(false, booleanType0.isUnionType());
      assertEquals(false, booleanType0.isObject());
      assertEquals(false, booleanType0.isAllType());
      assertEquals(false, booleanType0.isNumberValueType());
      assertEquals(false, booleanType0.isNoObjectType());
      assertEquals(false, booleanType0.isResolved());
      assertEquals(BooleanLiteralSet.BOTH, booleanType0.getPossibleToBooleanOutcomes());
      assertEquals(true, booleanType0.matchesStringContext());
      assertEquals(true, booleanType0.matchesNumberContext());
      assertEquals(true, booleanType0.matchesObjectContext());
      assertEquals(false, booleanType0.isStringValueType());
      assertEquals("boolean", booleanType0.toString());
      assertEquals(false, booleanType0.isNullable());
      assertEquals(false, booleanType0.isEmptyType());
      assertEquals(false, booleanType0.isTemplateType());
      assertEquals(false, booleanType0.isFunctionType());
      assertEquals(false, booleanType0.isRecordType());
      assertEquals(true, booleanType0.isBooleanValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
      
      boolean boolean1 = unionType0.matchesObjectContext();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[boolean]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isTemplateType());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isObject());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) functionType0);
      assertTrue(boolean0);
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isStringValueType());
      assertEquals(true, functionType0.isObject());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(true, functionType0.canBeCalled());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isAllType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isBooleanValueType());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isBooleanValueType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullable());
      
      boolean boolean0 = linkedHashSet0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isResolved());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(false, numberType0.isVoidType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isAllType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullable());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      
      boolean boolean1 = unionType0.matchesStringContext();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[number]", linkedHashSet0.toString());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      NumberType numberType0 = new NumberType(jSTypeRegistry0);
      assertNotNull(numberType0);
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isStringValueType());
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(0, hashSet0.size());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      
      boolean boolean0 = hashSet0.add((JSType) numberType0);
      assertTrue(boolean0);
      assertEquals(false, numberType0.isVoidType());
      assertEquals(false, numberType0.isRecordType());
      assertEquals(true, numberType0.matchesStringContext());
      assertEquals(false, numberType0.isFunctionType());
      assertEquals(false, numberType0.isEmptyType());
      assertEquals(false, numberType0.isNullType());
      assertEquals(false, numberType0.isBooleanValueType());
      assertEquals(false, numberType0.isObject());
      assertEquals(false, numberType0.isTemplateType());
      assertEquals(false, numberType0.isNoType());
      assertEquals(false, numberType0.isNullable());
      assertEquals(false, numberType0.isAllType());
      assertEquals(true, numberType0.matchesObjectContext());
      assertEquals(false, numberType0.isResolved());
      assertEquals(true, numberType0.isNumberValueType());
      assertEquals(false, numberType0.isNoObjectType());
      assertEquals(BooleanLiteralSet.BOTH, numberType0.getPossibleToBooleanOutcomes());
      assertEquals(true, numberType0.matchesNumberContext());
      assertEquals("number", numberType0.toString());
      assertEquals(false, numberType0.isUnionType());
      assertEquals(false, numberType0.isNamedType());
      assertEquals(false, numberType0.isStringValueType());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
      
      boolean boolean1 = unionType0.matchesNumberContext();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals("[number]", hashSet0.toString());
      assertEquals(1, hashSet0.size());
      assertEquals(false, hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      LinkedHashSet<JSType> linkedHashSet0 = new LinkedHashSet<JSType>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry1 = new JSTypeRegistry((ErrorReporter) simpleErrorReporter0);
      assertNotNull(jSTypeRegistry1);
      
      JSTypeNative jSTypeNative0 = JSTypeNative.FUNCTION_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry1.getNativeFunctionType(jSTypeNative0);
      assertNotNull(functionType0);
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isBooleanValueType());
      
      boolean boolean0 = linkedHashSet0.add((JSType) functionType0);
      assertTrue(boolean0);
      assertEquals(false, functionType0.isInterface());
      assertEquals(false, functionType0.isStringValueType());
      assertNull(functionType0.getTemplateTypeName());
      assertEquals(true, functionType0.hasCachedValues());
      assertEquals(false, functionType0.isTemplateType());
      assertEquals(true, functionType0.canBeCalled());
      assertEquals(false, functionType0.isNullType());
      assertEquals(false, functionType0.isEmptyType());
      assertEquals(false, functionType0.isOrdinaryFunction());
      assertEquals(false, functionType0.isNumberValueType());
      assertEquals(false, functionType0.isNoObjectType());
      assertEquals(true, functionType0.isFunctionType());
      assertEquals(false, functionType0.isNoType());
      assertEquals(2147483647, functionType0.getMaxArguments());
      assertEquals(true, functionType0.hasInstanceType());
      assertEquals(true, functionType0.isObject());
      assertEquals(false, functionType0.isAllType());
      assertEquals(true, functionType0.isConstructor());
      assertEquals(false, functionType0.isUnionType());
      assertEquals(false, functionType0.isResolved());
      assertEquals(false, functionType0.isVoidType());
      assertEquals(false, functionType0.isRecordType());
      assertEquals(BooleanLiteralSet.TRUE, functionType0.getPossibleToBooleanOutcomes());
      assertEquals(false, functionType0.isNamedType());
      assertEquals(false, functionType0.isBooleanValueType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, linkedHashSet0);
      assertNotNull(unionType0);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = unionType0.matchesNumberContext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, linkedHashSet0.isEmpty());
      assertEquals("[function (this:Function, ...[*]): ?]", linkedHashSet0.toString());
      assertEquals(1, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      
      boolean boolean0 = hashSet0.add((JSType) unionType0);
      assertTrue(boolean0);
      assertEquals(false, hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isNullType());
      
      // Undeclared exception!
      try {
        unionType0.forgiveUnknownNames();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTypeRegistry jSTypeRegistry0 = null;
      PriorityQueue<ParameterizedType> priorityQueue0 = new PriorityQueue<ParameterizedType>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      TreeSet<JSType> treeSet0 = new TreeSet<JSType>((Collection<? extends JSType>) priorityQueue0);
      assertNotNull(treeSet0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, treeSet0);
      assertNotNull(unionType0);
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
      
      unionType0.forgiveUnknownNames();
      assertEquals("[]", treeSet0.toString());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNumberValueType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isNullType());
      assertEquals(0, priorityQueue0.size());
      assertEquals("[]", priorityQueue0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ErrorReporter errorReporter0 = null;
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(errorReporter0);
      assertNotNull(jSTypeRegistry0);
      
      HashSet<JSType> hashSet0 = new HashSet<JSType>();
      assertNotNull(hashSet0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      
      UnionType unionType0 = new UnionType(jSTypeRegistry0, hashSet0);
      assertNotNull(unionType0);
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
      
      NoObjectType noObjectType0 = new NoObjectType(jSTypeRegistry0);
      assertNotNull(noObjectType0);
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNoType());
      
      NoObjectType noObjectType1 = (NoObjectType)noObjectType0.getGreatestSubtype((JSType) unionType0);
      assertFalse(noObjectType0.equals((Object)noObjectType1));
      assertFalse(noObjectType1.equals((Object)noObjectType0));
      assertNotSame(noObjectType0, noObjectType1);
      assertNotSame(noObjectType1, noObjectType0);
      assertNotNull(noObjectType1);
      assertEquals(true, noObjectType0.isObject());
      assertEquals(true, noObjectType0.isEmptyType());
      assertEquals(false, noObjectType0.isTemplateType());
      assertEquals(2147483647, noObjectType0.getPropertiesCount());
      assertEquals(false, noObjectType0.isNumberValueType());
      assertEquals(false, noObjectType0.isFunctionType());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType0.getPossibleToBooleanOutcomes());
      assertEquals(false, noObjectType0.isUnionType());
      assertEquals(false, noObjectType0.isResolved());
      assertEquals(false, noObjectType0.isAllType());
      assertEquals(true, noObjectType0.canBeCalled());
      assertEquals(false, noObjectType0.isInterface());
      assertEquals(true, noObjectType0.matchesStringContext());
      assertEquals(true, noObjectType0.hasInstanceType());
      assertNull(noObjectType0.getReferenceName());
      assertNull(noObjectType0.getTemplateTypeName());
      assertEquals(false, noObjectType0.isRecordType());
      assertEquals(false, noObjectType0.isOrdinaryFunction());
      assertEquals(true, noObjectType0.isNoObjectType());
      assertEquals(true, noObjectType0.isConstructor());
      assertEquals("NoObject", noObjectType0.toString());
      assertEquals(false, noObjectType0.isNamedType());
      assertEquals(false, noObjectType0.isNullType());
      assertEquals(false, noObjectType0.isVoidType());
      assertEquals(true, noObjectType0.matchesObjectContext());
      assertEquals(true, noObjectType0.matchesNumberContext());
      assertEquals(false, noObjectType0.hasCachedValues());
      assertEquals(false, noObjectType0.isBooleanValueType());
      assertEquals(false, noObjectType0.isStringValueType());
      assertEquals(2147483647, noObjectType0.getMaxArguments());
      assertEquals(false, noObjectType0.isNoType());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals("[]", hashSet0.toString());
      assertEquals(0, hashSet0.size());
      assertEquals(false, noObjectType1.isBooleanValueType());
      assertEquals(false, noObjectType1.isStringValueType());
      assertEquals(false, noObjectType1.isFunctionType());
      assertEquals(false, noObjectType1.isRecordType());
      assertEquals("NoObject", noObjectType1.toString());
      assertEquals(false, noObjectType1.isInterface());
      assertEquals(false, noObjectType1.hasCachedValues());
      assertNull(noObjectType1.getTemplateTypeName());
      assertEquals(false, noObjectType1.isOrdinaryFunction());
      assertEquals(true, noObjectType1.isObject());
      assertEquals(BooleanLiteralSet.TRUE, noObjectType1.getPossibleToBooleanOutcomes());
      assertEquals(2147483647, noObjectType1.getMaxArguments());
      assertEquals(false, noObjectType1.isTemplateType());
      assertEquals(2147483647, noObjectType1.getPropertiesCount());
      assertNull(noObjectType1.getReferenceName());
      assertEquals(false, noObjectType1.isNoType());
      assertEquals(true, noObjectType1.matchesStringContext());
      assertEquals(true, noObjectType1.isEmptyType());
      assertEquals(true, noObjectType1.canBeCalled());
      assertEquals(false, noObjectType1.isNamedType());
      assertEquals(false, noObjectType1.isNullType());
      assertEquals(true, noObjectType1.hasInstanceType());
      assertEquals(false, noObjectType1.isResolved());
      assertEquals(false, noObjectType1.isAllType());
      assertEquals(true, noObjectType1.isNoObjectType());
      assertEquals(false, noObjectType1.isNumberValueType());
      assertEquals(false, noObjectType1.isUnionType());
      assertEquals(false, noObjectType1.isVoidType());
      assertEquals(true, noObjectType1.matchesNumberContext());
      assertEquals(true, noObjectType1.matchesObjectContext());
      assertEquals(true, noObjectType1.isConstructor());
      assertEquals(false, unionType0.isNullType());
      assertEquals(false, unionType0.isAllType());
      assertEquals(false, unionType0.isTemplateType());
      assertEquals(false, unionType0.isNoType());
      assertEquals(true, unionType0.isUnionType());
      assertEquals(false, unionType0.isVoidType());
      assertEquals(false, unionType0.isFunctionType());
      assertEquals(false, unionType0.isResolved());
      assertEquals(false, unionType0.isNamedType());
      assertEquals(false, unionType0.isStringValueType());
      assertEquals(false, unionType0.isBooleanValueType());
      assertEquals(false, unionType0.isEmptyType());
      assertEquals(false, unionType0.isRecordType());
      assertEquals(false, unionType0.isNoObjectType());
      assertEquals(false, unionType0.isNumberValueType());
  }
}
